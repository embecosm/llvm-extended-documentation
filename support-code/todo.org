* List of things to be done for GCC

** Documentation bugs

-fallow-single-precision appears in the summary for C options, but appears to
 be obsolete.

-traditional has to be used with -E

Why language specific warnings in summary sections for the language?

-pedantic not in summary

-Wplacement-new is the default, so need -Wno-placement-new as entry

GCC will silent accept any flag '-Wno...'

The following warnings do not appear in the summary:
-Wc++0x-compat
-Wimport
-Wmissing-noreturn
-Wstrict-overflow=0
-Wsynth
-Wunreachable-code
-Wunused-argument

-ftree-coalesce-inlined-vars undocumented in GCC
-ftree-copyrename undocumented

-fwpa only in option summary, not documented.

-nostdinc++ also appears in C++ standard options as well as preproc

-trigraphs also appears in C standard options as well as preproc

-iquote not in summary for preprocesso

-fsel-sched-verbose in summary only

-fsel-sched-dump-cfg in summary only

-fsel-sched-pipelining-verbose in summary only

The following are not mentioned in the summary for the pre-processor:
-fdirectives-only
-fdollars-in-identifiers
-fno-show-column
-fexec-charset=
-fextended-identifiers
-finput-charset=
-fpch-deps
-fpch-preprocess
-fpreprocessed
-ftabstop=
-fwide-exec-charset=UTF-8
-MD
-MMD

Preprocessor option -version (with one hyphen appears not to work).

The following are not mentioned in the summary for C++ language options:
-fextern-tls-init
-fno-lifetime-dse
-fno-use-cxa-get-exception-ptr
-fstrict-enums

The following is mentioned neither in the summary nor section on C++ language
options, but does appear elsewhere:
-fno-default-inline


The following are not mentioned in the summary for optimization:
-foptimize-strlen
-ftree-slp-vectorize
-ftree-vectorize

The following optimization parameters are documented, but appear not to work.
--param tracer-min-branch-ratio-feedback=
--param reorder-blocks-duplicate=
--param reorder-blocks-duplicate-feedback=
--param sched-spec-state-edge-prob-cutoff=
--param selsched-max-insns-to-rename=
--param lto-minpartition=
--param max-ssa-name-query-depth=

The following are not mentioned in the summary for debugging:
-fvar-tracking-assignments-toggle
-ggnu-pubnames
-gpubnames
-gsplit-dwarf

The following is not documented in the developer options
-print-multiarch
-freport-bug

The following developer options are documented, but appear not to work.
-fdump-rtl-bypass
-fdump-rtl-dce
-fdump-rtl-dce1
-fdump-rtl-dce2
-fdump-rtl-eh
-fdump-rtl-gcse1
-fdump-rtl-initvals
-fdump-rtl-regclass
-fdump-rtl-seqabstr
-fdump-rtl-sibling
-fdump-rtl-subregs_of_mode_finish
-fdump-rtl-subregs_of_mode_init
-fdump-rtl-unshare
-fdump-tree-storeccp

-fcheck-data-deps is not documented. From the patch documentation, this
 compares the results of several data dependence analyzers, and probably
 belongs in the instrumentation section.

The following Objective-C options are accepted, but not documented:
-objcmt-atomic-property
-objcmt-migrate-all
-objcmt-migrate-annotation
-objcmt-migrate-designated-init
-objcmt-migrate-instancetype
-objcmt-migrate-literals
-objcmt-migrate-ns-macros
-objcmt-migrate-property-dot-syntax
-objcmt-migrate-property
-objcmt-migrate-protocol-conformance
-objcmt-migrate-readonly-property
-objcmt-migrate-readwrite-property
-objcmt-migrate-subscripting
-objcmt-ns-nonatomic-iosonly
-objcmt-returns-innerpointer-property

GCC accepts the following negatives, but not the equivalent negatives.
-fno-sanitize-recover=leak
-fno-sanitize-recover=thread


** Plain bugs

--target-help barfs if gold is the linker.

* List of things to be done for LLVM

The following should be marked as MIPS only:
- -mfpxx
- -mno-odd-spreg/-modd-spreg

The following should be marked as ARM only
- -mglobal-merge/-mno-global-merge
- -mlong-calls/-mno-long-calls

Listed by --help-hidden but not used:
- -fallow-single-precision dummy.c
- -omptargets=i686-pc-linux-gnu dummy.c
- -fno-objc-infer-related-result-type
- --verify-debug-info

-include expects a pre-compiled header file

How to pass a C++ standard library to -stdlib=

-fsanitize-trap=cfi-cast-strict is not recognized, although
 -fno-sanitize=cfi-cast-strict is OK

-fsanitize-trap=vptr/-fno-sanitize-trap=vptr are unrecognized, even though
 vptr is one of the categories for the undefined sanitizer.

    $ clang++ -fsanitize-trap=vptr -fsanitize=undefined dummy.cpp
    clang-3.9: error: unsupported argument 'vptr' to option '-fsanitize-trap'

