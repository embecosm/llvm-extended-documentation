This is llvm.info, produced by makeinfo version 5.2 from llvm.texi.

Copyright (C) 2015 Embecosm Limited
Copyright (C) 1988-2015 Free Software Foundation, Inc.

 Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with the
Invariant Sections being "Funding Free Software", the Front-Cover Texts
being (a, c) (see below), and with the Back-Cover Texts being (b, d)
(see below).  A copy of the license is included in the section entitled
"GNU Free Documentation License".

 (a) The FSF's Front-Cover Text is:

 A GNU Manual

 (b) The FSF's Back-Cover Text is:

 You have freedom to copy and modify this GNU Manual, like GNU software.
Copies published by the Free Software Foundation raise funds for GNU
development.

 (c) Embecosm's Front-Cover Text is:

 Derivative Manual for LLVM

 (d) Embecosm's Back-Cover Text is:

 You have freedom to copy and modify this manual.  Copies published by
Embecosm support introducing others to free and open source software and
hardware.
INFO-DIR-SECTION Software development
START-INFO-DIR-ENTRY
* llvm: (llvm).                The LLVM compiler
END-INFO-DIR-ENTRY

 This file documents the use of the LLVM compiler.

 Copyright (C) 2015 Embecosm Limited
Copyright (C) 1988-2015 Free Software Foundation, Inc.

 Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with the
Invariant Sections being "Funding Free Software", the Front-Cover Texts
being (a, c) (see below), and with the Back-Cover Texts being (b, d)
(see below).  A copy of the license is included in the section entitled
"GNU Free Documentation License".

 (a) The FSF's Front-Cover Text is:

 A GNU Manual

 (b) The FSF's Back-Cover Text is:

 You have freedom to copy and modify this GNU Manual, like GNU software.
Copies published by the Free Software Foundation raise funds for GNU
development.

 (c) Embecosm's Front-Cover Text is:

 Derivative Manual for LLVM

 (d) Embecosm's Back-Cover Text is:

 You have freedom to copy and modify this manual.  Copies published by
Embecosm support introducing others to free and open source software and
hardware.


File: llvm.info,  Node: Top,  Next: Clang and LLVM,  Up: (DIR)

Introduction
************

This manual documents how to use the Clang/LLVM compiler system as well
as its features and incompatibilities, and how to report bugs.  It
corresponds to Clang/LLVM version 3.8 as part of tool chain version 3.8.

 This manual is a derivative of the GNU Compiler Collection manual,
prepared in compliance with the GNU Free Documentation License (GFDL).

 The internals of the LLVM compiler, including how to port it to new
targets and how to write front ends for new languages, are documented
online at <http://llvm.org> and elsewhere.

* Menu:

* Clang and LLVM::  You can compile C or C++ programs.
* Standards::       Language standards supported by GCC.
* Invoking LLVM::   Command options supported by 'gcc'.
* C Implementation:: How GCC implements the ISO C specification.
* C++ Implementation:: How GCC implements the ISO C++ specification.
* C Extensions::    GNU extensions to the C language family.
* C++ Extensions::  GNU extensions to the C++ language.
* Objective-C::     GNU Objective-C runtime features.
* Compatibility::   Binary Compatibility
* Trouble::         If you have trouble using GCC.
* Bugs::            How, why and where to report bugs.
* Service::         How To Get Help with GCC
* Contributing::    How to contribute to testing and developing GCC.

* Funding::         How to help assure funding for free software.
* GNU Project::     The GNU Project and GNU/Linux.

* Copying::         GNU General Public License says
                    how you can copy and share GCC.
* GNU Free Documentation License:: How you can copy and share this manual.
* Contributors::    People who have contributed to GCC.

* Option Index::    Index to command line options.
* Keyword Index::   Index of concepts and symbol names.


File: llvm.info,  Node: Clang and LLVM,  Next: Standards,  Up: Top

1 Programming Languages Supported by Clang/LLVM
***********************************************

LLVM originally stood for "Low Level Virtual Machine".  However, this
acronym proved very confusing, since LLVM is used for much more than
virtual machines.  LLVM is now a name covering a generic compiler
infrastructure supporting a wide range of languages and targets.

 The "language-independent" component of LLVM includes the majority of
the optimizers, as well as the "back ends" that generate machine code
for various processors.

 The part of a compiler that is specific to a particular language is
called the "front end".  Clang is the LLVM front end for C, C++,
ObjectiveC and ObjectiveC++ which is documented in this manual.  The
terms LLVM and Clang are often used interchangably to refer to the
entire compiler, but this manual will use the explicit distinction.  The
front-end typically provides the driver for all the tool chain
components (preprocessr, assembler, linker etc), so in this manual the
'clang' command is used to invoke all the examples.

 There are a wide range of other front ends, including the GCC front end
of the DragonEgg project (see <http://dragonegg.llvm.org/>), providing
support for all the languages supported by GCC. These front-ends are not
documented here.

 In addition to the front ends that form part of the official LLVM
project, there are many other front ends that are maintained separately.

 Most of the compilers for languages other than C sometimes have their
own names.  For example the DragonEgg Ada compiler is GNAT, and so on.
When we talk about compiling one of those languages, we might refer to
that compiler by its own name, or as LLVM.  Either is correct.

 Historically, compilers for many languages, including C++ and Fortran,
have been implemented as "preprocessors" which emit another high level
language such as C.  Clang/LLVM is not implemented this way; it
generates machine code directly.  This sort of preprocessor should not
be confused with the "C preprocessor", which is an integral feature of
the C, C++ and Objective-C languages.


File: llvm.info,  Node: Standards,  Next: Invoking LLVM,  Prev: Clang and LLVM,  Up: Top

2 Language Standards Supported by LLVM
**************************************

For each language compiled by LLVM for which there is a standard, LLVM
attempts to follow one or more versions of that standard, possibly with
some exceptions, and possibly with some extensions.

2.1 C Language
==============

LLVM supports several versions of the C standard, although support for
the most recent version is not yet complete.

 Prior to ANSI standardization, the C standard was defined by the first
edition of 'The C Programming Language' by Brian Kernighan and Dennis
Ritchie (Prentice Hall February 1978, Englewood Cliffs, NJ. ISBN
0-13-110163-3).  Known as K&R C, this specification has some notable
differences from the ANSI standardized versions of the language.  There
is no explicit option to specify K&R support.

 The original ANSI C standard (X3.159-1989) was ratified in 1989 and
published in 1990.  This standard was ratified as an ISO standard
(ISO/IEC 9899:1990) later in 1990.  There were no technical differences
between these publications, although the sections of the ANSI standard
were renumbered and became clauses in the ISO standard.  This standard,
in both its forms, is commonly known as "C89", or occasionally as "C90",
from the dates of ratification.  The ANSI standard, but not the ISO
standard, also came with a Rationale document.  To select this standard
in LLVM, use one of the options '-ansi', '-std=c90' or
'-std=iso9899:1990'; to obtain all the diagnostics required by the
standard, you should also specify '-pedantic' (or '-pedantic-errors' if
you want them to be errors rather than warnings).  *Note Options
Controlling C Dialect: C Dialect Options.

 Errors in the 1990 ISO C standard were corrected in two Technical
Corrigenda published in 1994 and 1996.  LLVM does not support the
uncorrected version.

 An amendment to the 1990 standard was published in 1995.  This
amendment added digraphs and '__STDC_VERSION__' to the language, but
otherwise concerned the library.  This amendment is commonly known as
"AMD1"; the amended standard is sometimes known as "C94" or "C95".  To
select this standard in LLVM, use the option '-std=iso9899:199409'
(with, as for other standard versions, '-pedantic' to receive all
required diagnostics).

 A new edition of the ISO C standard was published in 1999 as ISO/IEC
9899:1999, and is commonly known as "C99".  LLVM has substantially
complete support for this standard version; see
<http://gcc.gnu.org/c99status.html> for details.  To select this
standard, use '-std=c99' or '-std=iso9899:1999'.  (While in development,
drafts of this standard version were referred to as "C9X".)

 Errors in the 1999 ISO C standard were corrected in three Technical
Corrigenda published in 2001, 2004 and 2007.  LLVM does not support the
uncorrected version.

 A fourth version of the C standard, known as "C11", was published in
2011 as ISO/IEC 9899:2011.  LLVM has substantially complete support for
this standard, enabled with '-std=c11' or '-std=iso9899:2011'.  (While
in development, drafts of this standard version were referred to as
"C1X".)

 By default, LLVM provides some extensions to the C language that on
rare occasions conflict with the C standard.  *Note Extensions to the C
Language Family: C Extensions.  Use of the '-std' options listed above
will disable these extensions where they conflict with the C standard
version selected.  You may also select an extended version of the C
language explicitly with '-std=gnu90' (for C90 with GNU extensions),
'-std=gnu99' (for C99 with GNU extensions) or '-std=gnu11' (for C11 with
GNU extensions).  The default, if no C language dialect options are
given, is '-std=gnu11'.  Some features that are part of the C99 standard
are accepted as extensions in C90 mode, and some features that are part
of the C11 standard are accepted as extensions in C90 and C99 modes.

 The ISO C standard defines (in clause 4) two classes of conforming
implementation.  A "conforming hosted implementation" supports the whole
standard including all the library facilities; a "conforming
freestanding implementation" is only required to provide certain library
facilities: those in '<float.h>', '<limits.h>', '<stdarg.h>', and
'<stddef.h>'; since AMD1, also those in '<iso646.h>'; since C99, also
those in '<stdbool.h>' and '<stdint.h>'; and since C11, also those in
'<stdalign.h>' and '<stdnoreturn.h>'.  In addition, complex types, added
in C99, are not required for freestanding implementations.  The standard
also defines two environments for programs, a "freestanding
environment", required of all implementations and which may not have
library facilities beyond those required of freestanding
implementations, where the handling of program startup and termination
are implementation-defined, and a "hosted environment", which is not
required, in which all the library facilities are provided and startup
is through a function 'int main (void)' or 'int main (int, char *[])'.
An OS kernel would be a freestanding environment; a program using the
facilities of an operating system would normally be in a hosted
implementation.

 LLVM aims towards being usable as a conforming freestanding
implementation, or as the compiler for a conforming hosted
implementation.  By default, it will act as the compiler for a hosted
implementation, defining '__STDC_HOSTED__' as '1' and presuming that
when the names of ISO C functions are used, they have the semantics
defined in the standard.  To make it act as a conforming freestanding
implementation for a freestanding environment, use the option
'-ffreestanding'; it will then define '__STDC_HOSTED__' to '0' and not
make assumptions about the meanings of function names from the standard
library, with exceptions noted below.  To build an OS kernel, you may
well still need to make your own arrangements for linking and startup.
*Note Options Controlling C Dialect: C Dialect Options.

 LLVM does not provide the library facilities required only of hosted
implementations, nor yet all the facilities required by C99 of
freestanding implementations on all platforms; to use the facilities of
a hosted environment, you will need to find them elsewhere (for example,
in the GNU C library).  *Note Standard Libraries: Standard Libraries.

 Most of the compiler support routines used by LLVM are present in
'compilerRT', but there are a few exceptions.  LLVM requires the
freestanding environment provide 'memcpy', 'memmove', 'memset' and
'memcmp'.  Finally, if '__builtin_trap' is used, and the target does not
implement the 'trap' pattern, then LLVM will emit a call to 'abort'.

 For references to Technical Corrigenda, Rationale documents and
information concerning the history of C that is available online, see
<http://gcc.gnu.org/readings.html>

2.2 C++ Language
================

LLVM supports the original ISO C++ standard (1998) and contains
experimental support for the second ISO C++ standard (2011).

 The original ISO C++ standard was published as the ISO standard
(ISO/IEC 14882:1998) and amended by a Technical Corrigenda published in
2003 (ISO/IEC 14882:2003).  These standards are referred to as C++98 and
C++03, respectively.  LLVM implements the majority of C++98 ('export' is
a notable exception) and most of the changes in C++03.  To select this
standard in LLVM, use one of the options '-ansi', '-std=c++98', or
'-std=c++03'; to obtain all the diagnostics required by the standard,
you should also specify '-pedantic' (or '-pedantic-errors' if you want
them to be errors rather than warnings).

 A revised ISO C++ standard was published in 2011 as ISO/IEC 14882:2011,
and is referred to as C++11; before its publication it was commonly
referred to as C++0x.  C++11 contains several changes to the C++
language, most of which have been implemented in an experimental C++11
mode in LLVM.  For information regarding the C++11 features available in
the experimental C++11 mode, see
<http://gcc.gnu.org/projects/cxx0x.html>.  To select this standard in
LLVM, use the option '-std=c++11'; to obtain all the diagnostics
required by the standard, you should also specify '-pedantic' (or
'-pedantic-errors' if you want them to be errors rather than warnings).

 More information about the C++ standards is available on the ISO C++
committee's web site at <http://www.open-std.org/jtc1/sc22/wg21/>.

 By default, LLVM provides some extensions to the C++ language; *Note
Options Controlling C++ Dialect: C++ Dialect Options.  Use of the '-std'
option listed above will disable these extensions.  You may also select
an extended version of the C++ language explicitly with '-std=gnu++98'
(for C++98 with GNU extensions) or '-std=gnu++11' (for C++11 with GNU
extensions).  The default, if no C++ language dialect options are given,
is '-std=gnu++98'.

2.3 Objective-C and Objective-C++ Languages
===========================================

LLVM supports "traditional" Objective-C (also known as "Objective-C
1.0") and contains support for the Objective-C exception and
synchronization syntax.  It has also support for a number of
"Objective-C 2.0" and "Objective-C 2.1" language extensions, including
properties, fast enumeration (only for Objective-C), method attributes
and the @optional and @required keywords in protocols.  LLVM supports
Objective-C++ and features available in Objective-C are also available
in Objective-C++.  ObjectiveC support is enabled by '-std=ObjC' and
ObjectiveC++ support by '-std=ObjC++'.

 LLVM by default uses the GNU Objective-C runtime library, which is part
of LLVM and is not the same as the Apple/NeXT Objective-C runtime
library used on Apple systems.  There are a number of differences
documented in this manual.  The options '-fgnu-runtime' and
'-fnext-runtime' allow you to switch between producing output that works
with the GNU Objective-C runtime library and output that works with the
Apple/NeXT Objective-C runtime library.

 There is no formal written standard for Objective-C or Objective-C++.
The authoritative manual on traditional Objective-C (1.0) is
"Object-Oriented Programming and the Objective-C Language", available at
a number of web sites:
   * <http://www.gnustep.org/resources/documentation/ObjectivCBook.pdf>
     is the original NeXTstep document;
   * <http://objc.toodarkpark.net> is the same document in another
     format;
   * 
     <http://developer.apple.com/mac/library/documentation/Cocoa/Conceptual/ObjectiveC/>
     has an updated version but make sure you search for "Object
     Oriented Programming and the Objective-C Programming Language 1.0",
     not documentation on the newer "Objective-C 2.0" language

 The Objective-C exception and synchronization syntax (that is, the
keywords @try, @throw, @catch, @finally and @synchronized) is supported
by LLVM and is enabled with the option '-fobjc-exceptions'.  The syntax
is briefly documented in this manual and in the Objective-C 2.0 manuals
from Apple.

 The Objective-C 2.0 language extensions and features are automatically
enabled; they include properties (via the @property, @synthesize and
@dynamic keywords), fast enumeration (not available in Objective-C++),
attributes for methods (such as deprecated, noreturn, sentinel, format),
the unused attribute for method arguments, the @package keyword for
instance variables and the @optional and @required keywords in
protocols.  You can disable all these Objective-C 2.0 language
extensions with the option '-fobjc-std=objc1', which causes the compiler
to recognize the same Objective-C language syntax recognized by GCC 4.0,
and to produce an error if one of the new features is used.

 LLVM has currently no support for non-fragile instance variables.

 The authoritative manual on Objective-C 2.0 is available from Apple:
   * 
     <http://developer.apple.com/mac/library/documentation/Cocoa/Conceptual/ObjectiveC/>

 For more information concerning the history of Objective-C that is
available online, see <http://gcc.gnu.org/readings.html>

2.4 OpenCL and CUDA
===================

OpenCL and Nvidia(R) CUDA are libraries for GPU support, but they imply
particular versions of the C and C++ languages.  The options '-std=cl',
'-std=CL1.1' and '-std=CL1.2' are all equivalent to '-std=c99'.  The
option '-std=cuda' is equivalent to '-std=c++98'.  _Note:_ All these
options disable GNU extensions.

2.5 References for Other Languages
==================================

For details of other languages, see their separate documentation.  In
particular languages supported by the DragonEgg front end can be found
in the user manual for the GNU Compiler Collection.


File: llvm.info,  Node: Invoking LLVM,  Next: C Implementation,  Prev: Standards,  Up: Top

3 Clang/LLVM Command Options
****************************

When you invoke Clang/LLVM, it normally does preprocessing, compilation,
assembly and linking.  The "overall options" allow you to stop this
process at an intermediate stage.  For example, the '-c' option says not
to run the linker.  Then the output consists of object files output by
the assembler.

 Other options are passed on to one stage of processing.  Some options
control the preprocessor and others the compiler itself.  Yet other
options control the assembler and linker; most of these are not
documented here, since you rarely need to use any of them.

 Clang/LLVM is invoked by the 'clang' command for C/ObjectiveC and by
the 'clang++' command for C++/ObjectiveC++.  Unlike GCC, a LLVM compiler
is usually built to support _all_ backends, and by default 'clang' or
'clang++' will compile for the architecture on which it is running (the
"native" target).  Clang/LLVM can be used as a cross-compiler by using
the '-mcpu' option.  Alternatively the 'clang' and 'clang++' commands
can be renamed or symbolically linked to 'ARCH-cc' and 'ARCH-c++'
respectively, when they will compile for the architecture ARCH.  So for
example the following will both cross-compile for the MIPS architecture.

     clang -mcpu=mips ...
     mips-cc ...

 Most of the command-line options that you can use with LLVM are useful
for C programs; when an option is only useful with another language
(usually C++), the explanation says so explicitly.  If the description
for a particular option does not mention a source language, you can use
that option with all supported languages.

 *Note Compiling C++ Programs: Invoking Clang/LLVM for C++, for a
summary of special options for compiling C++ programs.

 The 'clang' program accepts options and file names as operands.  Many
options have multi-letter names; therefore multiple single-letter
options may _not_ be grouped: '-dv' is very different from '-d -v'.

 You can mix options and other arguments.  For the most part, the order
you use doesn't matter.  Order does matter when you use several options
of the same kind; for example, if you specify '-L' more than once, the
directories are searched in the order specified.  Also, the placement of
the '-l' option is significant.

 Many options have long names starting with '-f' or with '-W'--for
example, '-fmove-loop-invariants', '-Wformat' and so on.  Most of these
have both positive and negative forms; the negative form of '-ffoo' is
'-fno-foo'.  This manual documents only one of these two forms,
whichever one is not the default.

 *Note Option Index::, for an index to LLVM's options.

* Menu:

* Option Summary::      Brief list of all options, without explanations.
* Overall Options::     Controlling the kind of output:
                        an executable, object files, assembler files,
                        or preprocessed source.
* Invoking Clang/LLVM for C++:: Compiling C++ programs.
* C Dialect Options::   Controlling the variant of C language compiled.
* C++ Dialect Options:: Variations on C++.
* Objective-C and Objective-C++ Dialect Options:: Variations on Objective-C
                        and Objective-C++.
* Diagnostic Message Formatting Options:: Controlling how diagnostics should be
                        formatted.
* Warning Options::     How picky should the compiler be?
* Debugging Options::   Symbol tables, measurements, and debugging dumps.
* Optimize Options::    How much optimization?
* Instrumentation Options:: Enabling profiling and extra run-time error checking.
* Preprocessor Options:: Controlling header files and macro definitions.
                         Also, getting dependency information for Make.
* Assembler Options::   Passing options to the assembler.
* Link Options::        Specifying libraries and so on.
* Directory Options::   Where to find header files and libraries.
                        Where to find the compiler executable files.
* Code Gen Options::    Specifying conventions for function calls, data layout
                        and register usage.
* Developer Options::   Printing Clang/LLVM configuration info, statistics, and
                        debugging dumps.
* Submodel Options::    Target-specific options, such as compiling for a
                        specific processor variant.
* Environment Variables:: Env vars that affect LLVM.
* Precompiled Headers:: Compiling a header once, and using it many times.


File: llvm.info,  Node: Option Summary,  Next: Overall Options,  Up: Invoking LLVM

3.1 Option Summary
==================

Here is a summary of all the options, grouped by type.  Explanations are
in the following sections.  For convenience, options supported by
Clang/LLVM and not by GCC and vice-versa are indicated in each section
below.

 _At the time of writing only GCC options are documented in detail.
This summary section should be used as a guide to which will work with
Clang/LLVM._

 The following target architectures supported by GCC are not supported
by LLVM: Adapteva Epiphany, ARC, Blackfin, C6X, CRIS, CR16, DEC Alpha,
FR30, FRV, H8/300, HPPA, IA-64, LM32, M32R/D, M32C, M680x0, MCore, MeP,
MicroBlaze, MMIX, MN10300, Moxie, NDS32, Nios II, PDP-11, picoChip,
RL78, RS/6000, RX, Score, SH, SPU, TILE-Gx, TILEPro, V850, VAX, Visium,
Xstormy16, Xtensa.

 The following target architectures are supported by LLVM, but not by
GCC: Hexagon, XCore.

_Overall Options_
     *Note Options Controlling the Kind of Output: Overall Options.

     _Options supported by both LLVM and GCC_
          @FILE
              -###
              -c
              -E
              -fplugin=FILE
              --help
              -o FILE
              -pipe
           -S
              -v
              --version
              -x LANGUAGE


     _Options only supported by LLVM_
          -emit-ast
              -emit-llvm
           -fbuild-session-file=FILE
              -fbuild-session-timestamp=SECS
              --gcc-toolchain=DIR
              -help
              -ObjC
           -ObjC++
              -Qunused-arguments
              -working-directory DIR
              -Xclang


     _Options only supported by GCC_
          -fada-spec-parent=UNIT
              -fdump-ada-spec[-slim]
           -fdump-go-spec=FILE
              -fno-canonical-system-headers
           -fplugin-arg-NAME=ARG
              --help=CLASS[,...]
           -pass-exit-codes
              -specs=FILE
              --target-help
              -wrapper


_C Language Options_
     *Note Options Controlling C Dialect: C Dialect Options.

     _Options supported by both LLVM and GCC_
          -ansi
              -fno-asm
              -fno-builtin
           -fno-builtin-FUNCTION
              -ffreestanding
              -fgnu89-inline
              -fhosted
           -flax-vector-conversions
              -fms-extensions
              -fopenmp
              -fsigned-bitfields
           -fsigned-char
              -std=STANDARD
              -traditional
              -trigraphs
           -funsigned-bitfields
              -funsigned-char


     _Options only supported by LLVM_
          -fblocks
              -fborland-extensions
              -femit-all-decls
           -fms-compatibility
              -fms-compatibility-version=NUM
           -fmsc-version=NUM
              -fno-gnu-inline-asm
              -fno-spell-checking
           -fpascal-strings
              -funique-section-names
              -fwritable-strings


     _Options only supported by GCC_
          -aux-info FILENAME
              -fallow-parameterless-variadic-functions
           -fcilkplus
              -fcond-mismatch
              -fgnu-tm
              -fopenacc
           -fopenmp-simd
              -fplan9-extensions
              -fsso-struct=ENDIANNESS
           -traditional-cpp


_C++ Language Options_
     *Note Options Controlling C++ Dialect: C++ Dialect Options.

     _Options supported by both LLVM and GCC_
          -fno-access-control
              -fcheck-new
              -fconstexpr-depth=N
           -fno-elide-constructors
              -ffor-scope
              -ffriend-injection
           -fno-gnu-keywords
              -fno-implicit-templates
           -fno-implement-inlines
              -fno-operator-names
           -fpermissive
              -fno-rtti
              -fsized-deallocation
           -ftemplate-backtrace-limit=N
              -ftemplate-depth=N
           -fno-threadsafe-statics
              -fuse-cxa-atexit
           -fvisibility-inlines-hidden
              -fvisibility-ms-compat
              -nostdinc++
           -Wabi
              -Wconversion-null
              -Wctor-dtor-privacy
              -Wdelete-non-virtual-dtor
           -Weffc++
              -Wnarrowing
              -Wnon-virtual-dtor
              -Wold-style-cast
           -Woverloaded-virtual
              -Wreorder
              -Wsign-promo


     _Options only supported by LLVM_
          -fno-assume-sane-operator-new
              -fcxx-exceptions
           -fdelayed-template-parsing
              -fshow-overloads=OPT


     _Options only supported by GCC_
          -fabi-version=N
              -fabi-compat-version=N
              -fdeduce-init-list
           -fext-numeric-literals
              -fno-enforce-eh-specs
              -fno-for-scope
           -fno-implicit-inline-templates
              -fno-nonansi-builtins
           -fno-optional-diags
              -fno-pretty-templates
              -fno-weak
           -fnothrow-opt
              -frepo
              -Wabi=N
              -Wabi-tag
              -Wliteral-suffix
           -Wmultiple-inheritance
              -Wnamespaces
              -Wno-non-template-friend
           -Wno-pmf-conversions
              -Wno-terminate
              -Wnoexcept
           -Wstrict-null-sentinel
              -Wtemplates
              -Wvirtual-inheritance


_Objective-C and Objective-C++ Language Options_
     *Note Options Controlling Objective-C and Objective-C++ Dialects:
     Objective-C and Objective-C++ Dialect Options.

     _Options supported by both LLVM and GCC_
          -fconstant-string-class=CLASS-NAME
              -fgnu-runtime
           -fnext-runtime
              -fobjc-abi-version=N
              -fobjc-call-cxx-cdtors
           -fobjc-exceptions
              -fobjc-gc
              -objcmt-atomic-property
           -objcmt-migrate-CATEGORY
              -objcmt-ns-nonatomic-iosonly
           -objcmt-returns-innerpointer-property
              -Wno-protocol
           -Wselector
              -Wstrict-selector-match
              -Wundeclared-selector


     _Options only supported by LLVM_
          -fno-constant-cfstrings
              -fobjc-arc
              -fobjc-arc-exceptions
           -fobjc-gc-only
              -fobjc-runtime=RUNTIME
           -objcmt-whitelist-dir-path=DIR
              -rewrite-legacy-objc
              -rewrite-objc


     _Options only supported by GCC_
          -fextern-tls-init
              -fivar-visibility=[public|protected|private|package]
           -fno-default-inline
              -fno-lifetime-dse
              -fno-local-ivars
           -fno-nil-receivers
              -fobjc-direct-dispatch
              -fobjc-nilcheck
           -fobjc-std=STD
              -freplace-objc-classes
              -fzero-link
              -gen-decls
           -print-objc-runtime-info
              -Wassign-intercept


_Diagnostic Message Formatting Options_
     *Note Options to Control Diagnostic Messages Formatting: Diagnostic
     Message Formatting Options.

     _Options supported by both LLVM and GCC_
          -fdiagnostics-color[=auto|never|always]
           -fdiagnostics-show-location=[once|every-line]
           -fno-diagnostics-show-option
              -fmessage-length=N


     _Options only supported by LLVM_
          -fansi-escape-codes
              -fcolor-diagnostics
           -fno-diagnostics-fixit-info
           -fdiagnostics-parseable-fixits
           -fdiagnostics-print-source-range-info
           -fdiagnostics-show-note-include-stack
           -fdiagnostics-show-template-tree
              -fno-elide-type
              -serialize-diagnostics FILE
           -fno-show-source-location


     _Options only supported by GCC_
          -fno-diagnostics-show-caret


_Warning Options_
     *Note Options to Request or Suppress Warnings: Warning Options.

     _Options supported by both LLVM and GCC_
          -fsyntax-only
              -pedantic
              -pedantic-errors
              -w
              -Wall
           -Werror[=WARNING]
              -Wextra
              -Wfatal-errors
              -Wpedantic


     _Options only supported by LLVM_
          -Weverything


     _Options only supported by GCC_
          -fmax-errors=N


_Detailed Warning Options_

     _Options supported by both LLVM and GCC_
          -Waddress
              -Waggregate-return
              -Warray-bounds
              -Wno-attributes
           -Wno-builtin-macro-redefined
              -Wc++-compat
              -Wc++0x-compat
           -Wc++11-compat
              -Wc++14-compat
              -Wcast-align
              -Wcast-qual
           -Wchar-subscripts
              -Wcomment
              -Wcomments
              -Wconversion
              -Wdate-time
           -Wdelete-incomplete
              -Wno-deprecated
              -Wno-deprecated-declarations
           -Wdisabled-optimization
              -Wno-div-by-zero
              -Wdouble-promotion
           -Wempty-body
              -Wno-endif-labels
              -Wenum-compare
              -Wfloat-conversion
           -Wfloat-equal
              -Wformat[=0|2]
              -Wno-format-extra-args
              -Wformat-nonliteral
           -Wformat-security
              -Wformat-y2k
              -Wformat-zero-length
           -Wframe-larger-than=LEN
              -Wignored-qualifiers
              -Wimplicit
           -Wimplicit-function-declaration
              -Wimplicit-int
           -Wincompatible-pointer-types
              -Wno-inherited-variadic-ctor
              -Winit-self
           -Winline
              -Wno-int-conversion
              -Wno-int-to-pointer-cast
           -Wno-invalid-offsetof
              -Winvalid-pch
              -Wlarger-than=LEN
           -Wlarger-than-LEN
              -Wlogical-not-parentheses
              -Wlong-long
              -Wmain
           -Wmissing-braces
              -Wmissing-field-initializers
           -Wmissing-format-attribute
              -Wmissing-include-dirs
           -Wno-multichar
              -Wnonnull
              -Wnull-dereference
              -Wodr
              -Wno-overflow
           -Woverlength-strings
              -Wpacked
              -Wpadded
              -Wparentheses
           -Wpointer-arith
              -Wno-pointer-to-int-cast
              -Wno-pragmas
           -Wredundant-decls
              -Wreturn-type
              -Wsequence-point
           -Wshadow
              -Wno-shadow-ivar
              -Wshift-count-negative
           -Wshift-count-overflow
              -Wshift-negative-value
              -Wshift-overflow
           -Wsign-compare
              -Wsign-conversion
              -Wsizeof-array-argument
           -Wsizeof-pointer-memaccess
              -Wstack-protector
              -Wstrict-aliasing[=1|2]
           -Wstrict-overflow[=N]
              -Wswitch
              -Wswitch-bool
              -Wswitch-default
           -Wswitch-enum
              -Wsystem-headers
              -Wtautological-compare
              -Wtrigraphs
           -Wtype-limits
              -Wundef
              -Wuninitialized
              -Wunknown-pragmas
              -Wunused
           -Wunused-const-variable
              -Wunused-function
              -Wunused-label
           -Wunused-local-typedefs
              -Wunused-parameter
              -Wno-unused-result
           -Wunused-value
              -Wunused-variable
              -Wno-varargs
              -Wvariadic-macros
           -Wvla
              -Wvolatile-register-var
              -Wwrite-strings


     _Options only supported by LLVM_
          -Wno-abstract-final-class
              -Wabstract-vbase-init
           -Waddress-of-array-temporary
              -Waddress-of-temporary
              -Wambiguous-macro
           -Wambiguous-member-template
              -Wanalyzer-incompatible-plugin
           -Wanonymous-pack-parens
              -Warc
           -Warc-bridge-casts-disallowed-in-nonarc
           -Warc-maybe-repeated-use-of-weak
              -Warc-non-pod-memaccess
           -Warc-performSelector-leaks
              -Warc-repeated-use-of-weak
           -Warc-retain-cycles
              -Warc-unsafe-retained-assign
           -Warray-bounds-pointer-arithmetic
              -Wasm
              -Wasm-operand-widths
           -Wno-assign-enum
              -Watomic-properties
           -Watomic-property-with-user-defined-accessor
              -Wno-auto-import
           -Wno-auto-storage-class
              -Wauto-var-id
           -Wavailability
              -Wbackslash-newline-escape
              -Wbad-array-new-length
           -Wbind-to-temporary-copy
              -Wbitfield-constant-conversion
           -Wbitwise-op-parentheses
              -Wbool-conversion
              -Wbool-conversions
           -Wbridge-cast
              -Wbuiltin-requires-header
              -Wc++0x-extensions
           -Wc++0x-narrowing
              -Wc++11-compat-pedantic
           -Wc++11-compat-reserved-user-defined-literal
              -Wc11-extensions
           -Wc++11-extensions
              -Wc++11-extra-semi
              -Wc++11-long-long
           -Wc++11-narrowing
              -Wc++1y-extensions
              -Wc++98-c++11-compat
           -Wc++98-c++11-compat-pedantic
              -Wc++98-compat-bind-to-temporary-copy
           -Wc++98-compat
              -Wc++98-compat-local-type-template-args
           -Wc++98-compat-pedantic
              -Wc++98-compat-unnamed-type-template-args
           -Wc99-compat
              -Wno-c99-extensions
              -Wcast-of-sel-type
           -WCFString-literal
              -Wchar-align
              -Wcompare-distinct-pointer-types
           -Wcomplex-component-init
              -Wconditional-type-mismatch
           -Wconditional-uninitialized
              -Wconfig-macros
              -Wconstant-conversion
           -Wconstant-logical-operand
              -Wconstexpr-not-const
           -Wconsumed
              -Wcovered-switch-default
              -Wcustom-atomic-properties
           -Wdangling-else
              -Wdangling-field
              -Wdangling-initializer-list
           -Wdelegating-ctor-cycles
              -Wdeprecated-increment-bool
           -Wdeprecated-implementations
              -Wdeprecated-objc-isa-usage
           -Wdeprecated-objc-pointer-introspection
           -Wdeprecated-objc-pointer-introspection-performSelector
           -Wdeprecated-register
              -Wdeprecated-writable-strings
           -Wdirect-ivar-access
              -Wdisabled-macro-expansion
           -Wdiscard-qual
              -Wdistributed-object-modifiers
              -Wdivision-by-zero
           -Wdocumentation-deprecated-sync
              -Wdocumentation
              -Wdocumentation-html
           -Wdocumentation-pedantic
              -Wdocumentation-unknown-command
           -Wdollar-in-identifier-extension
              -Wduplicate-decl-specifier
           -Wduplicate-enum
              -Wduplicate-method-arg
           -Wduplicate-method-match
              -Wdynamic-class-memaccess
              -Wembedded-directive
           -Wempty-translation-unit
              -Wenum-conversion
              -Wexit-time-destructors
           -Wexplicit-ownership-type
              -Wextended-offsetof
              -Wextern-c-compat
           -Wextern-initializer
              -Wno-extra-qualification
              -Wextra-semi
           -Wextra-tokens
              -Wflexible-array-extensions
              -Wformat-invalid-specifier
           -Wformat-non-iso
              -Wformat-pedantic
              -Wfour-char-constants
           -Wgcc-compat
              -Wglobal-constructors
              -Wgnu-array-member-paren-init
           -Wgnu-conditional-omitted-operand
              -Wgnu-designator
              -Wgnu
           -Wgnu-static-float-init
              -Wheader-guard
              -Wheader-hygiene
           -Widiomatic-parentheses
              -Wignored-attributes
           -Wimplicit-atomic-properties
           -Wimplicit-conversion-floating-point-to-bool
           -Wimplicit-exception-spec-mismatch
              -Wimplicit-fallthrough
           -Wimplicit-fallthrough-per-function
              -Wimplicit-retain-self
           -Wimport-preprocessor-directive-pedantic
           -Wincompatible-library-redeclaration
           -Wincompatible-pointer-types-discards-qualifiers
           -Wno-incomplete-module
              -Wincomplete-implementation
           -Wincomplete-umbrella
              -Winitializer-overrides
           -Wint-conversions
              -Wno-int-to-void-pointer-cast
           -Winteger-overflow
              -Winvalid-constexpr
              -Winvalid-iboutlet
           -Winvalid-noreturn
              -Winvalid-pp-token
              -Winvalid-source-encoding
           -Winvalid-token-paste
              -Wno-keyword-compat
              -Wknr-promoted-parameter
           -Wlanguage-extension-token
              -Wlarge-by-value-copy
              -Wno-liblto
           -Wno-literal-conversion
              -Wno-literal-range
              -Wlocal-type-template-args
           -Wlogical-op-parentheses
              -Wloop-analysis
              -Wmain-return-type
           -Wmalformed-warning-check
              -Wmethod-signatures
           -Wmicrosoft
              -Wmicrosoft-exists
           -Wmismatched-parameter-types
              -Wmismatched-return-types
           -Wmismatched-tags
              -Wmissing-method-return-type
           -Wmissing-selector-name
              -Wmissing-sysroot
           -Wmissing-variable-declarations
              -Wmodule-conflict
           -Wmost
              -Wmultiple-move-vbase
              -Wnested-anon-types
           -Wnewline-eof
              -Wnon-gcc
              -Wnon-literal-null-conversion
           -Wnon-pod-varargs
              -Wnonportable-cfstrings
              -WNSObject-attribute
           -Wnull-arithmetic
              -Wnull-character
           -Wnull-conversion
              -Wobjc-autosynthesis-property-ivar-name-match
           -Wobjc-cocoa-api
              -Wobjc-forward-class-redefinition
           -Wobjc-interface-ivars
              -Wobjc-literal-compare
           -Wobjc-method-access
              -Wobjc-missing-property-synthesis
           -Wobjc-missing-super-calls
              -Wobjc-noncopy-retain-block-property
           -Wobjc-nonunified-exceptions
              -Wobjc-property-implementation
           -Wobjc-property-implicit-mismatch
           -Wobjc-property-matches-cocoa-ownership-rule
           -Wobjc-property-no-attribute
              -Wobjc-string-concatenation
           -Wobjc-property-synthesis
              -Wobjc-protocol-method-implementation
           -Wobjc-protocol-property-synthesis
              -Wobjc-readonly-with-setter-property
           -Wobjc-redundant-api-use
              -Wobjc-redundant-literal-use
              -Wobjc-root-class
           -Wobjc-string-compare
              -Wopenmp-clauses
              -Wno-out-of-line-declaration
           -Wover-aligned
              -Wno-override-module
           -Woverloaded-shift-op-parentheses
              -Woverriding-method-mismatch
           -Wparentheses-equality
              -Wno-pointer-type-mismatch
           -W#pragma-messages
              -Wpredefined-identifier-outside-function
           -Wprivate-extern
              -Wproperty-attribute-mismatch
           -Wprotocol-property-synthesis-ambiguity
           -Wreadonly-iboutlet-property
              -Wreceiver-expr
              -Wreceiver-forward-class
           -Wreceiver-is-weak
              -Wreinterpret-base-class
           -Wrequires-super-attribute
              -Wreserved-user-defined-literal
           -Wno-return-stack-address
              -Wreturn-type-c-linkage
              -Wsection
           -Wselector-type-mismatch
              -Wself-assign
              -Wself-assign-field
           -Wsemicolon-before-method-body
              -Wsentinel
              -Wserialized-diagnostics
           -Wshift-op-parentheses
              -Wshift-sign-overflow
              -Wshorten-64-to-32
           -Wsizeof-array-decay
              -Wsometimes-uninitialized
           -Wsource-uses-openmp
              -Wstatic-float-init
              -Wstatic-in-inline
           -Wstatic-inline-explicit-instantiation
              -Wstatic-local-in-inline
           -Wstatic-self-init
              -Wstring-compare
              -Wstring-conversion
           -Wstring-plus-char
              -Wstring-plus-int
              -Wstrlcpy-strlcat-size
           -Wstrncat-size
              -Wsuper-class-method-mismatch
           -Wtautological-constant-out-of-range-compare
           -Wtentative-definition-incomplete-type
              -Wthread-safety-analysis
           -Wthread-safety-attributes
              -Wthread-safety-beta
              -Wthread-safety
           -Wthread-safety-precise
              -Wtypedef-redefinition
              -Wtypename-missing
           -Wtype-safety
              -Wno-unavailable-declarations
           -Wundefined-inline
              -Wundefined-internal
           -Wundefined-reinterpret-cast
              -Wunicode
              -Wunicode-whitespace
           -Wunknown-warning-option
              -Wunnamed-type-template-args
           -Wunneeded-internal-declaration
              -Wunneeded-member-function
           -Wunsequenced
              -Wno-unsupported-friend
           -Wunsupported-visibility
              -Wunused-command-line-argument
           -Wunused-comparison
              -Wunused-exception-parameter
           -Wunused-member-function
              -Wunused-private-field
              -Wunused-property-ivar
           -Wunused-volatile-lvalue
              -Wused-but-marked-unused
           -Wuser-defined-literals
              -Wvector-conversion
              -Wvector-conversions
           -Wvexing-parse
              -Wvisibility
              -Wvla-extension
              -W#warnings
           -Wweak-template-vtables
              -Wweak-vtables
              -Wzero-length-array


     _Options only supported by GCC_
          -Wno-aggressive-loop-optimizations
              -Warray-bounds=N
           -Wbool-compare
              -Wc90-c99-compat
              -Wc99-c11-compat
              -Wclobbered
           -Wconditionally-supported
              -Wcoverage-mismatch
              -Wno-cpp
           -Wno-designated-init
              -Wno-discarded-array-qualifiers
           -Wno-discarded-qualifiers
              -Wduplicated-cond
              -Wformat=1
           -Wno-format-contains-nul
              -Wformat-signedness
              -Wframe-address
           -Wno-free-nonheap-object
              -Whsa
              -Winvalid-memory-model
           -Wjump-misses-init
              -Wlogical-op
              -Wlto-type-mismatch
           -Wmaybe-uninitialized
              -Wmemset-transposed-args
           -Wmisleading-indentation
              -Wnormalized=[none|id|nfc|nfkc]
              -Wopenmp-simd
           -Woverride-init
              -Woverride-init-side-effects
              -Wpacked-bitfield-compat
           -Wno-pedantic-ms-format
              -Wplacement-new
              -Wno-return-local-addr
           -Wno-scalar-storage-order
              -Wshift-overflow=N
              -Wstack-usage=LEN
           -Wstrict-aliasing=3
              -Wsubobject-linkage
           -Wsuggest-attribute=[pure|const|noreturn|format]
              -Wsuggest-final-methods
           -Wsuggest-final-types
              -Wsuggest-override
              -Wsync-nand
           -Wtrampolines
              -Wunsafe-loop-optimizations
           -Wunsuffixed-float-constants
              -Wunused-but-set-parameter
           -Wunused-but-set-variable
              -Wuseless-cast
              -Wvector-operation-performance
           -Wno-virtual-move-assign
              -Wzero-as-null-pointer-constant


_C and Objective-C-only Warning Options_

     _Options supported by both LLVM and GCC_
          -Wbad-function-cast
              -Wdeclaration-after-statement
           -Wmissing-declarations
              -Wmissing-prototypes
              -Wnested-externs
           -Wold-style-definition
              -Wpointer-sign
              -Wstrict-prototypes


     _Options only supported by LLVM_


     _Options only supported by GCC_
          -Wmissing-parameter-type
              -Wold-style-declaration
              -Wtraditional
           -Wtraditional-conversion


_Debugging Options_
     *Note Options for Debugging Your Program: Debugging Options.

     _Options supported by both LLVM and GCC_
          -fdebug-prefix-map=OLD=NEW
              -fdebug-types-section
           -fno-dwarf2-cfi-asm
              -fno-eliminate-unused-debug-types
           -g[LEVEL]
              -gdwarf[-VERSION]
              -ggdb[LEVEL]
              -ggnu-pubnames
           -gno-record-gcc-switches
              -gsplit-dwarf
              -gstrict-dwarf


     _Options only supported by LLVM_
          -fno-standalone-debug
              -fstandalone-debug
              -gcodeview
              -gfull
           -gline-tables-only
              -gmodules
              -gused


     _Options only supported by GCC_
          -feliminate-dwarf2-dups
              -feliminate-unused-debug-symbols
           -femit-class-debug-always
              -femit-struct-debug-baseonly
           -femit-struct-debug-detailed[=SPEC-LIST]
              -femit-struct-debug-reduced
           -fno-merge-debug-strings
              -fvar-tracking
              -fvar-tracking-assignments
           -gcoff[LEVEL]
              -gpubnames
              -gstabs[LEVEL]
              -gstabs+
              -gtoggle
           -gvms[LEVEL]
              -gxcoff[LEVEL]
              -gxcoff+
              -gz[=TYPE]


_Optimization Options_
     *Note Options that Control Optimization: Optimize Options.

     _Options supported by both LLVM and GCC_
          -fassociative-math
              -fdata-sections
              -ffast-math
           -ffinite-math-only
              -ffp-contract=STYLE
              -ffunction-sections
           -fno-inline
              -flto[=full|thin]
              -fno-math-errno
              -fmerge-all-constants
           -fomit-frame-pointer
              -foptimize-sibling-calls
              -fprofile-use=[PATH]
           -freciprocal-math
              -fno-signed-zeros
              -fstrict-aliasing
              -fstrict-enums
           -fstrict-overflow
              -fno-trapping-math
              -ftree-slp-vectorize
           -ftree-vectorize
              -funit-at-a-time
              -funroll-loops
           -funsafe-math-optimizations
              -fno-zero-initialized-in-bss
              -O
              -O0
              -O1
              -O2
           -O3
              -Ofast
              -Os
              --param ssp-buffer-size=N


     _Options only supported by LLVM_
          -fno-reroll-loops
              -freroll-loops
              -fslp-vectorize-aggressive
           -fslp-vectorize
              -fstrict-vtable-pointers
              -fthinlto-index=FILE
           -fvectorize
              -mllvm OPTION
              -mrelax-all
              -O4
              -Oz


     _Options only supported by GCC_
          -faggressive-loop-optimizations
              -falign-functions[=N]
           -falign-jumps[=N]
              -falign-labels[=N]
              -falign-loops[=N]
           -fauto-inc-dec
              -fauto-profile[=PATH]
              -fno-branch-count-reg
           -fbranch-probabilities
              -fbranch-target-load-optimize
           -fbranch-target-load-optimize2
              -fbtr-bb-exclusive -fcaller-saves
           -fcombine-stack-adjustments
              -fcompare-elim
              -fconserve-stack
           -fcprop-registers
              -fcrossjumping
              -fcse-follow-jumps
              -fcse-skip-blocks
           -fcx-fortran-rules
              -fcx-limited-range
              -fdce
              -fdeclone-ctor-dtor
           -fno-defer-pop
              -fdelayed-branch
              -fdelete-null-pointer-checks
           -fdevirtualize
              -fdevirtualize-at-ltrans
              -fdevirtualize-speculatively
           -fdse
              -fearly-inlining
              -fexcess-precision=STYLE
           -fexpensive-optimizations
              -ffat-lto-objects
              -fipa-sra
              -ffloat-store
           -fforward-propagate
              -fno-function-cse
              -fgcse
              -fgcse-after-reload
           -fgcse-las
              -fgcse-lm
              -fgcse-sm
              -fgraphite-identity
           -fno-guess-branch-probability
              -fhoist-adjacent-loads
              -fif-conversion
           -fif-conversion2
              -findirect-inlining
              -finline-functions
           -finline-functions-called-once
              -finline-limit=N
           -finline-small-functions
              -fipa-cp
              -fipa-cp-alignment
              -fipa-cp-clone
           -fipa-icf
              -fipa-profile
              -fipa-pta
              -fipa-pure-const
              -fipa-ra
           -fipa-reference
              -fira-algorithm=ALGORITHM
              -fira-hoist-pressure
           -fira-loop-pressure
              -fira-region=REGION
              -fno-ira-share-save-slots
           -fno-ira-share-spill-slots
              -fisolate-erroneous-paths-attribute
           -fisolate-erroneous-paths-dereference
              -fivopts
              -fkeep-inline-functions
           -fkeep-static-consts
              -fkeep-static-functions
              -flive-range-shrinkage
           -floop-block
              -floop-interchange
              -floop-nest-optimize
           -floop-parallelize-all
              -floop-strip-mine
              -floop-unroll-and-jam
           -flra-remat
              -flto=N
              -flto=jobserver
           -flto-compression-level
              -flto-partition=ALG
           -flto-odr-type-merging
              -fmerge-constants
              -fmodulo-sched
           -fmodulo-sched-allow-regmoves
              -fmove-loop-invariants
              -foptimize-strlen
           -fpartial-inlining
              -fpeel-loops
              -fno-peephole
              -fno-peephole2
           -fpredictive-commoning
              -fprefetch-loop-arrays
              -fprofile-correction
           -fprofile-values
              -fprofile-reorder-functions
              -free
           -frename-registers
              -freorder-blocks
           -freorder-blocks-algorithm=ALGORITHM
              -freorder-blocks-and-partition
           -freorder-functions
              -frerun-cse-after-loop
           -freschedule-modulo-scheduled-loops
              -frounding-math
           -fsched-critical-path-heuristic
              -fsched-dep-count-heuristic
           -fsched-group-heuristic
              -fno-sched-interblock
           -fsched-last-insn-heuristic
              -fsched-pressure
              -fsched-rank-heuristic
           -fno-sched-spec
              -fsched-spec-insn-heuristic
              -fsched-spec-load
           -fsched-spec-load-dangerous
              -fsched-stalled-insns[=N]
           -fsched-stalled-insns-dep[=N]
              -fsched2-use-superblocks
           -fschedule-fusion
              -fschedule-insns
              -fschedule-insns2
           -fsection-anchors
              -fsel-sched-pipelining
           -fsel-sched-pipelining-outer-loops
              -fselective-scheduling
           -fselective-scheduling2
              -fsemantic-interposition
              -fshrink-wrap
           -fsignaling-nans
              -fsimd-cost-model=MODEL
              -fsingle-precision-constant
           -fsplit-ivs-in-unroller
              -fsplit-paths
              -fsplit-wide-types
           -fssa-backprop
              -fssa-phiopt
              -fstdarg-opt
              -fthread-jumps
           -fno-toplevel-reorder
              -ftracer
              -ftree-bit-ccp
           -ftree-builtin-call-dce
              -ftree-ccp
              -ftree-ch
           -ftree-coalesce-inlined-vars
              -ftree-coalesce-vars
           -ftree-copy-prop
              -ftree-copyrename
              -ftree-dce
           -ftree-dominator-opts
              -ftree-dse
              -ftree-forwprop
           -ftree-fre
              -ftree-loop-distribute-patterns
           -ftree-loop-distribution
              -ftree-loop-if-convert
           -ftree-loop-if-convert-stores
              -ftree-loop-im
           -ftree-loop-ivcanon -ftree-loop-linear
              -ftree-loop-optimize
           -ftree-loop-vectorize
              -ftree-parallelize-loops=N
              -ftree-partial-pre
           -ftree-phiprop
              -ftree-pre
              -ftree-pta
           -ftree-reassoc
              -ftree-sink
              -ftree-slsr
              -ftree-sra
           -ftree-switch-conversion
              -ftree-tail-merge
              -ftree-ter
           -ftree-vrp
              -funroll-all-loops
              -funsafe-loop-optimizations
           -funswitch-loops
              -fuse-linker-plugin
           -fvariable-expansion-in-unroller
              -fvect-cost-model
              -fvpt
              -fweb
           -fwhole-program
              -Og
              --param NAME=VALUE


_Program Instrumentation Options_
     *Note Program Instrumentation Options: Instrumentation Options.

     _Options supported by both LLVM and GCC_
          --coverage
              -finstrument-functions
              -fprofile-arcs
           -fprofile-generate[=PATH]
              -fsanitize=STYLE
           -fsanitize-recover[=STYLE]
              -fsanitize-undefined-trap-on-error
           -fsplit-stack
              -fstack-check
              -fstack-protector
           -fstack-protector-all
              -fstack-protector-strong
           -ftest-coverage
              -pg


     _Options only supported by LLVM_
          --analyze
              -fcoverage-mapping
              -fprofile-instr-generate[=FILE]
           -fprofile-instr-use[=FILE]
              -fprofile-sample-use=FILE
           -fsanitize-address-field-padding=N
              -fsanitize-blacklist=FILE
           -fsanitize=STYLE
              -fsanitize-cfi-cross-dso
           -fsanitize-coverage=STYLE
              -fsanitize-memory-track-origins[N]
           -fsanitize-memory-use-after-dtor
              -fsanitize-recover=STYLE
           -fsanitize-stats
              -fsanitize-trap=STYLE


     _Options only supported by GCC_
          -fasan-shadow-offset=NUMBER
              -fbounds-check
              -fcheck-data-deps
           -fcheck-pointer-bounds
              -fchkp-check-incomplete-type
           -fchkp-first-field-has-own-bounds
              -fchkp-narrow-bounds
           -fchkp-narrow-to-innermost-array
              -fchkp-optimize
           -fchkp-use-fast-string-functions
              -fchkp-use-nochk-string-functions
           -fchkp-use-static-bounds
              -fchkp-use-static-const-bounds
           -fchkp-treat-zero-dynamic-size-as-infinite
              -fchkp-check-read
           -fchkp-check-read
              -fchkp-check-write
           -fchkp-store-bounds
              -fchkp-instrument-calls
           -fchkp-instrument-marked-only
              -fchkp-use-wrappers
           -finstrument-functions-exclude-function-list=SYM,SYM,...
           -finstrument-functions-exclude-file-list=FILE,FILE,...
           -fprofile-dir=PATH
              -fsanitize-coverage=trace-pc
           -fsanitize-recover=STYLE
              -fsanitize-sections=S1,S2,...
           -fno-stack-limit
              -fstack-limit-register=REG
           -fstack-limit-symbol=SYM
              -fstack-protector-explicit
           -fvtable-verify=[std|preinit|none]
              -fvtv-counts
           -fvtv-debug
              -p


_Preprocessor Options_
     *Note Options Controlling the Preprocessor: Preprocessor Options.

     _Options supported by both LLVM and GCC_
          -C
              -CC
              -DMACRO[=DEFN]
              -dD
              -dM
              -E
              -fdollars-in-identifiers
           -fexec-charset=CHARSET
              -fextended-identifiers
              -finput-charset=CHARSET
           -fpch-preprocess
              -fno-show-column
              -ftabstop=WIDTH
              -H
           -idirafter DIR
              -imacros FILE
              -include FILE
              -iprefix FILE
           -isysroot DIR
              -isystem DIR
              -iwithprefix DIR
              -iwithprefixbefore DIR
           -M
              -MD
              -MF
              -MG
              -MM
              -MMD
              -MP
              -MQ
              -MT
              -no-integrated-cpp
           -nostdinc
              -P
              -trigraphs
              -UMACRO
              -undef
              -Wp,OPTION
           -Xpreprocessor


     _Options only supported by LLVM_
          -cxx-isystem=FILE
              -fcomment-block-commands=CMD
              -fdeclspec
           -ftrigraphs
              -iframeworkDIR
              -include-pch FILE
           -index-header-map
              -iwithsysroot DIR
              --migrate
           -MV
              --no-system-header-prefix=PREFIX
              -nobuiltininc
           -relocatable-pch
              --system-header-prefix=PREFIX
              -verify-pch


     _Options only supported by GCC_
          -AQUESTION=ANSWER
              -A-QUESTION[=ANSWER]
              -dI
              -dN
              -dU
              -fdebug-cpp
           -fdirectives-only
              -fpch-deps
              -fpreprocessed
           -ftrack-macro-expansion
              -fwide-exec-charset=CHARSET
           -fworking-directory
              -imultilib DIR
              -remap


_Assembler Options_
     *Note Passing Options to the Assembler: Assembler Options.

     _Options supported by both LLVM and GCC_
          -Wa,OPTION
              -Xassembler OPTION


     _Options only supported by LLVM_
          -fno-integrated-as


     _Options only supported by GCC_




_Linker Options_
     *Note Options for Linking: Link Options.

     _Options supported by both LLVM and GCC_
          -fuse-ld=LINKER
              -lLIBRARY
              -nodefaultlibs
              -nostartfiles
           -nostdlib
              -pie
              -rdynamic
              -s
              -shared
              -static
              -static-libgcc
           -u SYMBOL
              -Wl,OPTION
              -Xlinker OPTION
              -z KEYWORD


     _Options only supported by LLVM_
          -fno-autolink
              -fno-use-init-array
              -fveclib=LIB
           -mincremental-linker-compatible
              -stdlib=LIB


     _Options only supported by GCC_
          -shared-libgcc
              -static-libasan
              -static-liblsan
              -static-libmpx
           -static-libmpxwrappers
              -static-libstdc++
              -static-libtsan
           -static-libubsan
              -symbolic
              -T SCRIPT


_Directory Options_
     *Note Options for Directory Search: Directory Options.

     _Options supported by both LLVM and GCC_
          -IDIR
          -iquoteDIR
          -LDIR
          --sysroot=DIR


     _Options only supported by LLVM_


     _Options only supported by GCC_
          -BPREFIX
          -I-
          -iplugindir=DIR
          -no-canonical-prefixes
          --no-sysroot-suffix


_Code Generation Options_
     *Note Options for Code Generation Conventions: Code Gen Options.

     _Options supported by both LLVM and GCC_
          -fasynchronous-unwind-tables
              -fno-common
              -fexceptions
              -fno-ident
           -fnon-call-exceptions
              -fpack-struct[=N]
              -fPIC
              -fpic
           -fPIE
              -fpie
              -fshort-enums
              -fshort-wchar
              -ftls-model=MODEL
           -ftrapv
              -funwind-tables
              -fverbose-asm
           -fvisibility=[default|internal|hidden|protected]
              -fwrapv


     _Options only supported by LLVM_
          -fapple-kext
              -fapple-pragma-pack
              -fapplication-extension
           -fmax-type-align=N
              -ftrap-function=FUNCTION
           -ftrapv-handler=HANDLER
              -mllvm OPTION
              -mstack-alignment=N
           -mstack-probe-size=N
              -mthread-model MODEL
              -resource-dir=DIR
           -target TRIPLET


     _Options only supported by GCC_
          -fcall-saved-REG
              -fcall-used-REG
              -fdelete-dead-exceptions
           -ffixed-REG
              -fno-gnu-unique
              -finhibit-size-directive
           -fno-jump-tables
              -fleading-underscore
              -fpcc-struct-return
           -fno-plt
              -frecord-gcc-switches
              -freg-struct-return
           -fshort-double
              -fstack-reuse=REUSE_LEVEL
           -fstrict-volatile-bitfields
              -fsync-libcalls


_Developer Options_
     *Note GCC Developer Options: Developer Options.

     _Options supported by both LLVM and GCC_
          -dumpmachine
              -dumpversion
              -frandom-seed=STRING
              -ftime-report
           -print-file-name=LIBRARY
              -print-libgcc-file-name
           -print-multi-directory
              -print-multi-lib
              -print-prog-name=PROGRAM
           -print-search-dirs
              -save-temps[=cwd|obj]


     _Options only supported by LLVM_
          -ccc-arcmt-check
              -ccc-arcmt-migrate DIR
              -ccc-arcmt-modify
           -ccc-gcc-name FILE
              -ccc-install-dir DIR
              -ccc-objcmt-migrate DIR
           -ccc-pch-is-pch
              -ccc-pch-is-pth
              -ccc-print-bindings
           -ccc-print-phases
              --driver-mode=MODE
              -print-ivar-layout
           -Reverything
              -Rpass=PASS
              -Rpass-analysis=PASS
              -Rpass-missed=PASS
           -Xanalyzer
              -via-file-asm


     _Options only supported by GCC_
          -dLETTERS
              -dumpspecs
              -fchecking
              -fcompare-debug[=OPTS]
           -fcompare-debug-second
              -fdbg-cnt=COUNTER-VALUE-LIST
           -fdbg-cnt-list
              -fdisable-ipa-PASS_NAME
           -fdisable-rtl-PASS-NAME[=RANGE-LIST]
              -fdisable-tree-PASS-NAME[=RANGE-LIST]
           -fdump-class-hierarchy[-N]
              -fdump-final-insns=FILE
           -fdump-ipa-all
              -fdump-ipa-cgraph
              -fdump-ipa-inline
           -fdump-noaddr
              -fdump-passes
              -fdump-rtl-PASS[=FILENAME]
            -fdump-statistics[-OPTION]
              -fdump-tree[-SWITCH[-OPTIONS][=FILENAME]]
           -fdump-unnumbered
              -fdump-unnumbered-links
           -fdump-translation-unit[-N]
              -fenable-KIND-PASS[=RANGE-LIST]
           -fira-verbose=N
              -flto-report
              -flto-report-wpa
              -fmem-report
           -fmem-report-wpa
              -fopt-info[-OPTIONS[=FILE]]
              -fpost-ipa-mem-report
           -fpre-ipa-mem-report
              -fprofile-report
              -freport-bug
           -fsched-verbose=N
              -fstack-usage
              -fstats
           -fvar-tracking-assignments-toggle
              -gtoggle
              -print-multi-os-directory
           -print-multiarch
              -print-sysroot
              -print-sysroot-headers-suffix
           -Q
              -time[=FILE]


_Machine Dependent Options_
     *Note Hardware Models and Configurations: Submodel Options.

     _At the time of writing, this section is a placeholder.  There has
     been no attempt to verify which AAP options are valid with
     Clang/LLVM._

     _AAP Options_
          -maapopt=VAL


File: llvm.info,  Node: Overall Options,  Next: Invoking Clang/LLVM for C++,  Prev: Option Summary,  Up: Invoking LLVM

3.2 Options Controlling the Kind of Output
==========================================

Compilation can involve up to four stages: preprocessing, compilation
proper, assembly and linking, always in that order.  Clang/LLVM is
capable of preprocessing and compiling several files either into several
assembler input files, or into one assembler input file; then each
assembler input file produces an object file, and linking combines all
the object files (those newly compiled, and those specified as input)
into an executable file.

 _Note:_ Not all GCC options are supported by Clang/LLVM. *Note Option
Summary: Option Summary, for details of:
   * those options supported by both Clang/LLVM and GCC;
   * those options only supported by Clang/LLVM; and
   * those options supported only by GCC.

 For any given input file, the file name suffix determines what kind of
compilation is done:

'FILE.c'
     C source code that must be preprocessed.

'FILE.i'
     C source code that should not be preprocessed.

'FILE.ii'
     C++ source code that should not be preprocessed.

'FILE.m'
     Objective-C source code.  Note that you must link with the
     'libobjc' library to make an Objective-C program work.

'FILE.mi'
     Objective-C source code that should not be preprocessed.

'FILE.mm'
'FILE.M'
     Objective-C++ source code.  Note that you must link with the
     'libobjc' library to make an Objective-C++ program work.  Note that
     '.M' refers to a literal capital M.

'FILE.mii'
     Objective-C++ source code that should not be preprocessed.

'FILE.h'
     C, C++, Objective-C or Objective-C++ header file to be turned into
     a precompiled header (default), or C, C++ header file to be turned
     into an Ada spec (via the '-fdump-ada-spec' switch).

'FILE.cc'
'FILE.cp'
'FILE.cxx'
'FILE.cpp'
'FILE.CPP'
'FILE.c++'
'FILE.C'
     C++ source code that must be preprocessed.  Note that in '.cxx',
     the last two letters must both be literally 'x'.  Likewise, '.C'
     refers to a literal capital C.

'FILE.mm'
'FILE.M'
     Objective-C++ source code that must be preprocessed.

'FILE.mii'
     Objective-C++ source code that should not be preprocessed.

'FILE.hh'
'FILE.H'
'FILE.hp'
'FILE.hxx'
'FILE.hpp'
'FILE.HPP'
'FILE.h++'
'FILE.tcc'
     C++ header file to be turned into a precompiled header.

'FILE.s'
     Assembler code.

'FILE.S'
'FILE.sx'
     Assembler code that must be preprocessed.

'OTHER'
     An object file to be fed straight into linking.  Any file name with
     no recognized suffix is treated this way.

 The following Clang/LLVM options provide overall control of the type of
output from the compiler.

'@FILE'
     Read command-line options from FILE.  The options read are inserted
     in place of the original @FILE option.  If FILE does not exist, or
     cannot be read, then the option will be treated literally, and not
     removed.

     Options in FILE are separated by whitespace.  A whitespace
     character may be included in an option by surrounding the entire
     option in either single or double quotes.  Any character (including
     a backslash) may be included by prefixing the character to be
     included with a backslash.  The FILE may itself contain additional
     @FILE options; any such options will be processed recursively.

'-###'
     Like '-v' except the commands are not executed and arguments are
     quoted unless they contain only alphanumeric characters or './-_'.
     This is useful for shell scripts to capture the driver-generated
     command lines.

'-c'
     Compile or assemble the source files, but do not link.  The linking
     stage simply is not done.  The ultimate output is in the form of an
     object file for each source file.

     By default, the object file name for a source file is made by
     replacing the suffix '.c', '.i', '.s', etc., with '.o'.

     Unrecognized input files, not requiring compilation or assembly,
     are ignored.

'-E'
     Stop after the preprocessing stage; do not run the compiler proper.
     The output is in the form of preprocessed source code, which is
     sent to the standard output.

     Input files that don't require preprocessing are ignored.

'-emit-ast'
     Clang/LLVM option for future documentation.

'-emit-llvm'
     Clang/LLVM option for future documentation.

'-fbuild-session-file=FILE'
     Clang/LLVM option for future documentation.

'-fbuild-session-timestamp=SECS'
     Clang/LLVM option for future documentation.

'-fplugin=NAME.so'
     Load the plugin code in file NAME.so, assumed to be a shared object
     to be dlopen'd by the compiler.

     _Note:_ Unlike GCC, Clang/LLVM has no mechansim equivalent to
     '-fplugin-arg' to pass arguments to callbacks.

'--gcc-toolchain=DIR'
     Clang/LLVM option for future documentation.

'--help'
'-help'
     Print (on the standard output) a description of the command-line
     options understood by 'clang'.  If the '-v' option is also
     specified then '--help' is also passed on to the various processes
     invoked by 'clang', so that they can display the command-line
     options they accept.  If the '-Wextra' option has also been
     specified (prior to the '--help' option), then command-line options
     that have no documentation associated with them are also displayed.

     _Note:_ The '-help' (with a single hyphen) is a Clang/LLVM specific
     variant

'-o FILE'
     Place output in file FILE.  This applies to whatever sort of output
     is being produced, whether it be an executable file, an object
     file, an assembler file or preprocessed C code.

     If '-o' is not specified, the default is to put an executable file
     in 'a.out', the object file for 'SOURCE.SUFFIX' in 'SOURCE.o', its
     assembler file in 'SOURCE.s', a precompiled header file in
     'SOURCE.SUFFIX.gch', and all preprocessed C source on standard
     output.

'-ObjC'
     Clang/LLVM option for future documentation.

'-ObjC++'
     Clang/LLVM option for future documentation.

'-pipe'
     Use pipes rather than temporary files for communication between the
     various stages of compilation.  This fails to work on some systems
     where the assembler is unable to read from a pipe; but GNU
     assemblers have no trouble.  It is also not an issue where the
     Clang/LLVM integrated assembler is used.

'-Qunused-arguments'
     Clang/LLVM option for future documentation.

'-S'
     Stop after the stage of compilation proper; do not assemble.  The
     output is in the form of an assembler code file for each
     non-assembler input file specified.

     By default, the assembler file name for a source file is made by
     replacing the suffix '.c', '.i', etc., with '.s'.

     Input files that don't require compilation are ignored.

'-v'
     Print (on standard error output) the commands executed to run the
     stages of compilation.  Also print the version number of the
     compiler driver program and of the preprocessor and the compiler
     proper.

'--version'
     Display the version number and copyrights of the invoked
     Clang/LLVM.

'-working-directory DIR'
     Clang/LLVM option for future documentation.

'-x LANGUAGE'
     You can specify the input language explicitly with the '-x' option:

     Specify explicitly the LANGUAGE for the following input files
     (rather than letting the compiler choose a default based on the
     file name suffix).  This option applies to all following input
     files until the next '-x' option.  Possible values for LANGUAGE
     are:
          c  c-header  cpp-output
          c++  c++-header  c++-cpp-output
          objective-c  objective-c-header  objective-c-cpp-output
          objective-c++ objective-c++-header objective-c++-cpp-output
          assembler  assembler-with-cpp

'-x none'
     Turn off any specification of a language, so that subsequent files
     are handled according to their file name suffixes (as they are if
     '-x' has not been used at all).

'-Xclang'
     Clang/LLVM option for future documentation.


File: llvm.info,  Node: Invoking Clang/LLVM for C++,  Next: C Dialect Options,  Prev: Overall Options,  Up: Invoking LLVM

3.3 Compiling C++ Programs
==========================

C++ source files conventionally use one of the suffixes '.C', '.cc',
'.cpp', '.CPP', '.c++', '.cp', or '.cxx'; C++ header files often use
'.hh', '.hpp', '.H', or (for shared template code) '.tcc'; and
preprocessed C++ files use the suffix '.ii'.  Clang/LLVM recognizes
files with these names and compiles them as C++ programs even if you
call the compiler the same way as for compiling C programs.

 However, the use of 'clang' does not add the C++ library.  'clang++' is
a program that automatically specifies linking against the C++ library.
It treats '.c', '.h' and '.i' files as C++ source files instead of C
source files unless '-x' is used.  This program is also useful when
precompiling a C header file with a '.h' extension for use in C++
compilations.  Target specific variants will also be installed as
'ARCH-c++'.

 When you compile C++ programs, you may specify many of the same
command-line options that you use for compiling programs in any
language; or command-line options meaningful for C and related
languages; or options that are meaningful only for C++ programs.  *Note
Options Controlling C Dialect: C Dialect Options, for explanations of
options for languages related to C.  *Note Options Controlling C++
Dialect: C++ Dialect Options, for explanations of options that are
meaningful only for C++ programs.


File: llvm.info,  Node: C Dialect Options,  Next: C++ Dialect Options,  Prev: Invoking Clang/LLVM for C++,  Up: Invoking LLVM

3.4 Options Controlling C Dialect
=================================

The following Clang/LLVM options control the dialect of C (or languages
derived from C, such as C++, Objective-C and Objective-C++) that the
compiler accepts:

 _Note:_ Not all GCC options are supported by Clang/LLVM. *Note Option
Summary: Option Summary, for details of:
   * those options supported by both Clang/LLVM and GCC;
   * those options only supported by Clang/LLVM; and
   * those options supported only by GCC.

'-ansi'
     In C mode, this is equivalent to '-std=c90'.  In C++ mode, it is
     equivalent to '-std=c++98'.

     This turns off certain features of Clang/LLVM that are incompatible
     with ISO C90 (when compiling C code), or of standard C++ (when
     compiling C++ code), such as the 'asm' and 'typeof' keywords, and
     predefined macros such as 'unix' and 'vax' that identify the type
     of system you are using.  It also enables the undesirable and
     rarely used ISO trigraph feature.  For the C compiler, it disables
     recognition of C++ style '//' comments as well as the 'inline'
     keyword.

     The alternate keywords '__asm__', '__extension__', '__inline__' and
     '__typeof__' continue to work despite '-ansi'.  You would not want
     to use them in an ISO C program, of course, but it is useful to put
     them in header files that might be included in compilations done
     with '-ansi'.  Alternate predefined macros such as '__unix__' and
     '__vax__' are also available, with or without '-ansi'.

     The '-ansi' option does not cause non-ISO programs to be rejected
     gratuitously.  For that, '-Wpedantic' is required in addition to
     '-ansi'.  *Note Warning Options::.

     The macro '__STRICT_ANSI__' is predefined when the '-ansi' option
     is used.  Some header files may notice this macro and refrain from
     declaring certain functions or defining certain macros that the ISO
     standard doesn't call for; this is to avoid interfering with any
     programs that might use these names for other things.

     Functions that are normally built in but do not have semantics
     defined by ISO C (such as 'alloca' and 'ffs') are not built-in
     functions when '-ansi' is used.  *Note Other built-in functions
     provided by LLVM: Other Builtins, for details of the functions
     affected.

'-fno-asm'
     Do not recognize 'asm', 'inline' or 'typeof' as a keyword, so that
     code can use these words as identifiers.  You can use the keywords
     '__asm__', '__inline__' and '__typeof__' instead.  '-ansi' implies
     '-fno-asm'.

     In C++, this switch only affects the 'typeof' keyword, since 'asm'
     and 'inline' are standard keywords.  You may want to use the
     '-fno-gnu-keywords' flag instead, which has the same effect.  In
     C99 mode ('-std=c99' or '-std=gnu99'), this switch only affects the
     'asm' and 'typeof' keywords, since 'inline' is a standard keyword
     in ISO C99.

'-fblocks'
     Clang/LLVM option for future documentation.

'-fborland-extensions'
     Clang/LLVM option for future documentation.

'-fno-builtin'
'-fno-builtin-FUNCTION'
     Don't recognize built-in functions that do not begin with
     '__builtin_' as prefix.  *Note Other built-in functions provided by
     LLVM: Other Builtins, for details of the functions affected,
     including those which are not built-in functions when '-ansi' or
     '-std' options for strict ISO C conformance are used because they
     do not have an ISO standard meaning.

     Clang/LLVM normally generates special code to handle certain
     built-in functions more efficiently; for instance, calls to
     'alloca' may become single instructions which adjust the stack
     directly, and calls to 'memcpy' may become inline copy loops.  The
     resulting code is often both smaller and faster, but since the
     function calls no longer appear as such, you cannot set a
     breakpoint on those calls, nor can you change the behavior of the
     functions by linking with a different library.  In addition, when a
     function is recognized as a built-in function, Clang/LLVM may use
     information about that function to warn about problems with calls
     to that function, or to generate more efficient code, even if the
     resulting code still contains calls to that function.  For example,
     warnings are given with '-Wformat' for bad calls to 'printf' when
     'printf' is built in and 'strlen' is known not to modify global
     memory.

     With the '-fno-builtin-FUNCTION' option only the built-in function
     FUNCTION is disabled.  FUNCTION must not begin with '__builtin_'.
     If a function is named that is not built-in in this version of
     Clang/LLVM, this option is ignored.  There is no corresponding
     '-fbuiltin-FUNCTION' option; if you wish to enable built-in
     functions selectively when using '-fno-builtin' or
     '-ffreestanding', you may define macros such as:

          #define abs(n)          __builtin_abs ((n))
          #define strcpy(d, s)    __builtin_strcpy ((d), (s))

'-femit-all-decls'
     Clang/LLVM option for future documentation.

'-ffreestanding'

     Assert that compilation targets a freestanding environment.  This
     implies '-fno-builtin'.  A freestanding environment is one in which
     the standard library may not exist, and program startup may not
     necessarily be at 'main'.  The most obvious example is an OS
     kernel.  This is equivalent to '-fno-hosted'.

     *Note Language Standards Supported by LLVM: Standards, for details
     of freestanding and hosted environments.

'-fgnu89-inline'
     The option '-fgnu89-inline' tells Clang/LLVM to use the traditional
     GNU semantics for 'inline' functions when in C99 mode.  *Note An
     Inline Function is As Fast As a Macro: Inline.  Using this option
     is roughly equivalent to adding the 'gnu_inline' function attribute
     to all inline functions (*note Function Attributes::).

     The option '-fno-gnu89-inline' explicitly tells Clang/LLVM to use
     the C99 semantics for 'inline' when in C99 or gnu99 mode (i.e., it
     specifies the default behavior).  This option is not supported in
     '-std=c90' or '-std=gnu90' mode.

     The preprocessor macros '__GNUC_GNU_INLINE__' and
     '__GNUC_STDC_INLINE__' may be used to check which semantics are in
     effect for 'inline' functions.  *Note (cpp)Common Predefined
     Macros::.

'-fno-gnu-inline-asm'
     Clang/LLVM option for future documentation.

'-fhosted'

     Assert that compilation targets a hosted environment.  This implies
     '-fbuiltin'.  A hosted environment is one in which the entire
     standard library is available, and in which 'main' has a return
     type of 'int'.  Examples are nearly everything except a kernel.
     This is equivalent to '-fno-freestanding'.

'-flax-vector-conversions'
     Allow implicit conversions between vectors with differing numbers
     of elements and/or incompatible element types.  This option should
     not be used for new code.

'-fms-compatibility'

     Clang/LLVM option for future documentation.  Also valid for C++.

'-fms-compatibility-version=N'

     Clang/LLVM option for future documentation.  Also valid for C++.

'-fms-extensions'
     Accept some non-standard constructs used in Microsoft header files.

     In C++ code, this allows member names in structures to be similar
     to previous types declarations.

          typedef int UOW;
          struct ABC {
            UOW UOW;
          };

     Some cases of unnamed fields in structures and unions are only
     accepted with this option.  *Note Unnamed struct/union fields
     within structs/unions: Unnamed Fields, for details.

     Note that this option is off for all targets but x86 targets using
     ms-abi.

'-fmsc-version=N'

     Clang/LLVM option for future documentation.  Also valid for C++.

'-fopenmp'
     Enable handling of OpenMP directives '#pragma omp' in C/C++.  When
     '-fopenmp' is specified, the compiler generates parallel code
     according to the OpenMP Application Program Interface v4.0
     <http://www.openmp.org/>.  This option implies '-pthread', and thus
     is only supported on targets that have support for '-pthread'.
     Unlike GCC there is no '-fopenmp-simd', which would be implied by
     '-fopenmp'.

'-fpascal-strings'
     Clang/LLVM option for future documentation.

'-fsigned-bitfields'
'-funsigned-bitfields'
'-fno-signed-bitfields'
'-fno-unsigned-bitfields'
     These options control whether a bit-field is signed or unsigned,
     when the declaration does not use either 'signed' or 'unsigned'.
     By default, such a bit-field is signed, because this is consistent:
     the basic integer types such as 'int' are signed types.

'-fsigned-char'
     Let the type 'char' be signed, like 'signed char'.

     Note that this is equivalent to '-fno-unsigned-char', which is the
     negative form of '-funsigned-char'.  Likewise, the option
     '-fno-signed-char' is equivalent to '-funsigned-char'.

'-fno-spell-checking'
     Clang/LLVM option for future documentation.

'-std='
     Determine the language standard.  *Note Language Standards
     Supported by LLVM: Standards, for details of these standard
     versions.  This option is currently only supported when compiling C
     or C++.

     The compiler can accept several base standards, such as 'c90' or
     'c++98', and GNU dialects of those standards, such as 'gnu90' or
     'gnu++98'.  When a base standard is specified, the compiler accepts
     all programs following that standard plus those using GNU
     extensions that do not contradict it.  For example, '-std=c90'
     turns off certain features of Clang/LLVM that are incompatible with
     ISO C90, such as the 'asm' and 'typeof' keywords, but not other GNU
     extensions that do not have a meaning in ISO C90, such as omitting
     the middle term of a '?:' expression.  On the other hand, when a
     GNU dialect of a standard is specified, all features supported by
     the compiler are enabled, even when those features change the
     meaning of the base standard.  As a result, some strict-conforming
     programs may be rejected.  The particular standard is used by
     '-Wpedantic' to identify which features are GNU extensions given
     that version of the standard.  For example '-std=gnu90 -Wpedantic'
     warns about C++ style '//' comments, while '-std=gnu99 -Wpedantic'
     does not.

     A value for this option must be provided; possible values are

     'c90'
     'c89'
     'iso9899:1990'
          Support all ISO C90 programs (certain GNU extensions that
          conflict with ISO C90 are disabled).  Same as '-ansi' for C
          code.

     'iso9899:199409'
          ISO C90 as modified in amendment 1.

     'c99'
     'c9x'
     'iso9899:1999'
     'iso9899:199x'
          ISO C99.  This standard is substantially completely supported,
          modulo bugs and floating-point issues (mainly but not entirely
          relating to optional C99 features from Annexes F and G). See <http://gcc.gnu.org/c99status.html>
          for more information.  The names 'c9x' and 'iso9899:199x' are
          deprecated.

     'c11'
     'c1x'
     'iso9899:2011'
          ISO C11, the 2011 revision of the ISO C standard.  This
          standard is substantially completely supported, modulo bugs,
          floating-point issues (mainly but not entirely relating to
          optional C11 features from Annexes F and G) and the optional
          Annexes K (Bounds-checking interfaces) and L (Analyzability).
          The name 'c1x' is deprecated.

     'gnu90'
     'gnu89'
          GNU dialect of ISO C90 (including some C99 features).

     'gnu99'
     'gnu9x'
          GNU dialect of ISO C99.  The name 'gnu9x' is deprecated.

     'gnu11'
     'gnu1x'
          GNU dialect of ISO C11.  This is the default for C code.  The
          name 'gnu1x' is deprecated.

     'c++98'
     'c++03'
          The 1998 ISO C++ standard plus the 2003 technical corrigendum
          and some additional defect reports.  Same as '-ansi' for C++
          code.

     'gnu++98'
     'gnu++03'
          GNU dialect of '-std=c++98'.

     'c++11'
     'c++0x'
          The 2011 ISO C++ standard plus amendments.  The name 'c++0x'
          is deprecated.

     'gnu++11'
     'gnu++0x'
          GNU dialect of '-std=c++11'.  The name 'gnu++0x' is
          deprecated.

     'c++14'
     'c++1y'
          The 2014 ISO C++ standard plus amendments.  The name 'c++1y'
          is deprecated.

     'gnu++14'
     'gnu++1y'
          GNU dialect of '-std=c++14'.  This is the default for C++
          code.  The name 'gnu++1y' is deprecated.

     'c++1z'
          The next revision of the ISO C++ standard, tentatively planned
          for 2017.  Support is highly experimental, and will almost
          certainly change in incompatible ways in future releases.

     'gnu++1z'
          GNU dialect of '-std=c++1z'.  Support is highly experimental,
          and will almost certainly change in incompatible ways in
          future releases.

'-traditional'
     This option caused older versions of GCC to attempt to emulate a
     pre-standard C compiler.  On both GCC and Clang/LLVM is is now only
     supported with the '-E' switch.  The preprocessor continues to
     support a pre-standard mode.  *Note Preprocessor Options::.

     _Note:_ The GCC option '-traditional-cpp' is not supported by
     Clang/LLVM.

'-trigraphs'
     Support ISO C trigraphs.  The '-ansi' option (and '-std' options
     for strict ISO C conformance) implies '-trigraphs'.

'-funique-section-names'
     Clang/LLVM option for future documentation.

'-funsigned-char'
     Let the type 'char' be unsigned, like 'unsigned char'.

     Each kind of machine has a default for what 'char' should be.  It
     is either like 'unsigned char' by default or like 'signed char' by
     default.

     Ideally, a portable program should always use 'signed char' or
     'unsigned char' when it depends on the signedness of an object.
     But many programs have been written to use plain 'char' and expect
     it to be signed, or expect it to be unsigned, depending on the
     machines they were written for.  This option, and its inverse, let
     you make such a program work with the opposite default.

     The type 'char' is always a distinct type from each of 'signed
     char' or 'unsigned char', even though its behavior is always just
     like one of those two.

'-fwritable-strings'
     Clang/LLVM option for future documentation.


File: llvm.info,  Node: C++ Dialect Options,  Next: Objective-C and Objective-C++ Dialect Options,  Prev: C Dialect Options,  Up: Invoking LLVM

3.5 Options Controlling C++ Dialect
===================================

This section describes the command-line options that are only meaningful
for C++ programs.  You can also use most of the Clang/LLVM compiler
options regardless of what language your program is in.  For example,
you might compile a file 'firstClass.C' like this:

     clang++ -g -frepo -O -c firstClass.C

In this example, only '-frepo' is an option meant only for C++ programs;
you can use the other options with any language supported by LLVM.

 _Note:_ Not all GCC options are supported by Clang/LLVM. *Note Option
Summary: Option Summary, for details of:
   * those options supported by both Clang/LLVM and GCC;
   * those options only supported by Clang/LLVM; and
   * those options supported only by GCC.

 Here is a list of Clang/LLVM options that are _only_ for compiling C++
programs:

'-fno-access-control'
     Turn off all access checking.  This switch is mainly useful for
     working around bugs in the access control code.

'-fno-assume-sane-operator-new'
     Clang/LLVM option for future documentation.

'-fcheck-new'
     Check that the pointer returned by 'operator new' is non-null
     before attempting to modify the storage allocated.  This check is
     normally unnecessary because the C++ standard specifies that
     'operator new' only returns '0' if it is declared 'throw()', in
     which case the compiler always checks the return value even without
     this option.  In all other cases, when 'operator new' has a
     non-empty exception specification, memory exhaustion is signalled
     by throwing 'std::bad_alloc'.  See also 'new (nothrow)'.

'-fconstexpr-depth=N'
     Set the maximum nested evaluation depth for C++11 constexpr
     functions to N.  A limit is needed to detect endless recursion
     during constant expression evaluation.  The minimum specified by
     the standard is 512.

'-fcxx-exceptions'
     Clang/LLVM option for future documentation.

'-fdelayed-template-parsing'
     Clang/LLVM option for future documentation.

'-fno-elide-constructors'
     The C++ standard allows an implementation to omit creating a
     temporary that is only used to initialize another object of the
     same type.  Specifying this option disables that optimization, and
     forces G++ to call the copy constructor in all cases.

'-ffor-scope'
'-fno-for-scope'
     If '-ffor-scope' is specified, the scope of variables declared in a
     for-init-statement is limited to the 'for' loop itself, as
     specified by the C++ standard.  If '-fno-for-scope' is specified,
     the scope of variables declared in a for-init-statement extends to
     the end of the enclosing scope, as was the case in old versions of
     G++, and other (traditional) implementations of C++.

     If neither flag is given, the default is to follow the standard,
     but to allow and give a warning for old-style code that would
     otherwise be invalid, or have different behavior.

'-ffriend-injection'
     Inject friend functions into the enclosing namespace, so that they
     are visible outside the scope of the class in which they are
     declared.  Friend functions were documented to work this way in the
     old Annotated C++ Reference Manual.

     However, in ISO C++ a friend function that is not declared in an
     enclosing scope can only be found using argument dependent lookup.
     Clang/LLVM defaults to the standard behavior.

     This option is for compatibility, and may be removed in a future
     release of Clang/LLVM.

'-fno-gnu-keywords'
     Do not recognize 'typeof' as a keyword, so that code can use this
     word as an identifier.  You can use the keyword '__typeof__'
     instead.  '-ansi' implies '-fno-gnu-keywords'.

'-fno-implicit-templates'
     Never emit code for non-inline templates that are instantiated
     implicitly (i.e. by use); only emit code for explicit
     instantiations.  *Note Template Instantiation::, for more
     information.

'-fno-implement-inlines'
     To save space, do not emit out-of-line copies of inline functions
     controlled by '#pragma implementation'.  This causes linker errors
     if these functions are not inlined everywhere they are called.

'-fno-operator-names'
     Do not treat the operator name keywords 'and', 'bitand', 'bitor',
     'compl', 'not', 'or' and 'xor' as synonyms as keywords.

'-fpermissive'
     Downgrade some diagnostics about nonconformant code from errors to
     warnings.  Thus, using '-fpermissive' allows some nonconforming
     code to compile.

'-fno-rtti'
     Disable generation of information about every class with virtual
     functions for use by the C++ run-time type identification features
     ('dynamic_cast' and 'typeid').  If you don't use those parts of the
     language, you can save some space by using this flag.  Note that
     exception handling uses the same information, but G++ generates it
     as needed.  The 'dynamic_cast' operator can still be used for casts
     that do not require run-time type information, i.e. casts to 'void
     *' or to unambiguous base classes.

'-fsized-deallocation'
     Enable the built-in global declarations
          void operator delete (void *, std::size_t) noexcept;
          void operator delete[] (void *, std::size_t) noexcept;
     as introduced in C++14.  This is useful for user-defined
     replacement deallocation functions that, for example, use the size
     of the object to make deallocation faster.  Enabled by default
     under '-std=c++14' and above.  The flag '-Wsized-deallocation'
     warns about places that might want to add a definition.

'-fshow-overloads=OPT'

     Clang/LLVM option for future documentation.  Permitted values of
     OPT are 'all' and 'best'.

'-ftemplate-backtrace-limit=N'
     Set the maximum number of template instantiation notes for a single
     warning or error to N.  The default value is 10.

'-ftemplate-depth=N'
     Set the maximum instantiation depth for template classes to N.  A
     limit on the template instantiation depth is needed to detect
     endless recursions during template class instantiation.  ANSI/ISO
     C++ conforming programs must not rely on a maximum depth greater
     than 17 (changed to 1024 in C++11).  The default value is 900, as
     the compiler can run out of stack space before hitting 1024 in some
     situations.

'-fno-threadsafe-statics'
     Do not emit the extra code to use the routines specified in the C++
     ABI for thread-safe initialization of local statics.  You can use
     this option to reduce code size slightly in code that doesn't need
     to be thread-safe.

'-fuse-cxa-atexit'
     Register destructors for objects with static storage duration with
     the '__cxa_atexit' function rather than the 'atexit' function.
     This option is required for fully standards-compliant handling of
     static destructors, but only works if your C library supports
     '__cxa_atexit'.

'-fvisibility-inlines-hidden'
     This switch declares that the user does not attempt to compare
     pointers to inline functions or methods where the addresses of the
     two functions are taken in different shared objects.

     The effect of this is that Clang/LLVM may, effectively, mark inline
     methods with '__attribute__ ((visibility ("hidden")))' so that they
     do not appear in the export table of a DSO and do not require a PLT
     indirection when used within the DSO.  Enabling this option can
     have a dramatic effect on load and link times of a DSO as it
     massively reduces the size of the dynamic export table when the
     library makes heavy use of templates.

     The behavior of this switch is not quite the same as marking the
     methods as hidden directly, because it does not affect static
     variables local to the function or cause the compiler to deduce
     that the function is defined in only one shared object.

     You may mark a method as having a visibility explicitly to negate
     the effect of the switch for that method.  For example, if you do
     want to compare pointers to a particular inline method, you might
     mark it as having default visibility.  Marking the enclosing class
     with explicit visibility has no effect.

     Explicitly instantiated inline methods are unaffected by this
     option as their linkage might otherwise cross a shared library
     boundary.  *Note Template Instantiation::.

'-fvisibility-ms-compat'
     This flag attempts to use visibility settings to make Clang/LLVM's
     C++ linkage model compatible with that of Microsoft Visual Studio.

     The flag makes these changes to Clang/LLVM's linkage model:

       1. It sets the default visibility to 'hidden', like
          '-fvisibility=hidden'.

       2. Types, but not their members, are not hidden by default.

       3. The One Definition Rule is relaxed for types without explicit
          visibility specifications that are defined in more than one
          shared object: those declarations are permitted if they are
          permitted when this option is not used.

     In new code it is better to use '-fvisibility=hidden' and export
     those classes that are intended to be externally visible.
     Unfortunately it is possible for code to rely, perhaps
     accidentally, on the Visual Studio behavior.

     Among the consequences of these changes are that static data
     members of the same type with the same name but defined in
     different shared objects are different, so changing one does not
     change the other; and that pointers to function members defined in
     different shared objects may not compare equal.  When this flag is
     given, it is a violation of the ODR to define types with the same
     name differently.

'-nostdinc++'
     Do not search for header files in the standard directories specific
     to C++, but do still search the other standard directories.  (This
     option is used when building the C++ library.)

 In addition, these optimization, warning, and code generation options
have meanings only for C++ programs:

'-Wabi (C++ and Objective-C++ only)'
     Warn when Clang/LLVM it generates code that is probably not
     compatible with the vendor-neutral C++ ABI.  Normally '-Wabi' will
     warn only if there is a check added later in a release series for
     an ABI issue discovered since the initial release.  Unlike GCC,
     there is no option '-fabi-version=N') to select an older ABI, nor
     is there an option to warn about an explicit version number,
     '-Wabi=N'.

     Although an effort has been made to warn about all such cases,
     there are probably some cases that are not warned about, even
     though Clang/LLVM is generating incompatible code.  There may also
     be cases where warnings are emitted even though the code that is
     generated is compatible.

     You should rewrite your code to avoid these warnings if you are
     concerned about the fact that code generated by G++ may not be
     binary compatible with code generated by other compilers.

'-Wno-conversion-null (C++ and Objective-C++ only)'
     Do not warn for conversions between 'NULL' and non-pointer types.
     '-Wconversion-null' is enabled by default.

'-Wctor-dtor-privacy (C++ and Objective-C++ only)'
     Warn when a class seems unusable because all the constructors or
     destructors in that class are private, and it has neither friends
     nor public static member functions.  Also warn if there are no
     non-private methods, and there's at least one private member
     function that isn't a constructor or destructor.

'-Wdelete-non-virtual-dtor (C++ and Objective-C++ only)'
     Warn when 'delete' is used to destroy an instance of a class that
     has virtual functions and non-virtual destructor.  It is unsafe to
     delete an instance of a derived class through a pointer to a base
     class if the base class does not have a virtual destructor.  This
     warning is enabled by '-Wall'.

'-Weffc++ (C++ and Objective-C++ only)'
     Warn about violations of the following style guidelines from Scott
     Meyers' 'Effective C++' series of books:

        * Define a copy constructor and an assignment operator for
          classes with dynamically-allocated memory.

        * Prefer initialization to assignment in constructors.

        * Have 'operator=' return a reference to '*this'.

        * Don't try to return a reference when you must return an
          object.

        * Distinguish between prefix and postfix forms of increment and
          decrement operators.

        * Never overload '&&', '||', or ','.

     This option also enables '-Wnon-virtual-dtor', which is also one of
     the effective C++ recommendations.  However, the check is extended
     to warn about the lack of virtual destructor in accessible
     non-polymorphic bases classes too.

     When selecting this option, be aware that the standard library
     headers do not obey all of these guidelines; use 'grep -v' to
     filter out those warnings.

'-Wnarrowing (C++ and Objective-C++ only)'
     Warn when a narrowing conversion prohibited by C++11 occurs within
     '{ }', e.g.

          int i = { 2.2 }; // error: narrowing from double to int

     This flag is included in '-Wall' and '-Wc++11-compat'.

     With '-std=c++11', '-Wno-narrowing' suppresses for non-constants
     the diagnostic required by the standard.  Note that this does not
     affect the meaning of well-formed code; narrowing conversions are
     still considered ill-formed in SFINAE context.

'-Wnon-virtual-dtor (C++ and Objective-C++ only)'
     Warn when a class has virtual functions and an accessible
     non-virtual destructor itself or in an accessible polymorphic base
     class, in which case it is possible but unsafe to delete an
     instance of a derived class through a pointer to the class itself
     or base class.  This warning is automatically enabled if '-Weffc++'
     is specified.

'-Wold-style-cast (C++ and Objective-C++ only)'
     Warn if an old-style (C-style) cast to a non-void type is used
     within a C++ program.  The new-style casts ('dynamic_cast',
     'static_cast', 'reinterpret_cast', and 'const_cast') are less
     vulnerable to unintended effects and much easier to search for.

'-Woverloaded-virtual (C++ and Objective-C++ only)'
     Warn when a function declaration hides virtual functions from a
     base class.  For example, in:

          struct A {
            virtual void f();
          };

          struct B: public A {
            void f(int);
          };

     the 'A' class version of 'f' is hidden in 'B', and code like:

          B* b;
          b->f();

     fails to compile.

'-Wreorder (C++ and Objective-C++ only)'
     Warn when the order of member initializers given in the code does
     not match the order in which they must be executed.  For instance:

          struct A {
            int i;
            int j;
            A(): j (0), i (1) { }
          };

     The compiler rearranges the member initializers for 'i' and 'j' to
     match the declaration order of the members, emitting a warning to
     that effect.  This warning is enabled by '-Wall'.

'-Wsign-promo (C++ and Objective-C++ only)'
     Warn when overload resolution chooses a promotion from unsigned or
     enumerated type to a signed type, over a conversion to an unsigned
     type of the same size.  Previous versions of G++ tried to preserve
     unsignedness, but the standard mandates the current behavior.


File: llvm.info,  Node: Objective-C and Objective-C++ Dialect Options,  Next: Diagnostic Message Formatting Options,  Prev: C++ Dialect Options,  Up: Invoking LLVM

3.6 Options Controlling Objective-C and Objective-C++ Dialects
==============================================================

(_Note:_ This manual does not describe the Objective-C and Objective-C++
languages themselves.  *Note Language Standards Supported by LLVM:
Standards, for references.)

 This section describes the command-line options that are only
meaningful for Objective-C and Objective-C++ programs.  You can also use
most of the language-independent Clang/LLVM compiler options.  For
example, you might compile a file 'some_class.m' like this:

     clang -g -fgnu-runtime -O -c some_class.m

In this example, '-fgnu-runtime' is an option meant only for Objective-C
and Objective-C++ programs; you can use the other options with any
language supported by Clang/LLVM.

 Note that since Objective-C is an extension of the C language,
Objective-C compilations may also use options specific to the C
front-end (e.g., '-Wtraditional').  Similarly, Objective-C++
compilations may use C++-specific options (e.g., '-Wabi').

 _Note:_ Not all GCC options are supported by Clang/LLVM. *Note Option
Summary: Option Summary, for details of:
   * those options supported by both Clang/LLVM and GCC;
   * those options only supported by Clang/LLVM; and
   * those options supported only by GCC.

 Here is a list of Clang/LLVM options that are _only_ for compiling
Objective-C and Objective-C++ programs:

'-fconstant-string-class=CLASS-NAME'
     Use CLASS-NAME as the name of the class to instantiate for each
     literal string specified with the syntax '@"..."'.  The default
     class name is 'NXConstantString' if the GNU runtime is being used,
     and 'NSConstantString' if the NeXT runtime is being used (see
     below).  The '-fconstant-cfstrings' option, if also present,
     overrides the '-fconstant-string-class' setting and cause '@"..."'
     literals to be laid out as constant CoreFoundation strings.

'-fgnu-runtime'
     Generate object code compatible with the standard GNU Objective-C
     runtime.  This is the default for most types of systems.

'-fnext-runtime'
     Generate output compatible with the NeXT runtime.  This is the
     default for NeXT-based systems, including Darwin and Mac OS X.  The
     macro '__NEXT_RUNTIME__' is predefined if (and only if) this option
     is used.

'-fobjc-abi-version=N'
     Use version N of the Objective-C ABI for the selected runtime.
     This option is currently supported only for the NeXT runtime.  In
     that case, Version 0 is the traditional (32-bit) ABI without
     support for properties and other Objective-C 2.0 additions.
     Version 1 is the traditional (32-bit) ABI with support for
     properties and other Objective-C 2.0 additions.  Version 2 is the
     modern (64-bit) ABI. If nothing is specified, the default is
     Version 0 on 32-bit target machines, and Version 2 on 64-bit target
     machines.

'-fobjc-arc'
     Clang/LLVM option for future documentation.

'-fobjc-arc-exceptions'
     Clang/LLVM option for future documentation.

'-fobjc-call-cxx-cdtors'
     For each Objective-C class, check if any of its instance variables
     is a C++ object with a non-trivial default constructor.  If so,
     synthesize a special '- (id) .cxx_construct' instance method which
     runs non-trivial default constructors on any such instance
     variables, in order, and then return 'self'.  Similarly, check if
     any instance variable is a C++ object with a non-trivial
     destructor, and if so, synthesize a special '- (void)
     .cxx_destruct' method which runs all such default destructors, in
     reverse order.

     The '- (id) .cxx_construct' and '- (void) .cxx_destruct' methods
     thusly generated only operate on instance variables declared in the
     current Objective-C class, and not those inherited from
     superclasses.  It is the responsibility of the Objective-C runtime
     to invoke all such methods in an object's inheritance hierarchy.
     The '- (id) .cxx_construct' methods are invoked by the runtime
     immediately after a new object instance is allocated; the '- (void)
     .cxx_destruct' methods are invoked immediately before the runtime
     deallocates an object instance.

     As of this writing, only the NeXT runtime on Mac OS X 10.4 and
     later has support for invoking the '- (id) .cxx_construct' and '-
     (void) .cxx_destruct' methods.

'-fobjc-exceptions'
     Enable syntactic support for structured exception handling in
     Objective-C, similar to what is offered by C++ and Java.  This
     option is required to use the Objective-C keywords '@try',
     '@throw', '@catch', '@finally' and '@synchronized'.  This option is
     available with both the GNU runtime and the NeXT runtime (but not
     available in conjunction with the NeXT runtime on Mac OS X 10.2 and
     earlier).

'-fobjc-gc'
     Enable garbage collection (GC) in Objective-C and Objective-C++
     programs.  This option is only available with the NeXT runtime; the
     GNU runtime has a different garbage collection implementation that
     does not require special compiler flags.

'-fobjc-gc-only'
     Clang/LLVM option for future documentation.

'-fobjc-runtime=RUNTIME'
     Clang/LLVM option for future documentation.

'-objcmt-atomic-property'

     Undocumented GCC option also supported by Clang/LLVM.

'-objcmt-migrate-CATEGORY'

     Undocumented GCC option also supported by Clang/LLVM.

'-objcmt-ns-nonatomic-iosonly'

     Undocumented GCC option also supported by Clang/LLVM.

'-objcmt-returns-innerpointer-property'

     Undocumented GCC option also supported by Clang/LLVM.

'-objcmt-whitelist-dir-path=DIR'
     Clang/LLVM option for future documentation.

'-rewrite-legacy-objc'
     Clang/LLVM option for future documentation.

'-rewrite-objc'
     Clang/LLVM option for future documentation.

 In addition, these optimization, warning, and code generation options
have meanings only for C++ programs:

'-Wno-protocol (Objective-C and Objective-C++ only)'
     If a class is declared to implement a protocol, a warning is issued
     for every method in the protocol that is not implemented by the
     class.  The default behavior is to issue a warning for every method
     not explicitly implemented in the class, even if a method
     implementation is inherited from the superclass.  If you use the
     '-Wno-protocol' option, then methods inherited from the superclass
     are considered to be implemented, and no warning is issued for
     them.

'-Wselector (Objective-C and Objective-C++ only)'
     Warn if multiple methods of different types for the same selector
     are found during compilation.  The check is performed on the list
     of methods in the final stage of compilation.  Additionally, a
     check is performed for each selector appearing in a
     '@selector(...)' expression, and a corresponding method for that
     selector has been found during compilation.  Because these checks
     scan the method table only at the end of compilation, these
     warnings are not produced if the final stage of compilation is not
     reached, for example because an error is found during compilation,
     or because the '-fsyntax-only' option is being used.

'-Wstrict-selector-match (Objective-C and Objective-C++ only)'
     Warn if multiple methods with differing argument and/or return
     types are found for a given selector when attempting to send a
     message using this selector to a receiver of type 'id' or 'Class'.
     When this flag is off (which is the default behavior), the compiler
     omits such warnings if any differences found are confined to types
     that share the same size and alignment.

'-Wundeclared-selector (Objective-C and Objective-C++ only)'
     Warn if a '@selector(...)' expression referring to an undeclared
     selector is found.  A selector is considered undeclared if no
     method with that name has been declared before the '@selector(...)'
     expression, either explicitly in an '@interface' or '@protocol'
     declaration, or implicitly in an '@implementation' section.  This
     option always performs its checks as soon as a '@selector(...)'
     expression is found, while '-Wselector' only performs its checks in
     the final stage of compilation.  This also enforces the coding
     style convention that methods and selectors must be declared before
     being used.


File: llvm.info,  Node: Diagnostic Message Formatting Options,  Next: Warning Options,  Prev: Objective-C and Objective-C++ Dialect Options,  Up: Invoking LLVM

3.7 Options to Control Diagnostic Messages Formatting
=====================================================

Traditionally, diagnostic messages have been formatted irrespective of
the output device's aspect (e.g. its width, ...).  You can use the
Clang/LLVM options described below to control the formatting algorithm
for diagnostic messages, e.g. how many characters per line, how often
source location information should be reported.  Note that some language
front ends may not honor these options.

 _Note:_ Not all GCC options are supported by Clang/LLVM. *Note Option
Summary: Option Summary, for details of:
   * those options supported by both Clang/LLVM and GCC;
   * those options only supported by Clang/LLVM; and
   * those options supported only by GCC.

'-fansi-escape-codes'
     Clang/LLVM option for future documentation.

'-fcolor-diagnostics'
     Clang/LLVM option for future documentation.

'-fdiagnostics-color[=WHEN]'
'-fno-diagnostics-color'
     Use color in diagnostics.  WHEN is 'never', 'always', or 'auto'.
     The default depends on how the compiler has been configured, it can
     be any of the above WHEN options or also 'never' if 'GCC_COLORS'
     environment variable isn't present in the environment, and 'auto'
     otherwise.  'auto' means to use color only when the standard error
     is a terminal.  The forms '-fdiagnostics-color' and
     '-fno-diagnostics-color' are aliases for
     '-fdiagnostics-color=always' and '-fdiagnostics-color=never',
     respectively.

     The colors are defined by the environment variable 'GCC_COLORS'.
     Its value is a colon-separated list of capabilities and Select
     Graphic Rendition (SGR) substrings.  SGR commands are interpreted
     by the terminal or terminal emulator.  (See the section in the
     documentation of your text terminal for permitted values and their
     meanings as character attributes.)  These substring values are
     integers in decimal representation and can be concatenated with
     semicolons.  Common values to concatenate include '1' for bold, '4'
     for underline, '5' for blink, '7' for inverse, '39' for default
     foreground color, '30' to '37' for foreground colors, '90' to '97'
     for 16-color mode foreground colors, '38;5;0' to '38;5;255' for
     88-color and 256-color modes foreground colors, '49' for default
     background color, '40' to '47' for background colors, '100' to
     '107' for 16-color mode background colors, and '48;5;0' to
     '48;5;255' for 88-color and 256-color modes background colors.

     The default 'GCC_COLORS' is
          error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01
     where '01;31' is bold red, '01;35' is bold magenta, '01;36' is bold
     cyan, '01;32' is bold green and '01' is bold.  Setting 'GCC_COLORS'
     to the empty string disables colors.  Supported capabilities are as
     follows.

     'error='
          SGR substring for error: markers.

     'warning='
          SGR substring for warning: markers.

     'note='
          SGR substring for note: markers.

     'caret='
          SGR substring for caret line.

     'locus='
          SGR substring for location information, 'file:line' or
          'file:line:column' etc.

     'quote='
          SGR substring for information printed within quotes.

'-fno-diagnostics-fixit-info'
     Clang/LLVM option for future documentation.

'-fdiagnostics-parseable-fixits'
     Clang/LLVM option for future documentation.

'-fdiagnostics-print-source-range-info'
     Clang/LLVM option for future documentation.

'-fdiagnostics-show-location=once'
     Only meaningful in line-wrapping mode.  Instructs the diagnostic
     messages reporter to emit source location information _once_; that
     is, in case the message is too long to fit on a single physical
     line and has to be wrapped, the source location won't be emitted
     (as prefix) again, over and over, in subsequent continuation lines.
     This is the default behavior.

'-fdiagnostics-show-location=every-line'
     Only meaningful in line-wrapping mode.  Instructs the diagnostic
     messages reporter to emit the same source location information (as
     prefix) for physical lines that result from the process of breaking
     a message which is too long to fit on a single line.

'-fdiagnostics-show-note-include-stack'
     Clang/LLVM option for future documentation.

'-fno-diagnostics-show-option'
     By default, each diagnostic emitted includes text indicating the
     command-line option that directly controls the diagnostic (if such
     an option is known to the diagnostic machinery).  Specifying the
     '-fno-diagnostics-show-option' flag suppresses that behavior.

'-fdiagnostics-show-template-tree'
     Clang/LLVM option for future documentation.

'-fno-elide-type'
     Clang/LLVM option for future documentation.

'-fmessage-length=N'
     Try to format error messages so that they fit on lines of about N
     characters.  If N is zero, then no line-wrapping is done; each
     error message appears on a single line.  This is the default for
     all front ends.

'-serialize-diagnostics FILE'
     Clang/LLVM option for future documentation.

'-fno-show-source-location'
     Clang/LLVM option for future documentation.


File: llvm.info,  Node: Warning Options,  Next: Debugging Options,  Prev: Diagnostic Message Formatting Options,  Up: Invoking LLVM

3.8 Options to Request or Suppress Warnings
===========================================

Warnings are diagnostic messages that report constructions that are not
inherently erroneous but that are risky or suggest there may have been
an error.

 _Note:_ Not all GCC options are supported by Clang/LLVM. *Note Option
Summary: Option Summary, for details of:
   * those options supported by both Clang/LLVM and GCC;
   * those options only supported by Clang/LLVM; and
   * those options supported only by GCC.

 The following language-independent options do not enable specific
warnings but control the kinds of diagnostics produced by Clang/LLVM.

'-fsyntax-only'
     Check the code for syntax errors, but don't do anything beyond
     that.

'-Wpedantic'
'-pedantic'
     Issue all the warnings demanded by strict ISO C and ISO C++; reject
     all programs that use forbidden extensions, and some other programs
     that do not follow ISO C and ISO C++.  For ISO C, follows the
     version of the ISO C standard specified by any '-std' option used.

     Valid ISO C and ISO C++ programs should compile properly with or
     without this option (though a rare few require '-ansi' or a '-std'
     option specifying the required version of ISO C).  However, without
     this option, certain GNU extensions and traditional C and C++
     features are supported as well.  With this option, they are
     rejected.

     '-Wpedantic' does not cause warning messages for use of the
     alternate keywords whose names begin and end with '__'.  Pedantic
     warnings are also disabled in the expression that follows
     '__extension__'.  However, only system header files should use
     these escape routes; application programs should avoid them.  *Note
     Alternate Keywords::.

     Some users try to use '-Wpedantic' to check programs for strict ISO
     C conformance.  They soon find that it does not do quite what they
     want: it finds some non-ISO practices, but not all--only those for
     which ISO C _requires_ a diagnostic, and some others for which
     diagnostics have been added.

     A feature to report any failure to conform to ISO C might be useful
     in some instances, but would require considerable additional work
     and would be quite different from '-Wpedantic'.  We don't have
     plans to support such a feature in the near future.

     Where the standard specified with '-std' represents a GNU extended
     dialect of C, such as 'gnu90' or 'gnu99', there is a corresponding
     "base standard", the version of ISO C on which the GNU extended
     dialect is based.  Warnings from '-Wpedantic' are given where they
     are required by the base standard.  (It does not make sense for
     such warnings to be given only for features not in the specified
     GNU C dialect, since by definition the GNU dialects of C include
     all features the compiler supports with the given option, and there
     would be nothing to warn about.)

'-pedantic-errors'
     Give an error whenever the "base standard" (see '-Wpedantic')
     requires a diagnostic, in some cases where there is undefined
     behavior at compile-time and in some other cases that do not
     prevent compilation of programs that are valid according to the
     standard.  This is not equivalent to '-Werror=pedantic', since
     there are errors enabled by this option and not enabled by the
     latter and vice versa.

'-w'
     Inhibit all warning messages.

'-Wall'
     This enables all the warnings about constructions that some users
     consider questionable, and that are easy to avoid (or modify to
     prevent the warning), even in conjunction with macros.  This also
     enables some language-specific warnings described in *note C++
     Dialect Options:: and *note Objective-C and Objective-C++ Dialect
     Options::.

     '-Wall' turns on the following warning flags:

          -Waddress
          -Warray-bounds=1 (only with -O2)
          -Wc++11-compat  -Wc++14-compat
          -Wchar-subscripts
          -Wenum-compare (in C/ObjC; this is on by default in C++)
          -Wimplicit-int (C and Objective-C only)
          -Wimplicit-function-declaration (C and Objective-C only)
          -Wcomment
          -Wformat
          -Wmain (only for C/ObjC and unless -ffreestanding)
          -Wmaybe-uninitialized
          -Wmissing-braces (only for C/ObjC)
          -Wnonnull
          -Wopenmp-simd
          -Wparentheses
          -Wpointer-sign
          -Wreorder
          -Wreturn-type
          -Wsequence-point
          -Wsign-compare (only in C++)
          -Wstrict-aliasing
          -Wstrict-overflow=1
          -Wswitch
          -Wtrigraphs
          -Wuninitialized
          -Wunknown-pragmas
          -Wunused-function
          -Wunused-label
          -Wunused-value
          -Wunused-variable
          -Wvolatile-register-var


     Note that some warning flags are not implied by '-Wall'.  Some of
     them warn about constructions that users generally do not consider
     questionable, but which occasionally you might wish to check for;
     others warn about constructions that are necessary or hard to avoid
     in some cases, and there is no simple way to modify the code to
     suppress the warning.  Some of them are enabled by '-Wextra' but
     many of them must be enabled individually.

'-Werror'
     Make all warnings into errors.

'-Werror=WARNING'
     Make the specified warning into an error.  The specifier for a
     warning is appended; for example '-Werror=switch' turns the
     warnings controlled by '-Wswitch' into errors.  This switch takes a
     negative form, to be used to negate '-Werror' for specific
     warnings; for example '-Wno-error=switch' makes '-Wswitch' warnings
     not be errors, even when '-Werror' is in effect.

     The warning message for each controllable warning includes the
     option that controls the warning.  That option can then be used
     with '-Werror=' and '-Wno-error=' as described above.  (Printing of
     the option in the warning message can be disabled using the
     '-fno-diagnostics-show-option' flag.)

     Note that specifying '-Werror='FOO automatically implies '-W'FOO.
     However, '-Wno-error='FOO does not imply anything.

'-Weverything'

     Enable all warning messages.  In general this is not all that
     useful, since some warnings are contradictory.  In particular it is
     impossible to write a C++ program that compiles under
     '-Weverything' without warnings.

'-Wextra'
     This enables some extra warning flags that are not enabled by
     '-Wall'.  (This option used to be called '-W'.  The older name is
     still supported, but the newer name is more descriptive.)

          -Wclobbered
          -Wempty-body
          -Wignored-qualifiers
          -Wmissing-field-initializers
          -Wmissing-parameter-type (C only)
          -Wold-style-declaration (C only)
          -Woverride-init
          -Wsign-compare
          -Wtype-limits
          -Wuninitialized
          -Wunused-parameter (only with -Wunused or -Wall)
          -Wunused-but-set-parameter (only with -Wunused or -Wall)


     The option '-Wextra' also prints warning messages for the following
     cases:

        * A pointer is compared against integer zero with '<', '<=',
          '>', or '>='.

        * (C++ only) An enumerator and a non-enumerator both appear in a
          conditional expression.

        * (C++ only) Ambiguous virtual bases.

        * (C++ only) Subscripting an array that has been declared
          'register'.

        * (C++ only) Taking the address of a variable that has been
          declared 'register'.

        * (C++ only) A base class is not initialized in a derived
          class's copy constructor.

'-Wfatal-errors'
'-Wno-fatal-errors'
     This option causes the compiler to abort compilation on the first
     error occurred rather than trying to keep going and printing
     further error messages.

 You can request many specific warnings with options beginning with
'-W', for example '-Wimplicit' to request warnings on implicit
declarations.  Each of these specific warning options also has a
negative form beginning '-Wno-' to turn off warnings; for example,
'-Wno-implicit'.  This manual lists only one of the two forms, whichever
is not the default, although both are listed in the index.  For further
preprocessor-specific options also refer to *Note Preprocessor
Options::.  For further language-specific options also refer to *Note C
Dialect Options::, *note C++ Dialect Options:: and *note Objective-C and
Objective-C++ Dialect Options::.  For convenience, options in these
sections are cross-referenced from here.

 Some options, such as '-Wall' and '-Wextra', turn on other options,
such as '-Wunused', which may turn on further options, such as
'-Wunused-value'.  The combined effect of positive and negative forms is
that more specific options have priority over less specific ones,
independently of their position in the command-line.  For options of the
same specificity, the last one takes effect.  Options enabled or
disabled via pragmas (*note Diagnostic Pragmas::) take effect as if they
appeared at the end of the command-line.

 When an unrecognized warning option is requested (e.g.,
'-Wunknown-warning'), Clang/LLVM emits a diagnostic stating that the
option is not recognized.  However, if the '-Wno-' form is used, the
behavior is slightly different: no diagnostic is produced for
'-Wno-unknown-warning' unless other diagnostics are being produced.
This allows the use of new '-Wno-' options with old compilers, but if
something goes wrong, the compiler warns that an unrecognized option is
present.

 _Note:_ This behavior differs from GCC, which will silently accept any
options beginning with '-Wno-' even if the warning is unknown.

'-Wno-abstract-final-class'
     Clang/LLVM option for future documentation.

'-Wabstract-vbase-init'
     Clang/LLVM option for future documentation.

'-Waddress'
     Warn about suspicious uses of memory addresses.  These include
     using the address of a function in a conditional expression, such
     as 'void func(void); if (func)', and comparisons against the memory
     address of a string literal, such as 'if (x == "abc")'.  Such uses
     typically indicate a programmer error: the address of a function
     always evaluates to true, so their use in a conditional usually
     indicate that the programmer forgot the parentheses in a function
     call; and comparisons against string literals result in unspecified
     behavior and are not portable in C, so they usually indicate that
     the programmer intended to use 'strcmp'.  This warning is enabled
     by '-Wall'.

'-Waddress-of-array-temporary'
     Clang/LLVM option for future documentation.

'-Waddress-of-temporary'
     Clang/LLVM option for future documentation.

'-Waggregate-return'
     Warn if any functions that return structures or unions are defined
     or called.  (In languages where you can return an array, this also
     elicits a warning.)

'-Wambiguous-macro'
     Clang/LLVM option for future documentation.

'-Wambiguous-member-template'
     Clang/LLVM option for future documentation.

'-Wanalyzer-incompatible-plugin'
     Clang/LLVM option for future documentation.

'-Wanonymous-pack-parens'
     Clang/LLVM option for future documentation.

'-Warc'
     Clang/LLVM option for future documentation.

'-Warc-bridge-casts-disallowed-in-nonarc'
     Clang/LLVM option for future documentation.

'-Warc-maybe-repeated-use-of-weak'
     Clang/LLVM option for future documentation.

'-Warc-non-pod-memaccess'
     Clang/LLVM option for future documentation.

'-Warc-performSelector-leaks'
     Clang/LLVM option for future documentation.

'-Warc-repeated-use-of-weak'
     Clang/LLVM option for future documentation.

'-Warc-retain-cycles'
     Clang/LLVM option for future documentation.

'-Warc-unsafe-retained-assign'
     Clang/LLVM option for future documentation.

'-Warray-bounds'
     Unlike GCC, Clang/LLVM does not support the '-Warray-bounds=N'
     variant.  This option warns about subscripts to arrays that are
     always out of bounds.  This warning is enabled by '-Wall'.

'-Warray-bounds-pointer-arithmetic'
     Clang/LLVM option for future documentation.

'-Wasm'
     Clang/LLVM option for future documentation.

'-Wasm-operand-widths'
     Clang/LLVM option for future documentation.

'-Wno-assign-enum'
     Clang/LLVM option for future documentation.

'-Watomic-properties'
     Clang/LLVM option for future documentation.

'-Watomic-property-with-user-defined-accessor'
     Clang/LLVM option for future documentation.

'-Wno-attributes'
     Do not warn if an unexpected '__attribute__' is used, such as
     unrecognized attributes, function attributes applied to variables,
     etc.  This does not stop errors for incorrect use of supported
     attributes.

'-Wno-auto-import'
     Clang/LLVM option for future documentation.

'-Wno-auto-storage-class'
     Clang/LLVM option for future documentation.

'-Wauto-var-id'
     Clang/LLVM option for future documentation.

'-Wavailability'
     Clang/LLVM option for future documentation.

'-Wbackslash-newline-escape'
     Clang/LLVM option for future documentation.

'-Wbad-array-new-length'
     Clang/LLVM option for future documentation.

'-Wbind-to-temporary-copy'
     Clang/LLVM option for future documentation.

'-Wbitfield-constant-conversion'
     Clang/LLVM option for future documentation.

'-Wbitwise-op-parentheses'
     Clang/LLVM option for future documentation.

'-Wbool-conversion'
     Clang/LLVM option for future documentation.

'-Wbool-conversions'
     Clang/LLVM option for future documentation.

'-Wbridge-cast'
     Clang/LLVM option for future documentation.

'-Wno-builtin-macro-redefined'
     Do not warn if certain built-in macros are redefined.  This
     suppresses warnings for redefinition of '__TIMESTAMP__',
     '__TIME__', '__DATE__', '__FILE__', and '__BASE_FILE__'.

'-Wbuiltin-requires-header'
     Clang/LLVM option for future documentation.

'-Wc++-compat (C and Objective-C only)'
     Warn about ISO C constructs that are outside of the common subset
     of ISO C and ISO C++, e.g. request for implicit conversion from
     'void *' to a pointer to non-'void' type.

'-Wc++0x-compat (C and Objective-C only)'

     Undocumented warning supported by both GCC and Clang/LLVM for
     future documentation.

'-Wc++0x-extensions'
     Clang/LLVM option for future documentation.

'-Wc++0x-narrowing'
     Clang/LLVM option for future documentation.

'-Wc++11-compat (C++ and Objective-C++ only)'
     Warn about C++ constructs whose meaning differs between ISO C++
     1998 and ISO C++ 2011, e.g., identifiers in ISO C++ 1998 that are
     keywords in ISO C++ 2011.  This warning turns on '-Wnarrowing' and
     is enabled by '-Wall'.

'-Wc++11-compat-pedantic'
     Clang/LLVM option for future documentation.

'-Wc++11-compat-reserved-user-defined-literal'
     Clang/LLVM option for future documentation.

'-Wc11-extensions'
     Clang/LLVM option for future documentation.

'-Wc++11-extensions'
     Clang/LLVM option for future documentation.

'-Wc++11-extra-semi'
     Clang/LLVM option for future documentation.

'-Wc++11-long-long'
     Clang/LLVM option for future documentation.

'-Wc++11-narrowing'
     Clang/LLVM option for future documentation.

'-Wc++1y-extensions'
     Clang/LLVM option for future documentation.

'-Wc++14-compat (C++ and Objective-C++ only)'
     Warn about C++ constructs whose meaning differs between ISO C++
     2011 and ISO C++ 2014.  This warning is enabled by '-Wall'.

'-Wc++98-c++11-compat'
     Clang/LLVM option for future documentation.

'-Wc++98-c++11-compat-pedantic'
     Clang/LLVM option for future documentation.

'-Wc++98-compat-bind-to-temporary-copy'
     Clang/LLVM option for future documentation.

'-Wc++98-compat'
     Clang/LLVM option for future documentation.

'-Wc++98-compat-local-type-template-args'
     Clang/LLVM option for future documentation.

'-Wc++98-compat-pedantic'
     Clang/LLVM option for future documentation.

'-Wc++98-compat-unnamed-type-template-args'
     Clang/LLVM option for future documentation.

'-Wc99-compat'
     Clang/LLVM option for future documentation.

'-Wno-c99-extensions'
     Clang/LLVM option for future documentation.

'-Wcast-align'
     Warn whenever a pointer is cast such that the required alignment of
     the target is increased.  For example, warn if a 'char *' is cast
     to an 'int *' on machines where integers can only be accessed at
     two- or four-byte boundaries.

'-Wcast-qual'
     Warn whenever a pointer is cast so as to remove a type qualifier
     from the target type.  For example, warn if a 'const char *' is
     cast to an ordinary 'char *'.

     Also warn when making a cast that introduces a type qualifier in an
     unsafe way.  For example, casting 'char **' to 'const char **' is
     unsafe, as in this example:

            /* p is char ** value.  */
            const char **q = (const char **) p;
            /* Assignment of readonly string to const char * is OK.  */
            *q = "string";
            /* Now char** pointer points to read-only memory.  */
            **p = 'b';

'-Wcast-of-sel-type'
     Clang/LLVM option for future documentation.

'-WCFString-literal'
     Clang/LLVM option for future documentation.

'-Wchar-align'
     Clang/LLVM option for future documentation.

'-Wchar-subscripts'
     Warn if an array subscript has type 'char'.  This is a common cause
     of error, as programmers often forget that this type is signed on
     some machines.  This warning is enabled by '-Wall'.

'-Wcomment'
'-Wcomments'
     Warn whenever a comment-start sequence '/*' appears in a '/*'
     comment, or whenever a Backslash-Newline appears in a '//' comment.
     This warning is enabled by '-Wall'.

'-Wcompare-distinct-pointer-types'
     Clang/LLVM option for future documentation.

'-Wcomplex-component-init'
     Clang/LLVM option for future documentation.

'-Wconditional-type-mismatch'
     Clang/LLVM option for future documentation.

'-Wconditional-uninitialized'
     Clang/LLVM option for future documentation.

'-Wconfig-macros'
     Clang/LLVM option for future documentation.

'-Wconstant-conversion'
     Clang/LLVM option for future documentation.

'-Wconstant-logical-operand'
     Clang/LLVM option for future documentation.

'-Wconstexpr-not-const'
     Clang/LLVM option for future documentation.

'-Wconsumed'
     Clang/LLVM option for future documentation.

'-Wconversion'
     Warn for implicit conversions that may alter a value.  This
     includes conversions between real and integer, like 'abs (x)' when
     'x' is 'double'; conversions between signed and unsigned, like
     'unsigned ui = -1'; and conversions to smaller types, like 'sqrtf
     (M_PI)'.  Do not warn for explicit casts like 'abs ((int) x)' and
     'ui = (unsigned) -1', or if the value is not changed by the
     conversion like in 'abs (2.0)'.  Warnings about conversions between
     signed and unsigned integers can be disabled by using
     '-Wno-sign-conversion'.

     For C++, also warn for confusing overload resolution for
     user-defined conversions; and conversions that never use a type
     conversion operator: conversions to 'void', the same type, a base
     class or a reference to them.  Warnings about conversions between
     signed and unsigned integers are disabled by default in C++ unless
     '-Wsign-conversion' is explicitly enabled.

'-Wcovered-switch-default'
     Clang/LLVM option for future documentation.

'-Wcustom-atomic-properties'
     Clang/LLVM option for future documentation.

'-Wdangling-else'
     Clang/LLVM option for future documentation.

'-Wdangling-field'
     Clang/LLVM option for future documentation.

'-Wdangling-initializer-list'
     Clang/LLVM option for future documentation.

'-Wdate-time'
     Warn when macros '__TIME__', '__DATE__' or '__TIMESTAMP__' are
     encountered as they might prevent bit-wise-identical reproducible
     compilations.

'-Wdelegating-ctor-cycles'
     Clang/LLVM option for future documentation.

'-Wdelete-incomplete (C++ and Objective-C++ only)'
     Warn when deleting a pointer to incomplete type, which may cause
     undefined behavior at runtime.  This warning is enabled by default.

'-Wno-deprecated'
     Do not warn about usage of deprecated features.  *Note Deprecated
     Features::.

'-Wno-deprecated-declarations'
     Do not warn about uses of functions (*note Function Attributes::),
     variables (*note Variable Attributes::), and types (*note Type
     Attributes::) marked as deprecated by using the 'deprecated'
     attribute.

'-Wdeprecated-increment-bool'
     Clang/LLVM option for future documentation.

'-Wdeprecated-implementations'
     Clang/LLVM option for future documentation.

'-Wdeprecated-objc-isa-usage'
     Clang/LLVM option for future documentation.

'-Wdeprecated-objc-pointer-introspection'
     Clang/LLVM option for future documentation.

'-Wdeprecated-objc-pointer-introspection-performSelector'
     Clang/LLVM option for future documentation.

'-Wdeprecated-register'
     Clang/LLVM option for future documentation.

'-Wdeprecated-writable-strings'
     Clang/LLVM option for future documentation.

'-Wdirect-ivar-access'
     Clang/LLVM option for future documentation.

'-Wdisabled-macro-expansion'
     Clang/LLVM option for future documentation.

'-Wdisabled-optimization'
     Warn if a requested optimization pass is disabled.  This warning
     does not generally indicate that there is anything wrong with your
     code; it merely indicates that LLVM's optimizers are unable to
     handle the code effectively.  Often, the problem is that your code
     is too big or too complex; LLVM refuses to optimize programs when
     the optimization itself is likely to take inordinate amounts of
     time.

'-Wdiscard-qual'
     Clang/LLVM option for future documentation.

'-Wdistributed-object-modifiers'
     Clang/LLVM option for future documentation.

'-Wno-div-by-zero'
     Do not warn about compile-time integer division by zero.
     Floating-point division by zero is not warned about, as it can be a
     legitimate way of obtaining infinities and NaNs.

'-Wdivision-by-zero'
     Clang/LLVM option for future documentation.

'-Wdocumentation-deprecated-sync'
     Clang/LLVM option for future documentation.

'-Wdocumentation'
     Clang/LLVM option for future documentation.

'-Wdocumentation-html'
     Clang/LLVM option for future documentation.

'-Wdocumentation-pedantic'
     Clang/LLVM option for future documentation.

'-Wdocumentation-unknown-command'
     Clang/LLVM option for future documentation.

'-Wdollar-in-identifier-extension'
     Clang/LLVM option for future documentation.

'-Wdouble-promotion (C, C++, Objective-C and Objective-C++ only)'
     Give a warning when a value of type 'float' is implicitly promoted
     to 'double'.  CPUs with a 32-bit "single-precision" floating-point
     unit implement 'float' in hardware, but emulate 'double' in
     software.  On such a machine, doing computations using 'double'
     values is much more expensive because of the overhead required for
     software emulation.

     It is easy to accidentally do computations with 'double' because
     floating-point literals are implicitly of type 'double'.  For
     example, in:
          float area(float radius)
          {
             return 3.14159 * radius * radius;
          }
     the compiler performs the entire computation with 'double' because
     the floating-point literal is a 'double'.

'-Wduplicate-decl-specifier'
     Clang/LLVM option for future documentation.

'-Wduplicate-enum'
     Clang/LLVM option for future documentation.

'-Wduplicate-method-arg'
     Clang/LLVM option for future documentation.

'-Wduplicate-method-match'
     Clang/LLVM option for future documentation.

'-Wdynamic-class-memaccess'
     Clang/LLVM option for future documentation.

'-Wembedded-directive'
     Clang/LLVM option for future documentation.

'-Wempty-body'
     Warn if an empty body occurs in an 'if', 'else' or 'do while'
     statement.  This warning is also enabled by '-Wextra'.

'-Wempty-translation-unit'
     Clang/LLVM option for future documentation.

'-Wno-endif-labels'
     Do not warn whenever an '#else' or an '#endif' are followed by
     text.

'-Wenum-compare'
     Warn about a comparison between values of different enumerated
     types.  In C++ enumeral mismatches in conditional expressions are
     also diagnosed and the warning is enabled by default.  In C this
     warning is enabled by '-Wall'.

'-Wenum-conversion'
     Clang/LLVM option for future documentation.

'-Wexit-time-destructors'
     Clang/LLVM option for future documentation.

'-Wexplicit-ownership-type'
     Clang/LLVM option for future documentation.

'-Wextended-offsetof'
     Clang/LLVM option for future documentation.

'-Wextern-c-compat'
     Clang/LLVM option for future documentation.

'-Wextern-initializer'
     Clang/LLVM option for future documentation.

'-Wno-extra-qualification'
     Clang/LLVM option for future documentation.

'-Wextra-semi'
     Clang/LLVM option for future documentation.

'-Wextra-tokens'
     Clang/LLVM option for future documentation.

'-Wflexible-array-extensions'
     Clang/LLVM option for future documentation.

'-Wfloat-conversion'
     Warn for implicit conversions that reduce the precision of a real
     value.  This includes conversions from real to integer, and from
     higher precision real to lower precision real values.  This option
     is also enabled by '-Wconversion'.

'-Wfloat-equal'
     Warn if floating-point values are used in equality comparisons.

     The idea behind this is that sometimes it is convenient (for the
     programmer) to consider floating-point values as approximations to
     infinitely precise real numbers.  If you are doing this, then you
     need to compute (by analyzing the code, or in some other way) the
     maximum or likely maximum error that the computation introduces,
     and allow for it when performing comparisons (and when producing
     output, but that's a different problem).  In particular, instead of
     testing for equality, you should check to see whether the two
     values have ranges that overlap; and this is done with the
     relational operators, so equality comparisons are probably
     mistaken.

'-Wformat'
'-Wformat=0'
'-Wformat=1'
     Check calls to 'printf' and 'scanf', etc., to make sure that the
     arguments supplied have types appropriate to the format string
     specified, and that the conversions specified in the format string
     make sense.  This includes standard functions, and others specified
     by format attributes (*note Function Attributes::), in the
     'printf', 'scanf', 'strftime' and 'strfmon' (an X/Open extension,
     not in the C standard) families (or other target-specific
     families).  Which functions are checked without format attributes
     having been specified depends on the standard version selected, and
     such checks of functions without the attribute specified are
     disabled by '-ffreestanding' or '-fno-builtin'.

     The formats are checked against the format features supported by
     GNU libc version 2.2.  These include all ISO C90 and C99 features,
     as well as features from the Single Unix Specification and some BSD
     and GNU extensions.  Other library implementations may not support
     all these features; LLVM does not support warning about features
     that go beyond a particular library's limitations.  However, if
     '-Wpedantic' is used with '-Wformat', warnings are given about
     format features not in the selected standard version (but not for
     'strfmon' formats, since those are not in any version of the C
     standard).  *Note Options Controlling C Dialect: C Dialect Options.

     Option '-Wformat' is equivalent to '-Wformat=1', and '-Wno-format'
     is equivalent to '-Wformat=0'.  Since '-Wformat' also checks for
     null format arguments for several functions, '-Wformat' also
     implies '-Wnonnull'.  Some aspects of this level of format checking
     can be disabled by the options: '-Wno-format-contains-nul',
     '-Wno-format-extra-args', and '-Wno-format-zero-length'.
     '-Wformat' is enabled by '-Wall'.

'-Wformat=2'
     Enable '-Wformat' plus additional format checks.  Currently
     equivalent to '-Wformat -Wformat-nonliteral -Wformat-security
     -Wformat-y2k'.

'-Wno-format-extra-args'
     If '-Wformat' is specified, do not warn about excess arguments to a
     'printf' or 'scanf' format function.  The C standard specifies that
     such arguments are ignored.

     Where the unused arguments lie between used arguments that are
     specified with '$' operand number specifications, normally warnings
     are still given, since the implementation could not know what type
     to pass to 'va_arg' to skip the unused arguments.  However, in the
     case of 'scanf' formats, this option suppresses the warning if the
     unused arguments are all pointers, since the Single Unix
     Specification says that such unused arguments are allowed.

'-Wformat-invalid-specifier'
     Clang/LLVM option for future documentation.

'-Wformat-non-iso'
     Clang/LLVM option for future documentation.

'-Wformat-nonliteral'
     If '-Wformat' is specified, also warn if the format string is not a
     string literal and so cannot be checked, unless the format function
     takes its format arguments as a 'va_list'.

'-Wformat-pedantic'
     Clang/LLVM option for future documentation.

'-Wformat-security'
     If '-Wformat' is specified, also warn about uses of format
     functions that represent possible security problems.  At present,
     this warns about calls to 'printf' and 'scanf' functions where the
     format string is not a string literal and there are no format
     arguments, as in 'printf (foo);'.  This may be a security hole if
     the format string came from untrusted input and contains '%n'.
     (This is currently a subset of what '-Wformat-nonliteral' warns
     about, but in future warnings may be added to '-Wformat-security'
     that are not included in '-Wformat-nonliteral'.)

'-Wformat-y2k'
     If '-Wformat' is specified, also warn about 'strftime' formats that
     may yield only a two-digit year.

'-Wno-format-zero-length'
     If '-Wformat' is specified, do not warn about zero-length formats.
     The C standard specifies that zero-length formats are allowed.

'-Wfour-char-constants'
     Clang/LLVM option for future documentation.

'-Wframe-larger-than=LEN'
     Warn if the size of a function frame is larger than LEN bytes.  The
     computation done to determine the stack frame size is approximate
     and not conservative.  The actual requirements may be somewhat
     greater than LEN even if you do not get a warning.  In addition,
     any space allocated via 'alloca', variable-length arrays, or
     related constructs is not included by the compiler when determining
     whether or not to issue a warning.

     _Note:_ It appears that Clang/LLVM may just silently ignore this
     option.  Some experimentation for any particular architecture is
     advised.

'-Wgcc-compat'
     Clang/LLVM option for future documentation.

'-Wglobal-constructors'
     Clang/LLVM option for future documentation.

'-Wgnu-array-member-paren-init'
     Clang/LLVM option for future documentation.

'-Wgnu-conditional-omitted-operand'
     Clang/LLVM option for future documentation.

'-Wgnu-designator'
     Clang/LLVM option for future documentation.

'-Wgnu'
     Clang/LLVM option for future documentation.

'-Wgnu-static-float-init'
     Clang/LLVM option for future documentation.

'-Wheader-guard'
     Clang/LLVM option for future documentation.

'-Wheader-hygiene'
     Clang/LLVM option for future documentation.

'-Widiomatic-parentheses'
     Clang/LLVM option for future documentation.

'-Wignored-attributes'
     Clang/LLVM option for future documentation.

'-Wignored-qualifiers (C and C++ only)'
     Warn if the return type of a function has a type qualifier such as
     'const'.  For ISO C such a type qualifier has no effect, since the
     value returned by a function is not an lvalue.  For C++, the
     warning is only emitted for scalar types or 'void'.  ISO C
     prohibits qualified 'void' return types on function definitions, so
     such return types always receive a warning even without this
     option.

     This warning is also enabled by '-Wextra'.

'-Wimplicit (C and Objective-C only)'
     Same as '-Wimplicit-int' and '-Wimplicit-function-declaration'.
     This warning is enabled by '-Wall'.

'-Wimplicit-atomic-properties'
     Clang/LLVM option for future documentation.

'-Wimplicit-conversion-floating-point-to-bool'
     Clang/LLVM option for future documentation.

'-Wimplicit-exception-spec-mismatch'
     Clang/LLVM option for future documentation.

'-Wimplicit-fallthrough'
     Clang/LLVM option for future documentation.

'-Wimplicit-fallthrough-per-function'
     Clang/LLVM option for future documentation.

'-Wimplicit-function-declaration (C and Objective-C only)'
     Give a warning whenever a function is used before being declared.
     In C99 mode ('-std=c99' or '-std=gnu99'), this warning is enabled
     by default and it is made into an error by '-pedantic-errors'.
     This warning is also enabled by '-Wall'.

'-Wimplicit-int (C and Objective-C only)'
     Warn when a declaration does not specify a type.  This warning is
     enabled by '-Wall'.

'-Wimplicit-retain-self'
     Clang/LLVM option for future documentation.

'-Wimport-preprocessor-directive-pedantic'
     Clang/LLVM option for future documentation.

'-Wincompatible-library-redeclaration'
     Clang/LLVM option for future documentation.

'-Wno-incompatible-pointer-types (C and Objective-C only)'
     Do not warn when there is a conversion between pointers that have
     incompatible types.  This warning is for cases not covered by
     '-Wno-pointer-sign', which warns for pointer argument passing or
     assignment with different signedness.

'-Wincompatible-pointer-types-discards-qualifiers'
     Clang/LLVM option for future documentation.

'-Wno-incomplete-module'
     Clang/LLVM option for future documentation.

'-Wincomplete-implementation'
     Clang/LLVM option for future documentation.

'-Wincomplete-umbrella'
     Clang/LLVM option for future documentation.

'-Wno-inherited-variadic-ctor (C++ and Objective-C++ only)'
     Suppress warnings about use of C++11 inheriting constructors when
     the base class inherited from has a C variadic constructor; the
     warning is on by default because the ellipsis is not inherited.

'-Winit-self (C, C++, Objective-C and Objective-C++ only)'
     Warn about uninitialized variables that are initialized with
     themselves.  Note this option can only be used with the
     '-Wuninitialized' option.

     For example, LLVM warns about 'i' being uninitialized in the
     following snippet only when '-Winit-self' has been specified:
          int f()
          {
            int i = i;
            return i;
          }

     This warning is enabled by '-Wall' in C++.

'-Winitializer-overrides'
     Clang/LLVM option for future documentation.

'-Winline'
     Warn if a function that is declared as inline cannot be inlined.
     Even with this option, the compiler does not warn about failures to
     inline functions declared in system headers.

     The compiler uses a variety of heuristics to determine whether or
     not to inline a function.  For example, the compiler takes into
     account the size of the function being inlined and the amount of
     inlining that has already been done in the current function.
     Therefore, seemingly insignificant changes in the source program
     can cause the warnings produced by '-Winline' to appear or
     disappear.

'-Wno-int-conversion (C and Objective-C only)'
     Do not warn about incompatible integer to pointer and pointer to
     integer conversions.  This warning is about implicit conversions;
     for explicit conversions the warnings '-Wno-int-to-pointer-cast'
     and '-Wno-pointer-to-int-cast' may be used.

'-Wint-conversions'
     Clang/LLVM option for future documentation.

'-Wno-int-to-pointer-cast'
     Suppress warnings from casts to pointer type of an integer of a
     different size.  In C++, casting to a pointer type of smaller size
     is an error.  'Wint-to-pointer-cast' is enabled by default.

'-Wno-int-to-void-pointer-cast'
     Clang/LLVM option for future documentation.

'-Winteger-overflow'
     Clang/LLVM option for future documentation.

'-Winvalid-constexpr'
     Clang/LLVM option for future documentation.

'-Winvalid-iboutlet'
     Clang/LLVM option for future documentation.

'-Winvalid-noreturn'
     Clang/LLVM option for future documentation.

'-Wno-invalid-offsetof (C++ and Objective-C++ only)'
     Suppress warnings from applying the 'offsetof' macro to a non-POD
     type.  According to the 2014 ISO C++ standard, applying 'offsetof'
     to a non-standard-layout type is undefined.  In existing C++
     implementations, however, 'offsetof' typically gives meaningful
     results.  This flag is for users who are aware that they are
     writing nonportable code and who have deliberately chosen to ignore
     the warning about it.

     The restrictions on 'offsetof' may be relaxed in a future version
     of the C++ standard.

'-Winvalid-pch'
     Warn if a precompiled header (*note Precompiled Headers::) is found
     in the search path but can't be used.

'-Winvalid-pp-token'
     Clang/LLVM option for future documentation.

'-Winvalid-source-encoding'
     Clang/LLVM option for future documentation.

'-Winvalid-token-paste'
     Clang/LLVM option for future documentation.

'-Wno-keyword-compat'
     Clang/LLVM option for future documentation.

'-Wknr-promoted-parameter'
     Clang/LLVM option for future documentation.

'-Wlanguage-extension-token'
     Clang/LLVM option for future documentation.

'-Wlarge-by-value-copy'
     Clang/LLVM option for future documentation.

'-Wlarger-than=LEN'
'-Wlarger-than-LEN'
     Warn whenever an object of larger than LEN bytes is defined.

     _Note:_ It appears that Clang/LLVM may just silently ignore this
     option.  Some experimentation for any particular architecture is
     advised.

'-Wno-liblto'
     Clang/LLVM option for future documentation.

'-Wno-literal-conversion'
     Clang/LLVM option for future documentation.

'-Wno-literal-range'
     Clang/LLVM option for future documentation.

'-Wlocal-type-template-args'
     Clang/LLVM option for future documentation.

'-Wlogical-not-parentheses'
     Warn about logical not used on the left hand side operand of a
     comparison.  This option does not warn if the RHS operand is of a
     boolean type.  Its purpose is to detect suspicious code like the
     following:
          int a;
          ...
          if (!a > 1) { ... }

     It is possible to suppress the warning by wrapping the LHS into
     parentheses:
          if ((!a) > 1) { ... }

     This warning is enabled by '-Wall'.

'-Wlogical-op-parentheses'
     Clang/LLVM option for future documentation.

'-Wlong-long'
     Warn if 'long long' type is used.  This is enabled by either
     '-Wpedantic' or '-Wtraditional' in ISO C90 and C++98 modes.  To
     inhibit the warning messages, use '-Wno-long-long'.

'-Wloop-analysis'
     Clang/LLVM option for future documentation.

'-Wmain'
     Warn if the type of 'main' is suspicious.  'main' should be a
     function with external linkage, returning int, taking either zero
     arguments, two, or three arguments of appropriate types.  This
     warning is enabled by default in C++ and is enabled by either
     '-Wall' or '-Wpedantic'.

'-Wmain-return-type'
     Clang/LLVM option for future documentation.

'-Wmalformed-warning-check'
     Clang/LLVM option for future documentation.

'-Wmethod-signatures'
     Clang/LLVM option for future documentation.

'-Wmicrosoft'
     Clang/LLVM option for future documentation.

'-Wmicrosoft-exists'
     Clang/LLVM option for future documentation.

'-Wmismatched-parameter-types'
     Clang/LLVM option for future documentation.

'-Wmismatched-return-types'
     Clang/LLVM option for future documentation.

'-Wmismatched-tags'
     Clang/LLVM option for future documentation.

'-Wmissing-braces'
     Warn if an aggregate or union initializer is not fully bracketed.
     In the following example, the initializer for 'a' is not fully
     bracketed, but that for 'b' is fully bracketed.  This warning is
     enabled by '-Wall' in C.

          int a[2][2] = { 0, 1, 2, 3 };
          int b[2][2] = { { 0, 1 }, { 2, 3 } };

     This warning is enabled by '-Wall'.

'-Wmissing-field-initializers'
     Warn if a structure's initializer has some fields missing.  For
     example, the following code causes such a warning, because 'x.h' is
     implicitly zero:

          struct s { int f, g, h; };
          struct s x = { 3, 4 };

     This option does not warn about designated initializers, so the
     following modification does not trigger a warning:

          struct s { int f, g, h; };
          struct s x = { .f = 3, .g = 4 };

     In C++ this option does not warn either about the empty { }
     initializer, for example:

          struct s { int f, g, h; };
          s x = { };

     This warning is included in '-Wextra'.  To get other '-Wextra'
     warnings without this one, use '-Wextra
     -Wno-missing-field-initializers'.

'-Wmissing-format-attribute'

     Warn about function pointers that might be candidates for 'format'
     attributes.  Note these are only possible candidates, not absolute
     ones.  GCC guesses that function pointers with 'format' attributes
     that are used in assignment, initialization, parameter passing or
     return statements should have a corresponding 'format' attribute in
     the resulting type.  I.e. the left-hand side of the assignment or
     initialization, the type of the parameter variable, or the return
     type of the containing function respectively should also have a
     'format' attribute to avoid the warning.

     GCC also warns about function definitions that might be candidates
     for 'format' attributes.  Again, these are only possible
     candidates.  GCC guesses that 'format' attributes might be
     appropriate for any function that calls a function like 'vprintf'
     or 'vscanf', but this might not always be the case, and some
     functions for which 'format' attributes are appropriate may not be
     detected.

'-Wmissing-include-dirs (C, C++, Objective-C and Objective-C++ only)'
     Warn if a user-supplied include directory does not exist.

'-Wmissing-method-return-type'
     Clang/LLVM option for future documentation.

'-Wmissing-selector-name'
     Clang/LLVM option for future documentation.

'-Wmissing-sysroot'
     Clang/LLVM option for future documentation.

'-Wmissing-variable-declarations'
     Clang/LLVM option for future documentation.

'-Wmodule-conflict'
     Clang/LLVM option for future documentation.

'-Wmost'
     Clang/LLVM option for future documentation.

'-Wno-multichar'
     Do not warn if a multicharacter constant (''FOOF'') is used.
     Usually they indicate a typo in the user's code, as they have
     implementation-defined values, and should not be used in portable
     code.

'-Wmultiple-move-vbase'
     Clang/LLVM option for future documentation.

'-Wnested-anon-types'
     Clang/LLVM option for future documentation.

'-Wnewline-eof'
     Clang/LLVM option for future documentation.

'-Wnon-gcc'
     Clang/LLVM option for future documentation.

'-Wnon-literal-null-conversion'
     Clang/LLVM option for future documentation.

'-Wnon-pod-varargs'
     Clang/LLVM option for future documentation.

'-Wnonnull'
     Warn about passing a null pointer for arguments marked as requiring
     a non-null value by the 'nonnull' function attribute.

     '-Wnonnull' is included in '-Wall' and '-Wformat'.  It can be
     disabled with the '-Wno-nonnull' option.

'-Wnonportable-cfstrings'
     Clang/LLVM option for future documentation.

'-WNSObject-attribute'
     Clang/LLVM option for future documentation.

'-Wnull-arithmetic'
     Clang/LLVM option for future documentation.

'-Wnull-character'
     Clang/LLVM option for future documentation.

'-Wnull-conversion'
     Clang/LLVM option for future documentation.

'-Wnull-dereference'
     Warn if the compiler detects paths that trigger erroneous or
     undefined behavior due to dereferencing a null pointer.  This
     option is only active when '-fdelete-null-pointer-checks' is
     active, which is enabled by optimizations in most targets.  The
     precision of the warnings depends on the optimization options used.

'-Wobjc-autosynthesis-property-ivar-name-match'
     Clang/LLVM option for future documentation.

'-Wobjc-cocoa-api'
     Clang/LLVM option for future documentation.

'-Wobjc-forward-class-redefinition'
     Clang/LLVM option for future documentation.

'-Wobjc-interface-ivars'
     Clang/LLVM option for future documentation.

'-Wobjc-literal-compare'
     Clang/LLVM option for future documentation.

'-Wobjc-method-access'
     Clang/LLVM option for future documentation.

'-Wobjc-missing-property-synthesis'
     Clang/LLVM option for future documentation.

'-Wobjc-missing-super-calls'
     Clang/LLVM option for future documentation.

'-Wobjc-noncopy-retain-block-property'
     Clang/LLVM option for future documentation.

'-Wobjc-nonunified-exceptions'
     Clang/LLVM option for future documentation.

'-Wobjc-property-implementation'
     Clang/LLVM option for future documentation.

'-Wobjc-property-implicit-mismatch'
     Clang/LLVM option for future documentation.

'-Wobjc-property-matches-cocoa-ownership-rule'
     Clang/LLVM option for future documentation.

'-Wobjc-property-no-attribute'
     Clang/LLVM option for future documentation.

'-Wobjc-string-concatenation'
     Clang/LLVM option for future documentation.

'-Wobjc-property-synthesis'
     Clang/LLVM option for future documentation.

'-Wobjc-protocol-method-implementation'
     Clang/LLVM option for future documentation.

'-Wobjc-protocol-property-synthesis'
     Clang/LLVM option for future documentation.

'-Wobjc-readonly-with-setter-property'
     Clang/LLVM option for future documentation.

'-Wobjc-redundant-api-use'
     Clang/LLVM option for future documentation.

'-Wobjc-redundant-literal-use'
     Clang/LLVM option for future documentation.

'-Wobjc-root-class'
     Clang/LLVM option for future documentation.

'-Wobjc-string-compare'
     Clang/LLVM option for future documentation.

'-Wno-odr'
     Warn about One Definition Rule violations during link-time
     optimization.  Enabled by default.

     _Note:_ It is not clear whether this option does anything with
     LLVM, since with GCC it requires '-flto-odr-type-merging' to be
     enabled, and this flag is not available with Clang/LLVM.

'-Wopenmp-clauses'
     Clang/LLVM option for future documentation.

'-Wno-out-of-line-declaration'
     Clang/LLVM option for future documentation.

'-Wover-aligned'
     Clang/LLVM option for future documentation.

'-Wno-overflow'
     Do not warn about compile-time overflow in constant expressions.

'-Woverlength-strings'
     Warn about string constants that are longer than the "minimum
     maximum" length specified in the C standard.  Modern compilers
     generally allow string constants that are much longer than the
     standard's minimum limit, but very portable programs should avoid
     using longer strings.

     The limit applies _after_ string constant concatenation, and does
     not count the trailing NUL.  In C90, the limit was 509 characters;
     in C99, it was raised to 4095.  C++98 does not specify a normative
     minimum maximum, so we do not diagnose overlength strings in C++.

     This option is implied by '-Wpedantic', and can be disabled with
     '-Wno-overlength-strings'.

'-Wno-override-module'
     Clang/LLVM option for future documentation.

'-Woverloaded-shift-op-parentheses'
     Clang/LLVM option for future documentation.

'-Woverriding-method-mismatch'
     Clang/LLVM option for future documentation.

'-Wpacked'
     Warn if a structure is given the packed attribute, but the packed
     attribute has no effect on the layout or size of the structure.
     Such structures may be mis-aligned for little benefit.  For
     instance, in this code, the variable 'f.x' in 'struct bar' is
     misaligned even though 'struct bar' does not itself have the packed
     attribute:

          struct foo {
            int x;
            char a, b, c, d;
          } __attribute__((packed));
          struct bar {
            char z;
            struct foo f;
          };

'-Wpadded'
     Warn if padding is included in a structure, either to align an
     element of the structure or to align the whole structure.
     Sometimes when this happens it is possible to rearrange the fields
     of the structure to reduce the padding and so make the structure
     smaller.

'-Wparentheses'
     Warn if parentheses are omitted in certain contexts, such as when
     there is an assignment in a context where a truth value is
     expected, or when operators are nested whose precedence people
     often get confused about.

     Also warn if a comparison like 'x<=y<=z' appears; this is
     equivalent to '(x<=y ? 1 : 0) <= z', which is a different
     interpretation from that of ordinary mathematical notation.

     Also warn about constructions where there may be confusion to which
     'if' statement an 'else' branch belongs.  Here is an example of
     such a case:

          {
            if (a)
              if (b)
                foo ();
            else
              bar ();
          }

     In C/C++, every 'else' branch belongs to the innermost possible
     'if' statement, which in this example is 'if (b)'.  This is often
     not what the programmer expected, as illustrated in the above
     example by indentation the programmer chose.  When there is the
     potential for this confusion, LLVM issues a warning when this flag
     is specified.  To eliminate the warning, add explicit braces around
     the innermost 'if' statement so there is no way the 'else' can
     belong to the enclosing 'if'.  The resulting code looks like this:

          {
            if (a)
              {
                if (b)
                  foo ();
                else
                  bar ();
              }
          }

     Also warn for dangerous uses of the GNU extension to '?:' with
     omitted middle operand.  When the condition in the '?': operator is
     a boolean expression, the omitted value is always 1.  Often
     programmers expect it to be a value computed inside the conditional
     expression instead.

     This warning is enabled by '-Wall'.

'-Wparentheses-equality'
     Clang/LLVM option for future documentation.

'-Wpointer-arith'
     Warn about anything that depends on the "size of" a function type
     or of 'void'.  GNU C assigns these types a size of 1, for
     convenience in calculations with 'void *' pointers and pointers to
     functions.  In C++, warn also when an arithmetic operation involves
     'NULL'.  This warning is also enabled by '-Wpedantic'.

'-Wno-pointer-to-int-cast (C and Objective-C only)'
     Suppress warnings from casts from a pointer to an integer type of a
     different size.

'-Wno-pointer-type-mismatch'
     Clang/LLVM option for future documentation.

'-W#pragma-messages'
     Clang/LLVM option for future documentation.

'-Wno-pragmas'
     Do not warn about misuses of pragmas, such as incorrect parameters,
     invalid syntax, or conflicts between pragmas.  See also
     '-Wunknown-pragmas'.

'-Wpredefined-identifier-outside-function'
     Clang/LLVM option for future documentation.

'-Wprivate-extern'
     Clang/LLVM option for future documentation.

'-Wproperty-attribute-mismatch'
     Clang/LLVM option for future documentation.

'-Wprotocol-property-synthesis-ambiguity'
     Clang/LLVM option for future documentation.

'-Wreadonly-iboutlet-property'
     Clang/LLVM option for future documentation.

'-Wreceiver-expr'
     Clang/LLVM option for future documentation.

'-Wreceiver-forward-class'
     Clang/LLVM option for future documentation.

'-Wreceiver-is-weak'
     Clang/LLVM option for future documentation.

'-Wredundant-decls'
     Warn if anything is declared more than once in the same scope, even
     in cases where multiple declaration is valid and changes nothing.

'-Wreinterpret-base-class'
     Clang/LLVM option for future documentation.

'-Wrequires-super-attribute'
     Clang/LLVM option for future documentation.

'-Wreserved-user-defined-literal'
     Clang/LLVM option for future documentation.

'-Wno-return-stack-address'
     Clang/LLVM option for future documentation.

'-Wreturn-type'
     Warn whenever a function is defined with a return type that
     defaults to 'int'.  Also warn about any 'return' statement with no
     return value in a function whose return type is not 'void' (falling
     off the end of the function body is considered returning without a
     value), and about a 'return' statement with an expression in a
     function whose return type is 'void'.

     For C++, a function without return type always produces a
     diagnostic message, even when '-Wno-return-type' is specified.  The
     only exceptions are 'main' and functions defined in system headers.

     This warning is enabled by '-Wall'.

'-Wreturn-type-c-linkage'
     Clang/LLVM option for future documentation.

'-Wsection'
     Clang/LLVM option for future documentation.

'-Wselector-type-mismatch'
     Clang/LLVM option for future documentation.

'-Wself-assign'
     Clang/LLVM option for future documentation.

'-Wself-assign-field'
     Clang/LLVM option for future documentation.

'-Wsemicolon-before-method-body'
     Clang/LLVM option for future documentation.

'-Wsentinel'
     Clang/LLVM option for future documentation.

'-Wsequence-point'
     Warn about code that may have undefined semantics because of
     violations of sequence point rules in the C and C++ standards.

     The C and C++ standards define the order in which expressions in a
     C/C++ program are evaluated in terms of "sequence points", which
     represent a partial ordering between the execution of parts of the
     program: those executed before the sequence point, and those
     executed after it.  These occur after the evaluation of a full
     expression (one which is not part of a larger expression), after
     the evaluation of the first operand of a '&&', '||', '? :' or ','
     (comma) operator, before a function is called (but after the
     evaluation of its arguments and the expression denoting the called
     function), and in certain other places.  Other than as expressed by
     the sequence point rules, the order of evaluation of subexpressions
     of an expression is not specified.  All these rules describe only a
     partial order rather than a total order, since, for example, if two
     functions are called within one expression with no sequence point
     between them, the order in which the functions are called is not
     specified.  However, the standards committee have ruled that
     function calls do not overlap.

     It is not specified when between sequence points modifications to
     the values of objects take effect.  Programs whose behavior depends
     on this have undefined behavior; the C and C++ standards specify
     that "Between the previous and next sequence point an object shall
     have its stored value modified at most once by the evaluation of an
     expression.  Furthermore, the prior value shall be read only to
     determine the value to be stored.".  If a program breaks these
     rules, the results on any particular implementation are entirely
     unpredictable.

     Examples of code with undefined behavior are 'a = a++;', 'a[n] =
     b[n++]' and 'a[i++] = i;'.  Some more complicated cases are not
     diagnosed by this option, and it may give an occasional false
     positive result, but in general it has been found fairly effective
     at detecting this sort of problem in programs.

     The standard is worded confusingly, therefore there is some debate
     over the precise meaning of the sequence point rules in subtle
     cases.  Links to discussions of the problem, including proposed
     formal definitions, may be found on the GCC readings page, at
     <http://gcc.gnu.org/readings.html>.

     This warning is enabled by '-Wall' for C and C++.

'-Wserialized-diagnostics'
     Clang/LLVM option for future documentation.

'-Wshadow'
     Warn whenever a local variable or type declaration shadows another
     variable, parameter, type, class member (in C++), or instance
     variable (in Objective-C) or whenever a built-in function is
     shadowed.  Note that in C++, the compiler warns if a local variable
     shadows an explicit typedef, but not if it shadows a
     struct/class/enum.

'-Wno-shadow-ivar (Objective-C only)'
     Do not warn whenever a local variable shadows an instance variable
     in an Objective-C method.

'-Wshift-count-negative'
     Warn if shift count is negative.  This warning is enabled by
     default.

'-Wshift-count-overflow'
     Warn if shift count >= width of type.  This warning is enabled by
     default.

'-Wshift-negative-value'
     Warn if left shifting a negative value.  This warning is enabled by
     '-Wextra' in C99 and C++11 modes (and newer).

'-Wshift-op-parentheses'
     Clang/LLVM option for future documentation.

'-Wshift-overflow'
'-Wshift-overflow=N'
     Warn about left shift overflows.  This warning is enabled by
     default in C99 and C++11 modes (and newer).

'-Wshift-sign-overflow'
     Clang/LLVM option for future documentation.

'-Wshorten-64-to-32'
     Clang/LLVM option for future documentation.

'-Wsign-compare'
     Warn when a comparison between signed and unsigned values could
     produce an incorrect result when the signed value is converted to
     unsigned.  This warning is also enabled by '-Wextra'; to get the
     other warnings of '-Wextra' without this warning, use '-Wextra
     -Wno-sign-compare'.

'-Wsign-conversion'
     Warn for implicit conversions that may change the sign of an
     integer value, like assigning a signed integer expression to an
     unsigned integer variable.  An explicit cast silences the warning.
     In C, this option is enabled also by '-Wconversion'.

'-Wsizeof-array-argument'
     Warn when the 'sizeof' operator is applied to a parameter that is
     declared as an array in a function definition.  This warning is
     enabled by default for C and C++ programs.

'-Wsizeof-array-decay'
     Clang/LLVM option for future documentation.

'-Wsizeof-pointer-memaccess'
     Warn for suspicious length parameters to certain string and memory
     built-in functions if the argument uses 'sizeof'.  This warning
     warns e.g. about 'memset (ptr, 0, sizeof (ptr));' if 'ptr' is not
     an array, but a pointer, and suggests a possible fix, or about
     'memcpy (&foo, ptr, sizeof (&foo));'.  This warning is enabled by
     '-Wall'.

'-Wsometimes-uninitialized'
     Clang/LLVM option for future documentation.

'-Wsource-uses-openmp'
     Clang/LLVM option for future documentation.

'-Wstack-protector'
     This option is only active when '-fstack-protector' is active.  It
     warns about functions that are not protected against stack
     smashing.

'-Wstatic-float-init'
     Clang/LLVM option for future documentation.

'-Wstatic-in-inline'
     Clang/LLVM option for future documentation.

'-Wstatic-inline-explicit-instantiation'
     Clang/LLVM option for future documentation.

'-Wstatic-local-in-inline'
     Clang/LLVM option for future documentation.

'-Wstatic-self-init'
     Clang/LLVM option for future documentation.

'-Wstrict-aliasing'
     This option is only active when '-fstrict-aliasing' is active.  It
     warns about code that might break the strict aliasing rules that
     the compiler is using for optimization.  The warning does not catch
     all cases, but does attempt to catch the more common pitfalls.  It
     is included in '-Wall'.  It is equivalent to '-Wstrict-aliasing=3'

'-Wstrict-aliasing=n'
     This option is only active when '-fstrict-aliasing' is active.  It
     warns about code that might break the strict aliasing rules that
     the compiler is using for optimization.  Higher levels correspond
     to higher accuracy (fewer false positives).  Higher levels also
     correspond to more effort, similar to the way '-O' works.
     '-Wstrict-aliasing' is equivalent to '-Wstrict-aliasing=3'.

     Level 1: Most aggressive, quick, least accurate.  Possibly useful
     when higher levels do not warn but '-fstrict-aliasing' still breaks
     the code, as it has very few false negatives.  However, it has many
     false positives.  Warns for all pointer conversions between
     possibly incompatible types, even if never dereferenced.  Runs in
     the front end only.

     Level 2: Aggressive, quick, not too precise (default for
     '-Wstrict-aliasing').  May still have many false positives (not as
     many as level 1 though), and few false negatives (but possibly more
     than level 1).  Unlike level 1, it only warns when an address is
     taken.  Warns about incomplete types.  Runs in the front end only.

     _Note:_ GCC has Level 3, which is the default, but no such level is
     supported by Clang/LLVM.

'-Wstrict-overflow'
'-Wstrict-overflow=N'
     This option is only active when '-fstrict-overflow' is active.  It
     warns about cases where the compiler optimizes based on the
     assumption that signed overflow does not occur.  Note that it does
     not warn about all cases where the code might overflow: it only
     warns about cases where the compiler implements some optimization.
     Thus this warning depends on the optimization level.

     An optimization that assumes that signed overflow does not occur is
     perfectly safe if the values of the variables involved are such
     that overflow never does, in fact, occur.  Therefore this warning
     can easily give a false positive: a warning about code that is not
     actually a problem.  To help focus on important issues, several
     warning levels are defined.  No warnings are issued for the use of
     undefined signed overflow when estimating how many iterations a
     loop requires, in particular when determining whether a loop will
     be executed at all.

     '-Wstrict-overflow=1'
          Warn about cases that are both questionable and easy to avoid.
          For example, with '-fstrict-overflow', the compiler simplifies
          'x + 1 > x' to '1'.  This level of '-Wstrict-overflow' is
          enabled by '-Wall'; higher levels are not, and must be
          explicitly requested.

     '-Wstrict-overflow=2'
          Also warn about other cases where a comparison is simplified
          to a constant.  For example: 'abs (x) >= 0'.  This can only be
          simplified when '-fstrict-overflow' is in effect, because 'abs
          (INT_MIN)' overflows to 'INT_MIN', which is less than zero.
          '-Wstrict-overflow' (with no level) is the same as
          '-Wstrict-overflow=2'.

     '-Wstrict-overflow=3'
          Also warn about other cases where a comparison is simplified.
          For example: 'x + 1 > 1' is simplified to 'x > 0'.

     '-Wstrict-overflow=4'
          Also warn about other simplifications not covered by the above
          cases.  For example: '(x * 10) / 5' is simplified to 'x * 2'.

     '-Wstrict-overflow=5'
          Also warn about cases where the compiler reduces the magnitude
          of a constant involved in a comparison.  For example: 'x + 2 >
          y' is simplified to 'x + 1 >= y'.  This is reported only at
          the highest warning level because this simplification applies
          to many comparisons, so this warning level gives a very large
          number of false positives.

'-Wstring-compare'
     Clang/LLVM option for future documentation.

'-Wstring-conversion'
     Clang/LLVM option for future documentation.

'-Wstring-plus-char'
     Clang/LLVM option for future documentation.

'-Wstring-plus-int'
     Clang/LLVM option for future documentation.

'-Wstrlcpy-strlcat-size'
     Clang/LLVM option for future documentation.

'-Wstrncat-size'
     Clang/LLVM option for future documentation.

'-Wsuper-class-method-mismatch'
     Clang/LLVM option for future documentation.

'-Wswitch'
     Warn whenever a 'switch' statement has an index of enumerated type
     and lacks a 'case' for one or more of the named codes of that
     enumeration.  (The presence of a 'default' label prevents this
     warning.)  'case' labels outside the enumeration range also provoke
     warnings when this option is used (even if there is a 'default'
     label).  This warning is enabled by '-Wall'.

'-Wswitch-bool'
     Warn whenever a 'switch' statement has an index of boolean type and
     the case values are outside the range of a boolean type.  It is
     possible to suppress this warning by casting the controlling
     expression to a type other than 'bool'.  For example:
          switch ((int) (a == 4))
            {
            ...
            }
     This warning is enabled by default for C and C++ programs.

'-Wswitch-default'
     Warn whenever a 'switch' statement does not have a 'default' case.

'-Wswitch-enum'
     Warn whenever a 'switch' statement has an index of enumerated type
     and lacks a 'case' for one or more of the named codes of that
     enumeration.  'case' labels outside the enumeration range also
     provoke warnings when this option is used.  The only difference
     between '-Wswitch' and this option is that this option gives a
     warning about an omitted enumeration code even if there is a
     'default' label.

'-Wsystem-headers'
     Print warning messages for constructs found in system header files.
     Warnings from system headers are normally suppressed, on the
     assumption that they usually do not indicate real problems and
     would only make the compiler output harder to read.  Using this
     command-line option tells Clang/LLVM to emit warnings from system
     headers as if they occurred in user code.  However, note that using
     '-Wall' in conjunction with this option does _not_ warn about
     unknown pragmas in system headers--for that, '-Wunknown-pragmas'
     must also be used.

'-Wtautological-compare'
     Warn if a self-comparison always evaluates to true or false.  This
     warning detects various mistakes such as:
          int i = 1;
          ...
          if (i > i) { ... }
     This warning is enabled by '-Wall'.

'-Wtautological-constant-out-of-range-compare'
     Clang/LLVM option for future documentation.

'-Wtentative-definition-incomplete-type'
     Clang/LLVM option for future documentation.

'-Wthread-safety-analysis'
     Clang/LLVM option for future documentation.

'-Wthread-safety-attributes'
     Clang/LLVM option for future documentation.

'-Wthread-safety-beta'
     Clang/LLVM option for future documentation.

'-Wthread-safety'
     Clang/LLVM option for future documentation.

'-Wthread-safety-precise'
     Clang/LLVM option for future documentation.

'-Wtrigraphs'
     Warn if any trigraphs are encountered that might change the meaning
     of the program (trigraphs within comments are not warned about).
     This warning is enabled by '-Wall'.

'-Wtype-limits'
     Warn if a comparison is always true or always false due to the
     limited range of the data type, but do not warn for constant
     expressions.  For example, warn if an unsigned variable is compared
     against zero with '<' or '>='.  This warning is also enabled by
     '-Wextra'.

'-Wtypedef-redefinition'
     Clang/LLVM option for future documentation.

'-Wtypename-missing'
     Clang/LLVM option for future documentation.

'-Wtype-safety'
     Clang/LLVM option for future documentation.

'-Wno-unavailable-declarations'
     Clang/LLVM option for future documentation.

'-Wundef'
     Warn whenever an identifier which is not a macro is encountered in
     an '#if' directive, outside of 'defined'.  Such identifiers are
     replaced with zero.

'-Wundefined-inline'
     Clang/LLVM option for future documentation.

'-Wundefined-internal'
     Clang/LLVM option for future documentation.

'-Wundefined-reinterpret-cast'
     Clang/LLVM option for future documentation.

'-Wunicode'
     Clang/LLVM option for future documentation.

'-Wunicode-whitespace'
     Clang/LLVM option for future documentation.

'-Wuninitialized'
     Warn if an automatic variable is used without first being
     initialized or if a variable may be clobbered by a 'setjmp' call.
     In C++, warn if a non-static reference or non-static 'const' member
     appears in a class without constructors.

     If you want to warn about code that uses the uninitialized value of
     the variable in its own initializer, use the '-Winit-self' option.

     These warnings occur for individual uninitialized or clobbered
     elements of structure, union or array variables as well as for
     variables that are uninitialized or clobbered as a whole.  They do
     not occur for variables or elements declared 'volatile'.  Because
     these warnings depend on optimization, the exact variables or
     elements for which there are warnings depends on the precise
     optimization options and version of LLVM used.

     Note that there may be no warning about a variable that is used
     only to compute a value that itself is never used, because such
     computations may be deleted by data flow analysis before the
     warnings are printed.

'-Wunknown-pragmas'
     Warn when a '#pragma' directive is encountered that is not
     understood by LLVM.  If this command-line option is used, warnings
     are even issued for unknown pragmas in system header files.  This
     is not the case if the warnings are only enabled by the '-Wall'
     command-line option.

'-Wunknown-warning-option'
     Clang/LLVM option for future documentation.

'-Wunnamed-type-template-args'
     Clang/LLVM option for future documentation.

'-Wunneeded-internal-declaration'
     Clang/LLVM option for future documentation.

'-Wunneeded-member-function'
     Clang/LLVM option for future documentation.

'-Wunsequenced'
     Clang/LLVM option for future documentation.

'-Wno-unsupported-friend'
     Clang/LLVM option for future documentation.

'-Wunsupported-visibility'
     Clang/LLVM option for future documentation.

'-Wunused'
     All the following '-Wunused' options combined.

     In order to get a warning about an unused function parameter, you
     must either specify '-Wextra -Wunused' (note that '-Wall' implies
     '-Wunused'), or separately specify '-Wunused-parameter'.

'-Wunused-command-line-argument'
     Clang/LLVM option for future documentation.

'-Wunused-comparison'
     Clang/LLVM option for future documentation.

'-Wunused-const-variable'
     Warn whenever a constant static variable is unused aside from its
     declaration.  This warning is enabled by '-Wunused-variable' for C,
     but not for C++.  In C++ this is normally not an error since const
     variables take the place of '#define's in C++.

     To suppress this warning use the 'unused' attribute (*note Variable
     Attributes::).

'-Wunused-exception-parameter'
     Clang/LLVM option for future documentation.

'-Wunused-function'
     Warn whenever a static function is declared but not defined or a
     non-inline static function is unused.  This warning is enabled by
     '-Wall'.

'-Wunused-label'
     Warn whenever a label is declared but not used.  This warning is
     enabled by '-Wall'.

     To suppress this warning use the 'unused' attribute (*note Variable
     Attributes::).

'-Wunused-local-typedefs (C, Objective-C, C++ and Objective-C++ only)'
     Warn when a typedef locally defined in a function is not used.
     This warning is enabled by '-Wall'.

'-Wunused-member-function'
     Clang/LLVM option for future documentation.

'-Wunused-parameter'
     Warn whenever a function parameter is unused aside from its
     declaration.

     To suppress this warning use the 'unused' attribute (*note Variable
     Attributes::).

'-Wunused-private-field'
     Clang/LLVM option for future documentation.

'-Wunused-property-ivar'
     Clang/LLVM option for future documentation.

'-Wno-unused-result'
     Do not warn if a caller of a function marked with attribute
     'warn_unused_result' (*note Function Attributes::) does not use its
     return value.  The default is '-Wunused-result'.

'-Wunused-value'
     Warn whenever a statement computes a result that is explicitly not
     used.  To suppress this warning cast the unused expression to
     'void'.  This includes an expression-statement or the left-hand
     side of a comma expression that contains no side effects.  For
     example, an expression such as 'x[i,j]' causes a warning, while
     'x[(void)i,j]' does not.

     This warning is enabled by '-Wall'.

'-Wunused-variable'
     Warn whenever a local variable or non-constant static variable is
     unused aside from its declaration.  This warning is enabled by
     '-Wall'.

     To suppress this warning use the 'unused' attribute (*note Variable
     Attributes::).

'-Wunused-volatile-lvalue'
     Clang/LLVM option for future documentation.

'-Wused-but-marked-unused'
     Clang/LLVM option for future documentation.

'-Wuser-defined-literals'
     Clang/LLVM option for future documentation.

'-Wvarargs'
     Warn upon questionable usage of the macros used to handle variable
     arguments like 'va_start'.  This is default.  To inhibit the
     warning messages, use '-Wno-varargs'.

'-Wvariadic-macros'
     Warn if variadic macros are used in ISO C90 mode, or if the GNU
     alternate syntax is used in ISO C99 mode.  This is enabled by
     either '-Wpedantic' or '-Wtraditional'.  To inhibit the warning
     messages, use '-Wno-variadic-macros'.

'-Wvector-conversion'
     Clang/LLVM option for future documentation.

'-Wvector-conversions'
     Clang/LLVM option for future documentation.

'-Wvexing-parse'
     Clang/LLVM option for future documentation.

'-Wvisibility'
     Clang/LLVM option for future documentation.

'-Wvla'
     Warn if variable length array is used in the code.  '-Wno-vla'
     prevents the '-Wpedantic' warning of the variable length array.

     _Note:_ It is not clear why this is accepted by Clang/LLVM, given
     the explicit rejection of variable length arrays.  It is highly
     unlikely this option does anything.

'-Wvla-extension'
     Clang/LLVM option for future documentation.

'-Wvolatile-register-var'
     Warn if a register variable is declared volatile.  The volatile
     modifier does not inhibit all optimizations that may eliminate
     reads and/or writes to register variables.  This warning is enabled
     by '-Wall'.

'-W#warnings'
     Clang/LLVM option for future documentation.

'-Wweak-template-vtables'
     Clang/LLVM option for future documentation.

'-Wweak-vtables'
     Clang/LLVM option for future documentation.

'-Wwrite-strings'
     When compiling C, give string constants the type 'const
     char[LENGTH]' so that copying the address of one into a non-'const'
     'char *' pointer produces a warning.  These warnings help you find
     at compile time code that can try to write into a string constant,
     but only if you have been very careful about using 'const' in
     declarations and prototypes.  Otherwise, it is just a nuisance.
     This is why we did not make '-Wall' request these warnings.

     When compiling C++, warn about the deprecated conversion from
     string literals to 'char *'.  This warning is enabled by default
     for C++ programs.

'-Wzero-length-array'
     Clang/LLVM option for future documentation.

 The following Clang/LLVM warnings are specific to C and Objective-C.

'-Wbad-function-cast (C and Objective-C only)'
     Warn when a function call is cast to a non-matching type.  For
     example, warn if a call to a function returning an integer type is
     cast to a pointer type.

'-Wdeclaration-after-statement (C and Objective-C only)'
     Warn when a declaration is found after a statement in a block.
     This construct, known from C++, was introduced with ISO C99 and is
     by default allowed in LLVM.  It is not supported by ISO C90.  *Note
     Mixed Declarations::.

'-Wmissing-declarations (C, C++, Objective-C and Objective-C++ only)'
     Warn if a global function is defined without a previous
     declaration.  Do so even if the definition itself provides a
     prototype.  Use this option to detect global functions that are not
     declared in header files.  In C, no warnings are issued for
     functions with previous non-prototype declarations; use
     '-Wmissing-prototypes' to detect missing prototypes.  In C++, no
     warnings are issued for function templates, or for inline
     functions, or for functions in anonymous namespaces.

'-Wmissing-prototypes (C and Objective-C only)'
     Warn if a global function is defined without a previous prototype
     declaration.  This warning is issued even if the definition itself
     provides a prototype.  Use this option to detect global functions
     that do not have a matching prototype declaration in a header file.
     This option is not valid for C++ because all function declarations
     provide prototypes and a non-matching declaration declares an
     overload rather than conflict with an earlier declaration.  Use
     '-Wmissing-declarations' to detect missing declarations in C++.

'-Wnested-externs (C and Objective-C only)'
     Warn if an 'extern' declaration is encountered within a function.

'-Wold-style-definition (C and Objective-C only)'
     Warn if an old-style function definition is used.  A warning is
     given even if there is a previous prototype.

'-Wpointer-sign (C and Objective-C only)'
     Warn for pointer argument passing or assignment with different
     signedness.  This option is only supported for C and Objective-C.
     It is implied by '-Wall' and by '-Wpedantic', which can be disabled
     with '-Wno-pointer-sign'.

'-Wstrict-prototypes (C and Objective-C only)'
     Warn if a function is declared or defined without specifying the
     argument types.  (An old-style function definition is permitted
     without a warning if preceded by a declaration that specifies the
     argument types.)


File: llvm.info,  Node: Debugging Options,  Next: Optimize Options,  Prev: Warning Options,  Up: Invoking LLVM

3.9 Options for Debugging Your Program
======================================

To tell Clang/LLVM to emit extra information for use by a debugger, in
almost all cases you need only to add '-g' to your other options.

 Clang/LLVM allows you to use '-g' with '-O'.  The shortcuts taken by
optimized code may occasionally be surprising: some variables you
declared may not exist at all; flow of control may briefly move where
you did not expect it; some statements may not be executed because they
compute constant results or their values are already at hand; some
statements may execute in different places because they have been moved
out of loops.  Nevertheless it is possible to debug optimized output.
This makes it reasonable to use the optimizer for programs that might
have bugs.

 Unlike GCC, Clang/LLVM does not offer '-Og', which is used to get a
better debugging experience by running compiler passes that collect
information useful for debugging, even when no other '-O' option is
specified.

 _Note:_ Not all GCC options are supported by Clang/LLVM. *Note Option
Summary: Option Summary, for details of:
   * those options supported by both Clang/LLVM and GCC;
   * those options only supported by Clang/LLVM; and
   * those options supported only by GCC.

 The following Clang/LLVM options assist in debugging.

'-fdebug-prefix-map=OLD=NEW'
     When compiling files in directory 'OLD', record debugging
     information describing them as in 'NEW' instead.

'-fdebug-types-section'
     When using DWARF Version 4 or higher, type DIEs can be put into
     their own '.debug_types' section instead of making them part of the
     '.debug_info' section.  It is more efficient to put them in a
     separate comdat sections since the linker can then remove
     duplicates.  But not all DWARF consumers support '.debug_types'
     sections yet and on some objects '.debug_types' produces larger
     instead of smaller debugging information.

'-fno-dwarf2-cfi-asm'
     Emit DWARF 2 unwind info as compiler generated '.eh_frame' section
     instead of using GAS '.cfi_*' directives.

'-fno-eliminate-unused-debug-types'
     Normally, when producing DWARF 2 output, LLVM avoids producing
     debug symbol output for types that are nowhere used in the source
     file being compiled.  Sometimes it is useful to have LLVM emit
     debugging information for all types declared in a compilation unit,
     regardless of whether or not they are actually used in that
     compilation unit, for example if, in the debugger, you want to cast
     a value to a type that is not actually used in your program (but is
     declared).  More often, however, this results in a significant
     amount of wasted space.

'-fstandalone-debug'
     Clang/LLVM option for future documentation.

'-g[LEVEL]'
     Produce debugging information in the operating system's native
     format, which is always DWARF for Clang/LLVM. LLDB or GDB can work
     with this debugging information.

     Clang/LLVM allows you to use '-g' with optimization options '-ON'.
     The shortcuts taken by optimized code may occasionally produce
     surprising results: some variables you declared may not exist at
     all; flow of control may briefly move where you did not expect it;
     some statements may not be executed because they compute constant
     results or their values are already at hand; some statements may
     execute in different places because they have been moved out of
     loops.

     Nevertheless it proves possible to debug optimized output.  This
     makes it reasonable to use the optimizer for programs that might
     have bugs.

     Option '-g' allows specification of a LEVEL to specify how much
     information should be produced.  The default level is 2.  The
     following options are useful for fine-grain control over the
     debugging output.

     Level 0 produces no debug information at all.  Thus, '-g0' negates
     '-g'.

     Level 1 produces minimal information, enough for making backtraces
     in parts of the program that you don't plan to debug.  This
     includes descriptions of functions and external variables, and line
     number tables, but no information about local variables.

     Level 3 includes extra information, such as all the macro
     definitions present in the program.  Some debuggers support macro
     expansion when you use '-g3'.

'-gcodeview'
     Clang/LLVM option for future documentation.

'-gdwarf-VERSION'
     Produce debugging information in DWARF format (if that is
     supported).  The value of VERSION may be either 2, 3, 4 or 5; the
     default version for Clang/LLVM is 4.  Version 4 may require GDB 7.0
     or later for maximum benefit.

'-gfull'
     Clang/LLVM option for future documentation.

'-ggdb[LEVEL]'
     Produce debugging information for use by GDB.  This means to use
     the most expressive format available (DWARF 4), including GDB
     extensions if at all possible.  The optional LEVEL has the same
     meaning as wiht '-g'.

'-ggnu-pubnames'
     Generate .debug_pubnames and .debug_pubtypes sections in a format
     suitable for conversion into a GDB index.  This option is only
     useful with a linker that can produce GDB index version 7.

'-gline-tables-only'
     Clang/LLVM option for future documentation.

'-gmodules'
     Clang/LLVM option for future documentation.

'-gno-record-gcc-switches'
     Disallow appending command-line options to the DW_AT_producer
     attribute in DWARF debugging information.

'-grecord-gcc-switches'
     This switch causes the command-line options used to invoke the
     compiler that may affect code generation to be appended to the
     DW_AT_producer attribute in DWARF debugging information.  The
     options are concatenated with spaces separating them from each
     other and from the compiler version.  See also
     '-frecord-gcc-switches' for another way of storing compiler options
     into the object file.  This is the default.

'-gsplit-dwarf'
     Separate as much dwarf debugging information as possible into a
     separate output file with the extension .dwo.  This option allows
     the build system to avoid linking files with debug information.  To
     be useful, this option requires a debugger capable of reading .dwo
     files.

'-gstrict-dwarf'
     Disallow using extensions of later DWARF standard version than
     selected with '-gdwarf-VERSION'.  On most targets using
     non-conflicting DWARF extensions from later standard versions is
     allowed.

'-gno-strict-dwarf'
     Allow using extensions of later DWARF standard version than
     selected with '-gdwarf-VERSION'.

'-gused'
     Clang/LLVM option for future documentation.


File: llvm.info,  Node: Optimize Options,  Next: Instrumentation Options,  Prev: Debugging Options,  Up: Invoking LLVM

3.10 Options That Control Optimization
======================================

These options control various sorts of optimizations.

 Without any optimization option, the compiler's goal is to reduce the
cost of compilation and to make debugging produce the expected results.
Statements are independent: if you stop the program with a breakpoint
between statements, you can then assign a new value to any variable or
change the program counter to any other statement in the function and
get exactly the results you expect from the source code.

 Turning on optimization flags makes the compiler attempt to improve the
performance and/or code size at the expense of compilation time and
possibly the ability to debug the program.

 The compiler performs optimization based on the knowledge it has of the
program.  Compiling multiple files at once to a single output file mode
allows the compiler to use information gained from all of the files when
compiling each of them.

 Not all optimizations are controlled directly by a flag.  Only
optimizations that have a flag are listed in this section.

 Most optimizations are only enabled if an '-O' level is set on the
command line.  Otherwise they are disabled, even if individual
optimization flags are specified.

 Depending on the target and how Clang/LLVM was configured, a slightly
different set of optimizations may be enabled at each '-O' level than
those listed here.  You can invoke Clang/LLVM with '-Q
--help=optimizers' to find out the exact set of optimizations that are
enabled at each level.  *Note Overall Options::, for examples.

 _Note:_ Not all GCC options are supported by Clang/LLVM. *Note Option
Summary: Option Summary, for details of:
   * those options supported by both Clang/LLVM and GCC;
   * those options only supported by Clang/LLVM; and
   * those options supported only by GCC.

 The following Clang/LLVM options control optimization.

'-fassociative-math'

     Allow re-association of operands in series of floating-point
     operations.  This violates the ISO C and C++ language standard by
     possibly changing computation result.  NOTE: re-ordering may change
     the sign of zero as well as ignore NaNs and inhibit or create
     underflow or overflow (and thus cannot be used on code that relies
     on rounding behavior like '(x + 2**52) - 2**52'.  May also reorder
     floating-point comparisons and thus may not be used when ordered
     comparisons are required.  This option requires that both
     '-fno-signed-zeros' and '-fno-trapping-math' be in effect.
     Moreover, it doesn't make much sense with '-frounding-math'.  For
     Fortran the option is automatically enabled when both
     '-fno-signed-zeros' and '-fno-trapping-math' are in effect.

     The default is '-fno-associative-math'.

'-fdata-sections'
'-ffunction-sections'
     Place each function or data item into its own section in the output
     file if the target supports arbitrary sections.  The name of the
     function or the name of the data item determines the section's name
     in the output file.

     Use these options on systems where the linker can perform
     optimizations to improve locality of reference in the instruction
     space.  Most systems using the ELF object format and SPARC
     processors running Solaris 2 have linkers with such optimizations.
     AIX may have these optimizations in the future.

     Only use these options when there are significant benefits from
     doing so.  When you specify these options, the assembler and linker
     create larger object and executable files and are also slower.  You
     cannot use 'gprof' on all systems if you specify this option, and
     you may have problems with debugging if you specify both this
     option and '-g'.

'-ffast-math'
     Sets the options '-fno-math-errno', '-funsafe-math-optimizations',
     '-ffinite-math-only', '-fno-rounding-math', '-fno-signaling-nans'
     and '-fcx-limited-range'.

     This option causes the preprocessor macro '__FAST_MATH__' to be
     defined.

     This option is not turned on by any '-O' option besides '-Ofast'
     since it can result in incorrect output for programs that depend on
     an exact implementation of IEEE or ISO rules/specifications for
     math functions.  It may, however, yield faster code for programs
     that do not require the guarantees of these specifications.

'-ffinite-math-only'
     Allow optimizations for floating-point arithmetic that assume that
     arguments and results are not NaNs or +-Infs.

     This option is not turned on by any '-O' option since it can result
     in incorrect output for programs that depend on an exact
     implementation of IEEE or ISO rules/specifications for math
     functions.  It may, however, yield faster code for programs that do
     not require the guarantees of these specifications.

     The default is '-fno-finite-math-only'.

'-ffp-contract=STYLE'
     '-ffp-contract=off' disables floating-point expression contraction.
     '-ffp-contract=fast' enables floating-point expression contraction
     such as forming of fused multiply-add operations if the target has
     native support for them.  '-ffp-contract=on' enables floating-point
     expression contraction if allowed by the language standard.  This
     is currently not implemented and treated equal to
     '-ffp-contract=off'.

     The default is '-ffp-contract=fast'.

'-fno-inline'
     Do not expand any functions inline apart from those marked with the
     'always_inline' attribute.  This is the default when not
     optimizing.

     Single functions can be exempted from inlining by marking them with
     the 'noinline' attribute.

'-flto[=full|thin]'
     This option runs the standard link-time optimizer.  When invoked
     with source code, it generates LLVM IR and writes it as bytecode to
     the object files (which are thus not ELF files).  When the object
     files are linked together, all the function bodies are read from
     these ELF sections and instantiated as if they had been part of the
     same translation unit.

     _Note:_ LTO will only work if you use a linker with plugin support.

     To use the link-time optimizer, '-flto' and optimization options
     should be specified at compile time and during the final link.  For
     example:

          clang -c -O2 -flto foo.c
          clang -c -O2 -flto bar.c
          clang -o myprog -flto -O2 foo.o bar.o

     The first two invocations to LLVM save a bytecode representation of
     IR into 'foo.o' and 'bar.o'.  The final invocation reads the IR
     from 'foo.o' and 'bar.o', merges the two files into a single
     internal image, and compiles the result as usual.  Since both
     'foo.o' and 'bar.o' are merged into a single image, this causes all
     the interprocedural analyses and optimizations in Clang/LLVM to
     work across the two files as if they were a single one.  This
     means, for example, that the inliner is able to inline functions in
     'bar.o' into functions in 'foo.o' and vice-versa.

     Another (simpler) way to enable link-time optimization is:

          clang -o myprog -flto -O2 foo.c bar.c

     The above generates bytecode for 'foo.c' and 'bar.c', merges them
     together into a single IR representation and optimizes them as
     usual to produce 'myprog'.

     The only important thing to keep in mind is that to enable
     link-time optimizations you need to use the Clang/LLVM driver to
     perform the link-step.  Clang/LLVM then automatically performs
     link-time optimization if any of the objects involved were compiled
     with the '-flto'.  You generally should specify the optimization
     options to be used for link-time optimization though LLVM tries to
     be clever at guessing an optimization level to use from the options
     used at compile-time if you fail to specify one at link-time.

     Unlike GCC, the generated '.o' files only contain LLVM IR bytecode,
     not the ELF object code.  So you cannot override the automatic
     decision to do link-time optimization at link-time by passing
     '-fno-lto' to the link command.

     To make whole program optimization effective, it is necessary to
     make certain whole program assumptions.  The compiler needs to know
     what functions and variables can be accessed by libraries and
     runtime outside of the link-time optimized unit.  The linkder
     passes information to the compiler about used and externally
     visible symbols.

     Additionally, the optimization flags used to compile individual
     files are not necessarily related to those used at link time.  For
     instance,

          clang -c -O0 -ffat-lto-objects -flto foo.c
          clang -c -O0 -ffat-lto-objects -flto bar.c
          clang -o myprog -O3 foo.o bar.o

     This produces individual object files with unoptimized LLVM IR
     bytecode but the resulting binary 'myprog' is optimized at '-O3'.

     When producing the final binary, Clang/LLVM only applies link-time
     optimizations to those files that contain bytecode.  Therefore, you
     can mix and match object files and libraries with LLVM IR bytecodes
     and final object code.  Clang/LLVM automatically selects which
     files to optimize in LTO mode and which files to link without
     further processing.

     There are some code generation flags preserved by LLVM when
     generating bytecodes, as they need to be used during the final link
     stage.  Generally options specified at link-time override those
     specified at compile-time.

     If you do not specify an optimization level option '-O' at
     link-time then LLVM computes one based on the optimization levels
     used when compiling the object files.  The highest optimization
     level wins here.

     Currently, the following options and their setting are taken from
     the first object file that explicitely specified it: '-fPIC',
     '-fpic', '-fpie', '-fcommon', '-fexceptions',
     '-fnon-call-exceptions' and all the '-m' target flags.

     In general ABI changing flags are required to match in all
     compilation-units and trying to override this at link-time with a
     conflicting value is ignored.

     Other options such as '-ffp-contract', '-fno-strict-overflow',
     '-fwrapv', '-fno-trapv' or '-fno-strict-aliasing' are passed
     through to the link stage and merged conservatively for conflicting
     translation units.  Specifically '-fno-strict-overflow', '-fwrapv'
     and '-fno-trapv' take precedence and for example
     '-ffp-contract=off' takes precedence over '-ffp-contract=fast'.
     You can override them at linke-time.

     It is recommended that you compile all the files participating in
     the same link with the same options and also specify those options
     at link time.

     If LTO encounters objects with C linkage declared with incompatible
     types in separate translation units to be linked together
     (undefined behavior according to ISO C99 6.2.7), a non-fatal
     diagnostic may be issued.  The behavior is still undefined at run
     time.  Similar diagnostics may be raised for other languages.

     Another feature of LTO is that it is possible to apply
     interprocedural optimizations on files written in different
     languages:

          clang -c -flto foo.c
          clang++ -c -flto bar.cc
          clang++ -o myprog -flto -O3 foo.o bar.o

     Notice that the final link is done with 'g++' to get the C++
     runtime libraries.  In general, when mixing languages in LTO mode,
     you should use the same link command options as when mixing
     languages in a regular (non-LTO) compilation.

     If object files containing LLVM IR bytecode are stored in a library
     archive, say 'libfoo.a', it is possible to extract and use them in
     an LTO link.  To create static libraries suitable for LTO, you will
     need versions of 'ar' and 'ranlib' with support for plugins and
     need to pass them the LTO plugin DLL via the '-plugin' option.
     Similarly to show the symbols of object files with LLVM IR
     bytecode, you will need 'nm' compiled with plugin support and the
     '-plugin' option.

     The current implementation of LTO makes no attempt to generate
     bytecode that is portable between different types of hosts.  The
     bytecode files are versioned and there is a strict version check,
     so bytecode files generated in one version of LLVM do not work with
     an older or newer version of LLVM.

     Link-time optimization does not work well with generation of
     debugging information.  Combining '-flto' with '-g' is currently
     experimental and likely to produce unexpected results.

     The '-flto' option can be qualified with '=full' or '=thin' to
     control how LTO is run.  Plain '-flto' is the same as '-flto=full'.
     Teresa Johnson and Xinlian David Li at Google have implemented an
     alternative approach, which should be faster and more parallel for
     large programs, which is enabled using '-flto=full'.  See EuroLLVM
     2015.

     The GCC qualifiers '-flto=N' and '-flto=jobserver' are not
     supported by Clang/LLVM.

'-fno-math-errno'
     Do not set 'errno' after calling math functions that are executed
     with a single instruction, e.g., 'sqrt'.  A program that relies on
     IEEE exceptions for math error handling may want to use this flag
     for speed while maintaining IEEE arithmetic compatibility.

     This option is not turned on by any '-O' option since it can result
     in incorrect output for programs that depend on an exact
     implementation of IEEE or ISO rules/specifications for math
     functions.  It may, however, yield faster code for programs that do
     not require the guarantees of these specifications.

     The default is '-fmath-errno'.

     On Darwin systems, the math library never sets 'errno'.  There is
     therefore no reason for the compiler to consider the possibility
     that it might, and '-fno-math-errno' is the default.

'-fmerge-all-constants'
     Attempt to merge identical constants and identical variables.

     This option implies '-fmerge-constants'.  In addition to
     '-fmerge-constants' this considers e.g. even constant initialized
     arrays or initialized constant variables with integral or
     floating-point types.  Languages like C or C++ require each
     variable, including multiple instances of the same variable in
     recursive calls, to have distinct locations, so using this option
     results in non-conforming behavior.

'-fomit-frame-pointer'
     Don't keep the frame pointer in a register for functions that don't
     need one.  This avoids the instructions to save, set up and restore
     frame pointers; it also makes an extra register available in many
     functions.  *It also makes debugging impossible on some machines.*

     On some machines, such as the VAX, this flag has no effect, because
     the standard calling sequence automatically handles the frame
     pointer and nothing is saved by pretending it doesn't exist.  The
     machine-description macro 'FRAME_POINTER_REQUIRED' controls whether
     a target machine supports this flag.  *Note Register Usage:
     (gccint)Registers.

     The default setting (when not optimizing for size) for 32-bit
     GNU/Linux x86 and 32-bit Darwin x86 targets is
     '-fomit-frame-pointer'.  You can configure LLVM with the
     '--enable-frame-pointer' configure option to change the default.

     Enabled at levels '-O', '-O2', '-O3', '-Os'.

'-foptimize-sibling-calls'
     Optimize sibling and tail recursive calls.

     Enabled at levels '-O2', '-O3', '-Os'.

'-fprofile-use'
'-fprofile-use=PATH'
     Enable profile feedback-directed optimizations.  Unlike GCC, in
     Clang/LLVM the individual profiling optimizations which are
     triggered by '-fprofile-use' are not directly available to the
     user, so not listed here.  They can be accessed directly in the
     underlying 'opt' and 'llc' components using the '-mllvm' option
     (*note '-mllvm': op mllvm.).

     By default, Clang/LLVM emits an error message if the feedback
     profiles do not match the source code.

     If PATH is specified, LLVM looks at the PATH to find the profile
     feedback data files.

'-freciprocal-math'
     Allow the reciprocal of a value to be used instead of dividing by
     the value if this enables optimizations.  For example 'x / y' can
     be replaced with 'x * (1/y)', which is useful if '(1/y)' is subject
     to common subexpression elimination.  Note that this loses
     precision and increases the number of flops operating on the value.

     The default is '-fno-reciprocal-math'.

'-freroll-loops'
     Clang/LLVM option for future documentation.

'-fno-signed-zeros'
     Allow optimizations for floating-point arithmetic that ignore the
     signedness of zero.  IEEE arithmetic specifies the behavior of
     distinct +0.0 and -0.0 values, which then prohibits simplification
     of expressions such as x+0.0 or 0.0*x (even with
     '-ffinite-math-only').  This option implies that the sign of a zero
     result isn't significant.

     The default is '-fsigned-zeros'.

'-fslp-vectorize-aggressive'
     Clang/LLVM option for future documentation.

'-fslp-vectorize'
     Clang/LLVM option for future documentation.

'-fstrict-aliasing'
     Allow the compiler to assume the strictest aliasing rules
     applicable to the language being compiled.  For C (and C++), this
     activates optimizations based on the type of expressions.  In
     particular, an object of one type is assumed never to reside at the
     same address as an object of a different type, unless the types are
     almost the same.  For example, an 'unsigned int' can alias an
     'int', but not a 'void*' or a 'double'.  A character type may alias
     any other type.

     Pay special attention to code like this:
          union a_union {
            int i;
            double d;
          };

          int f() {
            union a_union t;
            t.d = 3.0;
            return t.i;
          }
     The practice of reading from a different union member than the one
     most recently written to (called "type-punning") is common.  Even
     with '-fstrict-aliasing', type-punning is allowed, provided the
     memory is accessed through the union type.  So, the code above
     works as expected.  *Note Structures unions enumerations and
     bit-fields implementation::.  However, this code might not:
          int f() {
            union a_union t;
            int* ip;
            t.d = 3.0;
            ip = &t.i;
            return *ip;
          }

     Similarly, access by taking the address, casting the resulting
     pointer and dereferencing the result has undefined behavior, even
     if the cast uses a union type, e.g.:
          int f() {
            double d = 3.0;
            return ((union a_union *) &d)->i;
          }

     The '-fstrict-aliasing' option is enabled at levels '-O2', '-O3',
     '-Os'.

'-fstrict-enums'
     Allow the compiler to optimize using the assumption that a value of
     enumerated type can only be one of the values of the enumeration
     (as defined in the C++ standard; basically, a value that can be
     represented in the minimum number of bits needed to represent all
     the enumerators).  This assumption may not be valid if the program
     uses a cast to convert an arbitrary integer value to the enumerated
     type.

'-fstrict-overflow'
     Allow the compiler to assume strict signed overflow rules,
     depending on the language being compiled.  For C (and C++) this
     means that overflow when doing arithmetic with signed numbers is
     undefined, which means that the compiler may assume that it does
     not happen.  This permits various optimizations.  For example, the
     compiler assumes that an expression like 'i + 10 > i' is always
     true for signed 'i'.  This assumption is only valid if signed
     overflow is undefined, as the expression is false if 'i + 10'
     overflows when using twos complement arithmetic.  When this option
     is in effect any attempt to determine whether an operation on
     signed numbers overflows must be written carefully to not actually
     involve overflow.

     This option also allows the compiler to assume strict pointer
     semantics: given a pointer to an object, if adding an offset to
     that pointer does not produce a pointer to the same object, the
     addition is undefined.  This permits the compiler to conclude that
     'p + u > p' is always true for a pointer 'p' and unsigned integer
     'u'.  This assumption is only valid because pointer wraparound is
     undefined, as the expression is false if 'p + u' overflows using
     twos complement arithmetic.

     See also the '-fwrapv' option.  Using '-fwrapv' means that integer
     signed overflow is fully defined: it wraps.  When '-fwrapv' is
     used, there is no difference between '-fstrict-overflow' and
     '-fno-strict-overflow' for integers.  With '-fwrapv' certain types
     of overflow are permitted.  For example, if the compiler gets an
     overflow when doing arithmetic on constants, the overflowed value
     can still be used with '-fwrapv', but not otherwise.

     The '-fstrict-overflow' option is enabled at levels '-O2', '-O3',
     '-Os'.

'-fstrict-vtable-pointers'
     Clang/LLVM option for future documentation.

'-fthinlto-index=FILE'
     Clang/LLVM option for future documentation.

'-fno-trapping-math'
     Compile code assuming that floating-point operations cannot
     generate user-visible traps.  These traps include division by zero,
     overflow, underflow, inexact result and invalid operation.  This
     option requires that '-fno-signaling-nans' be in effect.  Setting
     this option may allow faster code if one relies on "non-stop" IEEE
     arithmetic, for example.

     This option should never be turned on by any '-O' option since it
     can result in incorrect output for programs that depend on an exact
     implementation of IEEE or ISO rules/specifications for math
     functions.

     The default is '-ftrapping-math'.

'-ftree-slp-vectorize'
     Perform basic block vectorization on trees.  This flag is enabled
     by default at '-O3' and when '-ftree-vectorize' is enabled.

'-funit-at-a-time'
     This option is left for compatibility reasons.  '-funit-at-a-time'
     has no effect, while '-fno-unit-at-a-time' implies
     '-fno-toplevel-reorder' and '-fno-section-anchors'.

     Enabled by default.

'-ftree-vectorize'
     Perform vectorization on trees.  This flag enables
     '-ftree-loop-vectorize' and '-ftree-slp-vectorize' if not
     explicitly specified.

'-funroll-loops'
     Unroll loops whose number of iterations can be determined at
     compile time or upon entry to the loop.  '-funroll-loops' implies
     '-frerun-cse-after-loop', '-fweb' and '-frename-registers'.  It
     also turns on complete loop peeling (i.e. complete removal of loops
     with a small constant number of iterations).  This option makes
     code larger, and may or may not make it run faster.

     Enabled with '-fprofile-use'.

'-funsafe-math-optimizations'
     Allow optimizations for floating-point arithmetic that (a) assume
     that arguments and results are valid and (b) may violate IEEE or
     ANSI standards.  When used at link-time, it may include libraries
     or startup files that change the default FPU control word or other
     similar optimizations.

     This option is not turned on by any '-O' option since it can result
     in incorrect output for programs that depend on an exact
     implementation of IEEE or ISO rules/specifications for math
     functions.  It may, however, yield faster code for programs that do
     not require the guarantees of these specifications.  Enables
     '-fno-signed-zeros', '-fno-trapping-math', '-fassociative-math' and
     '-freciprocal-math'.

     The default is '-fno-unsafe-math-optimizations'.

'-fvectorize'
     Clang/LLVM option for future documentation.

'-fno-zero-initialized-in-bss'
     If the target supports a BSS section, LLVM by default puts
     variables that are initialized to zero into BSS.  This can save
     space in the resulting code.

     This option turns off this behavior because some programs
     explicitly rely on variables going to the data section--e.g., so
     that the resulting executable can find the beginning of that
     section and/or make assumptions based on that.

     The default is '-fzero-initialized-in-bss'.

'-mllvm OPTION'
     Pass OPTION to the internal clang command line parser.  This allows
     access to a number of more advanced options.  Unlike the standard
     options, there is no guarantee of stability in these options.

     Details of these options will be included in a future version of
     this documentation.  The list of options can be seen by running
          clang -cc1 -help

'-mrelax-all'
     Clang/LLVM option for future documentation.

'-O0'
     Reduce compilation time and make debugging produce the expected
     results.  This is the default.

'-O'
'-O1'
     Optimize.  Optimizing compilation takes somewhat more time, and a
     lot more memory for a large function.

     With '-O', the compiler tries to reduce code size and execution
     time, without performing any optimizations that take a great deal
     of compilation time.

     Because of the way Clang/LLVM works, it is not easy to list the
     individual optimization passes turned on by '-O'.

     '-O' turns on '-fomit-frame-pointer' on machines where doing so
     does not interfere with debugging.

'-O2'
     Optimize even more.  LLVM performs nearly all supported
     optimizations that do not involve a space-speed tradeoff.  As
     compared to '-O', this option increases both compilation time and
     the performance of the generated code.

     _Note:_ When compiling a program using computed gotos, a GCC
     extension, compile time performance may be very severly degraded.
     This is caused by the global common sub-expression elimination
     optimization, and at present there is no mechanism to disable this
     optimization pass in Clang/LLVM.

'-O3'
     Optimize yet more.  '-O3' turns on all optimizations specified by
     '-O2' and then some more.

'-O4'
     This option is now deprecated in Clang/LLVM, and treated as
     equivalent to '-O3'.

'-Ofast'
     Disregard strict standards compliance.  '-Ofast' enables all '-O3'
     optimizations.  It also enables optimizations that are not valid
     for all standard-compliant programs.  It turns on '-ffast-math'.

'-Os'
     Optimize for size.  '-Os' enables all '-O2' optimizations that do
     not typically increase code size.  It also performs further
     optimizations designed to reduce code size.

'-Oz'
     Clang/LLVM option for future documentation.

'--param NAME=VALUE'
     In some places, Clang/LLVM uses various constants to control the
     amount of optimization that is done.  For example, Clang/LLVM does
     not inline functions that contain more than a certain number of
     instructions.  You can adjust many of these by using the '-mllvm'
     option to set advanced options.

     The '--param' option is the GCC equivalent of this.  While in
     general this option is not available in Clang/LLVM, one option,
     '--param ssp-buffer-size=N' is supported.

     This sets the minimum size of buffers (i.e. arrays) that receive
     stack smashing protection when stack protection (option
     '-fstack-protector') is used.


File: llvm.info,  Node: Instrumentation Options,  Next: Preprocessor Options,  Prev: Optimize Options,  Up: Invoking LLVM

3.11 Program Instrumentation Options
====================================

GCC supports a number of command-line options that control adding
run-time instrumentation to the code it normally generates.  For
example, one purpose of instrumentation is collect profiling statistics
for use in finding program hot spots, code coverage analysis, or
profile-guided optimizations.  Another class of program instrumentation
is adding run-time checking to detect programming errors like invalid
pointer dereferences or out-of-bounds array accesses, as well as
deliberately hostile attacks such as stack smashing or C++ vtable
hijacking.  There is also a general hook which can be used to implement
other forms of tracing or function-level instrumentation for debug or
program analysis purposes.

 _Note:_ Not all GCC options are supported by Clang/LLVM. *Note Option
Summary: Option Summary, for details of:
   * those options supported by both Clang/LLVM and GCC;
   * those options only supported by Clang/LLVM; and
   * those options supported only by GCC.

 The following Clang/LLVM options facilitate program instrumentation.

'--analyze'
     Clang/LLVM option for future documentation.

'--coverage'

     This option is used to compile and link code instrumented for
     coverage analysis.  The option is a synonym for '-fprofile-arcs'
     '-ftest-coverage' (when compiling) and '-lgcov' (when linking).
     See the documentation for those options for more details.

        * Compile the source files with '-fprofile-arcs' plus
          optimization and code generation options.  For test coverage
          analysis, use the additional '-ftest-coverage' option.  You do
          not need to profile every source file in a program.

        * Link your object files with '-lgcov' or '-fprofile-arcs' (the
          latter implies the former).

        * Run the program on a representative workload to generate the
          arc profile information.  This may be repeated any number of
          times.  You can run concurrent instances of your program, and
          provided that the file system supports locking, the data files
          will be correctly updated.  Also 'fork' calls are detected and
          correctly handled (double counting will not happen).

        * For profile-directed optimizations, compile the source files
          again with the same optimization and code generation options
          plus '-fbranch-probabilities' (*note Options that Control
          Optimization: Optimize Options.).

        * For test coverage analysis, use 'gcov' to produce human
          readable information from the '.gcno' and '.gcda' files.
          Refer to the 'gcov' documentation for further information.

     With '-fprofile-arcs', for each function of your program LLVM
     creates a program flow graph, then finds a spanning tree for the
     graph.  Only arcs that are not on the spanning tree have to be
     instrumented: the compiler adds code to count the number of times
     that these arcs are executed.  When an arc is the only exit or only
     entrance to a block, the instrumentation code can be added to the
     block; otherwise, a new basic block must be created to hold the
     instrumentation code.

'-fcoverage-mapping'
     Clang/LLVM option for future documentation.

'-finstrument-functions'
     Generate instrumentation calls for entry and exit to functions.
     Just after function entry and just before function exit, the
     following profiling functions are called with the address of the
     current function and its call site.  (On some platforms,
     '__builtin_return_address' does not work beyond the current
     function, so the call site information may not be available to the
     profiling functions otherwise.)

          void __cyg_profile_func_enter (void *this_fn,
                                         void *call_site);
          void __cyg_profile_func_exit  (void *this_fn,
                                         void *call_site);

     The first argument is the address of the start of the current
     function, which may be looked up exactly in the symbol table.

     This instrumentation is also done for functions expanded inline in
     other functions.  The profiling calls indicate where, conceptually,
     the inline function is entered and exited.  This means that
     addressable versions of such functions must be available.  If all
     your uses of a function are expanded inline, this may mean an
     additional expansion of code size.  If you use 'extern inline' in
     your C code, an addressable version of such functions must be
     provided.  (This is normally the case anyway, but if you get lucky
     and the optimizer always expands the functions inline, you might
     have gotten away without providing static copies.)

     A function may be given the attribute 'no_instrument_function', in
     which case this instrumentation is not done.  This can be used, for
     example, for the profiling functions listed above, high-priority
     interrupt routines, and any functions from which the profiling
     functions cannot safely be called (perhaps signal handlers, if the
     profiling routines generate output or allocate memory).

'-fprofile-arcs'
     Add code so that program flow "arcs" are instrumented.  During
     execution the program records how many times each branch and call
     is executed and how many times it is taken or returns.  When the
     compiled program exits it saves this data to a file called
     'AUXNAME.gcda' for each source file.  The data may be used for
     profile-directed optimizations ('-fbranch-probabilities'), or for
     test coverage analysis ('-ftest-coverage').  Each object file's
     AUXNAME is generated from the name of the output file, if
     explicitly specified and it is not the final executable, otherwise
     it is the basename of the source file.  In both cases any suffix is
     removed (e.g. 'foo.gcda' for input file 'dir/foo.c', or
     'dir/foo.gcda' for output file specified as '-o dir/foo.o').

'-fprofile-generate'
'-fprofile-generate=PATH'

     Enable options usually used for instrumenting application to
     produce profile useful for later recompilation with profile
     feedback based optimization.  You must use '-fprofile-generate'
     both when compiling and when linking your program.

     The following option is enabled: '-fprofile-arcs'.

     If PATH is specified, Clang/LLVM looks at the PATH to store the
     profile feedback data files.

'-fprofile-instr-generate[=FILE]'
     Clang/LLVM option for future documentation.

'-fprofile-instr-use[=FILE]'
     Clang/LLVM option for future documentation.

'-fprofile-sample-use=FILE'
     Clang/LLVM option for future documentation.

'-fno-sanitize=all'
     This option disables all previously enabled sanitizers.
     '-fsanitize=all' is not allowed, as some sanitizers cannot be used
     together.

'-fsanitize=address'
     Enable AddressSanitizer, a fast memory error detector.  Memory
     access instructions are instrumented to detect out-of-bounds and
     use-after-free bugs.  See
     <http://code.google.com/p/address-sanitizer/> for more details.
     The run-time behavior can be influenced using the 'ASAN_OPTIONS'
     environment variable; see
     <https://code.google.com/p/address-sanitizer/wiki/Flags#Run-time_flags>
     for a list of supported options.

'-fsanitize=alignment'
     This option enables checking of alignment of pointers when they are
     dereferenced, or when a reference is bound to insufficiently
     aligned target, or when a method or constructor is invoked on
     insufficiently aligned object.

     This is a sub-option of the UndefinedBehaviorSanitizer (*note
     '-fsanitize=undefined': op fsanitize=undefined.).

'-fsanitize=bool'
     This option enables instrumentation of loads from bool.  If a value
     other than 0/1 is loaded, a run-time error is issued.

     This is a sub-option of the UndefinedBehaviorSanitizer (*note
     '-fsanitize=undefined': op fsanitize=undefined.).

'-fsanitize=bounds'
     This option enables instrumentation of array bounds.  Various out
     of bounds accesses are detected.  Flexible array members, flexible
     array member-like arrays, and initializers of variables with static
     storage are not instrumented.

     This is a sub-option of the UndefinedBehaviorSanitizer (*note
     '-fsanitize=undefined': op fsanitize=undefined.).

'-fsanitize=cfi'
     Clang/LLVM option for future documentation.

'-fsanitize=enum'
     This option enables instrumentation of loads from an enum type.  If
     a value outside the range of values for the enum type is loaded, a
     run-time error is issued.

     This is a sub-option of the UndefinedBehaviorSanitizer (*note
     '-fsanitize=undefined': op fsanitize=undefined.).

'-fsanitize=float-cast-overflow'
     This option enables floating-point type to integer conversion
     checking.  We check that the result of the conversion does not
     overflow.  Unlike other similar options,
     '-fsanitize=float-cast-overflow' is not enabled by
     '-fsanitize=undefined'.  This option does not work well with
     'FE_INVALID' exceptions enabled.

     This is a sub-option of the UndefinedBehaviorSanitizer (*note
     '-fsanitize=undefined': op fsanitize=undefined.).

'-fsanitize=float-divide-by-zero'
     Detect floating-point division by zero.  Unlike other similar
     options, '-fsanitize=float-divide-by-zero' is not enabled by
     '-fsanitize=undefined', since floating-point division by zero can
     be a legitimate way of obtaining infinities and NaNs.

     This is a sub-option of the UndefinedBehaviorSanitizer (*note
     '-fsanitize=undefined': op fsanitize=undefined.).

'-fsanitize=integer-divide-by-zero'
     Detect integer division by zero as well as 'INT_MIN / -1' division.

     This is a sub-option of the UndefinedBehaviorSanitizer (*note
     '-fsanitize=undefined': op fsanitize=undefined.).

'-fsanitize=kernel-address'
     Enable AddressSanitizer for Linux kernel.  See
     <https://github.com/google/kasan/wiki> for more details.

'-fsanitize=leak'
     Enable LeakSanitizer, a memory leak detector.  This option only
     matters for linking of executables and if neither
     '-fsanitize=address' nor '-fsanitize=thread' is used.  In that case
     the executable is linked against a library that overrides 'malloc'
     and other allocator functions.  See
     <https://code.google.com/p/address-sanitizer/wiki/LeakSanitizer>
     for more details.  The run-time behavior can be influenced using
     the 'LSAN_OPTIONS' environment variable.

'-fsanitize=nonnull-attribute'

     This option enables instrumentation of calls, checking whether null
     values are not passed to arguments marked as requiring a non-null
     value by the 'nonnull' function attribute.

     This is a sub-option of the UndefinedBehaviorSanitizer (*note
     '-fsanitize=undefined': op fsanitize=undefined.).

'-fsanitize=null'
     This option enables pointer checking.  Particularly, the
     application built with this option turned on will issue an error
     message when it tries to dereference a NULL pointer, or if a
     reference (possibly an rvalue reference) is bound to a NULL
     pointer, or if a method is invoked on an object pointed by a NULL
     pointer.

     This is a sub-option of the UndefinedBehaviorSanitizer (*note
     '-fsanitize=undefined': op fsanitize=undefined.).

'-fsanitize=object-size'
     This option enables instrumentation of memory references using the
     '__builtin_object_size' function.  Various out of bounds pointer
     accesses are detected.

     This is a sub-option of the UndefinedBehaviorSanitizer (*note
     '-fsanitize=undefined': op fsanitize=undefined.).

'-fsanitize=return'
     This option enables return statement checking.  Programs built with
     this option turned on will issue an error message when the end of a
     non-void function is reached without actually returning a value.
     This option works in C++ only.

     This is a sub-option of the UndefinedBehaviorSanitizer (*note
     '-fsanitize=undefined': op fsanitize=undefined.).

'-fsanitize=returns-nonnull-attribute'

     This option enables instrumentation of return statements in
     functions marked with 'returns_nonnull' function attribute, to
     detect returning of null values from such functions.

     This is a sub-option of the UndefinedBehaviorSanitizer (*note
     '-fsanitize=undefined': op fsanitize=undefined.).

'-fsanitize=shift'
     This option enables checking that the result of a shift operation
     is not undefined.  Note that what exactly is considered undefined
     differs slightly between C and C++, as well as between ISO C90 and
     C99, etc.

     This is a sub-option of the UndefinedBehaviorSanitizer (*note
     '-fsanitize=undefined': op fsanitize=undefined.).

'-fsanitize=signed-integer-overflow'
     This option enables signed integer overflow checking.  We check
     that the result of '+', '*', and both unary and binary '-' does not
     overflow in the signed arithmetics.  Note, integer promotion rules
     must be taken into account.  That is, the following is not an
     overflow:
          signed char a = SCHAR_MAX;
          a++;

     This is a sub-option of the UndefinedBehaviorSanitizer (*note
     '-fsanitize=undefined': op fsanitize=undefined.).

'-fsanitize=thread'
     Enable ThreadSanitizer, a fast data race detector.  Memory access
     instructions are instrumented to detect data race bugs.  See
     <https://github.com/google/sanitizers/wiki#threadsanitizer> for
     more details.  The run-time behavior can be influenced using the
     'TSAN_OPTIONS' environment variable; see
     <https://github.com/google/sanitizers/wiki/ThreadSanitizerFlags>
     for a list of supported options.

'-fsanitize=undefined'
     Enable UndefinedBehaviorSanitizer, a fast undefined behavior
     detector.  Various computations are instrumented to detect
     undefined behavior at runtime.  Current suboptions are:

        * '-fsanitize=alignment'

        * '-fsanitize=bool'

        * '-fsanitize=bounds'

        * '-fsanitize=enum'

        * '-fsanitize=float-cast-overflow'

        * '-fsanitize=float-divide-by-zero'

        * '-fsanitize=integer-divide-by-zero'

        * '-fsanitize=nonnull-attribute'

        * '-fsanitize=null'

        * '-fsanitize=object-size'

        * '-fsanitize=return'

        * '-fsanitize=returns-nonnull-attribute'

        * '-fsanitize=shift'

        * '-fsanitize=signed-integer-overflow'

        * '-fsanitize=unreachable'

        * '-fsanitize=vla-bound'

        * '-fsanitize=vptr'

     While '-ftrapv' causes traps for signed overflows to be emitted,
     '-fsanitize=undefined' gives a diagnostic message.  This currently
     works only for the C family of languages.

'-fsanitize=unreachable'
     With this option, the compiler turns the '__builtin_unreachable'
     call into a diagnostics message call instead.  When reaching the
     '__builtin_unreachable' call, the behavior is undefined.

     This is a sub-option of the UndefinedBehaviorSanitizer (*note
     '-fsanitize=undefined': op fsanitize=undefined.).

'-fsanitize=vla-bound'
     This option instructs the compiler to check that the size of a
     variable length array is positive.

     This is a sub-option of the UndefinedBehaviorSanitizer (*note
     '-fsanitize=undefined': op fsanitize=undefined.).

'-fsanitize=vptr'

     This option enables instrumentation of C++ member function calls,
     member accesses and some conversions between pointers to base and
     derived classes, to verify the referenced object has the correct
     dynamic type.

     This is a sub-option of the UndefinedBehaviorSanitizer (*note
     '-fsanitize=undefined': op fsanitize=undefined.).

'-fsanitize-address-field-padding=N'
     Clang/LLVM option for future documentation.

'-fsanitize-blacklist=FILE'
     Clang/LLVM option for future documentation.

'-fsanitize-cfi-cross-dso'
     Clang/LLVM option for future documentation.

'-fsanitize-coverage=bb'
     Clang/LLVM option for future documentation.

'-fsanitize-coverage=edge'
     Clang/LLVM option for future documentation.

'-fsanitize-coverage=func'
     Clang/LLVM option for future documentation.

'-fsanitize-coverage=indirect-calls'
     Clang/LLVM option for future documentation.

'-fsanitize-memory-track-origins[N]'
     Clang/LLVM option for future documentation.

'-fsanitize-memory-use-after-dtor'
     Clang/LLVM option for future documentation.

'-fsanitize-recover[=OPTS]'
     '-fsanitize-recover=' controls error recovery mode for sanitizers
     mentioned in comma-separated list of OPTS.  Enabling this option
     for a sanitizer component causes it to attempt to continue running
     the program as if no error happened.  This means multiple runtime
     errors can be reported in a single program run, and the exit code
     of the program may indicate success even when errors have been
     reported.  The '-fno-sanitize-recover=' option can be used to alter
     this behavior: only the first detected error is reported and
     program then exits with a non-zero exit code.

     Currently this feature only works for:

        * '-fsanitize-recover=address'

        * '=alignment'

        * '-fsanitize-recover==bool'

        * '-fsanitize-recover==bounds'

        * '-fsanitize-recover==enum'

        * '-fsanitize-recover==float-cast-overflow'

        * '-fsanitize-recover==float-divide-by-zero'

        * '-fsanitize-recover==integer-divide-by-zero'

        * '-fsanitize-recover==kernel-address'

        * '-fsanitize-recover==leak'

        * '-fsanitize-recover==nonnull-attribute'

        * '-fsanitize-recover==null'

        * '-fsanitize-recover==object-size'

        * '-fsanitize-recover==returns-nonnull-attribute'

        * '-fsanitize-recover==shift'

        * '-fsanitize-recover==signed-integer-overflow'

        * '-fsanitize-recover==thread'

        * '-fsanitize-recover==undefined'

        * '-fsanitize-recover==vla-bound'

        * '-fsanitize-recover==vptr'

     Syntax without explicit OPTS parameter is deprecated.  It is
     equivalent to
          -fsanitize-recover=undefined,float-cast-overflow,float-divide-by-zero
     Similarly '-fno-sanitize-recover' is equivalent to
          -fno-sanitize-recover=undefined,float-cast-overflow,float-divide-by-zero

'-fsanitize-stats'
     Clang/LLVM option for future documentation.

'-fsanitize-trap=STYLE'
     Clang/LLVM option for future documentation.

'-fsanitize-undefined-trap-on-error'
     The '-fsanitize-undefined-trap-on-error' option instructs the
     compiler to report undefined behavior using '__builtin_trap' rather
     than a 'libubsan' library routine.  The advantage of this is that
     the 'libubsan' library is not needed and is not linked in, so this
     is usable even in freestanding environments.

'-fsplit-stack'
     Generate code to automatically split the stack before it overflows.
     The resulting program has a discontiguous stack which can only
     overflow if the program is unable to allocate any more memory.
     This is most useful when running threaded programs, as it is no
     longer necessary to calculate a good stack size to use for each
     thread.  This is currently only implemented for the x86 targets
     running GNU/Linux.

     When code compiled with '-fsplit-stack' calls code compiled without
     '-fsplit-stack', there may not be much stack space available for
     the latter code to run.  If compiling all code, including library
     code, with '-fsplit-stack' is not an option, then the linker can
     fix up these calls so that the code compiled without
     '-fsplit-stack' always has a large stack.  Support for this is
     implemented in the gold linker in GNU binutils release 2.21 and
     later.

'-fstack-check'
     Generate code to verify that you do not go beyond the boundary of
     the stack.  You should specify this flag if you are running in an
     environment with multiple threads, but you only rarely need to
     specify it in a single-threaded environment since stack overflow is
     automatically detected on nearly all systems if there is only one
     stack.

     Note that this switch does not actually cause checking to be done;
     the operating system or the language runtime must do that.  The
     switch causes generation of code to ensure that they see the stack
     being extended.

     You can additionally specify a string parameter: 'no' means no
     checking, 'generic' means force the use of old-style checking,
     'specific' means use the best checking method and is equivalent to
     bare '-fstack-check'.

     Old-style checking is a generic mechanism that requires no specific
     target support in the compiler but comes with the following
     drawbacks:

       1. Modified allocation strategy for large objects: they are
          always allocated dynamically if their size exceeds a fixed
          threshold.

       2. Fixed limit on the size of the static frame of functions: when
          it is topped by a particular function, stack checking is not
          reliable and a warning is issued by the compiler.

       3. Inefficiency: because of both the modified allocation strategy
          and the generic implementation, code performance is hampered.

     Note that old-style stack checking is also the fallback method for
     'specific' if no target support has been added in the compiler.

'-fstack-protector'
     Emit extra code to check for buffer overflows, such as stack
     smashing attacks.  This is done by adding a guard variable to
     functions with vulnerable objects.  This includes functions that
     call 'alloca', and functions with buffers larger than 8 bytes.  The
     guards are initialized when a function is entered and then checked
     when the function exits.  If a guard check fails, an error message
     is printed and the program exits.

'-fstack-protector-all'
     Like '-fstack-protector' except that all functions are protected.

'-fstack-protector-strong'
     Like '-fstack-protector' but includes additional functions to be
     protected -- those that have local array definitions, or have
     references to local frame addresses.

'-ftest-coverage'
     Produce a notes file that the 'gcov' code-coverage utility can use
     to show program coverage.  Each source file's note file is called
     'AUXNAME.gcno'.  Refer to the '-fprofile-arcs' option above for a
     description of AUXNAME and instructions on how to generate test
     coverage data.  Coverage data matches the source files more closely
     if you do not optimize.

'-pg'
     Generate extra code to write profile information suitable for the
     analysis program 'gprof'.  You must use this option when compiling
     the source files you want data about, and you must also use it when
     linking.


File: llvm.info,  Node: Preprocessor Options,  Next: Assembler Options,  Prev: Instrumentation Options,  Up: Invoking LLVM

3.12 Options Controlling the Preprocessor
=========================================

These options control the C preprocessor, which is run on each C source
file before actual compilation.

 _Note:_ Not all GCC options are supported by Clang/LLVM. *Note Option
Summary: Option Summary, for details of:
   * those options supported by both Clang/LLVM and GCC;
   * those options only supported by Clang/LLVM; and
   * those options supported only by GCC.

 If you use the '-E' option, nothing is done except preprocessing.  Some
of these Clang/LLVM options make sense only together with '-E' because
they cause the preprocessor output to be unsuitable for actual
compilation.

'-C'
     Do not discard comments.  All comments are passed through to the
     output file, except for comments in processed directives, which are
     deleted along with the directive.

     You should be prepared for side effects when using '-C'; it causes
     the preprocessor to treat comments as tokens in their own right.
     For example, comments appearing at the start of what would be a
     directive line have the effect of turning that line into an
     ordinary source line, since the first token on the line is no
     longer a '#'.

'-CC'
     Do not discard comments, including during macro expansion.  This is
     like '-C', except that comments contained within macros are also
     passed through to the output file where the macro is expanded.

     In addition to the side-effects of the '-C' option, the '-CC'
     option causes all C++-style comments inside a macro to be converted
     to C-style comments.  This is to prevent later use of that macro
     from inadvertently commenting out the remainder of the source line.

     The '-CC' option is generally used to support lint comments.

'-cxx-isystem=FILE'
     Clang/LLVM option for future documentation.

'-D NAME[=DEFINITION]'
'-D NAME'
     If DEFINITION is nor proved, predefine NAME as a macro, with
     definition '1'.

     Otherwise, the contents of DEFINITION are tokenized and processed
     as if they appeared during translation phase three in a '#define'
     directive.  In particular, the definition will be truncated by
     embedded newline characters.

     If you are invoking the preprocessor from a shell or shell-like
     program you may need to use the shell's quoting syntax to protect
     characters such as spaces that have a meaning in the shell syntax.

     If you wish to define a function-like macro on the command line,
     write its argument list with surrounding parentheses before the
     equals sign (if any).  Parentheses are meaningful to most shells,
     so you will need to quote the option.  With 'sh' and 'csh',
     '-D'NAME(ARGS...)=DEFINITION'' works.

     '-D' and '-U' options are processed in the order they are given on
     the command line.  All '-imacros FILE' and '-include FILE' options
     are processed after all '-D' and '-U' options.

'-dM'
     Instead of the normal output, generate a list of '#define'
     directives for all the macros defined during the execution of the
     preprocessor, including predefined macros.  This gives you a way of
     finding out what is predefined in your version of the preprocessor.
     Assuming you have no file 'foo.h', the command

          touch foo.h; cpp -dM foo.h

     will show all the predefined macros.

     If you use '-dM' without the '-E' option, '-dM' is interpreted as a
     synonym for '-fdump-rtl-mach'.  *Note (gcc)Debugging Options::.

'-dD'
     Like 'M' except in two respects: it does _not_ include the
     predefined macros, and it outputs _both_ the '#define' directives
     and the result of preprocessing.  Both kinds of output go to the
     standard output file.

'-E'
     Documented in the section on options controlling output.  *Note
     '-E': op E.

'-fcomment-block-commands=CMD'
     Clang/LLVM option for future documentation.

'-fdeclspec'
     Clang/LLVM option for future documentation.

'-fdollars-in-identifiers'
     Accept '$' in identifiers.

'-fexec-charset=CHARSET'
     Set the execution character set, used for string and character
     constants.  The default is UTF-8.  CHARSET can be any encoding
     supported by the system's 'iconv' library routine.

'-fextended-identifiers'
     Accept universal character names in identifiers.  This option is
     enabled by default for C99 (and later C standard versions) and C++.

'-finput-charset=CHARSET'
     Set the input character set, used for translation from the
     character set of the input file to the source character set used by
     LLVM.  If the locale does not specify, or LLVM cannot get this
     information from the locale, the default is UTF-8.  This can be
     overridden by either the locale or this command line option.
     Currently the command line option takes precedence if there's a
     conflict.  CHARSET can be any encoding supported by the system's
     'iconv' library routine.

'-fpch-preprocess'
     This option allows use of a precompiled header (*note Precompiled
     Headers::) together with '-E'.  It inserts a special '#pragma',
     '#pragma GCC pch_preprocess "FILENAME"' in the output to mark the
     place where the precompiled header was found, and its FILENAME.
     When '-fpreprocessed' is in use, LLVM recognizes this '#pragma' and
     loads the PCH.

     This option is off by default, because the resulting preprocessed
     output is only really suitable as input to LLVM.  It is switched on
     by '-save-temps'.

     You should not write this '#pragma' in your own code, but it is
     safe to edit the filename if the PCH file is available in a
     different location.  The filename may be absolute or it may be
     relative to LLVM's current directory.

'-fno-show-column'
     Do not print column numbers in diagnostics.  This may be necessary
     if diagnostics are being scanned by a program that does not
     understand the column numbers, such as 'dejagnu'.

'-ftabstop=WIDTH'
     Set the distance between tab stops.  This helps the preprocessor
     report correct column numbers in warnings or errors, even if tabs
     appear on the line.  If the value is less than 1 or greater than
     100, the option is ignored.  The default is 8.

'-ftrigraphs'
     Clang/LLVM option for future documentation.

'-H'
     Print the name of each header file used, in addition to other
     normal activities.  Each name is indented to show how deep in the
     '#include' stack it is.  Precompiled header files are also printed,
     even if they are found to be invalid; an invalid precompiled header
     file is printed with '...x' and a valid one with '...!' .

'-idirafter DIR'
     Search DIR for header files, but do it _after_ all directories
     specified with '-I' and the standard system directories have been
     exhausted.  DIR is treated as a system include directory.  If DIR
     begins with '=', then the '=' will be replaced by the sysroot
     prefix; see '--sysroot' and '-isysroot'.

'-iframeworkDIR'
     Clang/LLVM option for future documentation.

'-imacros FILE'
     Exactly like '-include', except that any output produced by
     scanning FILE is thrown away.  Macros it defines remain defined.
     This allows you to acquire all the macros from a header without
     also processing its declarations.

     All files specified by '-imacros' are processed before all files
     specified by '-include'.

'-include FILE'
     Process FILE as if '#include "file"' appeared as the first line of
     the primary source file.  However, the first directory searched for
     FILE is the preprocessor's working directory _instead of_ the
     directory containing the main source file.  If not found there, it
     is searched for in the remainder of the '#include "..."' search
     chain as normal.

     If multiple '-include' options are given, the files are included in
     the order they appear on the command line.

'-include-pch FILE'
     Clang/LLVM option for future documentation.

'-index-header-map'
     Clang/LLVM option for future documentation.

'-iprefix PREFIX'
     Specify PREFIX as the prefix for subsequent '-iwithprefix' options.
     If the prefix represents a directory, you should include the final
     '/'.

'-isysroot DIR'
     This option is like the '--sysroot' option, but applies only to
     header files (except for Darwin targets, where it applies to both
     header files and libraries).  See the '--sysroot' option for more
     information.

'-isystem DIR'
     Search DIR for header files, after all directories specified by
     '-I' but before the standard system directories.  Mark it as a
     system directory, so that it gets the same special treatment as is
     applied to the standard system directories.  If DIR begins with
     '=', then the '=' will be replaced by the sysroot prefix; see
     '--sysroot' and '-isysroot'.

'-iwithprefix DIR'
'-iwithprefixbefore DIR'
     Append DIR to the prefix specified previously with '-iprefix', and
     add the resulting directory to the include search path.
     '-iwithprefixbefore' puts it in the same place '-I' would;
     '-iwithprefix' puts it where '-idirafter' would.

'-iwithsysroot DIR'
     Clang/LLVM option for future documentation.

'-M'
     Instead of outputting the result of preprocessing, output a rule
     suitable for 'make' describing the dependencies of the main source
     file.  The preprocessor outputs one 'make' rule containing the
     object file name for that source file, a colon, and the names of
     all the included files, including those coming from '-include' or
     '-imacros' command line options.

     Unless specified explicitly (with '-MT' or '-MQ'), the object file
     name consists of the name of the source file with any suffix
     replaced with object file suffix and with any leading directory
     parts removed.  If there are many included files then the rule is
     split into several lines using '\'-newline.  The rule has no
     commands.

     This option does not suppress the preprocessor's debug output, such
     as '-dM'.  To avoid mixing such debug output with the dependency
     rules you should explicitly specify the dependency output file with
     '-MF', or use an environment variable like 'DEPENDENCIES_OUTPUT'
     (*note Environment Variables::).  Debug output will still be sent
     to the regular output stream as normal.

     Passing '-M' to the driver implies '-E', and suppresses warnings
     with an implicit '-w'.

'-MD'
     '-MD' is equivalent to '-M -MF FILE', except that '-E' is not
     implied.  The driver determines FILE based on whether an '-o'
     option is given.  If it is, the driver uses its argument but with a
     suffix of '.d', otherwise it takes the name of the input file,
     removes any directory components and suffix, and applies a '.d'
     suffix.

     If '-MD' is used in conjunction with '-E', any '-o' switch is
     understood to specify the dependency output file (*note -MF:
     dashMF.), but if used without '-E', each '-o' is understood to
     specify a target object file.

     Since '-E' is not implied, '-MD' can be used to generate a
     dependency output file as a side-effect of the compilation process.

'-MF FILE'
     When used with '-M' or '-MM', specifies a file to write the
     dependencies to.  If no '-MF' switch is given the preprocessor
     sends the rules to the same place it would have sent preprocessed
     output.

     When used with the driver options '-MD' or '-MMD', '-MF' overrides
     the default dependency output file.

'-MG'
     In conjunction with an option such as '-M' requesting dependency
     generation, '-MG' assumes missing header files are generated files
     and adds them to the dependency list without raising an error.  The
     dependency filename is taken directly from the '#include' directive
     without prepending any path.  '-MG' also suppresses preprocessed
     output, as a missing header file renders this useless.

     This feature is used in automatic updating of makefiles.

'--migrate'
     Clang/LLVM option for future documentation.

'-MM'
     Like '-M' but do not mention header files that are found in system
     header directories, nor header files that are included, directly or
     indirectly, from such a header.

     This implies that the choice of angle brackets or double quotes in
     an '#include' directive does not in itself determine whether that
     header will appear in '-MM' dependency output.  This is a slight
     change in semantics from GCC versions 3.0 and earlier.

'-MMD'
     Like '-MD' except mention only user header files, not system header
     files.

'-MP'
     This option instructs CPP to add a phony target for each dependency
     other than the main file, causing each to depend on nothing.  These
     dummy rules work around errors 'make' gives if you remove header
     files without updating the 'Makefile' to match.

     This is typical output:

          test.o: test.c test.h

          test.h:

'-MQ TARGET'

     Same as '-MT', but it quotes any characters which are special to
     Make.  '-MQ '$(objpfx)foo.o'' gives

          $$(objpfx)foo.o: foo.c

     The default target is automatically quoted, as if it were given
     with '-MQ'.

'-MT TARGET'

     Change the target of the rule emitted by dependency generation.  By
     default CPP takes the name of the main input file, deletes any
     directory components and any file suffix such as '.c', and appends
     the platform's usual object suffix.  The result is the target.

     An '-MT' option will set the target to be exactly the string you
     specify.  If you want multiple targets, you can specify them as a
     single argument to '-MT', or use multiple '-MT' options.

     For example, '-MT '$(objpfx)foo.o'' might give

          $(objpfx)foo.o: foo.c

'-MV'
     Clang/LLVM option for future documentation.

'-no-integrated-cpp'
     Perform preprocessing as a separate pass before compilation.  By
     default, LLVM performs preprocessing as an integrated part of input
     tokenization and parsing.  If this option is provided, 'clang' is
     instead invoked twice, once for preprocessing only and once for
     actual compilation of the preprocessed input.  This option may be
     useful in conjunction with the '-B' or '-wrapper' options to
     specify an alternate preprocessor or perform additional processing
     of the program source between normal preprocessing and compilation.

'-nostdinc'
     Do not search the standard system directories for header files.
     Only the directories you have specified with '-I' options (and the
     directory of the current file, if appropriate) are searched.

'--no-system-header-prefix=PREFIX'
     Clang/LLVM option for future documentation.

'-nobuiltininc'
     Clang/LLVM option for future documentation.

'-P'
     Inhibit generation of linemarkers in the output from the
     preprocessor.  This might be useful when running the preprocessor
     on something that is not C code, and will be sent to a program
     which might be confused by the linemarkers.

'-relocatable-pch'
     Clang/LLVM option for future documentation.

'-trigraphs'

     This is documented as a C language specific option.  *Note
     '-trigraphs': op trigraphs.

'--system-header-prefix=PREFIX'
     Clang/LLVM option for future documentation.

'-U NAME'
     Cancel any previous definition of NAME, either built in or provided
     with a '-D' option.

'-undef'
     Do not predefine any system-specific or LLVM-specific macros.  The
     standard predefined macros remain defined.

'-verify-pch'
     Clang/LLVM option for future documentation.

'-Wp,OPTION'
     You can use '-Wp,OPTION' to bypass the compiler driver and pass
     OPTION directly through to the preprocessor.  If OPTION contains
     commas, it is split into multiple options at the commas.  However,
     many options are modified, translated or interpreted by the
     compiler driver before being passed to the preprocessor, and '-Wp'
     forcibly bypasses this phase.  The preprocessor's direct interface
     is undocumented and subject to change, so whenever possible you
     should avoid using '-Wp' and let the driver handle the options
     instead.

'-Xpreprocessor OPTION'
     Pass OPTION as an option to the preprocessor.  You can use this to
     supply system-specific preprocessor options that LLVM does not
     recognize.

     If you want to pass an option that takes an argument, you must use
     '-Xpreprocessor' twice, once for the option and once for the
     argument.


File: llvm.info,  Node: Assembler Options,  Next: Link Options,  Prev: Preprocessor Options,  Up: Invoking LLVM

3.13 Passing Options to the Assembler
=====================================

_Note:_ Not all GCC options are supported by Clang/LLVM. *Note Option
Summary: Option Summary, for details of:
   * those options supported by both Clang/LLVM and GCC;
   * those options only supported by Clang/LLVM; and
   * those options supported only by GCC.

 You can pass options to the assembler.

'-Wa,OPTION'
     Pass OPTION as an option to the assembler.  If OPTION contains
     commas, it is split into multiple options at the commas.

'-Xassembler OPTION'
     Pass OPTION as an option to the assembler.  You can use this to
     supply system-specific assembler options that Clang/LLVM does not
     recognize.

     If you want to pass an option that takes an argument, you must use
     '-Xassembler' twice, once for the option and once for the argument.

'-fno-integrated-as'
     Clang/LLVM option for future documentation.


File: llvm.info,  Node: Link Options,  Next: Directory Options,  Prev: Assembler Options,  Up: Invoking LLVM

3.14 Options for Linking
========================

These options come into play when the compiler links object files into
an executable output file.  They are meaningless if the compiler is not
doing a link step.

 _Note:_ Not all GCC options are supported by Clang/LLVM. *Note Option
Summary: Option Summary, for details of:
   * those options supported by both Clang/LLVM and GCC;
   * those options only supported by Clang/LLVM; and
   * those options supported only by GCC.

 A file name that does not end in a special recognized suffix is
considered to name an object file or library.  (Object files are
distinguished from libraries by the linker according to the file
contents.)  If linking is done, these object files are used as input to
the linker.

 If any of these options '-c', '-E' or '-S' is used, then the linker is
not run, and object file names should not be used as arguments.  *Note
Overall Options::.

 The following Clang/LLVM options control the linker.

'-fno-autolink'
     Clang/LLVM option for future documentation.

'-fno-use-init-array'
     Clang/LLVM option for future documentation.

'-fuse-ld=bfd'
     Use the 'bfd' linker instead of the default linker.

'-fuse-ld=gold'
     Use the 'gold' linker instead of the default linker.

'-fveclib=LIB'
     Clang/LLVM option for future documentation.

'-lLIBRARY'
'-l LIBRARY'
     Search the library named LIBRARY when linking.  (The second
     alternative with the library as a separate argument is only for
     POSIX compliance and is not recommended.)

     It makes a difference where in the command you write this option;
     the linker searches and processes libraries and object files in the
     order they are specified.  Thus, 'foo.o -lz bar.o' searches library
     'z' after file 'foo.o' but before 'bar.o'.  If 'bar.o' refers to
     functions in 'z', those functions may not be loaded.

     The linker searches a standard list of directories for the library,
     which is actually a file named 'libLIBRARY.a'.  The linker then
     uses this file as if it had been specified precisely by name.

     The directories searched include several standard system
     directories plus any that you specify with '-L'.

     Normally the files found this way are library files--archive files
     whose members are object files.  The linker handles an archive file
     by scanning through it for members which define symbols that have
     so far been referenced but not defined.  But if the file that is
     found is an ordinary object file, it is linked in the usual
     fashion.  The only difference between using an '-l' option and
     specifying a file name is that '-l' surrounds LIBRARY with 'lib'
     and '.a' and searches several directories.

'-lobjc'
     You need this special case of the '-l' option in order to link an
     Objective-C or Objective-C++ program.

'-mincremental-linker-compatible'
     Clang/LLVM option for future documentation.

'-nodefaultlibs'
     Do not use the standard system libraries when linking.  Only the
     libraries you specify are passed to the linker, and options
     specifying linkage of the system libraries, such as
     '-static-libgcc' or '-shared-libgcc', are ignored.  The standard
     startup files are used normally, unless '-nostartfiles' is used.

     The compiler may generate calls to 'memcmp', 'memset', 'memcpy' and
     'memmove'.  These entries are usually resolved by entries in libc.
     These entry points should be supplied through some other mechanism
     when this option is specified.

'-nostartfiles'
     Do not use the standard system startup files when linking.  The
     standard system libraries are used normally, unless '-nostdlib' or
     '-nodefaultlibs' is used.

'-nostdlib'
     Do not use the standard system startup files or libraries when
     linking.  No startup files and only the libraries you specify are
     passed to the linker, and options specifying linkage of the system
     libraries, such as '-static-libgcc' or '-shared-libgcc', are
     ignored.

     The compiler may generate calls to 'memcmp', 'memset', 'memcpy' and
     'memmove'.  These entries are usually resolved by entries in libc.
     These entry points should be supplied through some other mechanism
     when this option is specified.

     One of the standard libraries bypassed by '-nostdlib' and
     '-nodefaultlibs' is 'libgcc.a', a library of internal subroutines
     which LLVM uses to overcome shortcomings of particular machines, or
     special needs for some languages.  (*Note Interfacing to GCC
     Output: (gccint)Interface, for more discussion of 'libgcc.a'.)  In
     most cases, you need 'libgcc.a' even when you want to avoid other
     standard libraries.  In other words, when you specify '-nostdlib'
     or '-nodefaultlibs' you should usually specify '-lgcc' as well.
     This ensures that you have no unresolved references to internal
     LLVM library subroutines.  (An example of such an internal
     subroutine is '__main', used to ensure C++ constructors are called;
     *note 'collect2': (gccint)Collect2.)

'-pie'
     Produce a position independent executable on targets that support
     it.  For predictable results, you must also specify the same set of
     options used for compilation ('-fpie', '-fPIE', or model
     suboptions) when you specify this linker option.

'-rdynamic'
     Pass the flag '-export-dynamic' to the ELF linker, on targets that
     support it.  This instructs the linker to add all symbols, not only
     used ones, to the dynamic symbol table.  This option is needed for
     some uses of 'dlopen' or to allow obtaining backtraces from within
     a program.

'-s'
     Remove all symbol table and relocation information from the
     executable.

'-static'
     On systems that support dynamic linking, this prevents linking with
     the shared libraries.  On other systems, this option has no effect.

'-shared'
     Produce a shared object which can then be linked with other objects
     to form an executable.  Not all systems support this option.  For
     predictable results, you must also specify the same set of options
     used for compilation ('-fpic', '-fPIC', or model suboptions) when
     you specify this linker option.(1)

'-static-libgcc'
     This option is accepted by Clang/LLVM, although it is not clear
     that it has any effect.  Clang/LLVM, does not use 'libgcc', instead
     it has 'CompilerRT'.

'-stdlib=LIB'
     Clang/LLVM option for future documentation.

'-Wl,OPTION'
     Pass OPTION as an option to the linker.  If OPTION contains commas,
     it is split into multiple options at the commas.  You can use this
     syntax to pass an argument to the option.  For example,
     '-Wl,-Map,output.map' passes '-Map output.map' to the linker.  When
     using the GNU linker, you can also get the same effect with
     '-Wl,-Map=output.map'.

'-u SYMBOL'
     Pretend the symbol SYMBOL is undefined, to force linking of library
     modules to define it.  You can use '-u' multiple times with
     different symbols to force loading of additional library modules.

'-Xlinker OPTION'
     Pass OPTION as an option to the linker.  You can use this to supply
     system-specific linker options that LLVM does not recognize.

     If you want to pass an option that takes a separate argument, you
     must use '-Xlinker' twice, once for the option and once for the
     argument.  For example, to pass '-assert definitions', you must
     write '-Xlinker -assert -Xlinker definitions'.  It does not work to
     write '-Xlinker "-assert definitions"', because this passes the
     entire string as a single argument, which is not what the linker
     expects.

     When using the GNU linker, it is usually more convenient to pass
     arguments to linker options using the 'OPTION=VALUE' syntax than as
     separate arguments.  For example, you can specify '-Xlinker
     -Map=output.map' rather than '-Xlinker -Map -Xlinker output.map'.
     Other linkers may not support this syntax for command-line options.

'-z KEYWORD'
     '-z' is passed directly on to the linker along with the keyword
     KEYWORD.  See the section in the documentation of your linker for
     permitted values and their meanings.

   ---------- Footnotes ----------

   (1) On some systems, 'gcc -shared' needs to build supplementary stub
code for constructors to work.  On multi-libbed systems, 'gcc -shared'
must select the correct support libraries to link against.  Failing to
supply the correct flags may lead to subtle defects.  Supplying them in
cases where they are not necessary is innocuous.


File: llvm.info,  Node: Directory Options,  Next: Code Gen Options,  Prev: Link Options,  Up: Invoking LLVM

3.15 Options for Directory Search
=================================

These Clang/LLVM options specify directories to search for header files,
for libraries and for parts of the compiler:

 _Note:_ Not all GCC options are supported by Clang/LLVM. *Note Option
Summary: Option Summary, for details of:
   * those options supported by both Clang/LLVM and GCC;
   * those options only supported by Clang/LLVM; and
   * those options supported only by GCC.

'-IDIR'
     Add the directory DIR to the head of the list of directories to be
     searched for header files.  This can be used to override a system
     header file, substituting your own version, since these directories
     are searched before the system header file directories.  However,
     you should not use this option to add directories that contain
     vendor-supplied system header files (use '-isystem' for that).  If
     you use more than one '-I' option, the directories are scanned in
     left-to-right order; the standard system directories come after.

     If a standard system include directory, or a directory specified
     with '-isystem', is also specified with '-I', the '-I' option is
     ignored.  The directory is still searched but as a system directory
     at its normal position in the system include chain.  This is to
     ensure that LLVM's procedure to fix buggy system headers and the
     ordering for the 'include_next' directive are not inadvertently
     changed.  If you really need to change the search order for system
     directories, use the '-nostdinc' and/or '-isystem' options.

'-iquoteDIR'
     Add the directory DIR to the head of the list of directories to be
     searched for header files only for the case of '#include "FILE"';
     they are not searched for '#include <FILE>', otherwise just like
     '-I'.

'-LDIR'
     Add directory DIR to the list of directories to be searched for
     '-l'.

'--sysroot=DIR'
     Use DIR as the logical root directory for headers and libraries.
     For example, if the compiler normally searches for headers in
     '/usr/include' and libraries in '/usr/lib', it instead searches
     'DIR/usr/include' and 'DIR/usr/lib'.

     If you use both this option and the '-isysroot' option, then the
     '--sysroot' option applies to libraries, but the '-isysroot' option
     applies to header files.

     The GNU linker (beginning with version 2.16) has the necessary
     support for this option.  If your linker does not support this
     option, the header file aspect of '--sysroot' still works, but the
     library aspect does not.


File: llvm.info,  Node: Code Gen Options,  Next: Developer Options,  Prev: Directory Options,  Up: Invoking LLVM

3.16 Options for Code Generation Conventions
============================================

These machine-independent options control the interface conventions used
in code generation.

 _Note:_ Not all GCC options are supported by Clang/LLVM. *Note Option
Summary: Option Summary, for details of:
   * those options supported by both Clang/LLVM and GCC;
   * those options only supported by Clang/LLVM; and
   * those options supported only by GCC.

 Most of these Clang/LLVM options have both positive and negative forms;
the negative form of '-ffoo' is '-fno-foo'.  In the table below, only
one of the forms is listed--the one that is not the default.  You can
figure out the other form by either removing 'no-' or adding it.

'-fapple-kext'
     Clang/LLVM option for future documentation.

'-fapple-pragma-pack'
     Clang/LLVM option for future documentation.

'-fapplication-extension'
     Clang/LLVM option for future documentation.

'-fasynchronous-unwind-tables'
     Generate unwind table in DWARF 2 format, if supported by target
     machine.  The table is exact at each instruction boundary, so it
     can be used for stack unwinding from asynchronous events (such as
     debugger or garbage collector).

'-fno-common'
     In C code, controls the placement of uninitialized global
     variables.  Unix C compilers have traditionally permitted multiple
     definitions of such variables in different compilation units by
     placing the variables in a common block.  This is the behavior
     specified by '-fcommon', and is the default for LLVM on most
     targets.  On the other hand, this behavior is not required by ISO
     C, and on some targets may carry a speed or code size penalty on
     variable references.  The '-fno-common' option specifies that the
     compiler should place uninitialized global variables in the data
     section of the object file, rather than generating them as common
     blocks.  This has the effect that if the same variable is declared
     (without 'extern') in two different compilations, you get a
     multiple-definition error when you link them.  In this case, you
     must compile with '-fcommon' instead.  Compiling with '-fno-common'
     is useful on targets for which it provides better performance, or
     if you wish to verify that the program will work on other systems
     that always treat uninitialized variable declarations this way.

'-fexceptions'
     Enable exception handling.  Generates extra code needed to
     propagate exceptions.  For some targets, this implies LLVM
     generates frame unwind information for all functions, which can
     produce significant data size overhead, although it does not affect
     execution.  If you do not specify this option, LLVM enables it by
     default for languages like C++ that normally require exception
     handling, and disables it for languages like C that do not normally
     require it.  However, you may need to enable this option when
     compiling C code that needs to interoperate properly with exception
     handlers written in C++.  You may also wish to disable this option
     if you are compiling older C++ programs that don't use exception
     handling.

'-fno-ident'
     Ignore the '#ident' directive.

'-fmax-type-align=N'
     Clang/LLVM option for future documentation.

'-fnon-call-exceptions'
     Generate code that allows trapping instructions to throw
     exceptions.  Note that this requires platform-specific runtime
     support that does not exist everywhere.  Moreover, it only allows
     _trapping_ instructions to throw exceptions, i.e. memory references
     or floating-point instructions.  It does not allow exceptions to be
     thrown from arbitrary signal handlers such as 'SIGALRM'.

'-fpack-struct[=N]'
     Without a value specified, pack all structure members together
     without holes.  When a value is specified (which must be a small
     power of two), pack structure members according to this value,
     representing the maximum alignment (that is, objects with default
     alignment requirements larger than this are output potentially
     unaligned at the next fitting location.

     *Warning:* the '-fpack-struct' switch causes LLVM to generate code
     that is not binary compatible with code generated without that
     switch.  Additionally, it makes the code suboptimal.  Use it to
     conform to a non-default application binary interface.

'-fPIC'
     If supported for the target machine, emit position-independent
     code, suitable for dynamic linking and avoiding any limit on the
     size of the global offset table.  This option makes a difference on
     the m68k, PowerPC and SPARC.

     Position-independent code requires special support, and therefore
     works only on certain machines.

     When this flag is set, the macros '__pic__' and '__PIC__' are
     defined to 2.

'-fpic'
     Generate position-independent code (PIC) suitable for use in a
     shared library, if supported for the target machine.  Such code
     accesses all constant addresses through a global offset table
     (GOT).  The dynamic loader resolves the GOT entries when the
     program starts (the dynamic loader is not part of LLVM; it is part
     of the operating system).  If the GOT size for the linked
     executable exceeds a machine-specific maximum size, you get an
     error message from the linker indicating that '-fpic' does not
     work; in that case, recompile with '-fPIC' instead.  (These
     maximums are 8k on the SPARC and 32k on the m68k and RS/6000.  The
     x86 has no such limit.)

     Position-independent code requires special support, and therefore
     works only on certain machines.  For the x86, LLVM supports PIC for
     System V but not for the Sun 386i.  Code generated for the IBM
     RS/6000 is always position-independent.

     When this flag is set, the macros '__pic__' and '__PIC__' are
     defined to 1.

'-fPIE'
'-fpie'
     These options are similar to '-fpic' and '-fPIC', but generated
     position independent code can be only linked into executables.
     Usually these options are used when '-pie' LLVM option is used
     during linking.

     '-fpie' and '-fPIE' both define the macros '__pie__' and '__PIE__'.
     The macros have the value 1 for '-fpie' and 2 for '-fPIE'.

'-fshort-enums'
     Allocate to an 'enum' type only as many bytes as it needs for the
     declared range of possible values.  Specifically, the 'enum' type
     is equivalent to the smallest integer type that has enough room.

     *Warning:* the '-fshort-enums' switch causes LLVM to generate code
     that is not binary compatible with code generated without that
     switch.  Use it to conform to a non-default application binary
     interface.

'-fshort-wchar'
     Override the underlying type for 'wchar_t' to be 'short unsigned
     int' instead of the default for the target.  This option is useful
     for building programs to run under WINE.

     *Warning:* the '-fshort-wchar' switch causes LLVM to generate code
     that is not binary compatible with code generated without that
     switch.  Use it to conform to a non-default application binary
     interface.

'-ftls-model=MODEL'
     Alter the thread-local storage model to be used (*note
     Thread-Local::).  The MODEL argument should be one of
     'global-dynamic', 'local-dynamic', 'initial-exec' or 'local-exec'.
     Note that the choice is subject to optimization: the compiler may
     use a more efficient model for symbols not visible outside of the
     translation unit, or if '-fpic' is not given on the command line.

     The default without '-fpic' is 'initial-exec'; with '-fpic' the
     default is 'global-dynamic'.

'-ftrap-function=FUNCTION'
     Clang/LLVM option for future documentation.

'-ftrapv'
     This option generates traps for signed overflow on addition,
     subtraction, multiplication operations.

'-ftrapv-handler=HANDLER'
     Clang/LLVM option for future documentation.

'-funwind-tables'
     Similar to '-fexceptions', except that it just generates any needed
     static data, but does not affect the generated code in any other
     way.  You normally do not need to enable this option; instead, a
     language processor that needs this handling enables it on your
     behalf.

'-fverbose-asm'
     Put extra commentary information in the generated assembly code to
     make it more readable.  This option is generally only of use to
     those who actually need to read the generated assembly code
     (perhaps while debugging the compiler itself).

     '-fno-verbose-asm', the default, causes the extra information to be
     omitted and is useful when comparing two assembler files.

'-fvisibility=[default|internal|hidden|protected]'
     Set the default ELF image symbol visibility to the specified
     option--all symbols are marked with this unless overridden within
     the code.  Using this feature can very substantially improve
     linking and load times of shared object libraries, produce more
     optimized code, provide near-perfect API export and prevent symbol
     clashes.  It is *strongly* recommended that you use this in any
     shared objects you distribute.

     Despite the nomenclature, 'default' always means public; i.e.,
     available to be linked against from outside the shared object.
     'protected' and 'internal' are pretty useless in real-world usage
     so the only other commonly used option is 'hidden'.  The default if
     '-fvisibility' isn't specified is 'default', i.e., make every
     symbol public.

     A good explanation of the benefits offered by ensuring ELF symbols
     have the correct visibility is given by "How To Write Shared
     Libraries" by Ulrich Drepper (which can be found at
     <http://www.akkadia.org/drepper/>)--however a superior solution
     made possible by this option to marking things hidden when the
     default is public is to make the default hidden and mark things
     public.  This is the norm with DLLs on Windows and with
     '-fvisibility=hidden' and '__attribute__ ((visibility("default")))'
     instead of '__declspec(dllexport)' you get almost identical
     semantics with identical syntax.  This is a great boon to those
     working with cross-platform projects.

     For those adding visibility support to existing code, you may find
     '#pragma GCC visibility' of use.  This works by you enclosing the
     declarations you wish to set visibility for with (for example)
     '#pragma GCC visibility push(hidden)' and '#pragma GCC visibility
     pop'.  Bear in mind that symbol visibility should be viewed *as
     part of the API interface contract* and thus all new code should
     always specify visibility when it is not the default; i.e.,
     declarations only for use within the local DSO should *always* be
     marked explicitly as hidden as so to avoid PLT indirection
     overheads--making this abundantly clear also aids readability and
     self-documentation of the code.  Note that due to ISO C++
     specification requirements, 'operator new' and 'operator delete'
     must always be of default visibility.

     Be aware that headers from outside your project, in particular
     system headers and headers from any other library you use, may not
     be expecting to be compiled with visibility other than the default.
     You may need to explicitly say '#pragma GCC visibility
     push(default)' before including any such headers.

     'extern' declarations are not affected by '-fvisibility', so a lot
     of code can be recompiled with '-fvisibility=hidden' with no
     modifications.  However, this means that calls to 'extern'
     functions with no explicit visibility use the PLT, so it is more
     effective to use '__attribute ((visibility))' and/or '#pragma GCC
     visibility' to tell the compiler which 'extern' declarations should
     be treated as hidden.

     Note that '-fvisibility' does affect C++ vague linkage entities.
     This means that, for instance, an exception class that is be thrown
     between DSOs must be explicitly marked with default visibility so
     that the 'type_info' nodes are unified between the DSOs.

     An overview of these techniques, their benefits and how to use them
     is at <http://gcc.gnu.org/wiki/Visibility>.

'-fwrapv'
     This option instructs the compiler to assume that signed arithmetic
     overflow of addition, subtraction and multiplication wraps around
     using twos-complement representation.  This flag enables some
     optimizations and disables others.  This option is enabled by
     default for the Java front end, as required by the Java language
     specification.

'-mllvm OPTION'
     This option is documented in the section on Optimization Options.
     *Note '-mllvm': op mllvm.

'-mstack-alignment=N'
     Clang/LLVM option for future documentation.

'-mstack-probe-size=N'
     Clang/LLVM option for future documentation.

'-mthread-model MODEL'
     Clang/LLVM option for future documentation.

'-resource-dir=DIR'
     Clang/LLVM option for future documentation.

'-target TRIPLET'
     Clang/LLVM option for future documentation.

