This is llvm.info, produced by makeinfo version 5.2 from llvm.texi.

Copyright (C) 2015 Embecosm Limited
Copyright (C) 1988-2015 Free Software Foundation, Inc.

 Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with the
Invariant Sections being "Funding Free Software", the Front-Cover Texts
being (a, c) (see below), and with the Back-Cover Texts being (b, d)
(see below).  A copy of the license is included in the section entitled
"GNU Free Documentation License".

 (a) The FSF's Front-Cover Text is:

 A GNU Manual

 (b) The FSF's Back-Cover Text is:

 You have freedom to copy and modify this GNU Manual, like GNU software.
Copies published by the Free Software Foundation raise funds for GNU
development.

 (c) Embecosm's Front-Cover Text is:

 Derivative Manual for LLVM

 (d) Embecosm's Back-Cover Text is:

 You have freedom to copy and modify this manual.  Copies published by
Embecosm support introducing others to free and open source software and
hardware.
INFO-DIR-SECTION Software development
START-INFO-DIR-ENTRY
* llvm: (llvm).                The LLVM compiler
END-INFO-DIR-ENTRY

 This file documents the use of the LLVM compiler.

 Copyright (C) 2015 Embecosm Limited
Copyright (C) 1988-2015 Free Software Foundation, Inc.

 Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with the
Invariant Sections being "Funding Free Software", the Front-Cover Texts
being (a, c) (see below), and with the Back-Cover Texts being (b, d)
(see below).  A copy of the license is included in the section entitled
"GNU Free Documentation License".

 (a) The FSF's Front-Cover Text is:

 A GNU Manual

 (b) The FSF's Back-Cover Text is:

 You have freedom to copy and modify this GNU Manual, like GNU software.
Copies published by the Free Software Foundation raise funds for GNU
development.

 (c) Embecosm's Front-Cover Text is:

 Derivative Manual for LLVM

 (d) Embecosm's Back-Cover Text is:

 You have freedom to copy and modify this manual.  Copies published by
Embecosm support introducing others to free and open source software and
hardware.


File: llvm.info,  Node: What you can and what you cannot do in +load,  Up: Executing code before main

8.2.1 What You Can and Cannot Do in '+load'
-------------------------------------------

'+load' is to be used only as a last resort.  Because it is executed
very early, most of the Objective-C runtime machinery will not be ready
when '+load' is executed; hence '+load' works best for executing C code
that is independent on the Objective-C runtime.

 The '+load' implementation in the GNU runtime guarantees you the
following things:

   * you can write whatever C code you like;

   * you can allocate and send messages to objects whose class is
     implemented in the same file;

   * the '+load' implementation of all super classes of a class are
     executed before the '+load' of that class is executed;

   * the '+load' implementation of a class is executed before the
     '+load' implementation of any category.

 In particular, the following things, even if they can work in a
particular case, are not guaranteed:

   * allocation of or sending messages to arbitrary objects;

   * allocation of or sending messages to objects whose classes have a
     category implemented in the same file;

   * sending messages to Objective-C constant strings ('@"this is a
     constant string"');

 You should make no assumptions about receiving '+load' in sibling
classes when you write '+load' of a class.  The order in which sibling
classes receive '+load' is not guaranteed.

 The order in which '+load' and '+initialize' are called could be
problematic if this matters.  If you don't allocate objects inside
'+load', it is guaranteed that '+load' is called before '+initialize'.
If you create an object inside '+load' the '+initialize' method of
object's class is invoked even if '+load' was not invoked.  Note if you
explicitly call '+load' on a class, '+initialize' will be called first.
To avoid possible problems try to implement only one of these methods.

 The '+load' method is also invoked when a bundle is dynamically loaded
into your running program.  This happens automatically without any
intervening operation from you.  When you write bundles and you need to
write '+load' you can safely create and send messages to objects whose
classes already exist in the running program.  The same restrictions as
above apply to classes defined in bundle.


File: llvm.info,  Node: Type encoding,  Next: Garbage Collection,  Prev: Executing code before main,  Up: Objective-C

8.3 Type Encoding
=================

This is an advanced section.  Type encodings are used extensively by the
compiler and by the runtime, but you generally do not need to know about
them to use Objective-C.

 The Objective-C compiler generates type encodings for all the types.
These type encodings are used at runtime to find out information about
selectors and methods and about objects and classes.

 The types are encoded in the following way:

'_Bool'            'B'
'char'             'c'
'unsigned char'    'C'
'short'            's'
'unsigned short'   'S'
'int'              'i'
'unsigned int'     'I'
'long'             'l'
'unsigned long'    'L'
'long long'        'q'
'unsigned long     'Q'
long'
'float'            'f'
'double'           'd'
'long double'      'D'
'void'             'v'
'id'               '@'
'Class'            '#'
'SEL'              ':'
'char*'            '*'
'enum'             an 'enum' is encoded exactly as the integer type
                   that the compiler uses for it, which depends on the
                   enumeration values.  Often the compiler users
                   'unsigned int', which is then encoded as 'I'.
unknown type       '?'
Complex types      'j' followed by the inner type.  For example
                   '_Complex double' is encoded as "jd".
bit-fields         'b' followed by the starting position of the
                   bit-field, the type of the bit-field and the size of
                   the bit-field (the bit-fields encoding was changed
                   from the NeXT's compiler encoding, see below)

 The encoding of bit-fields has changed to allow bit-fields to be
properly handled by the runtime functions that compute sizes and
alignments of types that contain bit-fields.  The previous encoding
contained only the size of the bit-field.  Using only this information
it is not possible to reliably compute the size occupied by the
bit-field.  This is very important in the presence of the Boehm's
garbage collector because the objects are allocated using the typed
memory facility available in this collector.  The typed memory
allocation requires information about where the pointers are located
inside the object.

 The position in the bit-field is the position, counting in bits, of the
bit closest to the beginning of the structure.

 The non-atomic types are encoded as follows:

pointers       '^' followed by the pointed type.
arrays         '[' followed by the number of elements in the array
               followed by the type of the elements followed by ']'
structures     '{' followed by the name of the structure (or '?' if the
               structure is unnamed), the '=' sign, the type of the
               members and by '}'
unions         '(' followed by the name of the structure (or '?' if the
               union is unnamed), the '=' sign, the type of the members
               followed by ')'
vectors        '![' followed by the vector_size (the number of bytes
               composing the vector) followed by a comma, followed by
               the alignment (in bytes) of the vector, followed by the
               type of the elements followed by ']'

 Here are some types and their encodings, as they are generated by the
compiler on an i386 machine:


Objective-C type   Compiler encoding
     int a[10];    '[10i]'
     struct {      '{?=i[3f]b128i3b131i2c}'
       int i;
       float f[3];
       int a:3;
       int b:2;
       char c;
     }
     int a __attribute__ ((vector_size (16)));'![16,16i]' (alignment would depend on the machine)


 In addition to the types the compiler also encodes the type specifiers.
The table below describes the encoding of the current Objective-C type
specifiers:


Specifier          Encoding
'const'            'r'
'in'               'n'
'inout'            'N'
'out'              'o'
'bycopy'           'O'
'byref'            'R'
'oneway'           'V'


 The type specifiers are encoded just before the type.  Unlike types
however, the type specifiers are only encoded when they appear in method
argument types.

 Note how 'const' interacts with pointers:


Objective-C type   Compiler encoding
     const int     'ri'
     const int*    '^ri'
     int *const    'r^i'


 'const int*' is a pointer to a 'const int', and so is encoded as '^ri'.
'int* const', instead, is a 'const' pointer to an 'int', and so is
encoded as 'r^i'.

 Finally, there is a complication when encoding 'const char *' versus
'char * const'.  Because 'char *' is encoded as '*' and not as '^c',
there is no way to express the fact that 'r' applies to the pointer or
to the pointee.

 Hence, it is assumed as a convention that 'r*' means 'const char *'
(since it is what is most often meant), and there is no way to encode
'char *const'.  'char *const' would simply be encoded as '*', and the
'const' is lost.

* Menu:

* Legacy type encoding::
* @encode::
* Method signatures::


File: llvm.info,  Node: Legacy type encoding,  Next: @encode,  Up: Type encoding

8.3.1 Legacy Type Encoding
--------------------------

Unfortunately, historically GCC used to have a number of bugs in its
encoding code.  The NeXT runtime expects GCC to emit type encodings in
this historical format (compatible with GCC-3.3), so when using the NeXT
runtime, GCC will introduce on purpose a number of incorrect encodings:

   * the read-only qualifier of the pointee gets emitted before the '^'.
     The read-only qualifier of the pointer itself gets ignored, unless
     it is a typedef.  Also, the 'r' is only emitted for the outermost
     type.

   * 32-bit longs are encoded as 'l' or 'L', but not always.  For
     typedefs, the compiler uses 'i' or 'I' instead if encoding a struct
     field or a pointer.

   * 'enum's are always encoded as 'i' (int) even if they are actually
     unsigned or long.

 In addition to that, the NeXT runtime uses a different encoding for
bitfields.  It encodes them as 'b' followed by the size, without a bit
offset or the underlying field type.


File: llvm.info,  Node: @encode,  Next: Method signatures,  Prev: Legacy type encoding,  Up: Type encoding

8.3.2 '@encode'
---------------

GNU Objective-C supports the '@encode' syntax that allows you to create
a type encoding from a C/Objective-C type.  For example, '@encode(int)'
is compiled by the compiler into '"i"'.

 '@encode' does not support type qualifiers other than 'const'.  For
example, '@encode(const char*)' is valid and is compiled into '"r*"',
while '@encode(bycopy char *)' is invalid and will cause a compilation
error.


File: llvm.info,  Node: Method signatures,  Prev: @encode,  Up: Type encoding

8.3.3 Method Signatures
-----------------------

This section documents the encoding of method types, which is rarely
needed to use Objective-C. You should skip it at a first reading; the
runtime provides functions that will work on methods and can walk
through the list of parameters and interpret them for you.  These
functions are part of the public "API" and are the preferred way to
interact with method signatures from user code.

 But if you need to debug a problem with method signatures and need to
know how they are implemented (i.e., the "ABI"), read on.

 Methods have their "signature" encoded and made available to the
runtime.  The "signature" encodes all the information required to
dynamically build invocations of the method at runtime: return type and
arguments.

 The "signature" is a null-terminated string, composed of the following:

   * The return type, including type qualifiers.  For example, a method
     returning 'int' would have 'i' here.

   * The total size (in bytes) required to pass all the parameters.
     This includes the two hidden parameters (the object 'self' and the
     method selector '_cmd').

   * Each argument, with the type encoding, followed by the offset (in
     bytes) of the argument in the list of parameters.

 For example, a method with no arguments and returning 'int' would have
the signature 'i8@0:4' if the size of a pointer is 4.  The signature is
interpreted as follows: the 'i' is the return type (an 'int'), the '8'
is the total size of the parameters in bytes (two pointers each of size
4), the '@0' is the first parameter (an object at byte offset '0') and
':4' is the second parameter (a 'SEL' at byte offset '4').

 You can easily find more examples by running the "strings" program on
an Objective-C object file compiled by GCC. You'll see a lot of strings
that look very much like 'i8@0:4'.  They are signatures of Objective-C
methods.


File: llvm.info,  Node: Garbage Collection,  Next: Constant string objects,  Prev: Type encoding,  Up: Objective-C

8.4 Garbage Collection
======================

This section is specific for the GNU Objective-C runtime.  If you are
using a different runtime, you can skip it.

 Support for garbage collection with the GNU runtime has been added by
using a powerful conservative garbage collector, known as the
Boehm-Demers-Weiser conservative garbage collector.

 To enable the support for it you have to configure the compiler using
an additional argument, '--enable-objc-gc'.  This will build the
boehm-gc library, and build an additional runtime library which has
several enhancements to support the garbage collector.  The new library
has a new name, 'libobjc_gc.a' to not conflict with the
non-garbage-collected library.

 When the garbage collector is used, the objects are allocated using the
so-called typed memory allocation mechanism available in the
Boehm-Demers-Weiser collector.  This mode requires precise information
on where pointers are located inside objects.  This information is
computed once per class, immediately after the class has been
initialized.

 There is a new runtime function 'class_ivar_set_gcinvisible()' which
can be used to declare a so-called "weak pointer" reference.  Such a
pointer is basically hidden for the garbage collector; this can be
useful in certain situations, especially when you want to keep track of
the allocated objects, yet allow them to be collected.  This kind of
pointers can only be members of objects, you cannot declare a global
pointer as a weak reference.  Every type which is a pointer type can be
declared a weak pointer, including 'id', 'Class' and 'SEL'.

 Here is an example of how to use this feature.  Suppose you want to
implement a class whose instances hold a weak pointer reference; the
following class does this:


     @interface WeakPointer : Object
     {
         const void* weakPointer;
     }

     - initWithPointer:(const void*)p;
     - (const void*)weakPointer;
     @end


     @implementation WeakPointer

     + (void)initialize
     {
       if (self == objc_lookUpClass ("WeakPointer"))
         class_ivar_set_gcinvisible (self, "weakPointer", YES);
     }

     - initWithPointer:(const void*)p
     {
       weakPointer = p;
       return self;
     }

     - (const void*)weakPointer
     {
       return weakPointer;
     }

     @end


 Weak pointers are supported through a new type character specifier
represented by the '!' character.  The 'class_ivar_set_gcinvisible()'
function adds or removes this specifier to the string type description
of the instance variable named as argument.


File: llvm.info,  Node: Constant string objects,  Next: compatibility_alias,  Prev: Garbage Collection,  Up: Objective-C

8.5 Constant String Objects
===========================

GNU Objective-C provides constant string objects that are generated
directly by the compiler.  You declare a constant string object by
prefixing a C constant string with the character '@':

       id myString = @"this is a constant string object";

 The constant string objects are by default instances of the
'NXConstantString' class which is provided by the GNU Objective-C
runtime.  To get the definition of this class you must include the
'objc/NXConstStr.h' header file.

 User defined libraries may want to implement their own constant string
class.  To be able to support them, the GNU Objective-C compiler
provides a new command line options
'-fconstant-string-class=CLASS-NAME'.  The provided class should adhere
to a strict structure, the same as 'NXConstantString''s structure:


     @interface MyConstantStringClass
     {
       Class isa;
       char *c_string;
       unsigned int len;
     }
     @end


 'NXConstantString' inherits from 'Object'; user class libraries may
choose to inherit the customized constant string class from a different
class than 'Object'.  There is no requirement in the methods the
constant string class has to implement, but the final ivar layout of the
class must be the compatible with the given structure.

 When the compiler creates the statically allocated constant string
object, the 'c_string' field will be filled by the compiler with the
string; the 'length' field will be filled by the compiler with the
string length; the 'isa' pointer will be filled with 'NULL' by the
compiler, and it will later be fixed up automatically at runtime by the
GNU Objective-C runtime library to point to the class which was set by
the '-fconstant-string-class' option when the object file is loaded (if
you wonder how it works behind the scenes, the name of the class to use,
and the list of static objects to fixup, are stored by the compiler in
the object file in a place where the GNU runtime library will find them
at runtime).

 As a result, when a file is compiled with the '-fconstant-string-class'
option, all the constant string objects will be instances of the class
specified as argument to this option.  It is possible to have multiple
compilation units referring to different constant string classes,
neither the compiler nor the linker impose any restrictions in doing
this.


File: llvm.info,  Node: compatibility_alias,  Next: Exceptions,  Prev: Constant string objects,  Up: Objective-C

8.6 'compatibility_alias'
=========================

The keyword '@compatibility_alias' allows you to define a class name as
equivalent to another class name.  For example:

     @compatibility_alias WOApplication GSWApplication;

 tells the compiler that each time it encounters 'WOApplication' as a
class name, it should replace it with 'GSWApplication' (that is,
'WOApplication' is just an alias for 'GSWApplication').

 There are some constraints on how this can be used--

   * 'WOApplication' (the alias) must not be an existing class;

   * 'GSWApplication' (the real class) must be an existing class.


File: llvm.info,  Node: Exceptions,  Next: Synchronization,  Prev: compatibility_alias,  Up: Objective-C

8.7 Exceptions
==============

GNU Objective-C provides exception support built into the language, as
in the following example:

       @try {
         ...
            @throw expr;
         ...
       }
       @catch (AnObjCClass *exc) {
         ...
           @throw expr;
         ...
           @throw;
         ...
       }
       @catch (AnotherClass *exc) {
         ...
       }
       @catch (id allOthers) {
         ...
       }
       @finally {
         ...
           @throw expr;
         ...
       }

 The '@throw' statement may appear anywhere in an Objective-C or
Objective-C++ program; when used inside of a '@catch' block, the
'@throw' may appear without an argument (as shown above), in which case
the object caught by the '@catch' will be rethrown.

 Note that only (pointers to) Objective-C objects may be thrown and
caught using this scheme.  When an object is thrown, it will be caught
by the nearest '@catch' clause capable of handling objects of that type,
analogously to how 'catch' blocks work in C++ and Java.  A '@catch(id
...)' clause (as shown above) may also be provided to catch any and all
Objective-C exceptions not caught by previous '@catch' clauses (if any).

 The '@finally' clause, if present, will be executed upon exit from the
immediately preceding '@try ... @catch' section.  This will happen
regardless of whether any exceptions are thrown, caught or rethrown
inside the '@try ... @catch' section, analogously to the behavior of the
'finally' clause in Java.

 There are several caveats to using the new exception mechanism:

   * The '-fobjc-exceptions' command line option must be used when
     compiling Objective-C files that use exceptions.

   * With the GNU runtime, exceptions are always implemented as "native"
     exceptions and it is recommended that the '-fexceptions' and
     '-shared-libgcc' options are used when linking.

   * With the NeXT runtime, although currently designed to be binary
     compatible with 'NS_HANDLER'-style idioms provided by the
     'NSException' class, the new exceptions can only be used on Mac OS
     X 10.3 (Panther) and later systems, due to additional functionality
     needed in the NeXT Objective-C runtime.

   * As mentioned above, the new exceptions do not support handling
     types other than Objective-C objects.  Furthermore, when used from
     Objective-C++, the Objective-C exception model does not
     interoperate with C++ exceptions at this time.  This means you
     cannot '@throw' an exception from Objective-C and 'catch' it in
     C++, or vice versa (i.e., 'throw ... @catch').


File: llvm.info,  Node: Synchronization,  Next: Fast enumeration,  Prev: Exceptions,  Up: Objective-C

8.8 Synchronization
===================

GNU Objective-C provides support for synchronized blocks:

       @synchronized (ObjCClass *guard) {
         ...
       }

 Upon entering the '@synchronized' block, a thread of execution shall
first check whether a lock has been placed on the corresponding 'guard'
object by another thread.  If it has, the current thread shall wait
until the other thread relinquishes its lock.  Once 'guard' becomes
available, the current thread will place its own lock on it, execute the
code contained in the '@synchronized' block, and finally relinquish the
lock (thereby making 'guard' available to other threads).

 Unlike Java, Objective-C does not allow for entire methods to be marked
'@synchronized'.  Note that throwing exceptions out of '@synchronized'
blocks is allowed, and will cause the guarding object to be unlocked
properly.

 Because of the interactions between synchronization and exception
handling, you can only use '@synchronized' when compiling with
exceptions enabled, that is with the command line option
'-fobjc-exceptions'.


File: llvm.info,  Node: Fast enumeration,  Next: Messaging with the GNU Objective-C runtime,  Prev: Synchronization,  Up: Objective-C

8.9 Fast Enumeration
====================

* Menu:

* Using fast enumeration::
* c99-like fast enumeration syntax::
* Fast enumeration details::
* Fast enumeration protocol::


File: llvm.info,  Node: Using fast enumeration,  Next: c99-like fast enumeration syntax,  Up: Fast enumeration

8.9.1 Using Fast Enumeration
----------------------------

GNU Objective-C provides support for the fast enumeration syntax:

       id array = ...;
       id object;

       for (object in array)
       {
         /* Do something with 'object' */
       }

 'array' needs to be an Objective-C object (usually a collection object,
for example an array, a dictionary or a set) which implements the "Fast
Enumeration Protocol" (see below).  If you are using a Foundation
library such as GNUstep Base or Apple Cocoa Foundation, all collection
objects in the library implement this protocol and can be used in this
way.

 The code above would iterate over all objects in 'array'.  For each of
them, it assigns it to 'object', then executes the 'Do something with
'object'' statements.

 Here is a fully worked-out example using a Foundation library (which
provides the implementation of 'NSArray', 'NSString' and 'NSLog'):

       NSArray *array = [NSArray arrayWithObjects: @"1", @"2", @"3", nil];
       NSString *object;

       for (object in array)
         NSLog (@"Iterating over %@", object);


File: llvm.info,  Node: c99-like fast enumeration syntax,  Next: Fast enumeration details,  Prev: Using fast enumeration,  Up: Fast enumeration

8.9.2 C99-Like Fast Enumeration Syntax
--------------------------------------

A c99-like declaration syntax is also allowed:

       id array = ...;

       for (id object in array)
       {
         /* Do something with 'object'  */
       }

 this is completely equivalent to:

       id array = ...;

       {
         id object;
         for (object in array)
         {
           /* Do something with 'object'  */
         }
       }

 but can save some typing.

 Note that the option '-std=c99' is not required to allow this syntax in
Objective-C.


File: llvm.info,  Node: Fast enumeration details,  Next: Fast enumeration protocol,  Prev: c99-like fast enumeration syntax,  Up: Fast enumeration

8.9.3 Fast Enumeration Details
------------------------------

Here is a more technical description with the gory details.  Consider
the code

       for (OBJECT EXPRESSION in COLLECTION EXPRESSION)
       {
         STATEMENTS
       }

 here is what happens when you run it:

   * 'COLLECTION EXPRESSION' is evaluated exactly once and the result is
     used as the collection object to iterate over.  This means it is
     safe to write code such as 'for (object in [NSDictionary
     keyEnumerator]) ...'.

   * the iteration is implemented by the compiler by repeatedly getting
     batches of objects from the collection object using the fast
     enumeration protocol (see below), then iterating over all objects
     in the batch.  This is faster than a normal enumeration where
     objects are retrieved one by one (hence the name "fast
     enumeration").

   * if there are no objects in the collection, then 'OBJECT EXPRESSION'
     is set to 'nil' and the loop immediately terminates.

   * if there are objects in the collection, then for each object in the
     collection (in the order they are returned) 'OBJECT EXPRESSION' is
     set to the object, then 'STATEMENTS' are executed.

   * 'STATEMENTS' can contain 'break' and 'continue' commands, which
     will abort the iteration or skip to the next loop iteration as
     expected.

   * when the iteration ends because there are no more objects to
     iterate over, 'OBJECT EXPRESSION' is set to 'nil'.  This allows you
     to determine whether the iteration finished because a 'break'
     command was used (in which case 'OBJECT EXPRESSION' will remain set
     to the last object that was iterated over) or because it iterated
     over all the objects (in which case 'OBJECT EXPRESSION' will be set
     to 'nil').

   * 'STATEMENTS' must not make any changes to the collection object; if
     they do, it is a hard error and the fast enumeration terminates by
     invoking 'objc_enumerationMutation', a runtime function that
     normally aborts the program but which can be customized by
     Foundation libraries via 'objc_set_mutation_handler' to do
     something different, such as raising an exception.


File: llvm.info,  Node: Fast enumeration protocol,  Prev: Fast enumeration details,  Up: Fast enumeration

8.9.4 Fast Enumeration Protocol
-------------------------------

If you want your own collection object to be usable with fast
enumeration, you need to have it implement the method

     - (unsigned long) countByEnumeratingWithState: (NSFastEnumerationState *)state
                                           objects: (id *)objects
                                             count: (unsigned long)len;

 where 'NSFastEnumerationState' must be defined in your code as follows:

     typedef struct
     {
       unsigned long state;
       id            *itemsPtr;
       unsigned long *mutationsPtr;
       unsigned long extra[5];
     } NSFastEnumerationState;

 If no 'NSFastEnumerationState' is defined in your code, the compiler
will automatically replace 'NSFastEnumerationState *' with 'struct
__objcFastEnumerationState *', where that type is silently defined by
the compiler in an identical way.  This can be confusing and we
recommend that you define 'NSFastEnumerationState' (as shown above)
instead.

 The method is called repeatedly during a fast enumeration to retrieve
batches of objects.  Each invocation of the method should retrieve the
next batch of objects.

 The return value of the method is the number of objects in the current
batch; this should not exceed 'len', which is the maximum size of a
batch as requested by the caller.  The batch itself is returned in the
'itemsPtr' field of the 'NSFastEnumerationState' struct.

 To help with returning the objects, the 'objects' array is a C array
preallocated by the caller (on the stack) of size 'len'.  In many cases
you can put the objects you want to return in that 'objects' array, then
do 'itemsPtr = objects'.  But you don't have to; if your collection
already has the objects to return in some form of C array, it could
return them from there instead.

 The 'state' and 'extra' fields of the 'NSFastEnumerationState'
structure allows your collection object to keep track of the state of
the enumeration.  In a simple array implementation, 'state' may keep
track of the index of the last object that was returned, and 'extra' may
be unused.

 The 'mutationsPtr' field of the 'NSFastEnumerationState' is used to
keep track of mutations.  It should point to a number; before working on
each object, the fast enumeration loop will check that this number has
not changed.  If it has, a mutation has happened and the fast
enumeration will abort.  So, 'mutationsPtr' could be set to point to
some sort of version number of your collection, which is increased by
one every time there is a change (for example when an object is added or
removed).  Or, if you are content with less strict mutation checks, it
could point to the number of objects in your collection or some other
value that can be checked to perform an approximate check that the
collection has not been mutated.

 Finally, note how we declared the 'len' argument and the return value
to be of type 'unsigned long'.  They could also be declared to be of
type 'unsigned int' and everything would still work.


File: llvm.info,  Node: Messaging with the GNU Objective-C runtime,  Prev: Fast enumeration,  Up: Objective-C

8.10 Messaging with the GNU Objective-C Runtime
===============================================

This section is specific for the GNU Objective-C runtime.  If you are
using a different runtime, you can skip it.

 The implementation of messaging in the GNU Objective-C runtime is
designed to be portable, and so is based on standard C.

 Sending a message in the GNU Objective-C runtime is composed of two
separate steps.  First, there is a call to the lookup function,
'objc_msg_lookup ()' (or, in the case of messages to super,
'objc_msg_lookup_super ()').  This runtime function takes as argument
the receiver and the selector of the method to be called; it returns the
'IMP', that is a pointer to the function implementing the method.  The
second step of method invocation consists of casting this pointer
function to the appropriate function pointer type, and calling the
function pointed to it with the right arguments.

 For example, when the compiler encounters a method invocation such as
'[object init]', it compiles it into a call to 'objc_msg_lookup (object,
@selector(init))' followed by a cast of the returned value to the
appropriate function pointer type, and then it calls it.

* Menu:

* Dynamically registering methods::
* Forwarding hook::


File: llvm.info,  Node: Dynamically registering methods,  Next: Forwarding hook,  Up: Messaging with the GNU Objective-C runtime

8.10.1 Dynamically Registering Methods
--------------------------------------

If 'objc_msg_lookup()' does not find a suitable method implementation,
because the receiver does not implement the required method, it tries to
see if the class can dynamically register the method.

 To do so, the runtime checks if the class of the receiver implements
the method

     + (BOOL) resolveInstanceMethod: (SEL)selector;

 in the case of an instance method, or

     + (BOOL) resolveClassMethod: (SEL)selector;

 in the case of a class method.  If the class implements it, the runtime
invokes it, passing as argument the selector of the original method, and
if it returns 'YES', the runtime tries the lookup again, which could now
succeed if a matching method was added dynamically by
'+resolveInstanceMethod:' or '+resolveClassMethod:'.

 This allows classes to dynamically register methods (by adding them to
the class using 'class_addMethod') when they are first called.  To do
so, a class should implement '+resolveInstanceMethod:' (or, depending on
the case, '+resolveClassMethod:') and have it recognize the selectors of
methods that can be registered dynamically at runtime, register them,
and return 'YES'.  It should return 'NO' for methods that it does not
dynamically registered at runtime.

 If '+resolveInstanceMethod:' (or '+resolveClassMethod:') is not
implemented or returns 'NO', the runtime then tries the forwarding hook.

 Support for '+resolveInstanceMethod:' and 'resolveClassMethod:' was
added to the GNU Objective-C runtime in GCC version 4.6.


File: llvm.info,  Node: Forwarding hook,  Prev: Dynamically registering methods,  Up: Messaging with the GNU Objective-C runtime

8.10.2 Forwarding Hook
----------------------

The GNU Objective-C runtime provides a hook, called
'__objc_msg_forward2', which is called by 'objc_msg_lookup()' when it
can't find a method implementation in the runtime tables and after
calling '+resolveInstanceMethod:' and '+resolveClassMethod:' has been
attempted and did not succeed in dynamically registering the method.

 To configure the hook, you set the global variable
'__objc_msg_forward2' to a function with the same argument and return
types of 'objc_msg_lookup()'.  When 'objc_msg_lookup()' can not find a
method implementation, it invokes the hook function you provided to get
a method implementation to return.  So, in practice
'__objc_msg_forward2' allows you to extend 'objc_msg_lookup()' by adding
some custom code that is called to do a further lookup when no standard
method implementation can be found using the normal lookup.

 This hook is generally reserved for "Foundation" libraries such as
GNUstep Base, which use it to implement their high-level method
forwarding API, typically based around the 'forwardInvocation:' method.
So, unless you are implementing your own "Foundation" library, you
should not set this hook.

 In a typical forwarding implementation, the '__objc_msg_forward2' hook
function determines the argument and return type of the method that is
being looked up, and then creates a function that takes these arguments
and has that return type, and returns it to the caller.  Creating this
function is non-trivial and is typically performed using a dedicated
library such as 'libffi'.

 The forwarding method implementation thus created is returned by
'objc_msg_lookup()' and is executed as if it was a normal method
implementation.  When the forwarding method implementation is called, it
is usually expected to pack all arguments into some sort of object
(typically, an 'NSInvocation' in a "Foundation" library), and hand it
over to the programmer ('forwardInvocation:') who is then allowed to
manipulate the method invocation using a high-level API provided by the
"Foundation" library.  For example, the programmer may want to examine
the method invocation arguments and name and potentially change them
before forwarding the method invocation to one or more local objects
('performInvocation:') or even to remote objects (by using Distributed
Objects or some other mechanism).  When all this completes, the return
value is passed back and must be returned correctly to the original
caller.

 Note that the GNU Objective-C runtime currently provides no support for
method forwarding or method invocations other than the
'__objc_msg_forward2' hook.

 If the forwarding hook does not exist or returns 'NULL', the runtime
currently attempts forwarding using an older, deprecated API, and if
that fails, it aborts the program.  In future versions of the GNU
Objective-C runtime, the runtime will immediately abort.


File: llvm.info,  Node: Compatibility,  Next: Trouble,  Prev: Objective-C,  Up: Top

9 Binary Compatibility
**********************

Binary compatibility encompasses several related concepts:

"application binary interface (ABI)"
     The set of runtime conventions followed by all of the tools that
     deal with binary representations of a program, including compilers,
     assemblers, linkers, and language runtime support.  Some ABIs are
     formal with a written specification, possibly designed by multiple
     interested parties.  Others are simply the way things are actually
     done by a particular set of tools.

"ABI conformance"
     A compiler conforms to an ABI if it generates code that follows all
     of the specifications enumerated by that ABI.  A library conforms
     to an ABI if it is implemented according to that ABI.  An
     application conforms to an ABI if it is built using tools that
     conform to that ABI and does not contain source code that
     specifically changes behavior specified by the ABI.

"calling conventions"
     Calling conventions are a subset of an ABI that specify of how
     arguments are passed and function results are returned.

"interoperability"
     Different sets of tools are interoperable if they generate files
     that can be used in the same program.  The set of tools includes
     compilers, assemblers, linkers, libraries, header files, startup
     files, and debuggers.  Binaries produced by different sets of tools
     are not interoperable unless they implement the same ABI.  This
     applies to different versions of the same tools as well as tools
     from different vendors.

"intercallability"
     Whether a function in a binary built by one set of tools can call a
     function in a binary built by a different set of tools is a subset
     of interoperability.

"implementation-defined features"
     Language standards include lists of implementation-defined features
     whose behavior can vary from one implementation to another.  Some
     of these features are normally covered by a platform's ABI and
     others are not.  The features that are not covered by an ABI
     generally affect how a program behaves, but not intercallability.

"compatibility"
     Conformance to the same ABI and the same behavior of
     implementation-defined features are both relevant for
     compatibility.

 The application binary interface implemented by a C or C++ compiler
affects code generation and runtime support for:

   * size and alignment of data types
   * layout of structured types
   * calling conventions
   * register usage conventions
   * interfaces for runtime arithmetic support
   * object file formats

 In addition, the application binary interface implemented by a C++
compiler affects code generation and runtime support for:
   * name mangling
   * exception handling
   * invoking constructors and destructors
   * layout, alignment, and padding of classes
   * layout and alignment of virtual tables

 Some GCC compilation options cause the compiler to generate code that
does not conform to the platform's default ABI.  Other options cause
different program behavior for implementation-defined features that are
not covered by an ABI.  These options are provided for consistency with
other compilers that do not follow the platform's default ABI or the
usual behavior of implementation-defined features for the platform.  Be
very careful about using such options.

 Most platforms have a well-defined ABI that covers C code, but ABIs
that cover C++ functionality are not yet common.

 Starting with GCC 3.2, GCC binary conventions for C++ are based on a
written, vendor-neutral C++ ABI that was designed to be specific to
64-bit Itanium but also includes generic specifications that apply to
any platform.  This C++ ABI is also implemented by other compiler
vendors on some platforms, notably GNU/Linux and BSD systems.  We have
tried hard to provide a stable ABI that will be compatible with future
GCC releases, but it is possible that we will encounter problems that
make this difficult.  Such problems could include different
interpretations of the C++ ABI by different vendors, bugs in the ABI, or
bugs in the implementation of the ABI in different compilers.  GCC's
'-Wabi' switch warns when G++ generates code that is probably not
compatible with the C++ ABI.

 The C++ library used with a C++ compiler includes the Standard C++
Library, with functionality defined in the C++ Standard, plus language
runtime support.  The runtime support is included in a C++ ABI, but
there is no formal ABI for the Standard C++ Library.  Two
implementations of that library are interoperable if one follows the
de-facto ABI of the other and if they are both built with the same
compiler, or with compilers that conform to the same ABI for C++
compiler and runtime support.

 When G++ and another C++ compiler conform to the same C++ ABI, but the
implementations of the Standard C++ Library that they normally use do
not follow the same ABI for the Standard C++ Library, object files built
with those compilers can be used in the same program only if they use
the same C++ library.  This requires specifying the location of the C++
library header files when invoking the compiler whose usual library is
not being used.  The location of GCC's C++ header files depends on how
the GCC build was configured, but can be seen by using the G++ '-v'
option.  With default configuration options for G++ 3.3 the compile line
for a different C++ compiler needs to include

         -IGCC_INSTALL_DIRECTORY/include/c++/3.3

 Similarly, compiling code with G++ that must use a C++ library other
than the GNU C++ library requires specifying the location of the header
files for that other library.

 The most straightforward way to link a program to use a particular C++
library is to use a C++ driver that specifies that C++ library by
default.  The 'g++' driver, for example, tells the linker where to find
GCC's C++ library ('libstdc++') plus the other libraries and startup
files it needs, in the proper order.

 If a program must use a different C++ library and it's not possible to
do the final link using a C++ driver that uses that library by default,
it is necessary to tell 'g++' the location and name of that library.  It
might also be necessary to specify different startup files and other
runtime support libraries, and to suppress the use of GCC's support
libraries with one or more of the options '-nostdlib', '-nostartfiles',
and '-nodefaultlibs'.


File: llvm.info,  Node: Trouble,  Next: Bugs,  Prev: Compatibility,  Up: Top

10 Known Causes of Trouble with GCC
***********************************

This section describes known problems that affect users of GCC.  Most of
these are not GCC bugs per se--if they were, we would fix them.  But the
result for a user may be like the result of a bug.

 Some of these problems are due to bugs in other software, some are
missing features that are too much work to add, and some are places
where people's opinions differ as to what is best.

* Menu:

* Actual Bugs::         Bugs we will fix later.
* Interoperation::      Problems using GCC with other compilers,
                        and with certain linkers, assemblers and debuggers.
* Incompatibilities::   GCC is incompatible with traditional C.
* Fixed Headers::       GCC uses corrected versions of system header files.
                        This is necessary, but doesn't always work smoothly.
* Standard Libraries::  GCC uses the system C library, which might not be
                        compliant with the ISO C standard.
* Disappointments::     Regrettable things we can't change, but not quite bugs.
* C++ Misunderstandings:: Common misunderstandings with GNU C++.
* Non-bugs::            Things we think are right, but some others disagree.
* Warnings and Errors:: Which problems in your code get warnings,
                        and which get errors.


File: llvm.info,  Node: Actual Bugs,  Next: Interoperation,  Up: Trouble

10.1 Actual Bugs We Haven't Fixed Yet
=====================================

   * The 'fixincludes' script interacts badly with automounters; if the
     directory of system header files is automounted, it tends to be
     unmounted while 'fixincludes' is running.  This would seem to be a
     bug in the automounter.  We don't know any good way to work around
     it.


File: llvm.info,  Node: Interoperation,  Next: Incompatibilities,  Prev: Actual Bugs,  Up: Trouble

10.2 Interoperation
===================

This section lists various difficulties encountered in using GCC
together with other compilers or with the assemblers, linkers, libraries
and debuggers on certain systems.

   * On many platforms, GCC supports a different ABI for C++ than do
     other compilers, so the object files compiled by GCC cannot be used
     with object files generated by another C++ compiler.

     An area where the difference is most apparent is name mangling.
     The use of different name mangling is intentional, to protect you
     from more subtle problems.  Compilers differ as to many internal
     details of C++ implementation, including: how class instances are
     laid out, how multiple inheritance is implemented, and how virtual
     function calls are handled.  If the name encoding were made the
     same, your programs would link against libraries provided from
     other compilers--but the programs would then crash when run.
     Incompatible libraries are then detected at link time, rather than
     at run time.

   * On some BSD systems, including some versions of Ultrix, use of
     profiling causes static variable destructors (currently used only
     in C++) not to be run.

   * On a SPARC, GCC aligns all values of type 'double' on an 8-byte
     boundary, and it expects every 'double' to be so aligned.  The Sun
     compiler usually gives 'double' values 8-byte alignment, with one
     exception: function arguments of type 'double' may not be aligned.

     As a result, if a function compiled with Sun CC takes the address
     of an argument of type 'double' and passes this pointer of type
     'double *' to a function compiled with GCC, dereferencing the
     pointer may cause a fatal signal.

     One way to solve this problem is to compile your entire program
     with GCC.  Another solution is to modify the function that is
     compiled with Sun CC to copy the argument into a local variable;
     local variables are always properly aligned.  A third solution is
     to modify the function that uses the pointer to dereference it via
     the following function 'access_double' instead of directly with
     '*':

          inline double
          access_double (double *unaligned_ptr)
          {
            union d2i { double d; int i[2]; };

            union d2i *p = (union d2i *) unaligned_ptr;
            union d2i u;

            u.i[0] = p->i[0];
            u.i[1] = p->i[1];

            return u.d;
          }

     Storing into the pointer can be done likewise with the same union.

   * On Solaris, the 'malloc' function in the 'libmalloc.a' library may
     allocate memory that is only 4 byte aligned.  Since GCC on the
     SPARC assumes that doubles are 8 byte aligned, this may result in a
     fatal signal if doubles are stored in memory allocated by the
     'libmalloc.a' library.

     The solution is to not use the 'libmalloc.a' library.  Use instead
     'malloc' and related functions from 'libc.a'; they do not have this
     problem.

   * On the HP PA machine, ADB sometimes fails to work on functions
     compiled with GCC.  Specifically, it fails to work on functions
     that use 'alloca' or variable-size arrays.  This is because GCC
     doesn't generate HP-UX unwind descriptors for such functions.  It
     may even be impossible to generate them.

   * Debugging ('-g') is not supported on the HP PA machine, unless you
     use the preliminary GNU tools.

   * Taking the address of a label may generate errors from the HP-UX PA
     assembler.  GAS for the PA does not have this problem.

   * Using floating point parameters for indirect calls to static
     functions will not work when using the HP assembler.  There simply
     is no way for GCC to specify what registers hold arguments for
     static functions when using the HP assembler.  GAS for the PA does
     not have this problem.

   * In extremely rare cases involving some very large functions you may
     receive errors from the HP linker complaining about an out of
     bounds unconditional branch offset.  This used to occur more often
     in previous versions of GCC, but is now exceptionally rare.  If you
     should run into it, you can work around by making your function
     smaller.

   * GCC compiled code sometimes emits warnings from the HP-UX assembler
     of the form:

          (warning) Use of GR3 when
            frame >= 8192 may cause conflict.

     These warnings are harmless and can be safely ignored.

   * In extremely rare cases involving some very large functions you may
     receive errors from the AIX Assembler complaining about a
     displacement that is too large.  If you should run into it, you can
     work around by making your function smaller.

   * The 'libstdc++.a' library in GCC relies on the SVR4 dynamic linker
     semantics which merges global symbols between libraries and
     applications, especially necessary for C++ streams functionality.
     This is not the default behavior of AIX shared libraries and
     dynamic linking.  'libstdc++.a' is built on AIX with
     "runtime-linking" enabled so that symbol merging can occur.  To
     utilize this feature, the application linked with 'libstdc++.a'
     must include the '-Wl,-brtl' flag on the link line.  G++ cannot
     impose this because this option may interfere with the semantics of
     the user program and users may not always use 'g++' to link his or
     her application.  Applications are not required to use the
     '-Wl,-brtl' flag on the link line--the rest of the 'libstdc++.a'
     library which is not dependent on the symbol merging semantics will
     continue to function correctly.

   * An application can interpose its own definition of functions for
     functions invoked by 'libstdc++.a' with "runtime-linking" enabled
     on AIX.  To accomplish this the application must be linked with
     "runtime-linking" option and the functions explicitly must be
     exported by the application ('-Wl,-brtl,-bE:exportfile').

   * AIX on the RS/6000 provides support (NLS) for environments outside
     of the United States.  Compilers and assemblers use NLS to support
     locale-specific representations of various objects including
     floating-point numbers ('.' vs ',' for separating decimal
     fractions).  There have been problems reported where the library
     linked with GCC does not produce the same floating-point formats
     that the assembler accepts.  If you have this problem, set the
     'LANG' environment variable to 'C' or 'En_US'.

   * Even if you specify '-fdollars-in-identifiers', you cannot
     successfully use '$' in identifiers on the RS/6000 due to a
     restriction in the IBM assembler.  GAS supports these identifiers.


File: llvm.info,  Node: Incompatibilities,  Next: Fixed Headers,  Prev: Interoperation,  Up: Trouble

10.3 Incompatibilities of GCC
=============================

There are several noteworthy incompatibilities between GNU C and K&R
(non-ISO) versions of C.

   * GCC normally makes string constants read-only.  If several
     identical-looking string constants are used, GCC stores only one
     copy of the string.

     One consequence is that you cannot call 'mktemp' with a string
     constant argument.  The function 'mktemp' always alters the string
     its argument points to.

     Another consequence is that 'sscanf' does not work on some very old
     systems when passed a string constant as its format control string
     or input.  This is because 'sscanf' incorrectly tries to write into
     the string constant.  Likewise 'fscanf' and 'scanf'.

     The solution to these problems is to change the program to use
     'char'-array variables with initialization strings for these
     purposes instead of string constants.

   * '-2147483648' is positive.

     This is because 2147483648 cannot fit in the type 'int', so
     (following the ISO C rules) its data type is 'unsigned long int'.
     Negating this value yields 2147483648 again.

   * GCC does not substitute macro arguments when they appear inside of
     string constants.  For example, the following macro in GCC

          #define foo(a) "a"

     will produce output '"a"' regardless of what the argument A is.

   * When you use 'setjmp' and 'longjmp', the only automatic variables
     guaranteed to remain valid are those declared 'volatile'.  This is
     a consequence of automatic register allocation.  Consider this
     function:

          jmp_buf j;

          foo ()
          {
            int a, b;

            a = fun1 ();
            if (setjmp (j))
              return a;

            a = fun2 ();
            /* 'longjmp (j)' may occur in 'fun3'. */
            return a + fun3 ();
          }

     Here 'a' may or may not be restored to its first value when the
     'longjmp' occurs.  If 'a' is allocated in a register, then its
     first value is restored; otherwise, it keeps the last value stored
     in it.

     If you use the '-W' option with the '-O' option, you will get a
     warning when GCC thinks such a problem might be possible.

   * Programs that use preprocessing directives in the middle of macro
     arguments do not work with GCC.  For example, a program like this
     will not work:

          foobar (
          #define luser
                  hack)

     ISO C does not permit such a construct.

   * K&R compilers allow comments to cross over an inclusion boundary
     (i.e. started in an include file and ended in the including file).

   * Declarations of external variables and functions within a block
     apply only to the block containing the declaration.  In other
     words, they have the same scope as any other declaration in the
     same place.

     In some other C compilers, an 'extern' declaration affects all the
     rest of the file even if it happens within a block.

   * In traditional C, you can combine 'long', etc., with a typedef
     name, as shown here:

          typedef int foo;
          typedef long foo bar;

     In ISO C, this is not allowed: 'long' and other type modifiers
     require an explicit 'int'.

   * PCC allows typedef names to be used as function parameters.

   * Traditional C allows the following erroneous pair of declarations
     to appear together in a given scope:

          typedef int foo;
          typedef foo foo;

   * GCC treats all characters of identifiers as significant.  According
     to K&R-1 (2.2), "No more than the first eight characters are
     significant, although more may be used.".  Also according to K&R-1
     (2.2), "An identifier is a sequence of letters and digits; the
     first character must be a letter.  The underscore _ counts as a
     letter.", but GCC also allows dollar signs in identifiers.

   * PCC allows whitespace in the middle of compound assignment
     operators such as '+='.  GCC, following the ISO standard, does not
     allow this.

   * GCC complains about unterminated character constants inside of
     preprocessing conditionals that fail.  Some programs have English
     comments enclosed in conditionals that are guaranteed to fail; if
     these comments contain apostrophes, GCC will probably report an
     error.  For example, this code would produce an error:

          #if 0
          You can't expect this to work.
          #endif

     The best solution to such a problem is to put the text into an
     actual C comment delimited by '/*...*/'.

   * Many user programs contain the declaration 'long time ();'.  In the
     past, the system header files on many systems did not actually
     declare 'time', so it did not matter what type your program
     declared it to return.  But in systems with ISO C headers, 'time'
     is declared to return 'time_t', and if that is not the same as
     'long', then 'long time ();' is erroneous.

     The solution is to change your program to use appropriate system
     headers ('<time.h>' on systems with ISO C headers) and not to
     declare 'time' if the system header files declare it, or failing
     that to use 'time_t' as the return type of 'time'.

   * When compiling functions that return 'float', PCC converts it to a
     double.  GCC actually returns a 'float'.  If you are concerned with
     PCC compatibility, you should declare your functions to return
     'double'; you might as well say what you mean.

   * When compiling functions that return structures or unions, GCC
     output code normally uses a method different from that used on most
     versions of Unix.  As a result, code compiled with GCC cannot call
     a structure-returning function compiled with PCC, and vice versa.

     The method used by GCC is as follows: a structure or union which is
     1, 2, 4 or 8 bytes long is returned like a scalar.  A structure or
     union with any other size is stored into an address supplied by the
     caller (usually in a special, fixed register, but on some machines
     it is passed on the stack).  The target hook
     'TARGET_STRUCT_VALUE_RTX' tells GCC where to pass this address.

     By contrast, PCC on most target machines returns structures and
     unions of any size by copying the data into an area of static
     storage, and then returning the address of that storage as if it
     were a pointer value.  The caller must copy the data from that
     memory area to the place where the value is wanted.  GCC does not
     use this method because it is slower and nonreentrant.

     On some newer machines, PCC uses a reentrant convention for all
     structure and union returning.  GCC on most of these machines uses
     a compatible convention when returning structures and unions in
     memory, but still returns small structures and unions in registers.

     You can tell GCC to use a compatible convention for all structure
     and union returning with the option '-fpcc-struct-return'.

   * GCC complains about program fragments such as '0x74ae-0x4000' which
     appear to be two hexadecimal constants separated by the minus
     operator.  Actually, this string is a single "preprocessing token".
     Each such token must correspond to one token in C.  Since this does
     not, GCC prints an error message.  Although it may appear obvious
     that what is meant is an operator and two values, the ISO C
     standard specifically requires that this be treated as erroneous.

     A "preprocessing token" is a "preprocessing number" if it begins
     with a digit and is followed by letters, underscores, digits,
     periods and 'e+', 'e-', 'E+', 'E-', 'p+', 'p-', 'P+', or 'P-'
     character sequences.  (In strict C90 mode, the sequences 'p+',
     'p-', 'P+' and 'P-' cannot appear in preprocessing numbers.)

     To make the above program fragment valid, place whitespace in front
     of the minus sign.  This whitespace will end the preprocessing
     number.


File: llvm.info,  Node: Fixed Headers,  Next: Standard Libraries,  Prev: Incompatibilities,  Up: Trouble

10.4 Fixed Header Files
=======================

GCC needs to install corrected versions of some system header files.
This is because most target systems have some header files that won't
work with GCC unless they are changed.  Some have bugs, some are
incompatible with ISO C, and some depend on special features of other
compilers.

 Installing GCC automatically creates and installs the fixed header
files, by running a program called 'fixincludes'.  Normally, you don't
need to pay attention to this.  But there are cases where it doesn't do
the right thing automatically.

   * If you update the system's header files, such as by installing a
     new system version, the fixed header files of GCC are not
     automatically updated.  They can be updated using the 'mkheaders'
     script installed in 'LIBEXECDIR/gcc/TARGET/VERSION/install-tools/'.

   * On some systems, header file directories contain machine-specific
     symbolic links in certain places.  This makes it possible to share
     most of the header files among hosts running the same version of
     the system on different machine models.

     The programs that fix the header files do not understand this
     special way of using symbolic links; therefore, the directory of
     fixed header files is good only for the machine model used to build
     it.

     It is possible to make separate sets of fixed header files for the
     different machine models, and arrange a structure of symbolic links
     so as to use the proper set, but you'll have to do this by hand.


File: llvm.info,  Node: Standard Libraries,  Next: Disappointments,  Prev: Fixed Headers,  Up: Trouble

10.5 Standard Libraries
=======================

GCC by itself attempts to be a conforming freestanding implementation.
*Note Language Standards Supported by GCC: Standards, for details of
what this means.  Beyond the library facilities required of such an
implementation, the rest of the C library is supplied by the vendor of
the operating system.  If that C library doesn't conform to the C
standards, then your programs might get warnings (especially when using
'-Wall') that you don't expect.

 For example, the 'sprintf' function on SunOS 4.1.3 returns 'char *'
while the C standard says that 'sprintf' returns an 'int'.  The
'fixincludes' program could make the prototype for this function match
the Standard, but that would be wrong, since the function will still
return 'char *'.

 If you need a Standard compliant library, then you need to find one, as
GCC does not provide one.  The GNU C library (called 'glibc') provides
ISO C, POSIX, BSD, SystemV and X/Open compatibility for GNU/Linux and
HURD-based GNU systems; no recent version of it supports other systems,
though some very old versions did.  Version 2.2 of the GNU C library
includes nearly complete C99 support.  You could also ask your operating
system vendor if newer libraries are available.


File: llvm.info,  Node: Disappointments,  Next: C++ Misunderstandings,  Prev: Standard Libraries,  Up: Trouble

10.6 Disappointments and Misunderstandings
==========================================

These problems are perhaps regrettable, but we don't know any practical
way around them.

   * Certain local variables aren't recognized by debuggers when you
     compile with optimization.

     This occurs because sometimes GCC optimizes the variable out of
     existence.  There is no way to tell the debugger how to compute the
     value such a variable "would have had", and it is not clear that
     would be desirable anyway.  So GCC simply does not mention the
     eliminated variable when it writes debugging information.

     You have to expect a certain amount of disagreement between the
     executable and your source code, when you use optimization.

   * Users often think it is a bug when GCC reports an error for code
     like this:

          int foo (struct mumble *);

          struct mumble { ... };

          int foo (struct mumble *x)
          { ... }

     This code really is erroneous, because the scope of 'struct mumble'
     in the prototype is limited to the argument list containing it.  It
     does not refer to the 'struct mumble' defined with file scope
     immediately below--they are two unrelated types with similar names
     in different scopes.

     But in the definition of 'foo', the file-scope type is used because
     that is available to be inherited.  Thus, the definition and the
     prototype do not match, and you get an error.

     This behavior may seem silly, but it's what the ISO standard
     specifies.  It is easy enough for you to make your code work by
     moving the definition of 'struct mumble' above the prototype.  It's
     not worth being incompatible with ISO C just to avoid an error for
     the example shown above.

   * Accesses to bit-fields even in volatile objects works by accessing
     larger objects, such as a byte or a word.  You cannot rely on what
     size of object is accessed in order to read or write the bit-field;
     it may even vary for a given bit-field according to the precise
     usage.

     If you care about controlling the amount of memory that is
     accessed, use volatile but do not use bit-fields.

   * GCC comes with shell scripts to fix certain known problems in
     system header files.  They install corrected copies of various
     header files in a special directory where only GCC will normally
     look for them.  The scripts adapt to various systems by searching
     all the system header files for the problem cases that we know
     about.

     If new system header files are installed, nothing automatically
     arranges to update the corrected header files.  They can be updated
     using the 'mkheaders' script installed in
     'LIBEXECDIR/gcc/TARGET/VERSION/install-tools/'.

   * On 68000 and x86 systems, for instance, you can get paradoxical
     results if you test the precise values of floating point numbers.
     For example, you can find that a floating point value which is not
     a NaN is not equal to itself.  This results from the fact that the
     floating point registers hold a few more bits of precision than fit
     in a 'double' in memory.  Compiled code moves values between memory
     and floating point registers at its convenience, and moving them
     into memory truncates them.

     You can partially avoid this problem by using the '-ffloat-store'
     option (*note Optimize Options::).

   * On AIX and other platforms without weak symbol support, templates
     need to be instantiated explicitly and symbols for static members
     of templates will not be generated.

   * On AIX, GCC scans object files and library archives for static
     constructors and destructors when linking an application before the
     linker prunes unreferenced symbols.  This is necessary to prevent
     the AIX linker from mistakenly assuming that static constructor or
     destructor are unused and removing them before the scanning can
     occur.  All static constructors and destructors found will be
     referenced even though the modules in which they occur may not be
     used by the program.  This may lead to both increased executable
     size and unexpected symbol references.


File: llvm.info,  Node: C++ Misunderstandings,  Next: Non-bugs,  Prev: Disappointments,  Up: Trouble

10.7 Common Misunderstandings with GNU C++
==========================================

C++ is a complex language and an evolving one, and its standard
definition (the ISO C++ standard) was only recently completed.  As a
result, your C++ compiler may occasionally surprise you, even when its
behavior is correct.  This section discusses some areas that frequently
give rise to questions of this sort.

* Menu:

* Static Definitions::  Static member declarations are not definitions
* Name lookup::         Name lookup, templates, and accessing members of base classes
* Temporaries::         Temporaries may vanish before you expect
* Copy Assignment::     Copy Assignment operators copy virtual bases twice


File: llvm.info,  Node: Static Definitions,  Next: Name lookup,  Up: C++ Misunderstandings

10.7.1 Declare _and_ Define Static Members
------------------------------------------

When a class has static data members, it is not enough to _declare_ the
static member; you must also _define_ it.  For example:

     class Foo
     {
       ...
       void method();
       static int bar;
     };

 This declaration only establishes that the class 'Foo' has an 'int'
named 'Foo::bar', and a member function named 'Foo::method'.  But you
still need to define _both_ 'method' and 'bar' elsewhere.  According to
the ISO standard, you must supply an initializer in one (and only one)
source file, such as:

     int Foo::bar = 0;

 Other C++ compilers may not correctly implement the standard behavior.
As a result, when you switch to 'g++' from one of these compilers, you
may discover that a program that appeared to work correctly in fact does
not conform to the standard: 'g++' reports as undefined symbols any
static data members that lack definitions.


File: llvm.info,  Node: Name lookup,  Next: Temporaries,  Prev: Static Definitions,  Up: C++ Misunderstandings

10.7.2 Name Lookup, Templates, and Accessing Members of Base Classes
--------------------------------------------------------------------

The C++ standard prescribes that all names that are not dependent on
template parameters are bound to their present definitions when parsing
a template function or class.(1)  Only names that are dependent are
looked up at the point of instantiation.  For example, consider

       void foo(double);

       struct A {
         template <typename T>
         void f () {
           foo (1);        // 1
           int i = N;      // 2
           T t;
           t.bar();        // 3
           foo (t);        // 4
         }

         static const int N;
       };

 Here, the names 'foo' and 'N' appear in a context that does not depend
on the type of 'T'.  The compiler will thus require that they are
defined in the context of use in the template, not only before the point
of instantiation, and will here use '::foo(double)' and 'A::N',
respectively.  In particular, it will convert the integer value to a
'double' when passing it to '::foo(double)'.

 Conversely, 'bar' and the call to 'foo' in the fourth marked line are
used in contexts that do depend on the type of 'T', so they are only
looked up at the point of instantiation, and you can provide
declarations for them after declaring the template, but before
instantiating it.  In particular, if you instantiate 'A::f<int>', the
last line will call an overloaded '::foo(int)' if one was provided, even
if after the declaration of 'struct A'.

 This distinction between lookup of dependent and non-dependent names is
called two-stage (or dependent) name lookup.  G++ implements it since
version 3.4.

 Two-stage name lookup sometimes leads to situations with behavior
different from non-template codes.  The most common is probably this:

       template <typename T> struct Base {
         int i;
       };

       template <typename T> struct Derived : public Base<T> {
         int get_i() { return i; }
       };

 In 'get_i()', 'i' is not used in a dependent context, so the compiler
will look for a name declared at the enclosing namespace scope (which is
the global scope here).  It will not look into the base class, since
that is dependent and you may declare specializations of 'Base' even
after declaring 'Derived', so the compiler can't really know what 'i'
would refer to.  If there is no global variable 'i', then you will get
an error message.

 In order to make it clear that you want the member of the base class,
you need to defer lookup until instantiation time, at which the base
class is known.  For this, you need to access 'i' in a dependent
context, by either using 'this->i' (remember that 'this' is of type
'Derived<T>*', so is obviously dependent), or using 'Base<T>::i'.
Alternatively, 'Base<T>::i' might be brought into scope by a
'using'-declaration.

 Another, similar example involves calling member functions of a base
class:

       template <typename T> struct Base {
           int f();
       };

       template <typename T> struct Derived : Base<T> {
           int g() { return f(); };
       };

 Again, the call to 'f()' is not dependent on template arguments (there
are no arguments that depend on the type 'T', and it is also not
otherwise specified that the call should be in a dependent context).
Thus a global declaration of such a function must be available, since
the one in the base class is not visible until instantiation time.  The
compiler will consequently produce the following error message:

       x.cc: In member function `int Derived<T>::g()':
       x.cc:6: error: there are no arguments to `f' that depend on a template
          parameter, so a declaration of `f' must be available
       x.cc:6: error: (if you use `-fpermissive', G++ will accept your code, but
          allowing the use of an undeclared name is deprecated)

 To make the code valid either use 'this->f()', or 'Base<T>::f()'.
Using the '-fpermissive' flag will also let the compiler accept the
code, by marking all function calls for which no declaration is visible
at the time of definition of the template for later lookup at
instantiation time, as if it were a dependent call.  We do not recommend
using '-fpermissive' to work around invalid code, and it will also only
catch cases where functions in base classes are called, not where
variables in base classes are used (as in the example above).

 Note that some compilers (including G++ versions prior to 3.4) get
these examples wrong and accept above code without an error.  Those
compilers do not implement two-stage name lookup correctly.

   ---------- Footnotes ----------

   (1) The C++ standard just uses the term "dependent" for names that
depend on the type or value of template parameters.  This shorter term
will also be used in the rest of this section.


File: llvm.info,  Node: Temporaries,  Next: Copy Assignment,  Prev: Name lookup,  Up: C++ Misunderstandings

10.7.3 Temporaries May Vanish Before You Expect
-----------------------------------------------

It is dangerous to use pointers or references to _portions_ of a
temporary object.  The compiler may very well delete the object before
you expect it to, leaving a pointer to garbage.  The most common place
where this problem crops up is in classes like string classes,
especially ones that define a conversion function to type 'char *' or
'const char *'--which is one reason why the standard 'string' class
requires you to call the 'c_str' member function.  However, any class
that returns a pointer to some internal structure is potentially subject
to this problem.

 For example, a program may use a function 'strfunc' that returns
'string' objects, and another function 'charfunc' that operates on
pointers to 'char':

     string strfunc ();
     void charfunc (const char *);

     void
     f ()
     {
       const char *p = strfunc().c_str();
       ...
       charfunc (p);
       ...
       charfunc (p);
     }

In this situation, it may seem reasonable to save a pointer to the C
string returned by the 'c_str' member function and use that rather than
call 'c_str' repeatedly.  However, the temporary string created by the
call to 'strfunc' is destroyed after 'p' is initialized, at which point
'p' is left pointing to freed memory.

 Code like this may run successfully under some other compilers,
particularly obsolete cfront-based compilers that delete temporaries
along with normal local variables.  However, the GNU C++ behavior is
standard-conforming, so if your program depends on late destruction of
temporaries it is not portable.

 The safe way to write such code is to give the temporary a name, which
forces it to remain until the end of the scope of the name.  For
example:

     const string& tmp = strfunc ();
     charfunc (tmp.c_str ());


File: llvm.info,  Node: Copy Assignment,  Prev: Temporaries,  Up: C++ Misunderstandings

10.7.4 Implicit Copy-Assignment for Virtual Bases
-------------------------------------------------

When a base class is virtual, only one subobject of the base class
belongs to each full object.  Also, the constructors and destructors are
invoked only once, and called from the most-derived class.  However,
such objects behave unspecified when being assigned.  For example:

     struct Base{
       char *name;
       Base(char *n) : name(strdup(n)){}
       Base& operator= (const Base& other){
        free (name);
        name = strdup (other.name);
       }
     };

     struct A:virtual Base{
       int val;
       A():Base("A"){}
     };

     struct B:virtual Base{
       int bval;
       B():Base("B"){}
     };

     struct Derived:public A, public B{
       Derived():Base("Derived"){}
     };

     void func(Derived &d1, Derived &d2)
     {
       d1 = d2;
     }

 The C++ standard specifies that 'Base::Base' is only called once when
constructing or copy-constructing a Derived object.  It is unspecified
whether 'Base::operator=' is called more than once when the implicit
copy-assignment for Derived objects is invoked (as it is inside 'func'
in the example).

 G++ implements the "intuitive" algorithm for copy-assignment: assign
all direct bases, then assign all members.  In that algorithm, the
virtual base subobject can be encountered more than once.  In the
example, copying proceeds in the following order: 'val', 'name' (via
'strdup'), 'bval', and 'name' again.

 If application code relies on copy-assignment, a user-defined
copy-assignment operator removes any uncertainties.  With such an
operator, the application can define whether and how the virtual base
subobject is assigned.


File: llvm.info,  Node: Non-bugs,  Next: Warnings and Errors,  Prev: C++ Misunderstandings,  Up: Trouble

10.8 Certain Changes We Don't Want to Make
==========================================

This section lists changes that people frequently request, but which we
do not make because we think GCC is better without them.

   * Checking the number and type of arguments to a function which has
     an old-fashioned definition and no prototype.

     Such a feature would work only occasionally--only for calls that
     appear in the same file as the called function, following the
     definition.  The only way to check all calls reliably is to add a
     prototype for the function.  But adding a prototype eliminates the
     motivation for this feature.  So the feature is not worthwhile.

   * Warning about using an expression whose type is signed as a shift
     count.

     Shift count operands are probably signed more often than unsigned.
     Warning about this would cause far more annoyance than good.

   * Warning about assigning a signed value to an unsigned variable.

     Such assignments must be very common; warning about them would
     cause more annoyance than good.

   * Warning when a non-void function value is ignored.

     C contains many standard functions that return a value that most
     programs choose to ignore.  One obvious example is 'printf'.
     Warning about this practice only leads the defensive programmer to
     clutter programs with dozens of casts to 'void'.  Such casts are
     required so frequently that they become visual noise.  Writing
     those casts becomes so automatic that they no longer convey useful
     information about the intentions of the programmer.  For functions
     where the return value should never be ignored, use the
     'warn_unused_result' function attribute (*note Function
     Attributes::).

   * Making '-fshort-enums' the default.

     This would cause storage layout to be incompatible with most other
     C compilers.  And it doesn't seem very important, given that you
     can get the same result in other ways.  The case where it matters
     most is when the enumeration-valued object is inside a structure,
     and in that case you can specify a field width explicitly.

   * Making bit-fields unsigned by default on particular machines where
     "the ABI standard" says to do so.

     The ISO C standard leaves it up to the implementation whether a
     bit-field declared plain 'int' is signed or not.  This in effect
     creates two alternative dialects of C.

     The GNU C compiler supports both dialects; you can specify the
     signed dialect with '-fsigned-bitfields' and the unsigned dialect
     with '-funsigned-bitfields'.  However, this leaves open the
     question of which dialect to use by default.

     Currently, the preferred dialect makes plain bit-fields signed,
     because this is simplest.  Since 'int' is the same as 'signed int'
     in every other context, it is cleanest for them to be the same in
     bit-fields as well.

     Some computer manufacturers have published Application Binary
     Interface standards which specify that plain bit-fields should be
     unsigned.  It is a mistake, however, to say anything about this
     issue in an ABI.  This is because the handling of plain bit-fields
     distinguishes two dialects of C.  Both dialects are meaningful on
     every type of machine.  Whether a particular object file was
     compiled using signed bit-fields or unsigned is of no concern to
     other object files, even if they access the same bit-fields in the
     same data structures.

     A given program is written in one or the other of these two
     dialects.  The program stands a chance to work on most any machine
     if it is compiled with the proper dialect.  It is unlikely to work
     at all if compiled with the wrong dialect.

     Many users appreciate the GNU C compiler because it provides an
     environment that is uniform across machines.  These users would be
     inconvenienced if the compiler treated plain bit-fields differently
     on certain machines.

     Occasionally users write programs intended only for a particular
     machine type.  On these occasions, the users would benefit if the
     GNU C compiler were to support by default the same dialect as the
     other compilers on that machine.  But such applications are rare.
     And users writing a program to run on more than one type of machine
     cannot possibly benefit from this kind of compatibility.

     This is why GCC does and will treat plain bit-fields in the same
     fashion on all types of machines (by default).

     There are some arguments for making bit-fields unsigned by default
     on all machines.  If, for example, this becomes a universal de
     facto standard, it would make sense for GCC to go along with it.
     This is something to be considered in the future.

     (Of course, users strongly concerned about portability should
     indicate explicitly in each bit-field whether it is signed or not.
     In this way, they write programs which have the same meaning in
     both C dialects.)

   * Undefining '__STDC__' when '-ansi' is not used.

     Currently, GCC defines '__STDC__' unconditionally.  This provides
     good results in practice.

     Programmers normally use conditionals on '__STDC__' to ask whether
     it is safe to use certain features of ISO C, such as function
     prototypes or ISO token concatenation.  Since plain 'gcc' supports
     all the features of ISO C, the correct answer to these questions is
     "yes".

     Some users try to use '__STDC__' to check for the availability of
     certain library facilities.  This is actually incorrect usage in an
     ISO C program, because the ISO C standard says that a conforming
     freestanding implementation should define '__STDC__' even though it
     does not have the library facilities.  'gcc -ansi -pedantic' is a
     conforming freestanding implementation, and it is therefore
     required to define '__STDC__', even though it does not come with an
     ISO C library.

     Sometimes people say that defining '__STDC__' in a compiler that
     does not completely conform to the ISO C standard somehow violates
     the standard.  This is illogical.  The standard is a standard for
     compilers that claim to support ISO C, such as 'gcc -ansi'--not for
     other compilers such as plain 'gcc'.  Whatever the ISO C standard
     says is relevant to the design of plain 'gcc' without '-ansi' only
     for pragmatic reasons, not as a requirement.

     GCC normally defines '__STDC__' to be 1, and in addition defines
     '__STRICT_ANSI__' if you specify the '-ansi' option, or a '-std'
     option for strict conformance to some version of ISO C.  On some
     hosts, system include files use a different convention, where
     '__STDC__' is normally 0, but is 1 if the user specifies strict
     conformance to the C Standard.  GCC follows the host convention
     when processing system include files, but when processing user
     files it follows the usual GNU C convention.

   * Undefining '__STDC__' in C++.

     Programs written to compile with C++-to-C translators get the value
     of '__STDC__' that goes with the C compiler that is subsequently
     used.  These programs must test '__STDC__' to determine what kind
     of C preprocessor that compiler uses: whether they should
     concatenate tokens in the ISO C fashion or in the traditional
     fashion.

     These programs work properly with GNU C++ if '__STDC__' is defined.
     They would not work otherwise.

     In addition, many header files are written to provide prototypes in
     ISO C but not in traditional C.  Many of these header files can
     work without change in C++ provided '__STDC__' is defined.  If
     '__STDC__' is not defined, they will all fail, and will all need to
     be changed to test explicitly for C++ as well.

   * Deleting "empty" loops.

     Historically, GCC has not deleted "empty" loops under the
     assumption that the most likely reason you would put one in a
     program is to have a delay, so deleting them will not make real
     programs run any faster.

     However, the rationale here is that optimization of a nonempty loop
     cannot produce an empty one.  This held for carefully written C
     compiled with less powerful optimizers but is not always the case
     for carefully written C++ or with more powerful optimizers.  Thus
     GCC will remove operations from loops whenever it can determine
     those operations are not externally visible (apart from the time
     taken to execute them, of course).  In case the loop can be proved
     to be finite, GCC will also remove the loop itself.

     Be aware of this when performing timing tests, for instance the
     following loop can be completely removed, provided
     'some_expression' can provably not change any global state.

          {
             int sum = 0;
             int ix;

             for (ix = 0; ix != 10000; ix++)
                sum += some_expression;
          }

     Even though 'sum' is accumulated in the loop, no use is made of
     that summation, so the accumulation can be removed.

   * Making side effects happen in the same order as in some other
     compiler.

     It is never safe to depend on the order of evaluation of side
     effects.  For example, a function call like this may very well
     behave differently from one compiler to another:

          void func (int, int);

          int i = 2;
          func (i++, i++);

     There is no guarantee (in either the C or the C++ standard language
     definitions) that the increments will be evaluated in any
     particular order.  Either increment might happen first.  'func'
     might get the arguments '2, 3', or it might get '3, 2', or even '2,
     2'.

   * Making certain warnings into errors by default.

     Some ISO C testsuites report failure when the compiler does not
     produce an error message for a certain program.

     ISO C requires a "diagnostic" message for certain kinds of invalid
     programs, but a warning is defined by GCC to count as a diagnostic.
     If GCC produces a warning but not an error, that is correct ISO C
     support.  If testsuites call this "failure", they should be run
     with the GCC option '-pedantic-errors', which will turn these
     warnings into errors.


File: llvm.info,  Node: Warnings and Errors,  Prev: Non-bugs,  Up: Trouble

10.9 Warning Messages and Error Messages
========================================

The GNU compiler can produce two kinds of diagnostics: errors and
warnings.  Each kind has a different purpose:

     "Errors" report problems that make it impossible to compile your
     program.  GCC reports errors with the source file name and line
     number where the problem is apparent.

     "Warnings" report other unusual conditions in your code that _may_
     indicate a problem, although compilation can (and does) proceed.
     Warning messages also report the source file name and line number,
     but include the text 'warning:' to distinguish them from error
     messages.

 Warnings may indicate danger points where you should check to make sure
that your program really does what you intend; or the use of obsolete
features; or the use of nonstandard features of GNU C or C++.  Many
warnings are issued only if you ask for them, with one of the '-W'
options (for instance, '-Wall' requests a variety of useful warnings).

 GCC always tries to compile your program if possible; it never
gratuitously rejects a program whose meaning is clear merely because
(for instance) it fails to conform to a standard.  In some cases,
however, the C and C++ standards specify that certain extensions are
forbidden, and a diagnostic _must_ be issued by a conforming compiler.
The '-pedantic' option tells GCC to issue warnings in such cases;
'-pedantic-errors' says to make them errors instead.  This does not mean
that _all_ non-ISO constructs get warnings or errors.

 *Note Options to Request or Suppress Warnings: Warning Options, for
more detail on these and related command-line options.


File: llvm.info,  Node: Bugs,  Next: Service,  Prev: Trouble,  Up: Top

11 Reporting Bugs
*****************

Your bug reports play an essential role in making GCC reliable.

 When you encounter a problem, the first thing to do is to see if it is
already known.  *Note Trouble::.  If it isn't known, then you should
report the problem.

* Menu:

* Criteria:  Bug Criteria.   Have you really found a bug?
* Reporting: Bug Reporting.  How to report a bug effectively.


File: llvm.info,  Node: Bug Criteria,  Next: Bug Reporting,  Up: Bugs

11.1 Have You Found a Bug?
==========================

If you are not sure whether you have found a bug, here are some
guidelines:

   * If the compiler gets a fatal signal, for any input whatever, that
     is a compiler bug.  Reliable compilers never crash.

   * If the compiler produces invalid assembly code, for any input
     whatever (except an 'asm' statement), that is a compiler bug,
     unless the compiler reports errors (not just warnings) which would
     ordinarily prevent the assembler from being run.

   * If the compiler produces valid assembly code that does not
     correctly execute the input source code, that is a compiler bug.

     However, you must double-check to make sure, because you may have a
     program whose behavior is undefined, which happened by chance to
     give the desired results with another C or C++ compiler.

     For example, in many nonoptimizing compilers, you can write 'x;' at
     the end of a function instead of 'return x;', with the same
     results.  But the value of the function is undefined if 'return' is
     omitted; it is not a bug when GCC produces different results.

     Problems often result from expressions with two increment
     operators, as in 'f (*p++, *p++)'.  Your previous compiler might
     have interpreted that expression the way you intended; GCC might
     interpret it another way.  Neither compiler is wrong.  The bug is
     in your code.

     After you have localized the error to a single source line, it
     should be easy to check for these things.  If your program is
     correct and well defined, you have found a compiler bug.

   * If the compiler produces an error message for valid input, that is
     a compiler bug.

   * If the compiler does not produce an error message for invalid
     input, that is a compiler bug.  However, you should note that your
     idea of "invalid input" might be someone else's idea of "an
     extension" or "support for traditional practice".

   * If you are an experienced user of one of the languages GCC
     supports, your suggestions for improvement of GCC are welcome in
     any case.


File: llvm.info,  Node: Bug Reporting,  Prev: Bug Criteria,  Up: Bugs

11.2 How and Where to Report Bugs
=================================

Bugs should be reported to the bug database at support@embecosm.com
(mailto:support@embecosm.com).


File: llvm.info,  Node: Service,  Next: Contributing,  Prev: Bugs,  Up: Top

12 How To Get Help with GCC
***************************

If you need help installing, using or changing GCC, there are two ways
to find it:

   * Send a message to a suitable network mailing list.  First try
     <gcc-help@gcc.gnu.org> (for help installing or using GCC), and if
     that brings no response, try <gcc@gcc.gnu.org>.  For help changing
     GCC, ask <gcc@gcc.gnu.org>.  If you think you have found a bug in
     GCC, please report it following the instructions at *note Bug
     Reporting::.

   * Look in the service directory for someone who might help you for a
     fee.  The service directory is found at
     <http://www.fsf.org/resources/service>.

 For further information, see <http://gcc.gnu.org/faq.html#support>.


File: llvm.info,  Node: Contributing,  Next: Funding,  Prev: Service,  Up: Top

13 Contributing to GCC Development
**********************************

If you would like to help pretest GCC releases to assure they work well,
current development sources are available by SVN (see
<http://gcc.gnu.org/svn.html>).  Source and binary snapshots are also
available for FTP; see <http://gcc.gnu.org/snapshots.html>.

 If you would like to work on improvements to GCC, please read the
advice at these URLs:

     <http://gcc.gnu.org/contribute.html>
     <http://gcc.gnu.org/contributewhy.html>

for information on how to make useful contributions and avoid
duplication of effort.  Suggested projects are listed at
<http://gcc.gnu.org/projects/>.


File: llvm.info,  Node: Funding,  Next: GNU Project,  Prev: Contributing,  Up: Top

Funding Free Software
*********************

If you want to have more free software a few years from now, it makes
sense for you to help encourage people to contribute funds for its
development.  The most effective approach known is to encourage
commercial redistributors to donate.

 Users of free software systems can boost the pace of development by
encouraging for-a-fee distributors to donate part of their selling price
to free software developers--the Free Software Foundation, and others.

 The way to convince distributors to do this is to demand it and expect
it from them.  So when you compare distributors, judge them partly by
how much they give to free software development.  Show distributors they
must compete to be the one who gives the most.

 To make this approach work, you must insist on numbers that you can
compare, such as, "We will donate ten dollars to the Frobnitz project
for each disk sold."  Don't be satisfied with a vague promise, such as
"A portion of the profits are donated," since it doesn't give a basis
for comparison.

 Even a precise fraction "of the profits from this disk" is not very
meaningful, since creative accounting and unrelated business decisions
can greatly alter what fraction of the sales price counts as profit.  If
the price you pay is $50, ten percent of the profit is probably less
than a dollar; it might be a few cents, or nothing at all.

 Some redistributors do development work themselves.  This is useful
too; but to keep everyone honest, you need to inquire how much they do,
and what kind.  Some kinds of development make much more long-term
difference than others.  For example, maintaining a separate version of
a program contributes very little; maintaining the standard version of a
program for the whole community contributes much.  Easy new ports
contribute little, since someone else would surely do them; difficult
ports such as adding a new CPU to the GNU Compiler Collection contribute
more; major new features or packages contribute the most.

 By establishing the idea that supporting further development is "the
proper thing to do" when distributing free software for a fee, we can
assure a steady flow of resources into making more free software.

     Copyright (C) 1994 Free Software Foundation, Inc.
     Verbatim copying and redistribution of this section is permitted
     without royalty; alteration is not permitted.


File: llvm.info,  Node: GNU Project,  Next: Copying,  Prev: Funding,  Up: Top

The GNU Project and GNU/Linux
*****************************

The GNU Project was launched in 1984 to develop a complete Unix-like
operating system which is free software: the GNU system.  (GNU is a
recursive acronym for "GNU's Not Unix"; it is pronounced "guh-NEW".)
Variants of the GNU operating system, which use the kernel Linux, are
now widely used; though these systems are often referred to as "Linux",
they are more accurately called GNU/Linux systems.

 For more information, see:
     <http://www.gnu.org/>
     <http://www.gnu.org/gnu/linux-and-gnu.html>


File: llvm.info,  Node: Copying,  Next: GNU Free Documentation License,  Prev: GNU Project,  Up: Top

GNU General Public License
**************************

                        Version 3, 29 June 2007

     Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies of this
     license document, but changing it is not allowed.

Preamble
========

The GNU General Public License is a free, copyleft license for software
and other kinds of works.

 The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program-to make sure it remains free
software for all its users.  We, the Free Software Foundation, use the
GNU General Public License for most of our software; it applies also to
any other work released this way by its authors.  You can apply it to
your programs, too.

 When we speak of free software, we are referring to freedom, not price.
Our General Public Licenses are designed to make sure that you have the
freedom to distribute copies of free software (and charge for them if
you wish), that you receive source code or can get it if you want it,
that you can change the software or use pieces of it in new free
programs, and that you know you can do these things.

 To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you have
certain responsibilities if you distribute copies of the software, or if
you modify it: responsibilities to respect the freedom of others.

 For example, if you distribute copies of such a program, whether gratis
or for a fee, you must pass on to the recipients the same freedoms that
you received.  You must make sure that they, too, receive or can get the
source code.  And you must show them these terms so they know their
rights.

 Developers that use the GNU GPL protect your rights with two steps: (1)
assert copyright on the software, and (2) offer you this License giving
you legal permission to copy, distribute and/or modify it.

 For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software.  For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

 Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the manufacturer
can do so.  This is fundamentally incompatible with the aim of
protecting users' freedom to change the software.  The systematic
pattern of such abuse occurs in the area of products for individuals to
use, which is precisely where it is most unacceptable.  Therefore, we
have designed this version of the GPL to prohibit the practice for those
products.  If such problems arise substantially in other domains, we
stand ready to extend this provision to those domains in future versions
of the GPL, as needed to protect the freedom of users.

 Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

 The precise terms and conditions for copying, distribution and
modification follow.

TERMS AND CONDITIONS
====================

  0. Definitions.

     "This License" refers to version 3 of the GNU General Public
     License.

     "Copyright" also means copyright-like laws that apply to other
     kinds of works, such as semiconductor masks.

     "The Program" refers to any copyrightable work licensed under this
     License.  Each licensee is addressed as "you".  "Licensees" and
     "recipients" may be individuals or organizations.

     To "modify" a work means to copy from or adapt all or part of the
     work in a fashion requiring copyright permission, other than the
     making of an exact copy.  The resulting work is called a "modified
     version" of the earlier work or a work "based on" the earlier work.

     A "covered work" means either the unmodified Program or a work
     based on the Program.

     To "propagate" a work means to do anything with it that, without
     permission, would make you directly or secondarily liable for
     infringement under applicable copyright law, except executing it on
     a computer or modifying a private copy.  Propagation includes
     copying, distribution (with or without modification), making
     available to the public, and in some countries other activities as
     well.

     To "convey" a work means any kind of propagation that enables other
     parties to make or receive copies.  Mere interaction with a user
     through a computer network, with no transfer of a copy, is not
     conveying.

     An interactive user interface displays "Appropriate Legal Notices"
     to the extent that it includes a convenient and prominently visible
     feature that (1) displays an appropriate copyright notice, and (2)
     tells the user that there is no warranty for the work (except to
     the extent that warranties are provided), that licensees may convey
     the work under this License, and how to view a copy of this
     License.  If the interface presents a list of user commands or
     options, such as a menu, a prominent item in the list meets this
     criterion.

  1. Source Code.

     The "source code" for a work means the preferred form of the work
     for making modifications to it.  "Object code" means any non-source
     form of a work.

     A "Standard Interface" means an interface that either is an
     official standard defined by a recognized standards body, or, in
     the case of interfaces specified for a particular programming
     language, one that is widely used among developers working in that
     language.

     The "System Libraries" of an executable work include anything,
     other than the work as a whole, that (a) is included in the normal
     form of packaging a Major Component, but which is not part of that
     Major Component, and (b) serves only to enable use of the work with
     that Major Component, or to implement a Standard Interface for
     which an implementation is available to the public in source code
     form.  A "Major Component", in this context, means a major
     essential component (kernel, window system, and so on) of the
     specific operating system (if any) on which the executable work
     runs, or a compiler used to produce the work, or an object code
     interpreter used to run it.

     The "Corresponding Source" for a work in object code form means all
     the source code needed to generate, install, and (for an executable
     work) run the object code and to modify the work, including scripts
     to control those activities.  However, it does not include the
     work's System Libraries, or general-purpose tools or generally
     available free programs which are used unmodified in performing
     those activities but which are not part of the work.  For example,
     Corresponding Source includes interface definition files associated
     with source files for the work, and the source code for shared
     libraries and dynamically linked subprograms that the work is
     specifically designed to require, such as by intimate data
     communication or control flow between those subprograms and other
     parts of the work.

     The Corresponding Source need not include anything that users can
     regenerate automatically from other parts of the Corresponding
     Source.

     The Corresponding Source for a work in source code form is that
     same work.

  2. Basic Permissions.

     All rights granted under this License are granted for the term of
     copyright on the Program, and are irrevocable provided the stated
     conditions are met.  This License explicitly affirms your unlimited
     permission to run the unmodified Program.  The output from running
     a covered work is covered by this License only if the output, given
     its content, constitutes a covered work.  This License acknowledges
     your rights of fair use or other equivalent, as provided by
     copyright law.

     You may make, run and propagate covered works that you do not
     convey, without conditions so long as your license otherwise
     remains in force.  You may convey covered works to others for the
     sole purpose of having them make modifications exclusively for you,
     or provide you with facilities for running those works, provided
     that you comply with the terms of this License in conveying all
     material for which you do not control copyright.  Those thus making
     or running the covered works for you must do so exclusively on your
     behalf, under your direction and control, on terms that prohibit
     them from making any copies of your copyrighted material outside
     their relationship with you.

     Conveying under any other circumstances is permitted solely under
     the conditions stated below.  Sublicensing is not allowed; section
     10 makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

     No covered work shall be deemed part of an effective technological
     measure under any applicable law fulfilling obligations under
     article 11 of the WIPO copyright treaty adopted on 20 December
     1996, or similar laws prohibiting or restricting circumvention of
     such measures.

     When you convey a covered work, you waive any legal power to forbid
     circumvention of technological measures to the extent such
     circumvention is effected by exercising rights under this License
     with respect to the covered work, and you disclaim any intention to
     limit operation or modification of the work as a means of
     enforcing, against the work's users, your or third parties' legal
     rights to forbid circumvention of technological measures.

  4. Conveying Verbatim Copies.

     You may convey verbatim copies of the Program's source code as you
     receive it, in any medium, provided that you conspicuously and
     appropriately publish on each copy an appropriate copyright notice;
     keep intact all notices stating that this License and any
     non-permissive terms added in accord with section 7 apply to the
     code; keep intact all notices of the absence of any warranty; and
     give all recipients a copy of this License along with the Program.

     You may charge any price or no price for each copy that you convey,
     and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

     You may convey a work based on the Program, or the modifications to
     produce it from the Program, in the form of source code under the
     terms of section 4, provided that you also meet all of these
     conditions:

       a. The work must carry prominent notices stating that you
          modified it, and giving a relevant date.

       b. The work must carry prominent notices stating that it is
          released under this License and any conditions added under
          section 7.  This requirement modifies the requirement in
          section 4 to "keep intact all notices".

       c. You must license the entire work, as a whole, under this
          License to anyone who comes into possession of a copy.  This
          License will therefore apply, along with any applicable
          section 7 additional terms, to the whole of the work, and all
          its parts, regardless of how they are packaged.  This License
          gives no permission to license the work in any other way, but
          it does not invalidate such permission if you have separately
          received it.

       d. If the work has interactive user interfaces, each must display
          Appropriate Legal Notices; however, if the Program has
          interactive interfaces that do not display Appropriate Legal
          Notices, your work need not make them do so.

     A compilation of a covered work with other separate and independent
     works, which are not by their nature extensions of the covered
     work, and which are not combined with it such as to form a larger
     program, in or on a volume of a storage or distribution medium, is
     called an "aggregate" if the compilation and its resulting
     copyright are not used to limit the access or legal rights of the
     compilation's users beyond what the individual works permit.
     Inclusion of a covered work in an aggregate does not cause this
     License to apply to the other parts of the aggregate.

  6. Conveying Non-Source Forms.

     You may convey a covered work in object code form under the terms
     of sections 4 and 5, provided that you also convey the
     machine-readable Corresponding Source under the terms of this
     License, in one of these ways:

       a. Convey the object code in, or embodied in, a physical product
          (including a physical distribution medium), accompanied by the
          Corresponding Source fixed on a durable physical medium
          customarily used for software interchange.

       b. Convey the object code in, or embodied in, a physical product
          (including a physical distribution medium), accompanied by a
          written offer, valid for at least three years and valid for as
          long as you offer spare parts or customer support for that
          product model, to give anyone who possesses the object code
          either (1) a copy of the Corresponding Source for all the
          software in the product that is covered by this License, on a
          durable physical medium customarily used for software
          interchange, for a price no more than your reasonable cost of
          physically performing this conveying of source, or (2) access
          to copy the Corresponding Source from a network server at no
          charge.

       c. Convey individual copies of the object code with a copy of the
          written offer to provide the Corresponding Source.  This
          alternative is allowed only occasionally and noncommercially,
          and only if you received the object code with such an offer,
          in accord with subsection 6b.

       d. Convey the object code by offering access from a designated
          place (gratis or for a charge), and offer equivalent access to
          the Corresponding Source in the same way through the same
          place at no further charge.  You need not require recipients
          to copy the Corresponding Source along with the object code.
          If the place to copy the object code is a network server, the
          Corresponding Source may be on a different server (operated by
          you or a third party) that supports equivalent copying
          facilities, provided you maintain clear directions next to the
          object code saying where to find the Corresponding Source.
          Regardless of what server hosts the Corresponding Source, you
          remain obligated to ensure that it is available for as long as
          needed to satisfy these requirements.

       e. Convey the object code using peer-to-peer transmission,
          provided you inform other peers where the object code and
          Corresponding Source of the work are being offered to the
          general public at no charge under subsection 6d.

     A separable portion of the object code, whose source code is
     excluded from the Corresponding Source as a System Library, need
     not be included in conveying the object code work.

     A "User Product" is either (1) a "consumer product", which means
     any tangible personal property which is normally used for personal,
     family, or household purposes, or (2) anything designed or sold for
     incorporation into a dwelling.  In determining whether a product is
     a consumer product, doubtful cases shall be resolved in favor of
     coverage.  For a particular product received by a particular user,
     "normally used" refers to a typical or common use of that class of
     product, regardless of the status of the particular user or of the
     way in which the particular user actually uses, or expects or is
     expected to use, the product.  A product is a consumer product
     regardless of whether the product has substantial commercial,
     industrial or non-consumer uses, unless such uses represent the
     only significant mode of use of the product.

     "Installation Information" for a User Product means any methods,
     procedures, authorization keys, or other information required to
     install and execute modified versions of a covered work in that
     User Product from a modified version of its Corresponding Source.
     The information must suffice to ensure that the continued
     functioning of the modified object code is in no case prevented or
     interfered with solely because modification has been made.

     If you convey an object code work under this section in, or with,
     or specifically for use in, a User Product, and the conveying
     occurs as part of a transaction in which the right of possession
     and use of the User Product is transferred to the recipient in
     perpetuity or for a fixed term (regardless of how the transaction
     is characterized), the Corresponding Source conveyed under this
     section must be accompanied by the Installation Information.  But
     this requirement does not apply if neither you nor any third party
     retains the ability to install modified object code on the User
     Product (for example, the work has been installed in ROM).

     The requirement to provide Installation Information does not
     include a requirement to continue to provide support service,
     warranty, or updates for a work that has been modified or installed
     by the recipient, or for the User Product in which it has been
     modified or installed.  Access to a network may be denied when the
     modification itself materially and adversely affects the operation
     of the network or violates the rules and protocols for
     communication across the network.

     Corresponding Source conveyed, and Installation Information
     provided, in accord with this section must be in a format that is
     publicly documented (and with an implementation available to the
     public in source code form), and must require no special password
     or key for unpacking, reading or copying.

  7. Additional Terms.

     "Additional permissions" are terms that supplement the terms of
     this License by making exceptions from one or more of its
     conditions.  Additional permissions that are applicable to the
     entire Program shall be treated as though they were included in
     this License, to the extent that they are valid under applicable
     law.  If additional permissions apply only to part of the Program,
     that part may be used separately under those permissions, but the
     entire Program remains governed by this License without regard to
     the additional permissions.

     When you convey a copy of a covered work, you may at your option
     remove any additional permissions from that copy, or from any part
     of it.  (Additional permissions may be written to require their own
     removal in certain cases when you modify the work.)  You may place
     additional permissions on material, added by you to a covered work,
     for which you have or can give appropriate copyright permission.

     Notwithstanding any other provision of this License, for material
     you add to a covered work, you may (if authorized by the copyright
     holders of that material) supplement the terms of this License with
     terms:

       a. Disclaiming warranty or limiting liability differently from
          the terms of sections 15 and 16 of this License; or

       b. Requiring preservation of specified reasonable legal notices
          or author attributions in that material or in the Appropriate
          Legal Notices displayed by works containing it; or

       c. Prohibiting misrepresentation of the origin of that material,
          or requiring that modified versions of such material be marked
          in reasonable ways as different from the original version; or

       d. Limiting the use for publicity purposes of names of licensors
          or authors of the material; or

       e. Declining to grant rights under trademark law for use of some
          trade names, trademarks, or service marks; or

       f. Requiring indemnification of licensors and authors of that
          material by anyone who conveys the material (or modified
          versions of it) with contractual assumptions of liability to
          the recipient, for any liability that these contractual
          assumptions directly impose on those licensors and authors.

     All other non-permissive additional terms are considered "further
     restrictions" within the meaning of section 10.  If the Program as
     you received it, or any part of it, contains a notice stating that
     it is governed by this License along with a term that is a further
     restriction, you may remove that term.  If a license document
     contains a further restriction but permits relicensing or conveying
     under this License, you may add to a covered work material governed
     by the terms of that license document, provided that the further
     restriction does not survive such relicensing or conveying.

     If you add terms to a covered work in accord with this section, you
     must place, in the relevant source files, a statement of the
     additional terms that apply to those files, or a notice indicating
     where to find the applicable terms.

     Additional terms, permissive or non-permissive, may be stated in
     the form of a separately written license, or stated as exceptions;
     the above requirements apply either way.

  8. Termination.

     You may not propagate or modify a covered work except as expressly
     provided under this License.  Any attempt otherwise to propagate or
     modify it is void, and will automatically terminate your rights
     under this License (including any patent licenses granted under the
     third paragraph of section 11).

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, you do not qualify to receive new licenses
     for the same material under section 10.

  9. Acceptance Not Required for Having Copies.

     You are not required to accept this License in order to receive or
     run a copy of the Program.  Ancillary propagation of a covered work
     occurring solely as a consequence of using peer-to-peer
     transmission to receive a copy likewise does not require
     acceptance.  However, nothing other than this License grants you
     permission to propagate or modify any covered work.  These actions
     infringe copyright if you do not accept this License.  Therefore,
     by modifying or propagating a covered work, you indicate your
     acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

     Each time you convey a covered work, the recipient automatically
     receives a license from the original licensors, to run, modify and
     propagate that work, subject to this License.  You are not
     responsible for enforcing compliance by third parties with this
     License.

     An "entity transaction" is a transaction transferring control of an
     organization, or substantially all assets of one, or subdividing an
     organization, or merging organizations.  If propagation of a
     covered work results from an entity transaction, each party to that
     transaction who receives a copy of the work also receives whatever
     licenses to the work the party's predecessor in interest had or
     could give under the previous paragraph, plus a right to possession
     of the Corresponding Source of the work from the predecessor in
     interest, if the predecessor has it or can get it with reasonable
     efforts.

     You may not impose any further restrictions on the exercise of the
     rights granted or affirmed under this License.  For example, you
     may not impose a license fee, royalty, or other charge for exercise
     of rights granted under this License, and you may not initiate
     litigation (including a cross-claim or counterclaim in a lawsuit)
     alleging that any patent claim is infringed by making, using,
     selling, offering for sale, or importing the Program or any portion
     of it.

  11. Patents.

     A "contributor" is a copyright holder who authorizes use under this
     License of the Program or a work on which the Program is based.
     The work thus licensed is called the contributor's "contributor
     version".

     A contributor's "essential patent claims" are all patent claims
     owned or controlled by the contributor, whether already acquired or
     hereafter acquired, that would be infringed by some manner,
     permitted by this License, of making, using, or selling its
     contributor version, but do not include claims that would be
     infringed only as a consequence of further modification of the
     contributor version.  For purposes of this definition, "control"
     includes the right to grant patent sublicenses in a manner
     consistent with the requirements of this License.

     Each contributor grants you a non-exclusive, worldwide,
     royalty-free patent license under the contributor's essential
     patent claims, to make, use, sell, offer for sale, import and
     otherwise run, modify and propagate the contents of its contributor
     version.

     In the following three paragraphs, a "patent license" is any
     express agreement or commitment, however denominated, not to
     enforce a patent (such as an express permission to practice a
     patent or covenant not to sue for patent infringement).  To "grant"
     such a patent license to a party means to make such an agreement or
     commitment not to enforce a patent against the party.

     If you convey a covered work, knowingly relying on a patent
     license, and the Corresponding Source of the work is not available
     for anyone to copy, free of charge and under the terms of this
     License, through a publicly available network server or other
     readily accessible means, then you must either (1) cause the
     Corresponding Source to be so available, or (2) arrange to deprive
     yourself of the benefit of the patent license for this particular
     work, or (3) arrange, in a manner consistent with the requirements
     of this License, to extend the patent license to downstream
     recipients.  "Knowingly relying" means you have actual knowledge
     that, but for the patent license, your conveying the covered work
     in a country, or your recipient's use of the covered work in a
     country, would infringe one or more identifiable patents in that
     country that you have reason to believe are valid.

     If, pursuant to or in connection with a single transaction or
     arrangement, you convey, or propagate by procuring conveyance of, a
     covered work, and grant a patent license to some of the parties
     receiving the covered work authorizing them to use, propagate,
     modify or convey a specific copy of the covered work, then the
     patent license you grant is automatically extended to all
     recipients of the covered work and works based on it.

     A patent license is "discriminatory" if it does not include within
     the scope of its coverage, prohibits the exercise of, or is
     conditioned on the non-exercise of one or more of the rights that
     are specifically granted under this License.  You may not convey a
     covered work if you are a party to an arrangement with a third
     party that is in the business of distributing software, under which
     you make payment to the third party based on the extent of your
     activity of conveying the work, and under which the third party
     grants, to any of the parties who would receive the covered work
     from you, a discriminatory patent license (a) in connection with
     copies of the covered work conveyed by you (or copies made from
     those copies), or (b) primarily for and in connection with specific
     products or compilations that contain the covered work, unless you
     entered into that arrangement, or that patent license was granted,
     prior to 28 March 2007.

     Nothing in this License shall be construed as excluding or limiting
     any implied license or other defenses to infringement that may
     otherwise be available to you under applicable patent law.

  12. No Surrender of Others' Freedom.

     If conditions are imposed on you (whether by court order, agreement
     or otherwise) that contradict the conditions of this License, they
     do not excuse you from the conditions of this License.  If you
     cannot convey a covered work so as to satisfy simultaneously your
     obligations under this License and any other pertinent obligations,
     then as a consequence you may not convey it at all.  For example,
     if you agree to terms that obligate you to collect a royalty for
     further conveying from those to whom you convey the Program, the
     only way you could satisfy both those terms and this License would
     be to refrain entirely from conveying the Program.

  13. Use with the GNU Affero General Public License.

     Notwithstanding any other provision of this License, you have
     permission to link or combine any covered work with a work licensed
     under version 3 of the GNU Affero General Public License into a
     single combined work, and to convey the resulting work.  The terms
     of this License will continue to apply to the part which is the
     covered work, but the special requirements of the GNU Affero
     General Public License, section 13, concerning interaction through
     a network will apply to the combination as such.

  14. Revised Versions of this License.

     The Free Software Foundation may publish revised and/or new
     versions of the GNU General Public License from time to time.  Such
     new versions will be similar in spirit to the present version, but
     may differ in detail to address new problems or concerns.

     Each version is given a distinguishing version number.  If the
     Program specifies that a certain numbered version of the GNU
     General Public License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that numbered version or of any later version published by the Free
     Software Foundation.  If the Program does not specify a version
     number of the GNU General Public License, you may choose any
     version ever published by the Free Software Foundation.

     If the Program specifies that a proxy can decide which future
     versions of the GNU General Public License can be used, that
     proxy's public statement of acceptance of a version permanently
     authorizes you to choose that version for the Program.

     Later license versions may give you additional or different
     permissions.  However, no additional obligations are imposed on any
     author or copyright holder as a result of your choosing to follow a
     later version.

  15. Disclaimer of Warranty.

     THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
     APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE
     COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS"
     WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,
     INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE
     RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.
     SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
     NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

     IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
     WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES
     AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR
     DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR
     CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE
     THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA
     BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
     PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
     PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF
     THE POSSIBILITY OF SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

     If the disclaimer of warranty and limitation of liability provided
     above cannot be given local legal effect according to their terms,
     reviewing courts shall apply local law that most closely
     approximates an absolute waiver of all civil liability in
     connection with the Program, unless a warranty or assumption of
     liability accompanies a copy of the Program in return for a fee.

END OF TERMS AND CONDITIONS
===========================

How to Apply These Terms to Your New Programs
=============================================

If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

 To do so, attach the following notices to the program.  It is safest to
attach them to the start of each source file to most effectively state
the exclusion of warranty; and each file should have at least the
"copyright" line and a pointer to where the full notice is found.

     ONE LINE TO GIVE THE PROGRAM'S NAME AND A BRIEF IDEA OF WHAT IT DOES.
     Copyright (C) YEAR NAME OF AUTHOR

     This program is free software: you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation, either version 3 of the License, or (at
     your option) any later version.

     This program is distributed in the hope that it will be useful, but
     WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program.  If not, see <http://www.gnu.org/licenses/>.

 Also add information on how to contact you by electronic and paper
mail.

 If the program does terminal interaction, make it output a short notice
like this when it starts in an interactive mode:

     PROGRAM Copyright (C) YEAR NAME OF AUTHOR
     This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'.
     This is free software, and you are welcome to redistribute it
     under certain conditions; type 'show c' for details.

 The hypothetical commands 'show w' and 'show c' should show the
appropriate parts of the General Public License.  Of course, your
program's commands might be different; for a GUI interface, you would
use an "about box".

 You should also get your employer (if you work as a programmer) or
school, if any, to sign a "copyright disclaimer" for the program, if
necessary.  For more information on this, and how to apply and follow
the GNU GPL, see <http://www.gnu.org/licenses/>.

 The GNU General Public License does not permit incorporating your
program into proprietary programs.  If your program is a subroutine
library, you may consider it more useful to permit linking proprietary
applications with the library.  If this is what you want to do, use the
GNU Lesser General Public License instead of this License.  But first,
please read <http://www.gnu.org/philosophy/why-not-lgpl.html>.


File: llvm.info,  Node: GNU Free Documentation License,  Next: Contributors,  Prev: Copying,  Up: Top

GNU Free Documentation License
******************************

                     Version 1.3, 3 November 2008

     Copyright (C) 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
     <http://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document "free" in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of "copyleft", which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.  We
     recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it can
     be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     "Document", below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as "you".  You accept
     the license if you copy, modify or distribute the work in a way
     requiring permission under copyright law.

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document's overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The "Invariant Sections" are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in the
     notice that says that the Document is released under this License.
     If a section does not fit the above definition of Secondary then it
     is not allowed to be designated as Invariant.  The Document may
     contain zero Invariant Sections.  If the Document does not identify
     any Invariant Sections then there are none.

     The "Cover Texts" are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images composed
     of pixels) generic paint programs or (for drawings) some widely
     available drawing editor, and that is suitable for input to text
     formatters or for automatic translation to a variety of formats
     suitable for input to text formatters.  A copy made in an otherwise
     Transparent file format whose markup, or absence of markup, has
     been arranged to thwart or discourage subsequent modification by
     readers is not Transparent.  An image format is not Transparent if
     used for any substantial amount of text.  A copy that is not
     "Transparent" is called "Opaque".

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and standard-conforming
     simple HTML, PostScript or PDF designed for human modification.
     Examples of transparent image formats include PNG, XCF and JPG.
     Opaque formats include proprietary formats that can be read and
     edited only by proprietary word processors, SGML or XML for which
     the DTD and/or processing tools are not generally available, and
     the machine-generated HTML, PostScript or PDF produced by some word
     processors for output purposes only.

     The "Title Page" means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, "Title
     Page" means the text near the most prominent appearance of the
     work's title, preceding the beginning of the body of the text.

     The "publisher" means any person or entity that distributes copies
     of the Document to the public.

     A section "Entitled XYZ" means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     "Acknowledgements", "Dedications", "Endorsements", or "History".)
     To "Preserve the Title" of such a section when you modify the
     Document means that it remains a section "Entitled XYZ" according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow the
     conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document's license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the title
     equally prominent and visible.  You may add other material on the
     covers in addition.  Copying with changes limited to the covers, as
     long as they preserve the title of the Document and satisfy these
     conditions, can be treated as verbatim copying in other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a machine-readable
     Transparent copy along with each Opaque copy, or state in or with
     each Opaque copy a computer-network location from which the general
     network-using public has access to download using public-standard
     network protocols a complete Transparent copy of the Document, free
     of added material.  If you use the latter option, you must take
     reasonably prudent steps, when you begin distribution of Opaque
     copies in quantity, to ensure that this Transparent copy will
     remain thus accessible at the stated location until at least one
     year after the last time you distribute an Opaque copy (directly or
     through your agents or retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of copies,
     to give them a chance to provide you with an updated version of the
     Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with the
     Modified Version filling the role of the Document, thus licensing
     distribution and modification of the Modified Version to whoever
     possesses a copy of it.  In addition, you must do these things in
     the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of previous
          versions (which should, if there were any, be listed in the
          History section of the Document).  You may use the same title
          as a previous version if the original publisher of that
          version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document's
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled "History", Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on the
          Title Page.  If there is no section Entitled "History" in the
          Document, create one stating the title, year, authors, and
          publisher of the Document as given on its Title Page, then add
          an item describing the Modified Version as stated in the
          previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in the
          "History" section.  You may omit a network location for a work
          that was published at least four years before the Document
          itself, or if the original publisher of the version it refers
          to gives permission.

       K. For any section Entitled "Acknowledgements" or "Dedications",
          Preserve the Title of the section, and preserve in the section
          all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document, unaltered
          in their text and in their titles.  Section numbers or the
          equivalent are not considered part of the section titles.

       M. Delete any section Entitled "Endorsements".  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          "Endorsements" or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option designate
     some or all of these sections as invariant.  To do this, add their
     titles to the list of Invariant Sections in the Modified Version's
     license notice.  These titles must be distinct from any other
     section titles.

     You may add a section Entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various
     parties--for example, statements of peer review or that the text
     has been approved by an organization as the authoritative
     definition of a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end of
     the list of Cover Texts in the Modified Version.  Only one passage
     of Front-Cover Text and one of Back-Cover Text may be added by (or
     through arrangements made by) any one entity.  If the Document
     already includes a cover text for the same cover, previously added
     by you or by arrangement made by the same entity you are acting on
     behalf of, you may not add another; but you may replace the old
     one, on explicit permission from the previous publisher that added
     the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination all
     of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     "History" in the various original documents, forming one section
     Entitled "History"; likewise combine any sections Entitled
     "Acknowledgements", and any sections Entitled "Dedications".  You
     must delete all sections Entitled "Endorsements."

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the documents
     in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow this
     License in all other respects regarding verbatim copying of that
     document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of a
     storage or distribution medium, is called an "aggregate" if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation's users beyond what the individual
     works permit.  When the Document is included in an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document's Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled "Acknowledgements",
     "Dedications", or "History", the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense, or distribute it is void,
     and will automatically terminate your rights under this License.

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, receipt of a copy of some or all of the
     same material does not give you any rights to use it.

  10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     <http://www.gnu.org/copyleft/>.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If the
     Document does not specify a version number of this License, you may
     choose any version ever published (not as a draft) by the Free
     Software Foundation.  If the Document specifies that a proxy can
     decide which future versions of this License can be used, that
     proxy's public statement of acceptance of a version permanently
     authorizes you to choose that version for the Document.

  11. RELICENSING

     "Massive Multiauthor Collaboration Site" (or "MMC Site") means any
     World Wide Web server that publishes copyrightable works and also
     provides prominent facilities for anybody to edit those works.  A
     public wiki that anybody can edit is an example of such a server.
     A "Massive Multiauthor Collaboration" (or "MMC") contained in the
     site means any set of copyrightable works thus published on the MMC
     site.

     "CC-BY-SA" means the Creative Commons Attribution-Share Alike 3.0
     license published by Creative Commons Corporation, a not-for-profit
     corporation with a principal place of business in San Francisco,
     California, as well as future copyleft versions of that license
     published by that same organization.

     "Incorporate" means to publish or republish a Document, in whole or
     in part, as part of another Document.

     An MMC is "eligible for relicensing" if it is licensed under this
     License, and if all works that were first published under this
     License somewhere other than this MMC, and subsequently
     incorporated in whole or in part into the MMC, (1) had no cover
     texts or invariant sections, and (2) were thus incorporated prior
     to November 1, 2008.

     The operator of an MMC Site may republish an MMC contained in the
     site under CC-BY-SA on the same site at any time before August 1,
     2009, provided the MMC is eligible for relicensing.

ADDENDUM: How to use this License for your documents
====================================================

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.3
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
       Texts.  A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

 If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts,
replace the "with...Texts."  line with this:

         with the Invariant Sections being LIST THEIR TITLES, with
         the Front-Cover Texts being LIST, and with the Back-Cover Texts
         being LIST.

 If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

 If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of free
software license, such as the GNU General Public License, to permit
their use in free software.


File: llvm.info,  Node: Contributors,  Next: Option Index,  Prev: GNU Free Documentation License,  Up: Top

Contributors to GCC
*******************

The GCC project would like to thank its many contributors.  Without them
the project would not have been nearly as successful as it has been.
Any omissions in this list are accidental.  Feel free to contact
<law@redhat.com> or <gerald@pfeifer.com> if you have been left out or
some of your contributions are not listed.  Please keep this list in
alphabetical order.

   * Analog Devices helped implement the support for complex data types
     and iterators.

   * John David Anglin for threading-related fixes and improvements to
     libstdc++-v3, and the HP-UX port.

   * James van Artsdalen wrote the code that makes efficient use of the
     Intel 80387 register stack.

   * Abramo and Roberto Bagnara for the SysV68 Motorola 3300 Delta
     Series port.

   * Alasdair Baird for various bug fixes.

   * Giovanni Bajo for analyzing lots of complicated C++ problem
     reports.

   * Peter Barada for his work to improve code generation for new
     ColdFire cores.

   * Gerald Baumgartner added the signature extension to the C++ front
     end.

   * Godmar Back for his Java improvements and encouragement.

   * Scott Bambrough for help porting the Java compiler.

   * Wolfgang Bangerth for processing tons of bug reports.

   * Jon Beniston for his Microsoft Windows port of Java and port to
     Lattice Mico32.

   * Daniel Berlin for better DWARF2 support, faster/better
     optimizations, improved alias analysis, plus migrating GCC to
     Bugzilla.

   * Geoff Berry for his Java object serialization work and various
     patches.

   * David Binderman tests weekly snapshots of GCC trunk against Fedora
     Rawhide for several architectures.

   * Uros Bizjak for the implementation of x87 math built-in functions
     and for various middle end and i386 back end improvements and bug
     fixes.

   * Eric Blake for helping to make GCJ and libgcj conform to the
     specifications.

   * Janne Blomqvist for contributions to GNU Fortran.

   * Segher Boessenkool for various fixes.

   * Hans-J. Boehm for his garbage collector, IA-64 libffi port, and
     other Java work.

   * Neil Booth for work on cpplib, lang hooks, debug hooks and other
     miscellaneous clean-ups.

   * Steven Bosscher for integrating the GNU Fortran front end into GCC
     and for contributing to the tree-ssa branch.

   * Eric Botcazou for fixing middle- and backend bugs left and right.

   * Per Bothner for his direction via the steering committee and
     various improvements to the infrastructure for supporting new
     languages.  Chill front end implementation.  Initial
     implementations of cpplib, fix-header, config.guess, libio, and
     past C++ library (libg++) maintainer.  Dreaming up, designing and
     implementing much of GCJ.

   * Devon Bowen helped port GCC to the Tahoe.

   * Don Bowman for mips-vxworks contributions.

   * Dave Brolley for work on cpplib and Chill.

   * Paul Brook for work on the ARM architecture and maintaining GNU
     Fortran.

   * Robert Brown implemented the support for Encore 32000 systems.

   * Christian Bruel for improvements to local store elimination.

   * Herman A.J. ten Brugge for various fixes.

   * Joerg Brunsmann for Java compiler hacking and help with the GCJ
     FAQ.

   * Joe Buck for his direction via the steering committee.

   * Craig Burley for leadership of the G77 Fortran effort.

   * Stephan Buys for contributing Doxygen notes for libstdc++.

   * Paolo Carlini for libstdc++ work: lots of efficiency improvements
     to the C++ strings, streambufs and formatted I/O, hard detective
     work on the frustrating localization issues, and keeping up with
     the problem reports.

   * John Carr for his alias work, SPARC hacking, infrastructure
     improvements, previous contributions to the steering committee,
     loop optimizations, etc.

   * Stephane Carrez for 68HC11 and 68HC12 ports.

   * Steve Chamberlain for support for the Renesas SH and H8 processors
     and the PicoJava processor, and for GCJ config fixes.

   * Glenn Chambers for help with the GCJ FAQ.

   * John-Marc Chandonia for various libgcj patches.

   * Denis Chertykov for contributing and maintaining the AVR port, the
     first GCC port for an 8-bit architecture.

   * Scott Christley for his Objective-C contributions.

   * Eric Christopher for his Java porting help and clean-ups.

   * Branko Cibej for more warning contributions.

   * The GNU Classpath project for all of their merged runtime code.

   * Nick Clifton for arm, mcore, fr30, v850, m32r, msp430 rx work,
     '--help', and other random hacking.

   * Michael Cook for libstdc++ cleanup patches to reduce warnings.

   * R. Kelley Cook for making GCC buildable from a read-only directory
     as well as other miscellaneous build process and documentation
     clean-ups.

   * Ralf Corsepius for SH testing and minor bug fixing.

   * Stan Cox for care and feeding of the x86 port and lots of behind
     the scenes hacking.

   * Alex Crain provided changes for the 3b1.

   * Ian Dall for major improvements to the NS32k port.

   * Paul Dale for his work to add uClinux platform support to the m68k
     backend.

   * Dario Dariol contributed the four varieties of sample programs that
     print a copy of their source.

   * Russell Davidson for fstream and stringstream fixes in libstdc++.

   * Bud Davis for work on the G77 and GNU Fortran compilers.

   * Mo DeJong for GCJ and libgcj bug fixes.

   * DJ Delorie for the DJGPP port, build and libiberty maintenance,
     various bug fixes, and the M32C, MeP, MSP430, and RL78 ports.

   * Arnaud Desitter for helping to debug GNU Fortran.

   * Gabriel Dos Reis for contributions to G++, contributions and
     maintenance of GCC diagnostics infrastructure, libstdc++-v3,
     including 'valarray<>', 'complex<>', maintaining the numerics
     library (including that pesky '<limits>' :-) and keeping up-to-date
     anything to do with numbers.

   * Ulrich Drepper for his work on glibc, testing of GCC using glibc,
     ISO C99 support, CFG dumping support, etc., plus support of the C++
     runtime libraries including for all kinds of C interface issues,
     contributing and maintaining 'complex<>', sanity checking and
     disbursement, configuration architecture, libio maintenance, and
     early math work.

   * Franc,ois Dumont for his work on libstdc++-v3, especially
     maintaining and improving 'debug-mode' and associative and
     unordered containers.

   * Zdenek Dvorak for a new loop unroller and various fixes.

   * Michael Eager for his work on the Xilinx MicroBlaze port.

   * Richard Earnshaw for his ongoing work with the ARM.

   * David Edelsohn for his direction via the steering committee,
     ongoing work with the RS6000/PowerPC port, help cleaning up Haifa
     loop changes, doing the entire AIX port of libstdc++ with his bare
     hands, and for ensuring GCC properly keeps working on AIX.

   * Kevin Ediger for the floating point formatting of num_put::do_put
     in libstdc++.

   * Phil Edwards for libstdc++ work including configuration hackery,
     documentation maintainer, chief breaker of the web pages, the
     occasional iostream bug fix, and work on shared library symbol
     versioning.

   * Paul Eggert for random hacking all over GCC.

   * Mark Elbrecht for various DJGPP improvements, and for libstdc++
     configuration support for locales and fstream-related fixes.

   * Vadim Egorov for libstdc++ fixes in strings, streambufs, and
     iostreams.

   * Christian Ehrhardt for dealing with bug reports.

   * Ben Elliston for his work to move the Objective-C runtime into its
     own subdirectory and for his work on autoconf.

   * Revital Eres for work on the PowerPC 750CL port.

   * Marc Espie for OpenBSD support.

   * Doug Evans for much of the global optimization framework, arc,
     m32r, and SPARC work.

   * Christopher Faylor for his work on the Cygwin port and for caring
     and feeding the gcc.gnu.org box and saving its users tons of spam.

   * Fred Fish for BeOS support and Ada fixes.

   * Ivan Fontes Garcia for the Portuguese translation of the GCJ FAQ.

   * Peter Gerwinski for various bug fixes and the Pascal front end.

   * Kaveh R. Ghazi for his direction via the steering committee,
     amazing work to make '-W -Wall -W* -Werror' useful, and testing GCC
     on a plethora of platforms.  Kaveh extends his gratitude to the
     CAIP Center at Rutgers University for providing him with computing
     resources to work on Free Software from the late 1980s to 2010.

   * John Gilmore for a donation to the FSF earmarked improving GNU
     Java.

   * Judy Goldberg for c++ contributions.

   * Torbjorn Granlund for various fixes and the c-torture testsuite,
     multiply- and divide-by-constant optimization, improved long long
     support, improved leaf function register allocation, and his
     direction via the steering committee.

   * Jonny Grant for improvements to 'collect2's' '--help'
     documentation.

   * Anthony Green for his '-Os' contributions, the moxie port, and Java
     front end work.

   * Stu Grossman for gdb hacking, allowing GCJ developers to debug Java
     code.

   * Michael K. Gschwind contributed the port to the PDP-11.

   * Richard Biener for his ongoing middle-end contributions and bug
     fixes and for release management.

   * Ron Guilmette implemented the 'protoize' and 'unprotoize' tools,
     the support for Dwarf symbolic debugging information, and much of
     the support for System V Release 4.  He has also worked heavily on
     the Intel 386 and 860 support.

   * Sumanth Gundapaneni for contributing the CR16 port.

   * Mostafa Hagog for Swing Modulo Scheduling (SMS) and post reload
     GCSE.

   * Bruno Haible for improvements in the runtime overhead for EH, new
     warnings and assorted bug fixes.

   * Andrew Haley for his amazing Java compiler and library efforts.

   * Chris Hanson assisted in making GCC work on HP-UX for the 9000
     series 300.

   * Michael Hayes for various thankless work he's done trying to get
     the c30/c40 ports functional.  Lots of loop and unroll improvements
     and fixes.

   * Dara Hazeghi for wading through myriads of target-specific bug
     reports.

   * Kate Hedstrom for staking the G77 folks with an initial testsuite.

   * Richard Henderson for his ongoing SPARC, alpha, ia32, and ia64
     work, loop opts, and generally fixing lots of old problems we've
     ignored for years, flow rewrite and lots of further stuff,
     including reviewing tons of patches.

   * Aldy Hernandez for working on the PowerPC port, SIMD support, and
     various fixes.

   * Nobuyuki Hikichi of Software Research Associates, Tokyo,
     contributed the support for the Sony NEWS machine.

   * Kazu Hirata for caring and feeding the Renesas H8/300 port and
     various fixes.

   * Katherine Holcomb for work on GNU Fortran.

   * Manfred Hollstein for his ongoing work to keep the m88k alive, lots
     of testing and bug fixing, particularly of GCC configury code.

   * Steve Holmgren for MachTen patches.

   * Mat Hostetter for work on the TILE-Gx and TILEPro ports.

   * Jan Hubicka for his x86 port improvements.

   * Falk Hueffner for working on C and optimization bug reports.

   * Bernardo Innocenti for his m68k work, including merging of ColdFire
     improvements and uClinux support.

   * Christian Iseli for various bug fixes.

   * Kamil Iskra for general m68k hacking.

   * Lee Iverson for random fixes and MIPS testing.

   * Balaji V. Iyer for Cilk+ development and merging.

   * Andreas Jaeger for testing and benchmarking of GCC and various bug
     fixes.

   * Jakub Jelinek for his SPARC work and sibling call optimizations as
     well as lots of bug fixes and test cases, and for improving the
     Java build system.

   * Janis Johnson for ia64 testing and fixes, her quality improvement
     sidetracks, and web page maintenance.

   * Kean Johnston for SCO OpenServer support and various fixes.

   * Tim Josling for the sample language treelang based originally on
     Richard Kenner's "toy" language.

   * Nicolai Josuttis for additional libstdc++ documentation.

   * Klaus Kaempf for his ongoing work to make alpha-vms a viable
     target.

   * Steven G. Kargl for work on GNU Fortran.

   * David Kashtan of SRI adapted GCC to VMS.

   * Ryszard Kabatek for many, many libstdc++ bug fixes and
     optimizations of strings, especially member functions, and for
     auto_ptr fixes.

   * Geoffrey Keating for his ongoing work to make the PPC work for
     GNU/Linux and his automatic regression tester.

   * Brendan Kehoe for his ongoing work with G++ and for a lot of early
     work in just about every part of libstdc++.

   * Oliver M. Kellogg of Deutsche Aerospace contributed the port to the
     MIL-STD-1750A.

   * Richard Kenner of the New York University Ultracomputer Research
     Laboratory wrote the machine descriptions for the AMD 29000, the
     DEC Alpha, the IBM RT PC, and the IBM RS/6000 as well as the
     support for instruction attributes.  He also made changes to better
     support RISC processors including changes to common subexpression
     elimination, strength reduction, function calling sequence
     handling, and condition code support, in addition to generalizing
     the code for frame pointer elimination and delay slot scheduling.
     Richard Kenner was also the head maintainer of GCC for several
     years.

   * Mumit Khan for various contributions to the Cygwin and Mingw32
     ports and maintaining binary releases for Microsoft Windows hosts,
     and for massive libstdc++ porting work to Cygwin/Mingw32.

   * Robin Kirkham for cpu32 support.

   * Mark Klein for PA improvements.

   * Thomas Koenig for various bug fixes.

   * Bruce Korb for the new and improved fixincludes code.

   * Benjamin Kosnik for his G++ work and for leading the libstdc++-v3
     effort.

   * Charles LaBrec contributed the support for the Integrated Solutions
     68020 system.

   * Asher Langton and Mike Kumbera for contributing Cray pointer
     support to GNU Fortran, and for other GNU Fortran improvements.

   * Jeff Law for his direction via the steering committee, coordinating
     the entire egcs project and GCC 2.95, rolling out snapshots and
     releases, handling merges from GCC2, reviewing tons of patches that
     might have fallen through the cracks else, and random but extensive
     hacking.

   * Walter Lee for work on the TILE-Gx and TILEPro ports.

   * Marc Lehmann for his direction via the steering committee and
     helping with analysis and improvements of x86 performance.

   * Victor Leikehman for work on GNU Fortran.

   * Ted Lemon wrote parts of the RTL reader and printer.

   * Kriang Lerdsuwanakij for C++ improvements including template as
     template parameter support, and many C++ fixes.

   * Warren Levy for tremendous work on libgcj (Java Runtime Library)
     and random work on the Java front end.

   * Alain Lichnewsky ported GCC to the MIPS CPU.

   * Oskar Liljeblad for hacking on AWT and his many Java bug reports
     and patches.

   * Robert Lipe for OpenServer support, new testsuites, testing, etc.

   * Chen Liqin for various S+core related fixes/improvement, and for
     maintaining the S+core port.

   * Weiwen Liu for testing and various bug fixes.

   * Manuel Lo'pez-Iba'n~ez for improving '-Wconversion' and many other
     diagnostics fixes and improvements.

   * Dave Love for his ongoing work with the Fortran front end and
     runtime libraries.

   * Martin von Lo"wis for internal consistency checking infrastructure,
     various C++ improvements including namespace support, and tons of
     assistance with libstdc++/compiler merges.

   * H.J. Lu for his previous contributions to the steering committee,
     many x86 bug reports, prototype patches, and keeping the GNU/Linux
     ports working.

   * Greg McGary for random fixes and (someday) bounded pointers.

   * Andrew MacLeod for his ongoing work in building a real EH system,
     various code generation improvements, work on the global optimizer,
     etc.

   * Vladimir Makarov for hacking some ugly i960 problems, PowerPC
     hacking improvements to compile-time performance, overall knowledge
     and direction in the area of instruction scheduling, and design and
     implementation of the automaton based instruction scheduler.

   * Bob Manson for his behind the scenes work on dejagnu.

   * Philip Martin for lots of libstdc++ string and vector iterator
     fixes and improvements, and string clean up and testsuites.

   * All of the Mauve project contributors, for Java test code.

   * Bryce McKinlay for numerous GCJ and libgcj fixes and improvements.

   * Adam Megacz for his work on the Microsoft Windows port of GCJ.

   * Michael Meissner for LRS framework, ia32, m32r, v850, m88k, MIPS,
     powerpc, haifa, ECOFF debug support, and other assorted hacking.

   * Jason Merrill for his direction via the steering committee and
     leading the G++ effort.

   * Martin Michlmayr for testing GCC on several architectures using the
     entire Debian archive.

   * David Miller for his direction via the steering committee, lots of
     SPARC work, improvements in jump.c and interfacing with the Linux
     kernel developers.

   * Gary Miller ported GCC to Charles River Data Systems machines.

   * Alfred Minarik for libstdc++ string and ios bug fixes, and turning
     the entire libstdc++ testsuite namespace-compatible.

   * Mark Mitchell for his direction via the steering committee,
     mountains of C++ work, load/store hoisting out of loops, alias
     analysis improvements, ISO C 'restrict' support, and serving as
     release manager from 2000 to 2011.

   * Alan Modra for various GNU/Linux bits and testing.

   * Toon Moene for his direction via the steering committee, Fortran
     maintenance, and his ongoing work to make us make Fortran run fast.

   * Jason Molenda for major help in the care and feeding of all the
     services on the gcc.gnu.org (formerly egcs.cygnus.com)
     machine--mail, web services, ftp services, etc etc.  Doing all this
     work on scrap paper and the backs of envelopes would have been...
     difficult.

   * Catherine Moore for fixing various ugly problems we have sent her
     way, including the haifa bug which was killing the Alpha & PowerPC
     Linux kernels.

   * Mike Moreton for his various Java patches.

   * David Mosberger-Tang for various Alpha improvements, and for the
     initial IA-64 port.

   * Stephen Moshier contributed the floating point emulator that
     assists in cross-compilation and permits support for floating point
     numbers wider than 64 bits and for ISO C99 support.

   * Bill Moyer for his behind the scenes work on various issues.

   * Philippe De Muyter for his work on the m68k port.

   * Joseph S. Myers for his work on the PDP-11 port, format checking
     and ISO C99 support, and continuous emphasis on (and contributions
     to) documentation.

   * Nathan Myers for his work on libstdc++-v3: architecture and
     authorship through the first three snapshots, including
     implementation of locale infrastructure, string, shadow C headers,
     and the initial project documentation (DESIGN, CHECKLIST, and so
     forth).  Later, more work on MT-safe string and shadow headers.

   * Felix Natter for documentation on porting libstdc++.

   * Nathanael Nerode for cleaning up the configuration/build process.

   * NeXT, Inc. donated the front end that supports the Objective-C
     language.

   * Hans-Peter Nilsson for the CRIS and MMIX ports, improvements to the
     search engine setup, various documentation fixes and other small
     fixes.

   * Geoff Noer for his work on getting cygwin native builds working.

   * Diego Novillo for his work on Tree SSA, OpenMP, SPEC performance
     tracking web pages, GIMPLE tuples, and assorted fixes.

   * David O'Brien for the FreeBSD/alpha, FreeBSD/AMD x86-64,
     FreeBSD/ARM, FreeBSD/PowerPC, and FreeBSD/SPARC64 ports and related
     infrastructure improvements.

   * Alexandre Oliva for various build infrastructure improvements,
     scripts and amazing testing work, including keeping libtool issues
     sane and happy.

   * Stefan Olsson for work on mt_alloc.

   * Melissa O'Neill for various NeXT fixes.

   * Rainer Orth for random MIPS work, including improvements to GCC's
     o32 ABI support, improvements to dejagnu's MIPS support, Java
     configuration clean-ups and porting work, and maintaining the IRIX,
     Solaris 2, and Tru64 UNIX ports.

   * Hartmut Penner for work on the s390 port.

   * Paul Petersen wrote the machine description for the Alliant FX/8.

   * Alexandre Petit-Bianco for implementing much of the Java compiler
     and continued Java maintainership.

   * Matthias Pfaller for major improvements to the NS32k port.

   * Gerald Pfeifer for his direction via the steering committee,
     pointing out lots of problems we need to solve, maintenance of the
     web pages, and taking care of documentation maintenance in general.

   * Andrew Pinski for processing bug reports by the dozen.

   * Ovidiu Predescu for his work on the Objective-C front end and
     runtime libraries.

   * Jerry Quinn for major performance improvements in C++ formatted
     I/O.

   * Ken Raeburn for various improvements to checker, MIPS ports and
     various cleanups in the compiler.

   * Rolf W. Rasmussen for hacking on AWT.

   * David Reese of Sun Microsystems contributed to the Solaris on
     PowerPC port.

   * Volker Reichelt for keeping up with the problem reports.

   * Joern Rennecke for maintaining the sh port, loop, regmove & reload
     hacking and developing and maintaining the Epiphany port.

   * Loren J. Rittle for improvements to libstdc++-v3 including the
     FreeBSD port, threading fixes, thread-related configury changes,
     critical threading documentation, and solutions to really tricky
     I/O problems, as well as keeping GCC properly working on FreeBSD
     and continuous testing.

   * Craig Rodrigues for processing tons of bug reports.

   * Ola Ro"nnerup for work on mt_alloc.

   * Gavin Romig-Koch for lots of behind the scenes MIPS work.

   * David Ronis inspired and encouraged Craig to rewrite the G77
     documentation in texinfo format by contributing a first pass at a
     translation of the old 'g77-0.5.16/f/DOC' file.

   * Ken Rose for fixes to GCC's delay slot filling code.

   * Paul Rubin wrote most of the preprocessor.

   * Pe'tur Runo'lfsson for major performance improvements in C++
     formatted I/O and large file support in C++ filebuf.

   * Chip Salzenberg for libstdc++ patches and improvements to locales,
     traits, Makefiles, libio, libtool hackery, and "long long" support.

   * Juha Sarlin for improvements to the H8 code generator.

   * Greg Satz assisted in making GCC work on HP-UX for the 9000 series
     300.

   * Roger Sayle for improvements to constant folding and GCC's RTL
     optimizers as well as for fixing numerous bugs.

   * Bradley Schatz for his work on the GCJ FAQ.

   * Peter Schauer wrote the code to allow debugging to work on the
     Alpha.

   * William Schelter did most of the work on the Intel 80386 support.

   * Tobias Schlu"ter for work on GNU Fortran.

   * Bernd Schmidt for various code generation improvements and major
     work in the reload pass, serving as release manager for GCC 2.95.3,
     and work on the Blackfin and C6X ports.

   * Peter Schmid for constant testing of libstdc++--especially
     application testing, going above and beyond what was requested for
     the release criteria--and libstdc++ header file tweaks.

   * Jason Schroeder for jcf-dump patches.

   * Andreas Schwab for his work on the m68k port.

   * Lars Segerlund for work on GNU Fortran.

   * Dodji Seketeli for numerous C++ bug fixes and debug info
     improvements.

   * Tim Shen for major work on '<regex>'.

   * Joel Sherrill for his direction via the steering committee, RTEMS
     contributions and RTEMS testing.

   * Nathan Sidwell for many C++ fixes/improvements.

   * Jeffrey Siegal for helping RMS with the original design of GCC,
     some code which handles the parse tree and RTL data structures,
     constant folding and help with the original VAX & m68k ports.

   * Kenny Simpson for prompting libstdc++ fixes due to defect reports
     from the LWG (thereby keeping GCC in line with updates from the
     ISO).

   * Franz Sirl for his ongoing work with making the PPC port stable for
     GNU/Linux.

   * Andrey Slepuhin for assorted AIX hacking.

   * Trevor Smigiel for contributing the SPU port.

   * Christopher Smith did the port for Convex machines.

   * Danny Smith for his major efforts on the Mingw (and Cygwin) ports.

   * Randy Smith finished the Sun FPA support.

   * Ed Smith-Rowland for his continuous work on libstdc++-v3, special
     functions, '<random>', and various improvements to C++11 features.

   * Scott Snyder for queue, iterator, istream, and string fixes and
     libstdc++ testsuite entries.  Also for providing the patch to G77
     to add rudimentary support for 'INTEGER*1', 'INTEGER*2', and
     'LOGICAL*1'.

   * Zdenek Sojka for running automated regression testing of GCC and
     reporting numerous bugs.

   * Jayant Sonar for contributing the CR16 port.

   * Brad Spencer for contributions to the GLIBCPP_FORCE_NEW technique.

   * Richard Stallman, for writing the original GCC and launching the
     GNU project.

   * Jan Stein of the Chalmers Computer Society provided support for
     Genix, as well as part of the 32000 machine description.

   * Nigel Stephens for various mips16 related fixes/improvements.

   * Jonathan Stone wrote the machine description for the Pyramid
     computer.

   * Graham Stott for various infrastructure improvements.

   * John Stracke for his Java HTTP protocol fixes.

   * Mike Stump for his Elxsi port, G++ contributions over the years and
     more recently his vxworks contributions

   * Jeff Sturm for Java porting help, bug fixes, and encouragement.

   * Shigeya Suzuki for this fixes for the bsdi platforms.

   * Ian Lance Taylor for the Go frontend, the initial mips16 and mips64
     support, general configury hacking, fixincludes, etc.

   * Holger Teutsch provided the support for the Clipper CPU.

   * Gary Thomas for his ongoing work to make the PPC work for
     GNU/Linux.

   * Philipp Thomas for random bug fixes throughout the compiler

   * Jason Thorpe for thread support in libstdc++ on NetBSD.

   * Kresten Krab Thorup wrote the run time support for the Objective-C
     language and the fantastic Java bytecode interpreter.

   * Michael Tiemann for random bug fixes, the first instruction
     scheduler, initial C++ support, function integration, NS32k, SPARC
     and M88k machine description work, delay slot scheduling.

   * Andreas Tobler for his work porting libgcj to Darwin.

   * Teemu Torma for thread safe exception handling support.

   * Leonard Tower wrote parts of the parser, RTL generator, and RTL
     definitions, and of the VAX machine description.

   * Daniel Towner and Hariharan Sandanagobalane contributed and
     maintain the picoChip port.

   * Tom Tromey for internationalization support and for his many Java
     contributions and libgcj maintainership.

   * Lassi Tuura for improvements to config.guess to determine HP
     processor types.

   * Petter Urkedal for libstdc++ CXXFLAGS, math, and algorithms fixes.

   * Andy Vaught for the design and initial implementation of the GNU
     Fortran front end.

   * Brent Verner for work with the libstdc++ cshadow files and their
     associated configure steps.

   * Todd Vierling for contributions for NetBSD ports.

   * Jonathan Wakely for contributing libstdc++ Doxygen notes and XHTML
     guidance.

   * Dean Wakerley for converting the install documentation from HTML to
     texinfo in time for GCC 3.0.

   * Krister Walfridsson for random bug fixes.

   * Feng Wang for contributions to GNU Fortran.

   * Stephen M. Webb for time and effort on making libstdc++ shadow
     files work with the tricky Solaris 8+ headers, and for pushing the
     build-time header tree.  Also, for starting and driving the
     '<regex>' effort.

   * John Wehle for various improvements for the x86 code generator,
     related infrastructure improvements to help x86 code generation,
     value range propagation and other work, WE32k port.

   * Ulrich Weigand for work on the s390 port.

   * Zack Weinberg for major work on cpplib and various other bug fixes.

   * Matt Welsh for help with Linux Threads support in GCJ.

   * Urban Widmark for help fixing java.io.

   * Mark Wielaard for new Java library code and his work integrating
     with Classpath.

   * Dale Wiles helped port GCC to the Tahoe.

   * Bob Wilson from Tensilica, Inc. for the Xtensa port.

   * Jim Wilson for his direction via the steering committee, tackling
     hard problems in various places that nobody else wanted to work on,
     strength reduction and other loop optimizations.

   * Paul Woegerer and Tal Agmon for the CRX port.

   * Carlo Wood for various fixes.

   * Tom Wood for work on the m88k port.

   * Chung-Ju Wu for his work on the Andes NDS32 port.

   * Canqun Yang for work on GNU Fortran.

   * Masanobu Yuhara of Fujitsu Laboratories implemented the machine
     description for the Tron architecture (specifically, the Gmicro).

   * Kevin Zachmann helped port GCC to the Tahoe.

   * Ayal Zaks for Swing Modulo Scheduling (SMS).

   * Xiaoqiang Zhang for work on GNU Fortran.

   * Gilles Zunino for help porting Java to Irix.

 The following people are recognized for their contributions to GNAT,
the Ada front end of GCC:
   * Bernard Banner

   * Romain Berrendonner

   * Geert Bosch

   * Emmanuel Briot

   * Joel Brobecker

   * Ben Brosgol

   * Vincent Celier

   * Arnaud Charlet

   * Chien Chieng

   * Cyrille Comar

   * Cyrille Crozes

   * Robert Dewar

   * Gary Dismukes

   * Robert Duff

   * Ed Falis

   * Ramon Fernandez

   * Sam Figueroa

   * Vasiliy Fofanov

   * Michael Friess

   * Franco Gasperoni

   * Ted Giering

   * Matthew Gingell

   * Laurent Guerby

   * Jerome Guitton

   * Olivier Hainque

   * Jerome Hugues

   * Hristian Kirtchev

   * Jerome Lambourg

   * Bruno Leclerc

   * Albert Lee

   * Sean McNeil

   * Javier Miranda

   * Laurent Nana

   * Pascal Obry

   * Dong-Ik Oh

   * Laurent Pautet

   * Brett Porter

   * Thomas Quinot

   * Nicolas Roche

   * Pat Rogers

   * Jose Ruiz

   * Douglas Rupp

   * Sergey Rybin

   * Gail Schenker

   * Ed Schonberg

   * Nicolas Setton

   * Samuel Tardieu

 The following people are recognized for their contributions of new
features, bug reports, testing and integration of classpath/libgcj for
GCC version 4.1:
   * Lillian Angel for 'JTree' implementation and lots Free Swing
     additions and bug fixes.

   * Wolfgang Baer for 'GapContent' bug fixes.

   * Anthony Balkissoon for 'JList', Free Swing 1.5 updates and mouse
     event fixes, lots of Free Swing work including 'JTable' editing.

   * Stuart Ballard for RMI constant fixes.

   * Goffredo Baroncelli for 'HTTPURLConnection' fixes.

   * Gary Benson for 'MessageFormat' fixes.

   * Daniel Bonniot for 'Serialization' fixes.

   * Chris Burdess for lots of gnu.xml and http protocol fixes, 'StAX'
     and 'DOM xml:id' support.

   * Ka-Hing Cheung for 'TreePath' and 'TreeSelection' fixes.

   * Archie Cobbs for build fixes, VM interface updates,
     'URLClassLoader' updates.

   * Kelley Cook for build fixes.

   * Martin Cordova for Suggestions for better 'SocketTimeoutException'.

   * David Daney for 'BitSet' bug fixes, 'HttpURLConnection' rewrite and
     improvements.

   * Thomas Fitzsimmons for lots of upgrades to the gtk+ AWT and Cairo
     2D support.  Lots of imageio framework additions, lots of AWT and
     Free Swing bug fixes.

   * Jeroen Frijters for 'ClassLoader' and nio cleanups, serialization
     fixes, better 'Proxy' support, bug fixes and IKVM integration.

   * Santiago Gala for 'AccessControlContext' fixes.

   * Nicolas Geoffray for 'VMClassLoader' and 'AccessController'
     improvements.

   * David Gilbert for 'basic' and 'metal' icon and plaf support and
     lots of documenting, Lots of Free Swing and metal theme additions.
     'MetalIconFactory' implementation.

   * Anthony Green for 'MIDI' framework, 'ALSA' and 'DSSI' providers.

   * Andrew Haley for 'Serialization' and 'URLClassLoader' fixes, gcj
     build speedups.

   * Kim Ho for 'JFileChooser' implementation.

   * Andrew John Hughes for 'Locale' and net fixes, URI RFC2986 updates,
     'Serialization' fixes, 'Properties' XML support and generic branch
     work, VMIntegration guide update.

   * Bastiaan Huisman for 'TimeZone' bug fixing.

   * Andreas Jaeger for mprec updates.

   * Paul Jenner for better '-Werror' support.

   * Ito Kazumitsu for 'NetworkInterface' implementation and updates.

   * Roman Kennke for 'BoxLayout', 'GrayFilter' and 'SplitPane', plus
     bug fixes all over.  Lots of Free Swing work including styled text.

   * Simon Kitching for 'String' cleanups and optimization suggestions.

   * Michael Koch for configuration fixes, 'Locale' updates, bug and
     build fixes.

   * Guilhem Lavaux for configuration, thread and channel fixes and
     Kaffe integration.  JCL native 'Pointer' updates.  Logger bug
     fixes.

   * David Lichteblau for JCL support library global/local reference
     cleanups.

   * Aaron Luchko for JDWP updates and documentation fixes.

   * Ziga Mahkovec for 'Graphics2D' upgraded to Cairo 0.5 and new regex
     features.

   * Sven de Marothy for BMP imageio support, CSS and 'TextLayout'
     fixes.  'GtkImage' rewrite, 2D, awt, free swing and date/time fixes
     and implementing the Qt4 peers.

   * Casey Marshall for crypto algorithm fixes, 'FileChannel' lock,
     'SystemLogger' and 'FileHandler' rotate implementations, NIO
     'FileChannel.map' support, security and policy updates.

   * Bryce McKinlay for RMI work.

   * Audrius Meskauskas for lots of Free Corba, RMI and HTML work plus
     testing and documenting.

   * Kalle Olavi Niemitalo for build fixes.

   * Rainer Orth for build fixes.

   * Andrew Overholt for 'File' locking fixes.

   * Ingo Proetel for 'Image', 'Logger' and 'URLClassLoader' updates.

   * Olga Rodimina for 'MenuSelectionManager' implementation.

   * Jan Roehrich for 'BasicTreeUI' and 'JTree' fixes.

   * Julian Scheid for documentation updates and gjdoc support.

   * Christian Schlichtherle for zip fixes and cleanups.

   * Robert Schuster for documentation updates and beans fixes,
     'TreeNode' enumerations and 'ActionCommand' and various fixes, XML
     and URL, AWT and Free Swing bug fixes.

   * Keith Seitz for lots of JDWP work.

   * Christian Thalinger for 64-bit cleanups, Configuration and VM
     interface fixes and 'CACAO' integration, 'fdlibm' updates.

   * Gael Thomas for 'VMClassLoader' boot packages support suggestions.

   * Andreas Tobler for Darwin and Solaris testing and fixing, 'Qt4'
     support for Darwin/OS X, 'Graphics2D' support, 'gtk+' updates.

   * Dalibor Topic for better 'DEBUG' support, build cleanups and Kaffe
     integration.  'Qt4' build infrastructure, 'SHA1PRNG' and
     'GdkPixbugDecoder' updates.

   * Tom Tromey for Eclipse integration, generics work, lots of bug
     fixes and gcj integration including coordinating The Big Merge.

   * Mark Wielaard for bug fixes, packaging and release management,
     'Clipboard' implementation, system call interrupts and network
     timeouts and 'GdkPixpufDecoder' fixes.

 In addition to the above, all of which also contributed time and energy
in testing GCC, we would like to thank the following for their
contributions to testing:

   * Michael Abd-El-Malek

   * Thomas Arend

   * Bonzo Armstrong

   * Steven Ashe

   * Chris Baldwin

   * David Billinghurst

   * Jim Blandy

   * Stephane Bortzmeyer

   * Horst von Brand

   * Frank Braun

   * Rodney Brown

   * Sidney Cadot

   * Bradford Castalia

   * Robert Clark

   * Jonathan Corbet

   * Ralph Doncaster

   * Richard Emberson

   * Levente Farkas

   * Graham Fawcett

   * Mark Fernyhough

   * Robert A. French

   * Jo"rgen Freyh

   * Mark K. Gardner

   * Charles-Antoine Gauthier

   * Yung Shing Gene

   * David Gilbert

   * Simon Gornall

   * Fred Gray

   * John Griffin

   * Patrik Hagglund

   * Phil Hargett

   * Amancio Hasty

   * Takafumi Hayashi

   * Bryan W. Headley

   * Kevin B. Hendricks

   * Joep Jansen

   * Christian Joensson

   * Michel Kern

   * David Kidd

   * Tobias Kuipers

   * Anand Krishnaswamy

   * A. O. V. Le Blanc

   * llewelly

   * Damon Love

   * Brad Lucier

   * Matthias Klose

   * Martin Knoblauch

   * Rick Lutowski

   * Jesse Macnish

   * Stefan Morrell

   * Anon A. Mous

   * Matthias Mueller

   * Pekka Nikander

   * Rick Niles

   * Jon Olson

   * Magnus Persson

   * Chris Pollard

   * Richard Polton

   * Derk Reefman

   * David Rees

   * Paul Reilly

   * Tom Reilly

   * Torsten Rueger

   * Danny Sadinoff

   * Marc Schifer

   * Erik Schnetter

   * Wayne K. Schroll

   * David Schuler

   * Vin Shelton

   * Tim Souder

   * Adam Sulmicki

   * Bill Thorson

   * George Talbot

   * Pedro A. M. Vazquez

   * Gregory Warnes

   * Ian Watson

   * David E. Young

   * And many others

 And finally we'd like to thank everyone who uses the compiler, provides
feedback and generally reminds us why we're doing this work in the first
place.


File: llvm.info,  Node: Option Index,  Next: Keyword Index,  Prev: Contributors,  Up: Top

Option Index
************

GCC's command line options are indexed here without any initial '-' or
'--'.  Where an option has both positive and negative forms (such as
'-fOPTION' and '-fno-OPTION'), relevant entries in the manual are
indexed under the most appropriate form; it may sometimes be useful to
look up both forms.

 [index ]
* Menu:

* ###:                                   Overall Options.    (line  109)
* -analyze:                              Instrumentation Options.
                                                             (line   27)
* -driver-mode:                          Developer Options.  (line   53)
* -fobjc-arc:                            Objective-C and Objective-C++ Dialect Options.
                                                             (line   66)
* -fobjc-arc-exceptions:                 Objective-C and Objective-C++ Dialect Options.
                                                             (line   69)
* -fobjc-gc-only:                        Objective-C and Objective-C++ Dialect Options.
                                                             (line  112)
* -fobjc-runtime:                        Objective-C and Objective-C++ Dialect Options.
                                                             (line  115)
* -migrate:                              Preprocessor Options.
                                                             (line  287)
* -no-system-header-prefix=PREFIX:       Preprocessor Options.
                                                             (line  359)
* -objcmt-whitelist-dir-path=DIR:        Objective-C and Objective-C++ Dialect Options.
                                                             (line  134)
* -rewrite-legacy-objc:                  Objective-C and Objective-C++ Dialect Options.
                                                             (line  137)
* -rewrite-objc:                         Objective-C and Objective-C++ Dialect Options.
                                                             (line  140)
* -system-header-prefix=PREFIX:          Preprocessor Options.
                                                             (line  379)
* @:                                     Overall Options.    (line   96)
* ansi:                                  Standards.          (line   23)
* ansi <1>:                              C Dialect Options.  (line   17)
* ansi <2>:                              Other Builtins.     (line   21)
* ansi <3>:                              Non-bugs.           (line  107)
* c:                                     Overall Options.    (line  115)
* C:                                     Preprocessor Options.
                                                             (line   21)
* c <1>:                                 Link Options.       (line   22)
* ccc-arcmt-check:                       Developer Options.  (line   23)
* ccc-arcmt-migrate:                     Developer Options.  (line   26)
* ccc-arcmt-modify:                      Developer Options.  (line   29)
* ccc-gcc-name:                          Developer Options.  (line   32)
* ccc-install-dir:                       Developer Options.  (line   35)
* ccc-objcmt-migrate:                    Developer Options.  (line   38)
* ccc-pch-is-pch:                        Developer Options.  (line   41)
* ccc-pch-is-pth:                        Developer Options.  (line   44)
* ccc-print-bindings:                    Developer Options.  (line   47)
* ccc-print-phases:                      Developer Options.  (line   50)
* coverage:                              Instrumentation Options.
                                                             (line   30)
* cxx-isystem:                           Preprocessor Options.
                                                             (line   45)
* D:                                     Preprocessor Options.
                                                             (line   49)
* dD:                                    Preprocessor Options.
                                                             (line   86)
* dM:                                    Preprocessor Options.
                                                             (line   72)
* dumpmachine:                           Developer Options.  (line   56)
* dumpversion:                           Developer Options.  (line   60)
* E:                                     Overall Options.    (line  126)
* E <1>:                                 Preprocessor Options.
                                                             (line   92)
* E <2>:                                 Link Options.       (line   22)
* emit-ast:                              Overall Options.    (line  133)
* emit-llvm:                             Overall Options.    (line  136)
* fansi-escape-codes:                    Diagnostic Message Formatting Options.
                                                             (line   20)
* fapple-kext:                           Code Gen Options.   (line   21)
* fapple-pragma-pack:                    Code Gen Options.   (line   24)
* fapplication-extension:                Code Gen Options.   (line   27)
* fassociative-math:                     Optimize Options.   (line   46)
* fasynchronous-unwind-tables:           Code Gen Options.   (line   30)
* fblocks:                               C Dialect Options.  (line   66)
* fborland-extensions:                   C Dialect Options.  (line   69)
* fbuild-session-file:                   Overall Options.    (line  139)
* fbuild-session-timestamp:              Overall Options.    (line  142)
* fcheck-new:                            C++ Dialect Options.
                                                             (line   33)
* fcolor-diagnostics:                    Diagnostic Message Formatting Options.
                                                             (line   23)
* fcomment-block-commands:               Preprocessor Options.
                                                             (line   96)
* fcommon:                               Variable Attributes.
                                                             (line  105)
* fconstant-string-class:                Objective-C and Objective-C++ Dialect Options.
                                                             (line   36)
* fconstexpr-depth:                      C++ Dialect Options.
                                                             (line   43)
* fcoverage-mapping:                     Instrumentation Options.
                                                             (line   70)
* fcxx-exceptions:                       C++ Dialect Options.
                                                             (line   49)
* fdata-sections:                        Optimize Options.   (line   64)
* fdebug-prefix-map:                     Debugging Options.  (line   33)
* fdebug-types-section:                  Debugging Options.  (line   37)
* fdeclspec:                             Preprocessor Options.
                                                             (line   99)
* fdelayed-template-parsing:             C++ Dialect Options.
                                                             (line   52)
* fdiagnostics-color:                    Diagnostic Message Formatting Options.
                                                             (line   27)
* fdiagnostics-parseable-fixits:         Diagnostic Message Formatting Options.
                                                             (line   83)
* fdiagnostics-print-source-range-info:  Diagnostic Message Formatting Options.
                                                             (line   86)
* fdiagnostics-show-location:            Diagnostic Message Formatting Options.
                                                             (line   89)
* fdiagnostics-show-note-include-stack:  Diagnostic Message Formatting Options.
                                                             (line  103)
* fdiagnostics-show-option:              Diagnostic Message Formatting Options.
                                                             (line  106)
* fdiagnostics-show-template-tree:       Diagnostic Message Formatting Options.
                                                             (line  112)
* fdollars-in-identifiers:               Preprocessor Options.
                                                             (line  102)
* fdollars-in-identifiers <1>:           Interoperation.     (line  141)
* fdwarf2-cfi-asm:                       Debugging Options.  (line   46)
* feliminate-unused-debug-types:         Debugging Options.  (line   50)
* femit-all-decls:                       C Dialect Options.  (line  108)
* fexceptions:                           Code Gen Options.   (line   55)
* fexec-charset:                         Preprocessor Options.
                                                             (line  105)
* fextended-identifiers:                 Preprocessor Options.
                                                             (line  110)
* ffast-math:                            Optimize Options.   (line   83)
* ffinite-math-only:                     Optimize Options.   (line   97)
* ffloat-store:                          Disappointments.    (line   77)
* ffor-scope:                            C++ Dialect Options.
                                                             (line   62)
* ffp-contract:                          Optimize Options.   (line  109)
* ffreestanding:                         Standards.          (line   98)
* ffreestanding <1>:                     C Dialect Options.  (line  111)
* ffreestanding <2>:                     Warning Options.    (line  748)
* ffreestanding <3>:                     Function Attributes.
                                                             (line  484)
* ffriend-injection:                     C++ Dialect Options.
                                                             (line   74)
* ffunction-sections:                    Optimize Options.   (line   64)
* fgnu-runtime:                          Objective-C and Objective-C++ Dialect Options.
                                                             (line   45)
* fgnu89-inline:                         C Dialect Options.  (line  122)
* fhosted:                               C Dialect Options.  (line  142)
* finput-charset:                        Preprocessor Options.
                                                             (line  114)
* finstrument-functions:                 Instrumentation Options.
                                                             (line   73)
* finstrument-functions <1>:             Function Attributes.
                                                             (line 1086)
* fkeep-inline-functions:                Inline.             (line   51)
* flax-vector-conversions:               C Dialect Options.  (line  150)
* flto:                                  Optimize Options.   (line  128)
* fmax-type-align:                       Code Gen Options.   (line   72)
* fmerge-all-constants:                  Optimize Options.   (line  300)
* fmessage-length:                       Diagnostic Message Formatting Options.
                                                             (line  118)
* fms-compatibility:                     C Dialect Options.  (line  155)
* fms-compatibility-version:             C Dialect Options.  (line  159)
* fms-extensions:                        C Dialect Options.  (line  163)
* fms-extensions <1>:                    Unnamed Fields.     (line   36)
* fmsc-version:                          C Dialect Options.  (line  181)
* fnext-runtime:                         Objective-C and Objective-C++ Dialect Options.
                                                             (line   49)
* fno-access-control:                    C++ Dialect Options.
                                                             (line   26)
* fno-asm:                               C Dialect Options.  (line   53)
* fno-assume-sane-operator-new:          C++ Dialect Options.
                                                             (line   30)
* fno-autolink:                          Link Options.       (line   29)
* fno-builtin:                           C Dialect Options.  (line   73)
* fno-builtin <1>:                       Warning Options.    (line  748)
* fno-builtin <2>:                       Function Attributes.
                                                             (line  484)
* fno-builtin <3>:                       Other Builtins.     (line   14)
* fno-common:                            Code Gen Options.   (line   36)
* fno-common <1>:                        Variable Attributes.
                                                             (line  105)
* fno-debug-types-section:               Debugging Options.  (line   37)
* fno-default-inline:                    Inline.             (line   71)
* fno-diagnostics-fixit-info:            Diagnostic Message Formatting Options.
                                                             (line   80)
* fno-diagnostics-show-option:           Diagnostic Message Formatting Options.
                                                             (line  106)
* fno-dwarf2-cfi-asm:                    Debugging Options.  (line   46)
* fno-elide-constructors:                C++ Dialect Options.
                                                             (line   55)
* fno-elide-type:                        Diagnostic Message Formatting Options.
                                                             (line  115)
* fno-eliminate-unused-debug-types:      Debugging Options.  (line   50)
* fno-for-scope:                         C++ Dialect Options.
                                                             (line   62)
* fno-gnu-inline-asm:                    C Dialect Options.  (line  139)
* fno-gnu-keywords:                      C++ Dialect Options.
                                                             (line   87)
* fno-ident:                             Code Gen Options.   (line   69)
* fno-implement-inlines:                 C++ Dialect Options.
                                                             (line   98)
* fno-implement-inlines <1>:             C++ Interface.      (line   66)
* fno-implicit-templates:                C++ Dialect Options.
                                                             (line   92)
* fno-implicit-templates <1>:            Template Instantiation.
                                                             (line   78)
* fno-inline:                            Optimize Options.   (line  120)
* fno-integrated-as:                     Assembler Options.  (line   27)
* fno-math-errno:                        Optimize Options.   (line  282)
* fno-operator-names:                    C++ Dialect Options.
                                                             (line  103)
* fno-reciprocal-math:                   Optimize Options.   (line  351)
* fno-reroll-loops:                      Optimize Options.   (line  360)
* fno-rtti:                              C++ Dialect Options.
                                                             (line  112)
* fno-sanitize-recover:                  Instrumentation Options.
                                                             (line  406)
* fno-sanitize=all:                      Instrumentation Options.
                                                             (line  144)
* fno-show-column:                       Preprocessor Options.
                                                             (line  141)
* fno-show-source-location:              Diagnostic Message Formatting Options.
                                                             (line  127)
* fno-signed-bitfields:                  C Dialect Options.  (line  201)
* fno-signed-zeros:                      Optimize Options.   (line  363)
* fno-spell-checking:                    C Dialect Options.  (line  214)
* fno-standalone-debug:                  Debugging Options.  (line   61)
* fno-threadsafe-statics:                C++ Dialect Options.
                                                             (line  150)
* fno-trapping-math:                     Optimize Options.   (line  474)
* fno-unsafe-math-optimizations:         Optimize Options.   (line  515)
* fno-unsigned-bitfields:                C Dialect Options.  (line  201)
* fno-use-init-array:                    Link Options.       (line   32)
* fno-zero-initialized-in-bss:           Optimize Options.   (line  535)
* fnon-call-exceptions:                  Code Gen Options.   (line   75)
* fobjc-abi-version:                     Objective-C and Objective-C++ Dialect Options.
                                                             (line   55)
* fobjc-call-cxx-cdtors:                 Objective-C and Objective-C++ Dialect Options.
                                                             (line   72)
* fobjc-exceptions:                      Objective-C and Objective-C++ Dialect Options.
                                                             (line   97)
* fobjc-gc:                              Objective-C and Objective-C++ Dialect Options.
                                                             (line  106)
* fobjcmt-atomic-property:               Objective-C and Objective-C++ Dialect Options.
                                                             (line  118)
* fomit-frame-pointer:                   Optimize Options.   (line  311)
* fopenmp:                               C Dialect Options.  (line  185)
* foptimize-sibling-calls:               Optimize Options.   (line  331)
* fpack-struct:                          Code Gen Options.   (line   83)
* fpascal-strings:                       C Dialect Options.  (line  195)
* fpcc-struct-return:                    Incompatibilities.  (line  170)
* fpch-preprocess:                       Preprocessor Options.
                                                             (line  124)
* fpermissive:                           C++ Dialect Options.
                                                             (line  107)
* fPIC:                                  Code Gen Options.   (line   96)
* fpic:                                  Code Gen Options.   (line  108)
* fPIE:                                  Code Gen Options.   (line  130)
* fpie:                                  Code Gen Options.   (line  130)
* fplan9-extensions:                     Unnamed Fields.     (line   43)
* fplugin:                               Overall Options.    (line  145)
* fprofile-arcs:                         Instrumentation Options.
                                                             (line  108)
* fprofile-arcs <1>:                     Other Builtins.     (line  260)
* fprofile-generate:                     Instrumentation Options.
                                                             (line  123)
* fprofile-instr-generate[=FILE]:        Instrumentation Options.
                                                             (line  135)
* fprofile-instr-use[=FILE]:             Instrumentation Options.
                                                             (line  138)
* fprofile-sample-use=FILE:              Instrumentation Options.
                                                             (line  141)
* fprofile-use:                          Optimize Options.   (line  337)
* frandom-seed:                          Developer Options.  (line   64)
* freciprocal-math:                      Optimize Options.   (line  351)
* frepo:                                 Template Instantiation.
                                                             (line   54)
* freroll-loops:                         Optimize Options.   (line  360)
* fsanitize-address-field-padding=N:     Instrumentation Options.
                                                             (line  379)
* fsanitize-blacklist=FILE:              Instrumentation Options.
                                                             (line  382)
* fsanitize-cfi-cross-dso:               Instrumentation Options.
                                                             (line  385)
* fsanitize-coverage=bb:                 Instrumentation Options.
                                                             (line  388)
* fsanitize-coverage=edge:               Instrumentation Options.
                                                             (line  391)
* fsanitize-coverage=func:               Instrumentation Options.
                                                             (line  394)
* fsanitize-coverage=indirect-calls:     Instrumentation Options.
                                                             (line  397)
* fsanitize-memory-track-origins[N]:     Instrumentation Options.
                                                             (line  400)
* fsanitize-memory-use-after-dtor:       Instrumentation Options.
                                                             (line  403)
* fsanitize-recover:                     Instrumentation Options.
                                                             (line  406)
* fsanitize-stats:                       Instrumentation Options.
                                                             (line  465)
* fsanitize-trap=STYLE:                  Instrumentation Options.
                                                             (line  468)
* fsanitize-undefined-trap-on-error:     Instrumentation Options.
                                                             (line  471)
* fsanitize=address:                     Instrumentation Options.
                                                             (line  149)
* fsanitize=alignment:                   Instrumentation Options.
                                                             (line  159)
* fsanitize=bool:                        Instrumentation Options.
                                                             (line  168)
* fsanitize=bounds:                      Instrumentation Options.
                                                             (line  175)
* fsanitize=cfi:                         Instrumentation Options.
                                                             (line  184)
* fsanitize=enum:                        Instrumentation Options.
                                                             (line  187)
* fsanitize=float-cast-overflow:         Instrumentation Options.
                                                             (line  195)
* fsanitize=float-divide-by-zero:        Instrumentation Options.
                                                             (line  206)
* fsanitize=integer-divide-by-zero:      Instrumentation Options.
                                                             (line  215)
* fsanitize=kernel-address:              Instrumentation Options.
                                                             (line  221)
* fsanitize=leak:                        Instrumentation Options.
                                                             (line  225)
* fsanitize=nonnull-attribute:           Instrumentation Options.
                                                             (line  235)
* fsanitize=null:                        Instrumentation Options.
                                                             (line  244)
* fsanitize=object-size:                 Instrumentation Options.
                                                             (line  255)
* fsanitize=return:                      Instrumentation Options.
                                                             (line  263)
* fsanitize=returns-nonnull-attribute:   Instrumentation Options.
                                                             (line  272)
* fsanitize=shift:                       Instrumentation Options.
                                                             (line  281)
* fsanitize=signed-integer-overflow:     Instrumentation Options.
                                                             (line  290)
* fsanitize=thread:                      Instrumentation Options.
                                                             (line  302)
* fsanitize=undefined:                   Instrumentation Options.
                                                             (line  311)
* fsanitize=unreachable:                 Instrumentation Options.
                                                             (line  354)
* fsanitize=vla-bound:                   Instrumentation Options.
                                                             (line  362)
* fsanitize=vptr:                        Instrumentation Options.
                                                             (line  369)
* fshort-enums:                          Code Gen Options.   (line  139)
* fshort-enums <1>:                      Structures unions enumerations and bit-fields implementation.
                                                             (line   48)
* fshort-enums <2>:                      Type Attributes.    (line  114)
* fshort-enums <3>:                      Non-bugs.           (line   42)
* fshort-wchar:                          Code Gen Options.   (line  149)
* fshow-overloads:                       C++ Dialect Options.
                                                             (line  132)
* fsigned-bitfields:                     C Dialect Options.  (line  201)
* fsigned-bitfields <1>:                 Non-bugs.           (line   57)
* fsigned-char:                          C Dialect Options.  (line  207)
* fsigned-char <1>:                      Characters implementation.
                                                             (line   31)
* fsigned-zeros:                         Optimize Options.   (line  363)
* fsized-deallocation:                   C++ Dialect Options.
                                                             (line  122)
* fslp-vectorize:                        Optimize Options.   (line  376)
* fslp-vectorize-aggressive:             Optimize Options.   (line  373)
* fsplit-stack:                          Instrumentation Options.
                                                             (line  478)
* fsplit-stack <1>:                      Function Attributes.
                                                             (line 1091)
* fstack-check:                          Instrumentation Options.
                                                             (line  496)
* fstack-protector:                      Instrumentation Options.
                                                             (line  532)
* fstack-protector-all:                  Instrumentation Options.
                                                             (line  541)
* fstack-protector-strong:               Instrumentation Options.
                                                             (line  544)
* fstandalone-debug:                     Debugging Options.  (line   61)
* fstrict-aliasing:                      Optimize Options.   (line  379)
* fstrict-enums:                         Optimize Options.   (line  425)
* fstrict-overflow:                      Optimize Options.   (line  434)
* fstrict-vtable-pointers:               Optimize Options.   (line  468)
* fsyntax-only:                          Warning Options.    (line   20)
* ftabstop:                              Preprocessor Options.
                                                             (line  146)
* ftemplate-backtrace-limit:             C++ Dialect Options.
                                                             (line  137)
* ftemplate-depth:                       C++ Dialect Options.
                                                             (line  141)
* ftest-coverage:                        Instrumentation Options.
                                                             (line  549)
* fthinlto-index=FILE:                   Optimize Options.   (line  471)
* ftime-report:                          Developer Options.  (line   74)
* ftls-model:                            Code Gen Options.   (line  159)
* ftrap-function:                        Code Gen Options.   (line  170)
* ftrapv:                                Code Gen Options.   (line  173)
* ftrapv-handler:                        Code Gen Options.   (line  177)
* ftree-slp-vectorize:                   Optimize Options.   (line  489)
* ftree-vectorize:                       Optimize Options.   (line  500)
* ftrigraphs:                            Preprocessor Options.
                                                             (line  152)
* funique-section-names:                 C Dialect Options.  (line  339)
* funit-at-a-time:                       Optimize Options.   (line  493)
* funroll-loops:                         Optimize Options.   (line  505)
* funsafe-math-optimizations:            Optimize Options.   (line  515)
* funsigned-bitfields:                   C Dialect Options.  (line  201)
* funsigned-bitfields <1>:               Structures unions enumerations and bit-fields implementation.
                                                             (line   17)
* funsigned-bitfields <2>:               Non-bugs.           (line   57)
* funsigned-char:                        C Dialect Options.  (line  342)
* funsigned-char <1>:                    Characters implementation.
                                                             (line   31)
* funwind-tables:                        Code Gen Options.   (line  180)
* fuse-cxa-atexit:                       C++ Dialect Options.
                                                             (line  156)
* fuse-init-array:                       Link Options.       (line   32)
* fuse-ld=bfd:                           Link Options.       (line   35)
* fuse-ld=gold:                          Link Options.       (line   38)
* fveclib:                               Link Options.       (line   41)
* fvectorize:                            Optimize Options.   (line  532)
* fverbose-asm:                          Code Gen Options.   (line  187)
* fvisibility:                           Code Gen Options.   (line  196)
* fvisibility-inlines-hidden:            C++ Dialect Options.
                                                             (line  163)
* fvisibility-ms-compat:                 C++ Dialect Options.
                                                             (line  191)
* fwrapv:                                Code Gen Options.   (line  261)
* fwritable-strings:                     C Dialect Options.  (line  360)
* fzero-initialized-in-bss:              Optimize Options.   (line  535)
* g:                                     Debugging Options.  (line   64)
* gcc-toolchain:                         Overall Options.    (line  152)
* gcodeview:                             Debugging Options.  (line   99)
* gdwarf-VERSION:                        Debugging Options.  (line  102)
* gfull:                                 Debugging Options.  (line  108)
* ggdb:                                  Debugging Options.  (line   64)
* ggdb <1>:                              Debugging Options.  (line  111)
* ggnu-pubnames:                         Debugging Options.  (line  117)
* gline-tables-only:                     Debugging Options.  (line  122)
* gmodules:                              Debugging Options.  (line  125)
* gno-record-gcc-switches:               Debugging Options.  (line  128)
* gno-strict-dwarf:                      Debugging Options.  (line  154)
* grecord-gcc-switches:                  Debugging Options.  (line  132)
* gsplit-dwarf:                          Debugging Options.  (line  141)
* gstrict-dwarf:                         Debugging Options.  (line  148)
* gused:                                 Debugging Options.  (line  158)
* H:                                     Preprocessor Options.
                                                             (line  155)
* help:                                  Overall Options.    (line  156)
* I:                                     Directory Options.  (line   16)
* idirafter:                             Preprocessor Options.
                                                             (line  162)
* iframework:                            Preprocessor Options.
                                                             (line  169)
* imacros:                               Preprocessor Options.
                                                             (line  172)
* include:                               Preprocessor Options.
                                                             (line  181)
* include-pch:                           Preprocessor Options.
                                                             (line  192)
* index-header-map:                      Preprocessor Options.
                                                             (line  195)
* iprefix:                               Preprocessor Options.
                                                             (line  198)
* iquote:                                Directory Options.  (line   35)
* isysroot:                              Preprocessor Options.
                                                             (line  203)
* isystem:                               Preprocessor Options.
                                                             (line  209)
* iwithprefix:                           Preprocessor Options.
                                                             (line  218)
* iwithprefixbefore:                     Preprocessor Options.
                                                             (line  218)
* iwithsysroot:                          Preprocessor Options.
                                                             (line  224)
* l:                                     Link Options.       (line   45)
* L:                                     Directory Options.  (line   41)
* lobjc:                                 Link Options.       (line   72)
* M:                                     Preprocessor Options.
                                                             (line  227)
* maapopt:                               AAP Options.        (line   15)
* MD:                                    Preprocessor Options.
                                                             (line  252)
* MF:                                    Preprocessor Options.
                                                             (line  268)
* MG:                                    Preprocessor Options.
                                                             (line  277)
* mincremental-linker-compatible:        Link Options.       (line   76)
* mllvm:                                 Code Gen Options.   (line  269)
* mllvm OPTION:                          Optimize Options.   (line  547)
* MM:                                    Preprocessor Options.
                                                             (line  290)
* MMD:                                   Preprocessor Options.
                                                             (line  300)
* MP:                                    Preprocessor Options.
                                                             (line  304)
* MQ:                                    Preprocessor Options.
                                                             (line  316)
* mrelax-all:                            Optimize Options.   (line  556)
* mrtd:                                  Function Attributes.
                                                             (line  215)
* mstack-alignment:                      Code Gen Options.   (line  273)
* mstack-probe-size:                     Code Gen Options.   (line  276)
* MT:                                    Preprocessor Options.
                                                             (line  326)
* mthread-model:                         Code Gen Options.   (line  279)
* MV:                                    Preprocessor Options.
                                                             (line  341)
* no-integrated-cpp:                     Preprocessor Options.
                                                             (line  344)
* nobuiltininc:                          Preprocessor Options.
                                                             (line  362)
* nodefaultlibs:                         Link Options.       (line   79)
* nostartfiles:                          Link Options.       (line   91)
* nostdinc:                              Preprocessor Options.
                                                             (line  354)
* nostdinc++:                            C++ Dialect Options.
                                                             (line  220)
* nostdlib:                              Link Options.       (line   96)
* o:                                     Overall Options.    (line  168)
* O:                                     Optimize Options.   (line  564)
* O0:                                    Optimize Options.   (line  559)
* O1:                                    Optimize Options.   (line  564)
* O2:                                    Optimize Options.   (line  578)
* O3:                                    Optimize Options.   (line  590)
* O4:                                    Optimize Options.   (line  594)
* ObjC:                                  Standards.          (line  168)
* ObjC <1>:                              Overall Options.    (line  179)
* ObjC++:                                Standards.          (line  168)
* ObjC++ <1>:                            Overall Options.    (line  182)
* objcmt-migrate:                        Objective-C and Objective-C++ Dialect Options.
                                                             (line  122)
* objcmt-migrate-all:                    Objective-C and Objective-C++ Dialect Options.
                                                             (line  122)
* objcmt-migrate-annotation:             Objective-C and Objective-C++ Dialect Options.
                                                             (line  122)
* objcmt-migrate-designated-init:        Objective-C and Objective-C++ Dialect Options.
                                                             (line  122)
* objcmt-migrate-instancetype:           Objective-C and Objective-C++ Dialect Options.
                                                             (line  122)
* objcmt-migrate-literals:               Objective-C and Objective-C++ Dialect Options.
                                                             (line  122)
* objcmt-migrate-ns-macros:              Objective-C and Objective-C++ Dialect Options.
                                                             (line  122)
* objcmt-migrate-property:               Objective-C and Objective-C++ Dialect Options.
                                                             (line  122)
* objcmt-migrate-property-dot-syntax:    Objective-C and Objective-C++ Dialect Options.
                                                             (line  122)
* objcmt-migrate-protocol-conformance:   Objective-C and Objective-C++ Dialect Options.
                                                             (line  122)
* objcmt-migrate-readonly-property:      Objective-C and Objective-C++ Dialect Options.
                                                             (line  122)
* objcmt-migrate-readwrite-property:     Objective-C and Objective-C++ Dialect Options.
                                                             (line  122)
* objcmt-migrate-subscripting:           Objective-C and Objective-C++ Dialect Options.
                                                             (line  122)
* objcmt-ns-nonatomic-iosonly:           Objective-C and Objective-C++ Dialect Options.
                                                             (line  126)
* objcmt-returns-innerpointer-property:  Objective-C and Objective-C++ Dialect Options.
                                                             (line  130)
* Ofast:                                 Optimize Options.   (line  598)
* Os:                                    Optimize Options.   (line  603)
* Oz:                                    Optimize Options.   (line  608)
* P:                                     Preprocessor Options.
                                                             (line  365)
* param:                                 Optimize Options.   (line  611)
* pedantic:                              Standards.          (line   23)
* pedantic <1>:                          Warning Options.    (line   25)
* pedantic <2>:                          C Extensions.       (line    6)
* pedantic <3>:                          Alternate Keywords. (line   30)
* pedantic <4>:                          Warnings and Errors.
                                                             (line   25)
* pedantic-errors:                       Standards.          (line   23)
* pedantic-errors <1>:                   Warning Options.    (line   66)
* pedantic-errors <2>:                   Non-bugs.           (line  216)
* pedantic-errors <3>:                   Warnings and Errors.
                                                             (line   25)
* pg:                                    Instrumentation Options.
                                                             (line  557)
* pie:                                   Link Options.       (line  121)
* pipe:                                  Overall Options.    (line  185)
* print-file-name:                       Developer Options.  (line   78)
* print-ivar-layout:                     Developer Options.  (line   84)
* print-libgcc-file-name:                Developer Options.  (line   87)
* print-multi-directory:                 Developer Options.  (line   93)
* print-multi-lib:                       Developer Options.  (line   98)
* print-prog-name:                       Developer Options.  (line  105)
* print-search-dirs:                     Developer Options.  (line  108)
* Qunused-arguments:                     Overall Options.    (line  192)
* rdynamic:                              Link Options.       (line  127)
* relocatable-pch:                       Preprocessor Options.
                                                             (line  371)
* resource-dir:                          Code Gen Options.   (line  282)
* Reverything:                           Developer Options.  (line  121)
* Rpass:                                 Developer Options.  (line  124)
* Rpass-analysis:                        Developer Options.  (line  127)
* Rpass-missed:                          Developer Options.  (line  130)
* S:                                     Overall Options.    (line  195)
* S <1>:                                 Link Options.       (line   22)
* s:                                     Link Options.       (line  134)
* save-temps:                            Developer Options.  (line  134)
* save-temps=obj:                        Developer Options.  (line  161)
* serialize-diagnostics:                 Diagnostic Message Formatting Options.
                                                             (line  124)
* shared:                                Link Options.       (line  142)
* static:                                Link Options.       (line  138)
* static-libgcc:                         Link Options.       (line  149)
* std:                                   Standards.          (line   23)
* std <1>:                               C Dialect Options.  (line  217)
* std <2>:                               Other Builtins.     (line   21)
* std <3>:                               Non-bugs.           (line  107)
* stdlib:                                Link Options.       (line  154)
* sysroot:                               Directory Options.  (line   45)
* target:                                Code Gen Options.   (line  285)
* traditional:                           Standards.          (line   16)
* traditional <1>:                       C Dialect Options.  (line  326)
* traditional <2>:                       Incompatibilities.  (line    6)
* trigraphs:                             C Dialect Options.  (line  335)
* trigraphs <1>:                         Preprocessor Options.
                                                             (line  374)
* U:                                     Preprocessor Options.
                                                             (line  382)
* u:                                     Link Options.       (line  165)
* undef:                                 Preprocessor Options.
                                                             (line  386)
* v:                                     Overall Options.    (line  205)
* verify-pch:                            Preprocessor Options.
                                                             (line  390)
* version:                               Overall Options.    (line  211)
* via-file-asm:                          Developer Options.  (line  179)
* w:                                     Warning Options.    (line   75)
* W:                                     Warning Options.    (line  156)
* W <1>:                                 Warning Options.    (line 1137)
* W <2>:                                 Incompatibilities.  (line   64)
* W#pragma-messages:                     Warning Options.    (line 1458)
* W#warnings:                            Warning Options.    (line 2079)
* Wa:                                    Assembler Options.  (line   15)
* Wabi:                                  C++ Dialect Options.
                                                             (line  228)
* Wabstract-vbase-init:                  Warning Options.    (line  237)
* Waddress:                              Warning Options.    (line  240)
* Waddress-of-array-temporary:           Warning Options.    (line  253)
* Waddress-of-temporary:                 Warning Options.    (line  256)
* Waggregate-return:                     Warning Options.    (line  259)
* Wall:                                  Warning Options.    (line   78)
* Wall <1>:                              Standard Libraries. (line    6)
* Wambiguous-macro:                      Warning Options.    (line  264)
* Wambiguous-member-template:            Warning Options.    (line  267)
* Wanalyzer-incompatible-plugin:         Warning Options.    (line  270)
* Wanonymous-pack-parens:                Warning Options.    (line  273)
* Warc:                                  Warning Options.    (line  276)
* Warc-bridge-casts-disallowed-in-nonarc: Warning Options.   (line  279)
* Warc-maybe-repeated-use-of-weak:       Warning Options.    (line  282)
* Warc-non-pod-memaccess:                Warning Options.    (line  285)
* Warc-performSelector-leaks:            Warning Options.    (line  288)
* Warc-repeated-use-of-weak:             Warning Options.    (line  291)
* Warc-retain-cycles:                    Warning Options.    (line  294)
* Warc-unsafe-retained-assign:           Warning Options.    (line  297)
* Warray-bounds:                         Warning Options.    (line  300)
* Warray-bounds-pointer-arithmetic:      Warning Options.    (line  305)
* Wasm:                                  Warning Options.    (line  308)
* Wasm-operand-widths:                   Warning Options.    (line  311)
* Watomic-properties:                    Warning Options.    (line  317)
* Watomic-property-with-user-defined-accessor: Warning Options.
                                                             (line  320)
* Wattributes:                           Warning Options.    (line  323)
* Wauto-var-id:                          Warning Options.    (line  335)
* Wavailability:                         Warning Options.    (line  338)
* Wbackslash-newline-escape:             Warning Options.    (line  341)
* Wbad-array-new-length:                 Warning Options.    (line  344)
* Wbad-function-cast:                    Warning Options.    (line 2106)
* Wbind-to-temporary-copy:               Warning Options.    (line  347)
* Wbitfield-constant-conversion:         Warning Options.    (line  350)
* Wbitwise-op-parentheses:               Warning Options.    (line  353)
* Wbool-conversion:                      Warning Options.    (line  356)
* Wbool-conversions:                     Warning Options.    (line  359)
* Wbridge-cast:                          Warning Options.    (line  362)
* Wbuiltin-macro-redefined:              Warning Options.    (line  365)
* Wbuiltin-requires-header:              Warning Options.    (line  370)
* Wc++-compat:                           Warning Options.    (line  373)
* Wc++0x-compat:                         Warning Options.    (line  378)
* Wc++0x-extensions:                     Warning Options.    (line  383)
* Wc++0x-narrowing:                      Warning Options.    (line  386)
* Wc++11-compat:                         Warning Options.    (line  389)
* Wc++11-compat-pedantic:                Warning Options.    (line  395)
* Wc++11-compat-reserved-user-defined-literal: Warning Options.
                                                             (line  398)
* Wc++11-extensions:                     Warning Options.    (line  404)
* Wc++11-extra-semi:                     Warning Options.    (line  407)
* Wc++11-long-long:                      Warning Options.    (line  410)
* Wc++11-narrowing:                      Warning Options.    (line  413)
* Wc++14-compat:                         Warning Options.    (line  419)
* Wc++1y-extensions:                     Warning Options.    (line  416)
* Wc++98-c++11-compat:                   Warning Options.    (line  423)
* Wc++98-c++11-compat-pedantic:          Warning Options.    (line  426)
* Wc++98-compat:                         Warning Options.    (line  432)
* Wc++98-compat-bind-to-temporary-copy:  Warning Options.    (line  429)
* Wc++98-compat-local-type-template-args: Warning Options.   (line  435)
* Wc++98-compat-pedantic:                Warning Options.    (line  438)
* Wc++98-compat-unnamed-type-template-args: Warning Options. (line  441)
* Wc11-extensions:                       Warning Options.    (line  401)
* Wc99-compat:                           Warning Options.    (line  444)
* Wcast-align:                           Warning Options.    (line  450)
* Wcast-of-sel-type:                     Warning Options.    (line  472)
* Wcast-qual:                            Warning Options.    (line  456)
* WCFString-literal:                     Warning Options.    (line  475)
* Wchar-align:                           Warning Options.    (line  478)
* Wchar-subscripts:                      Warning Options.    (line  481)
* Wcomment:                              Warning Options.    (line  487)
* Wcomments:                             Warning Options.    (line  487)
* Wcompare-distinct-pointer-types:       Warning Options.    (line  492)
* Wcomplex-component-init:               Warning Options.    (line  495)
* Wconditional-type-mismatch:            Warning Options.    (line  498)
* Wconditional-uninitialized:            Warning Options.    (line  501)
* Wconfig-macros:                        Warning Options.    (line  504)
* Wconstant-conversion:                  Warning Options.    (line  507)
* Wconstant-logical-operand:             Warning Options.    (line  510)
* Wconstexpr-not-const:                  Warning Options.    (line  513)
* Wconsumed:                             Warning Options.    (line  516)
* Wconversion:                           Warning Options.    (line  519)
* Wconversion-null:                      C++ Dialect Options.
                                                             (line  247)
* Wcovered-switch-default:               Warning Options.    (line  537)
* Wctor-dtor-privacy:                    C++ Dialect Options.
                                                             (line  251)
* Wcustom-atomic-properties:             Warning Options.    (line  540)
* Wdangling-else:                        Warning Options.    (line  543)
* Wdangling-field:                       Warning Options.    (line  546)
* Wdangling-initializer-list:            Warning Options.    (line  549)
* Wdate-time:                            Warning Options.    (line  552)
* Wdeclaration-after-statement:          Warning Options.    (line 2111)
* Wdelegating-ctor-cycles:               Warning Options.    (line  557)
* Wdelete-incomplete:                    Warning Options.    (line  560)
* Wdelete-non-virtual-dtor:              C++ Dialect Options.
                                                             (line  258)
* Wdeprecated:                           Warning Options.    (line  564)
* Wdeprecated-declarations:              Warning Options.    (line  568)
* Wdeprecated-implementations:           Warning Options.    (line  577)
* Wdeprecated-increment-bool:            Warning Options.    (line  574)
* Wdeprecated-objc-isa-usage:            Warning Options.    (line  580)
* Wdeprecated-objc-pointer-introspection: Warning Options.   (line  583)
* Wdeprecated-objc-pointer-introspection-performSelector: Warning Options.
                                                             (line  586)
* Wdeprecated-register:                  Warning Options.    (line  589)
* Wdeprecated-writable-strings:          Warning Options.    (line  592)
* Wdirect-ivar-access:                   Warning Options.    (line  595)
* Wdisabled-macro-expansion:             Warning Options.    (line  598)
* Wdisabled-optimization:                Warning Options.    (line  601)
* Wdiscard-qual:                         Warning Options.    (line  610)
* Wdistributed-object-modifiers:         Warning Options.    (line  613)
* Wdiv-by-zero:                          Warning Options.    (line  616)
* Wdivision-by-zero:                     Warning Options.    (line  621)
* Wdocumentation:                        Warning Options.    (line  627)
* Wdocumentation-deprecated-sync:        Warning Options.    (line  624)
* Wdocumentation-html:                   Warning Options.    (line  630)
* Wdocumentation-pedantic:               Warning Options.    (line  633)
* Wdocumentation-unknown-command:        Warning Options.    (line  636)
* Wdollar-in-identifier-extension:       Warning Options.    (line  639)
* Wdouble-promotion:                     Warning Options.    (line  642)
* Wduplicate-decl-specifier:             Warning Options.    (line  660)
* Wduplicate-enum:                       Warning Options.    (line  663)
* Wduplicate-method-arg:                 Warning Options.    (line  666)
* Wduplicate-method-match:               Warning Options.    (line  669)
* Wdynamic-class-memaccess:              Warning Options.    (line  672)
* Weffc++:                               C++ Dialect Options.
                                                             (line  265)
* Wembedded-directive:                   Warning Options.    (line  675)
* Wempty-body:                           Warning Options.    (line  678)
* Wempty-translation-unit:               Warning Options.    (line  682)
* Wendif-labels:                         Warning Options.    (line  685)
* Wenum-compare:                         Warning Options.    (line  689)
* Wenum-conversion:                      Warning Options.    (line  695)
* Werror:                                Warning Options.    (line  129)
* Werror=WARNING:                        Warning Options.    (line  132)
* Weverything:                           Warning Options.    (line  149)
* Wexit-time-destructors:                Warning Options.    (line  698)
* Wexplicit-ownership-type:              Warning Options.    (line  701)
* Wextended-offsetof:                    Warning Options.    (line  704)
* Wextern-c-compat:                      Warning Options.    (line  707)
* Wextern-initializer:                   Warning Options.    (line  710)
* Wextra:                                Warning Options.    (line  156)
* Wextra <1>:                            Warning Options.    (line 1137)
* Wextra-semi:                           Warning Options.    (line  716)
* Wextra-tokens:                         Warning Options.    (line  719)
* Wfatal-errors:                         Warning Options.    (line  196)
* Wflexible-array-extensions:            Warning Options.    (line  722)
* Wfloat-conversion:                     Warning Options.    (line  725)
* Wfloat-equal:                          Warning Options.    (line  731)
* Wformat:                               Warning Options.    (line  748)
* Wformat <1>:                           Function Attributes.
                                                             (line  444)
* Wformat-extra-args:                    Warning Options.    (line  785)
* Wformat-invalid-specifier:             Warning Options.    (line  798)
* Wformat-non-iso:                       Warning Options.    (line  801)
* Wformat-nonliteral:                    Warning Options.    (line  804)
* Wformat-nonliteral <1>:                Function Attributes.
                                                             (line  509)
* Wformat-pedantic:                      Warning Options.    (line  809)
* Wformat-security:                      Warning Options.    (line  812)
* Wformat-y2k:                           Warning Options.    (line  823)
* Wformat-zero-length:                   Warning Options.    (line  827)
* Wformat=2:                             Warning Options.    (line  780)
* Wfour-char-constants:                  Warning Options.    (line  831)
* Wframe-larger-than:                    Warning Options.    (line  834)
* Wgcc-compat:                           Warning Options.    (line  847)
* Wglobal-constructors:                  Warning Options.    (line  850)
* Wgnu:                                  Warning Options.    (line  862)
* Wgnu-array-member-paren-init:          Warning Options.    (line  853)
* Wgnu-conditional-omitted-operand:      Warning Options.    (line  856)
* Wgnu-designator:                       Warning Options.    (line  859)
* Wgnu-static-float-init:                Warning Options.    (line  865)
* Wheader-guard:                         Warning Options.    (line  868)
* Wheader-hygiene:                       Warning Options.    (line  871)
* Widiomatic-parentheses:                Warning Options.    (line  874)
* Wignored-attributes:                   Warning Options.    (line  877)
* Wignored-qualifiers:                   Warning Options.    (line  880)
* Wimplicit:                             Warning Options.    (line  891)
* Wimplicit-atomic-properties:           Warning Options.    (line  895)
* Wimplicit-conversion-floating-point-to-bool: Warning Options.
                                                             (line  898)
* Wimplicit-exception-spec-mismatch:     Warning Options.    (line  901)
* Wimplicit-fallthrough:                 Warning Options.    (line  904)
* Wimplicit-fallthrough-per-function:    Warning Options.    (line  907)
* Wimplicit-function-declaration:        Warning Options.    (line  910)
* Wimplicit-int:                         Warning Options.    (line  916)
* Wimplicit-retain-self:                 Warning Options.    (line  920)
* Wimport-preprocessor-directive-pedantic: Warning Options.  (line  923)
* Wincompatible-library-redeclaration:   Warning Options.    (line  926)
* Wincompatible-pointer-types:           Warning Options.    (line  929)
* Wincompatible-pointer-types-discards-qualifiers: Warning Options.
                                                             (line  935)
* Wincomplete-implementation:            Warning Options.    (line  941)
* Wincomplete-umbrella:                  Warning Options.    (line  944)
* Winherited-variadic-ctor:              Warning Options.    (line  947)
* Winit-self:                            Warning Options.    (line  952)
* Winitializer-overrides:                Warning Options.    (line  967)
* Winline:                               Warning Options.    (line  970)
* Winline <1>:                           Inline.             (line   63)
* Wint-conversion:                       Warning Options.    (line  983)
* Wint-conversions:                      Warning Options.    (line  989)
* Wint-to-pointer-cast:                  Warning Options.    (line  992)
* Winteger-overflow:                     Warning Options.    (line 1000)
* Winvalid-constexpr:                    Warning Options.    (line 1003)
* Winvalid-iboutlet:                     Warning Options.    (line 1006)
* Winvalid-noreturn:                     Warning Options.    (line 1009)
* Winvalid-offsetof:                     Warning Options.    (line 1012)
* Winvalid-pch:                          Warning Options.    (line 1024)
* Winvalid-pp-token:                     Warning Options.    (line 1028)
* Winvalid-source-encoding:              Warning Options.    (line 1031)
* Winvalid-token-paste:                  Warning Options.    (line 1034)
* Wknr-promoted-parameter:               Warning Options.    (line 1040)
* Wl:                                    Link Options.       (line  157)
* Wlanguage-extension-token:             Warning Options.    (line 1043)
* Wlarge-by-value-copy:                  Warning Options.    (line 1046)
* Wlarger-than-LEN:                      Warning Options.    (line 1050)
* Wlarger-than=LEN:                      Warning Options.    (line 1050)
* Wlocal-type-template-args:             Warning Options.    (line 1066)
* Wlogical-not-parentheses:              Warning Options.    (line 1069)
* Wlogical-op-parentheses:               Warning Options.    (line 1084)
* Wlong-long:                            Warning Options.    (line 1087)
* Wloop-analysis:                        Warning Options.    (line 1092)
* Wmain:                                 Warning Options.    (line 1095)
* Wmain-return-type:                     Warning Options.    (line 1102)
* Wmalformed-warning-check:              Warning Options.    (line 1105)
* Wmethod-signatures:                    Warning Options.    (line 1108)
* Wmicrosoft:                            Warning Options.    (line 1111)
* Wmicrosoft-exists:                     Warning Options.    (line 1114)
* Wmismatched-parameter-types:           Warning Options.    (line 1117)
* Wmismatched-return-types:              Warning Options.    (line 1120)
* Wmismatched-tags:                      Warning Options.    (line 1123)
* Wmissing-braces:                       Warning Options.    (line 1126)
* Wmissing-declarations:                 Warning Options.    (line 2117)
* Wmissing-field-initializers:           Warning Options.    (line 1137)
* Wmissing-format-attribute:             Warning Options.    (line 1161)
* Wmissing-include-dirs:                 Warning Options.    (line 1181)
* Wmissing-method-return-type:           Warning Options.    (line 1184)
* Wmissing-prototypes:                   Warning Options.    (line 2127)
* Wmissing-selector-name:                Warning Options.    (line 1187)
* Wmissing-sysroot:                      Warning Options.    (line 1190)
* Wmissing-variable-declarations:        Warning Options.    (line 1193)
* Wmodule-conflict:                      Warning Options.    (line 1196)
* Wmost:                                 Warning Options.    (line 1199)
* Wmultichar:                            Warning Options.    (line 1202)
* Wmultiple-move-vbase:                  Warning Options.    (line 1208)
* Wnarrowing:                            C++ Dialect Options.
                                                             (line  293)
* Wnested-anon-types:                    Warning Options.    (line 1211)
* Wnested-externs:                       Warning Options.    (line 2137)
* Wnewline-eof:                          Warning Options.    (line 1214)
* Wno-abi:                               C++ Dialect Options.
                                                             (line  228)
* Wno-abstract-final-class:              Warning Options.    (line  234)
* Wno-address:                           Warning Options.    (line  240)
* Wno-aggregate-return:                  Warning Options.    (line  259)
* Wno-all:                               Warning Options.    (line   78)
* Wno-array-bounds:                      Warning Options.    (line  300)
* Wno-assign-enum:                       Warning Options.    (line  314)
* Wno-attributes:                        Warning Options.    (line  323)
* Wno-auto-import:                       Warning Options.    (line  329)
* Wno-auto-storage-class:                Warning Options.    (line  332)
* Wno-bad-function-cast:                 Warning Options.    (line 2106)
* Wno-builtin-macro-redefined:           Warning Options.    (line  365)
* Wno-c99-extensions:                    Warning Options.    (line  447)
* Wno-cast-align:                        Warning Options.    (line  450)
* Wno-cast-qual:                         Warning Options.    (line  456)
* Wno-char-subscripts:                   Warning Options.    (line  481)
* Wno-comment:                           Warning Options.    (line  487)
* Wno-comments:                          Warning Options.    (line  487)
* Wno-conversion:                        Warning Options.    (line  519)
* Wno-conversion-null:                   C++ Dialect Options.
                                                             (line  247)
* Wno-ctor-dtor-privacy:                 C++ Dialect Options.
                                                             (line  251)
* Wno-date-time:                         Warning Options.    (line  552)
* Wno-declaration-after-statement:       Warning Options.    (line 2111)
* Wno-delete-incomplete:                 Warning Options.    (line  560)
* Wno-delete-non-virtual-dtor:           C++ Dialect Options.
                                                             (line  258)
* Wno-deprecated:                        Warning Options.    (line  564)
* Wno-deprecated-declarations:           Warning Options.    (line  568)
* Wno-disabled-optimization:             Warning Options.    (line  601)
* Wno-div-by-zero:                       Warning Options.    (line  616)
* Wno-double-promotion:                  Warning Options.    (line  642)
* Wno-effc++:                            C++ Dialect Options.
                                                             (line  265)
* Wno-empty-body:                        Warning Options.    (line  678)
* Wno-endif-labels:                      Warning Options.    (line  685)
* Wno-enum-compare:                      Warning Options.    (line  689)
* Wno-error:                             Warning Options.    (line  129)
* Wno-error=WARNING:                     Warning Options.    (line  132)
* Wno-extra:                             Warning Options.    (line  156)
* Wno-extra <1>:                         Warning Options.    (line 1137)
* Wno-extra-qualification:               Warning Options.    (line  713)
* Wno-fatal-errors:                      Warning Options.    (line  196)
* Wno-float-conversion:                  Warning Options.    (line  725)
* Wno-float-equal:                       Warning Options.    (line  731)
* Wno-format:                            Warning Options.    (line  748)
* Wno-format-extra-args:                 Warning Options.    (line  785)
* Wno-format-nonliteral:                 Warning Options.    (line  804)
* Wno-format-security:                   Warning Options.    (line  812)
* Wno-format-y2k:                        Warning Options.    (line  823)
* Wno-format-zero-length:                Warning Options.    (line  827)
* Wno-ignored-qualifiers:                Warning Options.    (line  880)
* Wno-implicit:                          Warning Options.    (line  891)
* Wno-implicit-function-declaration:     Warning Options.    (line  910)
* Wno-implicit-int:                      Warning Options.    (line  916)
* Wno-incompatible-pointer-types:        Warning Options.    (line  929)
* Wno-incomplete-module:                 Warning Options.    (line  938)
* Wno-inherited-variadic-ctor:           Warning Options.    (line  947)
* Wno-init-self:                         Warning Options.    (line  952)
* Wno-inline:                            Warning Options.    (line  970)
* Wno-int-conversion:                    Warning Options.    (line  983)
* Wno-int-to-pointer-cast:               Warning Options.    (line  992)
* Wno-int-to-void-pointer-cast:          Warning Options.    (line  997)
* Wno-invalid-offsetof:                  Warning Options.    (line 1012)
* Wno-invalid-pch:                       Warning Options.    (line 1024)
* Wno-keyword-compat:                    Warning Options.    (line 1037)
* Wno-liblto:                            Warning Options.    (line 1057)
* Wno-literal-conversion:                Warning Options.    (line 1060)
* Wno-literal-range:                     Warning Options.    (line 1063)
* Wno-logical-not-parentheses:           Warning Options.    (line 1069)
* Wno-long-long:                         Warning Options.    (line 1087)
* Wno-main:                              Warning Options.    (line 1095)
* Wno-missing-braces:                    Warning Options.    (line 1126)
* Wno-missing-declarations:              Warning Options.    (line 2117)
* Wno-missing-field-initializers:        Warning Options.    (line 1137)
* Wno-missing-format-attribute:          Warning Options.    (line 1161)
* Wno-missing-include-dirs:              Warning Options.    (line 1181)
* Wno-missing-prototypes:                Warning Options.    (line 2127)
* Wno-multichar:                         Warning Options.    (line 1202)
* Wno-narrowing:                         C++ Dialect Options.
                                                             (line  293)
* Wno-nested-externs:                    Warning Options.    (line 2137)
* Wno-non-virtual-dtor:                  C++ Dialect Options.
                                                             (line  306)
* Wno-nonnull:                           Warning Options.    (line 1226)
* Wno-null-dereference:                  Warning Options.    (line 1248)
* Wno-odr:                               Warning Options.    (line 1324)
* Wno-old-style-cast:                    C++ Dialect Options.
                                                             (line  314)
* Wno-old-style-definition:              Warning Options.    (line 2140)
* Wno-out-of-line-declaration:           Warning Options.    (line 1335)
* Wno-overflow:                          Warning Options.    (line 1341)
* Wno-overlength-strings:                Warning Options.    (line 1344)
* Wno-overloaded-virtual:                C++ Dialect Options.
                                                             (line  320)
* Wno-override-module:                   Warning Options.    (line 1359)
* Wno-packed:                            Warning Options.    (line 1368)
* Wno-padded:                            Warning Options.    (line 1385)
* Wno-parentheses:                       Warning Options.    (line 1392)
* Wno-pmf-conversions:                   Bound member functions.
                                                             (line   35)
* Wno-pointer-arith:                     Warning Options.    (line 1444)
* Wno-pointer-sign:                      Warning Options.    (line 2144)
* Wno-pointer-to-int-cast:               Warning Options.    (line 1451)
* Wno-pointer-type-mismatch:             Warning Options.    (line 1455)
* Wno-pragmas:                           Warning Options.    (line 1461)
* Wno-protocol:                          Objective-C and Objective-C++ Dialect Options.
                                                             (line  146)
* Wno-redundant-decls:                   Warning Options.    (line 1490)
* Wno-reorder:                           C++ Dialect Options.
                                                             (line  339)
* Wno-return-stack-address:              Warning Options.    (line 1503)
* Wno-return-type:                       Warning Options.    (line 1506)
* Wno-selector:                          Objective-C and Objective-C++ Dialect Options.
                                                             (line  156)
* Wno-sequence-point:                    Warning Options.    (line 1541)
* Wno-shadow:                            Warning Options.    (line 1590)
* Wno-shadow-ivar:                       Warning Options.    (line 1598)
* Wno-shift-count-negative:              Warning Options.    (line 1602)
* Wno-shift-count-overflow:              Warning Options.    (line 1606)
* Wno-shift-negative-value:              Warning Options.    (line 1610)
* Wno-shift-overflow:                    Warning Options.    (line 1618)
* Wno-sign-compare:                      Warning Options.    (line 1628)
* Wno-sign-conversion:                   Warning Options.    (line 1635)
* Wno-sign-promo:                        C++ Dialect Options.
                                                             (line  353)
* Wno-sizeof-array-argument:             Warning Options.    (line 1641)
* Wno-sizeof-pointer-memaccess:          Warning Options.    (line 1649)
* Wno-stack-protector:                   Warning Options.    (line 1663)
* Wno-strict-aliasing:                   Warning Options.    (line 1683)
* Wno-strict-overflow:                   Warning Options.    (line 1715)
* Wno-strict-prototypes:                 Warning Options.    (line 2150)
* Wno-strict-selector-match:             Objective-C and Objective-C++ Dialect Options.
                                                             (line  168)
* Wno-switch:                            Warning Options.    (line 1785)
* Wno-switch-bool:                       Warning Options.    (line 1793)
* Wno-switch-default:                    Warning Options.    (line 1804)
* Wno-switch-enum:                       Warning Options.    (line 1807)
* Wno-system-headers:                    Warning Options.    (line 1816)
* Wno-tautological-compare:              Warning Options.    (line 1827)
* Wno-trigraphs:                         Warning Options.    (line 1856)
* Wno-type-limits:                       Warning Options.    (line 1861)
* Wno-unavailable-declarations:          Warning Options.    (line 1877)
* Wno-undeclared-selector:               Objective-C and Objective-C++ Dialect Options.
                                                             (line  176)
* Wno-undef:                             Warning Options.    (line 1880)
* Wno-uninitialized:                     Warning Options.    (line 1900)
* Wno-unknown-pragmas:                   Warning Options.    (line 1922)
* Wno-unsupported-friend:                Warning Options.    (line 1944)
* Wno-unused:                            Warning Options.    (line 1950)
* Wno-unused-const-variable:             Warning Options.    (line 1963)
* Wno-unused-function:                   Warning Options.    (line 1975)
* Wno-unused-label:                      Warning Options.    (line 1980)
* Wno-unused-parameter:                  Warning Options.    (line 1994)
* Wno-unused-result:                     Warning Options.    (line 2007)
* Wno-unused-value:                      Warning Options.    (line 2012)
* Wno-unused-variable:                   Warning Options.    (line 2022)
* Wno-varargs:                           Warning Options.    (line 2039)
* Wno-variadic-macros:                   Warning Options.    (line 2044)
* Wno-vla:                               Warning Options.    (line 2062)
* Wno-volatile-register-var:             Warning Options.    (line 2073)
* Wno-write-strings:                     Warning Options.    (line 2088)
* Wnon-gcc:                              Warning Options.    (line 1217)
* Wnon-literal-null-conversion:          Warning Options.    (line 1220)
* Wnon-pod-varargs:                      Warning Options.    (line 1223)
* Wnon-virtual-dtor:                     C++ Dialect Options.
                                                             (line  306)
* Wnonnull:                              Warning Options.    (line 1226)
* Wnonportable-cfstrings:                Warning Options.    (line 1233)
* WNSObject-attribute:                   Warning Options.    (line 1236)
* Wnull-arithmetic:                      Warning Options.    (line 1239)
* Wnull-character:                       Warning Options.    (line 1242)
* Wnull-conversion:                      Warning Options.    (line 1245)
* Wnull-dereference:                     Warning Options.    (line 1248)
* Wobjc-autosynthesis-property-ivar-name-match: Warning Options.
                                                             (line 1255)
* Wobjc-cocoa-api:                       Warning Options.    (line 1258)
* Wobjc-forward-class-redefinition:      Warning Options.    (line 1261)
* Wobjc-interface-ivars:                 Warning Options.    (line 1264)
* Wobjc-literal-compare:                 Warning Options.    (line 1267)
* Wobjc-method-access:                   Warning Options.    (line 1270)
* Wobjc-missing-property-synthesis:      Warning Options.    (line 1273)
* Wobjc-missing-super-calls:             Warning Options.    (line 1276)
* Wobjc-noncopy-retain-block-property:   Warning Options.    (line 1279)
* Wobjc-nonunified-exceptions:           Warning Options.    (line 1282)
* Wobjc-property-implementation:         Warning Options.    (line 1285)
* Wobjc-property-implicit-mismatch:      Warning Options.    (line 1288)
* Wobjc-property-matches-cocoa-ownership-rule: Warning Options.
                                                             (line 1291)
* Wobjc-property-no-attribute:           Warning Options.    (line 1294)
* Wobjc-property-synthesis:              Warning Options.    (line 1300)
* Wobjc-protocol-method-implementation:  Warning Options.    (line 1303)
* Wobjc-protocol-property-synthesis:     Warning Options.    (line 1306)
* Wobjc-readonly-with-setter-property:   Warning Options.    (line 1309)
* Wobjc-redundant-api-use:               Warning Options.    (line 1312)
* Wobjc-redundant-literal-use:           Warning Options.    (line 1315)
* Wobjc-root-class:                      Warning Options.    (line 1318)
* Wobjc-string-compare:                  Warning Options.    (line 1321)
* Wobjc-string-concatenation:            Warning Options.    (line 1297)
* Wodr:                                  Warning Options.    (line 1324)
* Wold-style-cast:                       C++ Dialect Options.
                                                             (line  314)
* Wold-style-definition:                 Warning Options.    (line 2140)
* Wopenmp-clauses:                       Warning Options.    (line 1332)
* working-directory:                     Overall Options.    (line  215)
* Wover-aligned:                         Warning Options.    (line 1338)
* Woverflow:                             Warning Options.    (line 1341)
* Woverlength-strings:                   Warning Options.    (line 1344)
* Woverloaded-shift-op-parentheses:      Warning Options.    (line 1362)
* Woverloaded-virtual:                   C++ Dialect Options.
                                                             (line  320)
* Woverriding-method-mismatch:           Warning Options.    (line 1365)
* Wp:                                    Preprocessor Options.
                                                             (line  393)
* Wpacked:                               Warning Options.    (line 1368)
* Wpadded:                               Warning Options.    (line 1385)
* Wparentheses:                          Warning Options.    (line 1392)
* Wparentheses-equality:                 Warning Options.    (line 1441)
* Wpedantic:                             Warning Options.    (line   25)
* Wpointer-arith:                        Warning Options.    (line 1444)
* Wpointer-arith <1>:                    Pointer Arith.      (line   13)
* Wpointer-sign:                         Warning Options.    (line 2144)
* Wpointer-to-int-cast:                  Warning Options.    (line 1451)
* Wpragmas:                              Warning Options.    (line 1461)
* Wpredefined-identifier-outside-function: Warning Options.  (line 1466)
* Wprivate-extern:                       Warning Options.    (line 1469)
* Wproperty-attribute-mismatch:          Warning Options.    (line 1472)
* Wprotocol:                             Objective-C and Objective-C++ Dialect Options.
                                                             (line  146)
* Wprotocol-property-synthesis-ambiguity: Warning Options.   (line 1475)
* Wreadonly-iboutlet-property:           Warning Options.    (line 1478)
* Wreceiver-expr:                        Warning Options.    (line 1481)
* Wreceiver-forward-class:               Warning Options.    (line 1484)
* Wreceiver-is-weak:                     Warning Options.    (line 1487)
* Wredundant-decls:                      Warning Options.    (line 1490)
* Wreinterpret-base-class:               Warning Options.    (line 1494)
* Wreorder:                              C++ Dialect Options.
                                                             (line  339)
* Wrequires-super-attribute:             Warning Options.    (line 1497)
* Wreserved-user-defined-literal:        Warning Options.    (line 1500)
* Wreturn-type:                          Warning Options.    (line 1506)
* Wreturn-type-c-linkage:                Warning Options.    (line 1520)
* Wsection:                              Warning Options.    (line 1523)
* Wselector:                             Objective-C and Objective-C++ Dialect Options.
                                                             (line  156)
* Wselector-type-mismatch:               Warning Options.    (line 1526)
* Wself-assign:                          Warning Options.    (line 1529)
* Wself-assign-field:                    Warning Options.    (line 1532)
* Wsemicolon-before-method-body:         Warning Options.    (line 1535)
* Wsentinel:                             Warning Options.    (line 1538)
* Wsequence-point:                       Warning Options.    (line 1541)
* Wserialized-diagnostics:               Warning Options.    (line 1587)
* Wshadow:                               Warning Options.    (line 1590)
* Wshadow-ivar:                          Warning Options.    (line 1598)
* Wshift-count-negative:                 Warning Options.    (line 1602)
* Wshift-count-overflow:                 Warning Options.    (line 1606)
* Wshift-negative-value:                 Warning Options.    (line 1610)
* Wshift-op-parentheses:                 Warning Options.    (line 1614)
* Wshift-overflow:                       Warning Options.    (line 1618)
* Wshift-sign-overflow:                  Warning Options.    (line 1622)
* Wshorten-64-to-32:                     Warning Options.    (line 1625)
* Wsign-compare:                         Warning Options.    (line 1628)
* Wsign-conversion:                      Warning Options.    (line 1635)
* Wsign-promo:                           C++ Dialect Options.
                                                             (line  353)
* Wsizeof-array-argument:                Warning Options.    (line 1641)
* Wsizeof-array-decay:                   Warning Options.    (line 1646)
* Wsizeof-pointer-memaccess:             Warning Options.    (line 1649)
* Wsometimes-uninitialized:              Warning Options.    (line 1657)
* Wsource-uses-openmp:                   Warning Options.    (line 1660)
* Wstack-protector:                      Warning Options.    (line 1663)
* Wstatic-float-init:                    Warning Options.    (line 1668)
* Wstatic-in-inline:                     Warning Options.    (line 1671)
* Wstatic-inline-explicit-instantiation: Warning Options.    (line 1674)
* Wstatic-local-in-inline:               Warning Options.    (line 1677)
* Wstatic-self-init:                     Warning Options.    (line 1680)
* Wstrict-aliasing:                      Warning Options.    (line 1683)
* Wstrict-aliasing <1>:                  Warning Options.    (line 1690)
* Wstrict-overflow:                      Warning Options.    (line 1715)
* Wstrict-prototypes:                    Warning Options.    (line 2150)
* Wstrict-selector-match:                Objective-C and Objective-C++ Dialect Options.
                                                             (line  168)
* Wstring-compare:                       Warning Options.    (line 1764)
* Wstring-conversion:                    Warning Options.    (line 1767)
* Wstring-plus-char:                     Warning Options.    (line 1770)
* Wstring-plus-int:                      Warning Options.    (line 1773)
* Wstrlcpy-strlcat-size:                 Warning Options.    (line 1776)
* Wstrncat-size:                         Warning Options.    (line 1779)
* Wsuper-class-method-mismatch:          Warning Options.    (line 1782)
* Wswitch:                               Warning Options.    (line 1785)
* Wswitch-bool:                          Warning Options.    (line 1793)
* Wswitch-default:                       Warning Options.    (line 1804)
* Wswitch-enum:                          Warning Options.    (line 1807)
* Wsystem-headers:                       Warning Options.    (line 1816)
* Wtautological-compare:                 Warning Options.    (line 1827)
* Wtautological-constant-out-of-range-compare: Warning Options.
                                                             (line 1835)
* Wtentative-definition-incomplete-type: Warning Options.    (line 1838)
* Wthread-safety:                        Warning Options.    (line 1850)
* Wthread-safety-analysis:               Warning Options.    (line 1841)
* Wthread-safety-attributes:             Warning Options.    (line 1844)
* Wthread-safety-beta:                   Warning Options.    (line 1847)
* Wthread-safety-precise:                Warning Options.    (line 1853)
* Wtrigraphs:                            Warning Options.    (line 1856)
* Wtype-limits:                          Warning Options.    (line 1861)
* Wtype-safety:                          Warning Options.    (line 1874)
* Wtypedef-redefinition:                 Warning Options.    (line 1868)
* Wtypename-missing:                     Warning Options.    (line 1871)
* Wundeclared-selector:                  Objective-C and Objective-C++ Dialect Options.
                                                             (line  176)
* Wundef:                                Warning Options.    (line 1880)
* Wundefined-inline:                     Warning Options.    (line 1885)
* Wundefined-internal:                   Warning Options.    (line 1888)
* Wundefined-reinterpret-cast:           Warning Options.    (line 1891)
* Wunicode:                              Warning Options.    (line 1894)
* Wunicode-whitespace:                   Warning Options.    (line 1897)
* Wuninitialized:                        Warning Options.    (line 1900)
* Wunknown-pragmas:                      Warning Options.    (line 1922)
* Wunknown-warning-option:               Warning Options.    (line 1929)
* Wunnamed-type-template-args:           Warning Options.    (line 1932)
* Wunneeded-internal-declaration:        Warning Options.    (line 1935)
* Wunneeded-member-function:             Warning Options.    (line 1938)
* Wunsequenced:                          Warning Options.    (line 1941)
* Wunsupported-visibility:               Warning Options.    (line 1947)
* Wunused:                               Warning Options.    (line 1950)
* Wunused-command-line-argument:         Warning Options.    (line 1957)
* Wunused-comparison:                    Warning Options.    (line 1960)
* Wunused-const-variable:                Warning Options.    (line 1963)
* Wunused-exception-parameter:           Warning Options.    (line 1972)
* Wunused-function:                      Warning Options.    (line 1975)
* Wunused-label:                         Warning Options.    (line 1980)
* Wunused-local-typedefs:                Warning Options.    (line 1987)
* Wunused-member-function:               Warning Options.    (line 1991)
* Wunused-parameter:                     Warning Options.    (line 1994)
* Wunused-private-field:                 Warning Options.    (line 2001)
* Wunused-property-ivar:                 Warning Options.    (line 2004)
* Wunused-result:                        Warning Options.    (line 2007)
* Wunused-value:                         Warning Options.    (line 2012)
* Wunused-variable:                      Warning Options.    (line 2022)
* Wunused-volatile-lvalue:               Warning Options.    (line 2030)
* Wused-but-marked-unused:               Warning Options.    (line 2033)
* Wuser-defined-literals:                Warning Options.    (line 2036)
* Wvarargs:                              Warning Options.    (line 2039)
* Wvariadic-macros:                      Warning Options.    (line 2044)
* Wvector-conversion:                    Warning Options.    (line 2050)
* Wvector-conversions:                   Warning Options.    (line 2053)
* Wvexing-parse:                         Warning Options.    (line 2056)
* Wvisibility:                           Warning Options.    (line 2059)
* Wvla:                                  Warning Options.    (line 2062)
* Wvla-extension:                        Warning Options.    (line 2070)
* Wvolatile-register-var:                Warning Options.    (line 2073)
* Wweak-template-vtables:                Warning Options.    (line 2082)
* Wweak-vtables:                         Warning Options.    (line 2085)
* Wwrite-strings:                        Warning Options.    (line 2088)
* Wzero-length-array:                    Warning Options.    (line 2101)
* x:                                     Overall Options.    (line  218)
* Xanalyzer:                             Developer Options.  (line  176)
* Xassembler:                            Assembler Options.  (line   19)
* Xclang:                                Overall Options.    (line  237)
* Xlinker:                               Link Options.       (line  170)
* Xpreprocessor:                         Preprocessor Options.
                                                             (line  404)
* z:                                     Link Options.       (line  188)


File: llvm.info,  Node: Keyword Index,  Prev: Option Index,  Up: Top

Keyword Index
*************

 [index ]
* Menu:

* '!' in constraint:                     Multi-Alternative.  (line   33)
* '#' in constraint:                     Modifiers.          (line   68)
* '#pragma':                             Pragmas.            (line    6)
* #pragma implementation:                C++ Interface.      (line   36)
* '#pragma implementation', implied:     C++ Interface.      (line   43)
* #pragma interface:                     C++ Interface.      (line   17)
* '#pragma', reason for not using:       Function Attributes.
                                                             (line 2063)
* $:                                     Dollar Signs.       (line    6)
* '$' in constraint:                     Multi-Alternative.  (line   42)
* '%' in constraint:                     Modifiers.          (line   52)
* '&' in constraint:                     Modifiers.          (line   25)
* ''':                                   Incompatibilities.  (line  116)
* *:                                     Pointer Bounds Checker builtins.
                                                             (line   11)
* * <1>:                                 Pointer Bounds Checker builtins.
                                                             (line   26)
* * <2>:                                 Pointer Bounds Checker builtins.
                                                             (line   44)
* * <3>:                                 Pointer Bounds Checker builtins.
                                                             (line   56)
* * <4>:                                 Pointer Bounds Checker builtins.
                                                             (line   64)
* '*' in constraint:                     Modifiers.          (line   73)
* *__builtin_assume_aligned:             Other Builtins.     (line  339)
* '+' in constraint:                     Modifiers.          (line   12)
* '-lgcc', use with '-nodefaultlibs':    Link Options.       (line  107)
* '-lgcc', use with '-nostdlib':         Link Options.       (line  107)
* '-nodefaultlibs' and unresolved references: Link Options.  (line  107)
* '-nostdlib' and unresolved references: Link Options.       (line  107)
* '//':                                  C++ Comments.       (line    6)
* '0' in constraint:                     Simple Constraints. (line  125)
* '<' in constraint:                     Simple Constraints. (line   47)
* '=' in constraint:                     Modifiers.          (line    8)
* '>' in constraint:                     Simple Constraints. (line   59)
* '?' in constraint:                     Multi-Alternative.  (line   27)
* '?:' extensions:                       Conditionals.       (line    6)
* '?:' side effect:                      Conditionals.       (line   20)
* '^' in constraint:                     Multi-Alternative.  (line   38)
* '_' in variables in macros:            Typeof.             (line   46)
* '_Accum' data type:                    Fixed-Point.        (line    6)
* '_Complex' keyword:                    Complex.            (line    6)
* '_Decimal128' data type:               Decimal Float.      (line    6)
* '_Decimal32' data type:                Decimal Float.      (line    6)
* '_Decimal64' data type:                Decimal Float.      (line    6)
* _Exit:                                 Other Builtins.     (line    6)
* _exit:                                 Other Builtins.     (line    6)
* '_Fract' data type:                    Fixed-Point.        (line    6)
* _HTM_FIRST_USER_ABORT_CODE:            S/390 System z Built-in Functions.
                                                             (line   44)
* '_Sat' data type:                      Fixed-Point.        (line    6)
* _xabort:                               x86 transactional memory intrinsics.
                                                             (line   57)
* _xbegin:                               x86 transactional memory intrinsics.
                                                             (line   19)
* _xend:                                 x86 transactional memory intrinsics.
                                                             (line   48)
* _xtest:                                x86 transactional memory intrinsics.
                                                             (line   53)
* __atomic_add_fetch:                    __atomic Builtins.  (line  153)
* __atomic_always_lock_free:             __atomic Builtins.  (line  230)
* __atomic_and_fetch:                    __atomic Builtins.  (line  157)
* __atomic_clear:                        __atomic Builtins.  (line  204)
* __atomic_compare_exchange:             __atomic Builtins.  (line  145)
* __atomic_compare_exchange_n:           __atomic Builtins.  (line  124)
* __atomic_exchange:                     __atomic Builtins.  (line  118)
* __atomic_exchange_n:                   __atomic Builtins.  (line  108)
* __atomic_fetch_add:                    __atomic Builtins.  (line  172)
* __atomic_fetch_and:                    __atomic Builtins.  (line  176)
* __atomic_fetch_nand:                   __atomic Builtins.  (line  182)
* __atomic_fetch_or:                     __atomic Builtins.  (line  180)
* __atomic_fetch_sub:                    __atomic Builtins.  (line  174)
* __atomic_fetch_xor:                    __atomic Builtins.  (line  178)
* __atomic_is_lock_free:                 __atomic Builtins.  (line  244)
* __atomic_load:                         __atomic Builtins.  (line   90)
* __atomic_load_n:                       __atomic Builtins.  (line   83)
* __atomic_nand_fetch:                   __atomic Builtins.  (line  163)
* __atomic_or_fetch:                     __atomic Builtins.  (line  161)
* __atomic_signal_fence:                 __atomic Builtins.  (line  223)
* __atomic_store:                        __atomic Builtins.  (line  103)
* __atomic_store_n:                      __atomic Builtins.  (line   95)
* __atomic_sub_fetch:                    __atomic Builtins.  (line  155)
* __atomic_test_and_set:                 __atomic Builtins.  (line  192)
* __atomic_thread_fence:                 __atomic Builtins.  (line  216)
* __atomic_xor_fetch:                    __atomic Builtins.  (line  159)
* __builtin_add_overflow:                Integer Overflow Builtins.
                                                             (line    9)
* __builtin_apply:                       Constructing Calls. (line   29)
* __builtin_apply_args:                  Constructing Calls. (line   19)
* __builtin_arc_aligned:                 ARC Built-in Functions.
                                                             (line   18)
* __builtin_arc_brk:                     ARC Built-in Functions.
                                                             (line   28)
* __builtin_arc_core_read:               ARC Built-in Functions.
                                                             (line   32)
* __builtin_arc_core_write:              ARC Built-in Functions.
                                                             (line   39)
* __builtin_arc_divaw:                   ARC Built-in Functions.
                                                             (line   46)
* __builtin_arc_flag:                    ARC Built-in Functions.
                                                             (line   53)
* __builtin_arc_lr:                      ARC Built-in Functions.
                                                             (line   57)
* __builtin_arc_mul64:                   ARC Built-in Functions.
                                                             (line   64)
* __builtin_arc_mulu64:                  ARC Built-in Functions.
                                                             (line   68)
* __builtin_arc_nop:                     ARC Built-in Functions.
                                                             (line   73)
* __builtin_arc_norm:                    ARC Built-in Functions.
                                                             (line   77)
* __builtin_arc_normw:                   ARC Built-in Functions.
                                                             (line   84)
* __builtin_arc_rtie:                    ARC Built-in Functions.
                                                             (line   91)
* __builtin_arc_sleep:                   ARC Built-in Functions.
                                                             (line   95)
* __builtin_arc_sr:                      ARC Built-in Functions.
                                                             (line   99)
* __builtin_arc_swap:                    ARC Built-in Functions.
                                                             (line  106)
* __builtin_arc_swi:                     ARC Built-in Functions.
                                                             (line  112)
* __builtin_arc_sync:                    ARC Built-in Functions.
                                                             (line  116)
* __builtin_arc_trap_s:                  ARC Built-in Functions.
                                                             (line  120)
* __builtin_arc_unimp_s:                 ARC Built-in Functions.
                                                             (line  124)
* __builtin_bswap16:                     Other Builtins.     (line  606)
* __builtin_bswap32:                     Other Builtins.     (line  610)
* __builtin_bswap64:                     Other Builtins.     (line  614)
* __builtin_call_with_static_chain:      Other Builtins.     (line    6)
* __builtin_call_with_static_chain <1>:  Other Builtins.     (line  154)
* __builtin_choose_expr:                 Other Builtins.     (line  165)
* __builtin_clrsb:                       Other Builtins.     (line  536)
* __builtin_clrsbl:                      Other Builtins.     (line  558)
* __builtin_clrsbll:                     Other Builtins.     (line  581)
* __builtin_clz:                         Other Builtins.     (line  528)
* __builtin_clzl:                        Other Builtins.     (line  550)
* __builtin_clzll:                       Other Builtins.     (line  573)
* __builtin_complex:                     Other Builtins.     (line  205)
* __builtin_constant_p:                  Other Builtins.     (line  214)
* __builtin_cpu_init:                    x86 Built-in Functions.
                                                             (line   62)
* __builtin_cpu_is:                      x86 Built-in Functions.
                                                             (line   90)
* __builtin_cpu_supports:                x86 Built-in Functions.
                                                             (line  162)
* __builtin_ctz:                         Other Builtins.     (line  532)
* __builtin_ctzl:                        Other Builtins.     (line  554)
* __builtin_ctzll:                       Other Builtins.     (line  577)
* __builtin_expect:                      Other Builtins.     (line  259)
* __builtin_extract_return_addr:         Return Address.     (line   35)
* __builtin_ffs:                         Other Builtins.     (line  524)
* __builtin_ffsl:                        Other Builtins.     (line  547)
* __builtin_ffsll:                       Other Builtins.     (line  569)
* __builtin_FILE:                        Other Builtins.     (line  368)
* __builtin_fpclassify:                  Other Builtins.     (line    6)
* __builtin_fpclassify <1>:              Other Builtins.     (line  438)
* __builtin_frame_address:               Return Address.     (line   47)
* __builtin_frob_return_address:         Return Address.     (line   44)
* __builtin_FUNCTION:                    Other Builtins.     (line  363)
* __builtin_huge_val:                    Other Builtins.     (line  426)
* __builtin_huge_valf:                   Other Builtins.     (line  431)
* __builtin_huge_vall:                   Other Builtins.     (line  434)
* __builtin_huge_valq:                   x86 Built-in Functions.
                                                             (line   57)
* __builtin_inf:                         Other Builtins.     (line  449)
* __builtin_infd128:                     Other Builtins.     (line  459)
* __builtin_infd32:                      Other Builtins.     (line  453)
* __builtin_infd64:                      Other Builtins.     (line  456)
* __builtin_inff:                        Other Builtins.     (line  463)
* __builtin_infl:                        Other Builtins.     (line  468)
* __builtin_infq:                        x86 Built-in Functions.
                                                             (line   54)
* __builtin_isfinite:                    Other Builtins.     (line    6)
* __builtin_isgreater:                   Other Builtins.     (line    6)
* __builtin_isgreaterequal:              Other Builtins.     (line    6)
* __builtin_isinf_sign:                  Other Builtins.     (line    6)
* __builtin_isinf_sign <1>:              Other Builtins.     (line  472)
* __builtin_isless:                      Other Builtins.     (line    6)
* __builtin_islessequal:                 Other Builtins.     (line    6)
* __builtin_islessgreater:               Other Builtins.     (line    6)
* __builtin_isnormal:                    Other Builtins.     (line    6)
* __builtin_isunordered:                 Other Builtins.     (line    6)
* __builtin_LINE:                        Other Builtins.     (line  357)
* __builtin_mul_overflow:                Integer Overflow Builtins.
                                                             (line   60)
* __builtin_nan:                         Other Builtins.     (line  480)
* __builtin_nand128:                     Other Builtins.     (line  502)
* __builtin_nand32:                      Other Builtins.     (line  496)
* __builtin_nand64:                      Other Builtins.     (line  499)
* __builtin_nanf:                        Other Builtins.     (line  506)
* __builtin_nanl:                        Other Builtins.     (line  509)
* __builtin_nans:                        Other Builtins.     (line  513)
* __builtin_nansf:                       Other Builtins.     (line  517)
* __builtin_nansl:                       Other Builtins.     (line  520)
* __builtin_nds32_isb:                   NDS32 Built-in Functions.
                                                             (line   12)
* __builtin_nds32_isync:                 NDS32 Built-in Functions.
                                                             (line    8)
* __builtin_nds32_mfsr:                  NDS32 Built-in Functions.
                                                             (line   15)
* __builtin_nds32_mfusr:                 NDS32 Built-in Functions.
                                                             (line   18)
* __builtin_nds32_mtsr:                  NDS32 Built-in Functions.
                                                             (line   21)
* __builtin_nds32_mtusr:                 NDS32 Built-in Functions.
                                                             (line   24)
* __builtin_nds32_setgie_dis:            NDS32 Built-in Functions.
                                                             (line   30)
* __builtin_nds32_setgie_en:             NDS32 Built-in Functions.
                                                             (line   27)
* __builtin_non_tx_store:                S/390 System z Built-in Functions.
                                                             (line   98)
* __builtin_object_size:                 Object Size Checking.
                                                             (line    6)
* __builtin_object_size <1>:             Object Size Checking.
                                                             (line    9)
* __builtin_offsetof:                    Offsetof.           (line    6)
* __builtin_parity:                      Other Builtins.     (line  544)
* __builtin_parityl:                     Other Builtins.     (line  565)
* __builtin_parityll:                    Other Builtins.     (line  589)
* __builtin_popcount:                    Other Builtins.     (line  541)
* __builtin_popcountl:                   Other Builtins.     (line  561)
* __builtin_popcountll:                  Other Builtins.     (line  585)
* __builtin_powi:                        Other Builtins.     (line    6)
* __builtin_powi <1>:                    Other Builtins.     (line  593)
* __builtin_powif:                       Other Builtins.     (line    6)
* __builtin_powif <1>:                   Other Builtins.     (line  598)
* __builtin_powil:                       Other Builtins.     (line    6)
* __builtin_powil <1>:                   Other Builtins.     (line  602)
* __builtin_prefetch:                    Other Builtins.     (line  387)
* __builtin_return:                      Constructing Calls. (line   47)
* __builtin_return_address:              Return Address.     (line    9)
* __builtin_rx_brk:                      RX Built-in Functions.
                                                             (line   10)
* __builtin_rx_clrpsw:                   RX Built-in Functions.
                                                             (line   13)
* __builtin_rx_int:                      RX Built-in Functions.
                                                             (line   17)
* __builtin_rx_machi:                    RX Built-in Functions.
                                                             (line   21)
* __builtin_rx_maclo:                    RX Built-in Functions.
                                                             (line   26)
* __builtin_rx_mulhi:                    RX Built-in Functions.
                                                             (line   31)
* __builtin_rx_mullo:                    RX Built-in Functions.
                                                             (line   36)
* __builtin_rx_mvfachi:                  RX Built-in Functions.
                                                             (line   41)
* __builtin_rx_mvfacmi:                  RX Built-in Functions.
                                                             (line   45)
* __builtin_rx_mvfc:                     RX Built-in Functions.
                                                             (line   49)
* __builtin_rx_mvtachi:                  RX Built-in Functions.
                                                             (line   53)
* __builtin_rx_mvtaclo:                  RX Built-in Functions.
                                                             (line   57)
* __builtin_rx_mvtc:                     RX Built-in Functions.
                                                             (line   61)
* __builtin_rx_mvtipl:                   RX Built-in Functions.
                                                             (line   65)
* __builtin_rx_racw:                     RX Built-in Functions.
                                                             (line   69)
* __builtin_rx_revw:                     RX Built-in Functions.
                                                             (line   73)
* __builtin_rx_rmpa:                     RX Built-in Functions.
                                                             (line   78)
* __builtin_rx_round:                    RX Built-in Functions.
                                                             (line   82)
* __builtin_rx_sat:                      RX Built-in Functions.
                                                             (line   87)
* __builtin_rx_setpsw:                   RX Built-in Functions.
                                                             (line   91)
* __builtin_rx_wait:                     RX Built-in Functions.
                                                             (line   95)
* __builtin_saddll_overflow:             Integer Overflow Builtins.
                                                             (line   15)
* __builtin_saddl_overflow:              Integer Overflow Builtins.
                                                             (line   13)
* __builtin_sadd_overflow:               Integer Overflow Builtins.
                                                             (line   11)
* __builtin_set_thread_pointer:          SH Built-in Functions.
                                                             (line    9)
* __builtin_sh_get_fpscr:                SH Built-in Functions.
                                                             (line   35)
* __builtin_sh_set_fpscr:                SH Built-in Functions.
                                                             (line   38)
* __builtin_smulll_overflow:             Integer Overflow Builtins.
                                                             (line   66)
* __builtin_smull_overflow:              Integer Overflow Builtins.
                                                             (line   64)
* __builtin_smul_overflow:               Integer Overflow Builtins.
                                                             (line   62)
* __builtin_ssubll_overflow:             Integer Overflow Builtins.
                                                             (line   47)
* __builtin_ssubl_overflow:              Integer Overflow Builtins.
                                                             (line   45)
* __builtin_ssub_overflow:               Integer Overflow Builtins.
                                                             (line   43)
* __builtin_sub_overflow:                Integer Overflow Builtins.
                                                             (line   41)
* __builtin_tabort:                      S/390 System z Built-in Functions.
                                                             (line   82)
* __builtin_tbegin:                      S/390 System z Built-in Functions.
                                                             (line    6)
* __builtin_tbeginc:                     S/390 System z Built-in Functions.
                                                             (line   73)
* __builtin_tbegin_nofloat:              S/390 System z Built-in Functions.
                                                             (line   54)
* __builtin_tbegin_retry:                S/390 System z Built-in Functions.
                                                             (line   60)
* __builtin_tbegin_retry_nofloat:        S/390 System z Built-in Functions.
                                                             (line   67)
* __builtin_tend:                        S/390 System z Built-in Functions.
                                                             (line   77)
* __builtin_thread_pointer:              SH Built-in Functions.
                                                             (line   18)
* __builtin_trap:                        Other Builtins.     (line  283)
* __builtin_tx_assist:                   S/390 System z Built-in Functions.
                                                             (line   87)
* __builtin_tx_nesting_depth:            S/390 System z Built-in Functions.
                                                             (line   93)
* __builtin_types_compatible_p:          Other Builtins.     (line  109)
* __builtin_uaddll_overflow:             Integer Overflow Builtins.
                                                             (line   21)
* __builtin_uaddl_overflow:              Integer Overflow Builtins.
                                                             (line   19)
* __builtin_uadd_overflow:               Integer Overflow Builtins.
                                                             (line   17)
* __builtin_umulll_overflow:             Integer Overflow Builtins.
                                                             (line   72)
* __builtin_umull_overflow:              Integer Overflow Builtins.
                                                             (line   70)
* __builtin_umul_overflow:               Integer Overflow Builtins.
                                                             (line   68)
* __builtin_unreachable:                 Other Builtins.     (line  290)
* __builtin_usubll_overflow:             Integer Overflow Builtins.
                                                             (line   53)
* __builtin_usubl_overflow:              Integer Overflow Builtins.
                                                             (line   51)
* __builtin_usub_overflow:               Integer Overflow Builtins.
                                                             (line   49)
* __builtin_va_arg_pack:                 Constructing Calls. (line   52)
* __builtin_va_arg_pack_len:             Constructing Calls. (line   75)
* __builtin___bnd_chk_ptr_bounds:        Pointer Bounds Checker builtins.
                                                             (line    6)
* __builtin___bnd_chk_ptr_bounds <1>:    Pointer Bounds Checker builtins.
                                                             (line  106)
* __builtin___bnd_chk_ptr_lbounds:       Pointer Bounds Checker builtins.
                                                             (line    6)
* __builtin___bnd_chk_ptr_lbounds <1>:   Pointer Bounds Checker builtins.
                                                             (line   81)
* __builtin___bnd_chk_ptr_ubounds:       Pointer Bounds Checker builtins.
                                                             (line    6)
* __builtin___bnd_chk_ptr_ubounds <1>:   Pointer Bounds Checker builtins.
                                                             (line   99)
* __builtin___bnd_copy_ptr_bounds:       Pointer Bounds Checker builtins.
                                                             (line    6)
* __builtin___bnd_get_ptr_lbound:        Pointer Bounds Checker builtins.
                                                             (line    6)
* __builtin___bnd_get_ptr_ubound:        Pointer Bounds Checker builtins.
                                                             (line    6)
* __builtin___bnd_init_ptr_bounds:       Pointer Bounds Checker builtins.
                                                             (line    6)
* __builtin___bnd_narrow_ptr_bounds:     Pointer Bounds Checker builtins.
                                                             (line    6)
* __builtin___bnd_null_ptr_bounds:       Pointer Bounds Checker builtins.
                                                             (line    6)
* __builtin___bnd_set_ptr_bounds:        Pointer Bounds Checker builtins.
                                                             (line    6)
* __builtin___bnd_store_ptr_bounds:      Pointer Bounds Checker builtins.
                                                             (line    6)
* __builtin___bnd_store_ptr_bounds <1>:  Pointer Bounds Checker builtins.
                                                             (line   72)
* __builtin___clear_cache:               Other Builtins.     (line  374)
* __builtin___fprintf_chk:               Object Size Checking.
                                                             (line    6)
* __builtin___memcpy_chk:                Object Size Checking.
                                                             (line    6)
* __builtin___memmove_chk:               Object Size Checking.
                                                             (line    6)
* __builtin___mempcpy_chk:               Object Size Checking.
                                                             (line    6)
* __builtin___memset_chk:                Object Size Checking.
                                                             (line    6)
* __builtin___printf_chk:                Object Size Checking.
                                                             (line    6)
* __builtin___snprintf_chk:              Object Size Checking.
                                                             (line    6)
* __builtin___sprintf_chk:               Object Size Checking.
                                                             (line    6)
* __builtin___stpcpy_chk:                Object Size Checking.
                                                             (line    6)
* __builtin___strcat_chk:                Object Size Checking.
                                                             (line    6)
* __builtin___strcpy_chk:                Object Size Checking.
                                                             (line    6)
* __builtin___strncat_chk:               Object Size Checking.
                                                             (line    6)
* __builtin___strncpy_chk:               Object Size Checking.
                                                             (line    6)
* __builtin___vfprintf_chk:              Object Size Checking.
                                                             (line    6)
* __builtin___vprintf_chk:               Object Size Checking.
                                                             (line    6)
* __builtin___vsnprintf_chk:             Object Size Checking.
                                                             (line    6)
* __builtin___vsprintf_chk:              Object Size Checking.
                                                             (line    6)
* '__complex__' keyword:                 Complex.            (line    6)
* '__declspec(dllexport)':               Function Attributes.
                                                             (line  283)
* '__declspec(dllimport)':               Function Attributes.
                                                             (line  315)
* '__ea' SPU Named Address Spaces:       Named Address Spaces.
                                                             (line  155)
* __extension__:                         Alternate Keywords. (line   30)
* '__far' M32C Named Address Spaces:     Named Address Spaces.
                                                             (line  138)
* '__far' RL78 Named Address Spaces:     Named Address Spaces.
                                                             (line  147)
* '__flash' AVR Named Address Spaces:    Named Address Spaces.
                                                             (line   31)
* '__flash1' AVR Named Address Spaces:   Named Address Spaces.
                                                             (line   40)
* '__flash2' AVR Named Address Spaces:   Named Address Spaces.
                                                             (line   40)
* '__flash3' AVR Named Address Spaces:   Named Address Spaces.
                                                             (line   40)
* '__flash4' AVR Named Address Spaces:   Named Address Spaces.
                                                             (line   40)
* '__flash5' AVR Named Address Spaces:   Named Address Spaces.
                                                             (line   40)
* '__float128' data type:                Floating Types.     (line    6)
* '__float80' data type:                 Floating Types.     (line    6)
* '__fp16' data type:                    Half-Precision.     (line    6)
* '__FUNCTION__' identifier:             Function Names.     (line    6)
* '__func__' identifier:                 Function Names.     (line    6)
* '__imag__' keyword:                    Complex.            (line   27)
* '__int128' data types:                 __int128.           (line    6)
* '__memx' AVR Named Address Spaces:     Named Address Spaces.
                                                             (line   46)
* '__PRETTY_FUNCTION__' identifier:      Function Names.     (line    6)
* '__real__' keyword:                    Complex.            (line   27)
* __STDC_HOSTED__:                       Standards.          (line   13)
* __sync_add_and_fetch:                  __sync Builtins.    (line   60)
* __sync_and_and_fetch:                  __sync Builtins.    (line   60)
* __sync_bool_compare_and_swap:          __sync Builtins.    (line   71)
* __sync_fetch_and_add:                  __sync Builtins.    (line   44)
* __sync_fetch_and_and:                  __sync Builtins.    (line   44)
* __sync_fetch_and_nand:                 __sync Builtins.    (line   44)
* __sync_fetch_and_or:                   __sync Builtins.    (line   44)
* __sync_fetch_and_sub:                  __sync Builtins.    (line   44)
* __sync_fetch_and_xor:                  __sync Builtins.    (line   44)
* __sync_lock_release:                   __sync Builtins.    (line  101)
* __sync_lock_test_and_set:              __sync Builtins.    (line   83)
* __sync_nand_and_fetch:                 __sync Builtins.    (line   60)
* __sync_or_and_fetch:                   __sync Builtins.    (line   60)
* __sync_sub_and_fetch:                  __sync Builtins.    (line   60)
* __sync_synchronize:                    __sync Builtins.    (line   80)
* __sync_val_compare_and_swap:           __sync Builtins.    (line   71)
* __sync_xor_and_fetch:                  __sync Builtins.    (line   60)
* '__thread':                            Thread-Local.       (line    6)
* AAP Options:                           AAP Options.        (line    6)
* AArch64 Options:                       AArch64 Options.    (line    6)
* ABI:                                   Compatibility.      (line    6)
* 'abi_tag' attribute:                   C++ Attributes.     (line    9)
* abort:                                 Other Builtins.     (line    6)
* abs:                                   Other Builtins.     (line    6)
* accessing volatiles:                   Volatiles.          (line    6)
* accessing volatiles <1>:               C++ Volatiles.      (line    6)
* acos:                                  Other Builtins.     (line    6)
* acosf:                                 Other Builtins.     (line    6)
* acosh:                                 Other Builtins.     (line    6)
* acoshf:                                Other Builtins.     (line    6)
* acoshl:                                Other Builtins.     (line    6)
* acosl:                                 Other Builtins.     (line    6)
* Ada:                                   Clang and LLVM.     (line   24)
* Adapteva Epiphany Options:             Adapteva Epiphany Options.
                                                             (line    6)
* additional floating types:             Floating Types.     (line    6)
* address constraints:                   Simple Constraints. (line  152)
* address of a label:                    Labels as Values.   (line    6)
* address_operand:                       Simple Constraints. (line  156)
* 'alias' attribute:                     Function Attributes.
                                                             (line   40)
* 'aligned' attribute:                   Function Attributes.
                                                             (line   53)
* 'aligned' attribute <1>:               Variable Attributes.
                                                             (line   24)
* 'aligned' attribute <2>:               Type Attributes.    (line   32)
* alignment:                             Alignment.          (line    6)
* alloca:                                Other Builtins.     (line    6)
* 'alloca' vs variable-length arrays:    Variable Length.    (line   35)
* 'alloc_align' attribute:               Function Attributes.
                                                             (line   94)
* 'alloc_size' attribute:                Function Attributes.
                                                             (line   73)
* Allow nesting in an interrupt handler on the Blackfin processor.: Function Attributes.
                                                             (line 1069)
* alternate keywords:                    Alternate Keywords. (line    6)
* 'always_inline' function attribute:    Function Attributes.
                                                             (line  126)
* AMD1:                                  Standards.          (line   13)
* ANSI C:                                Standards.          (line   13)
* ANSI C standard:                       Standards.          (line   13)
* ANSI C89:                              Standards.          (line   13)
* ANSI support:                          C Dialect Options.  (line   16)
* ANSI X3.159-1989:                      Standards.          (line   13)
* apostrophes:                           Incompatibilities.  (line  116)
* application binary interface:          Compatibility.      (line    6)
* ARC Options:                           ARC Options.        (line    6)
* ARM Options:                           ARM Options.        (line    6)
* ARM [Annotated C++ Reference Manual]:  Backwards Compatibility.
                                                             (line    6)
* arrays of length zero:                 Zero Length.        (line    6)
* arrays of variable length:             Variable Length.    (line    6)
* arrays, non-lvalue:                    Subscripting.       (line    6)
* 'artificial' function attribute:       Function Attributes.
                                                             (line  172)
* asin:                                  Other Builtins.     (line    6)
* asinf:                                 Other Builtins.     (line    6)
* asinh:                                 Other Builtins.     (line    6)
* asinhf:                                Other Builtins.     (line    6)
* asinhl:                                Other Builtins.     (line    6)
* asinl:                                 Other Builtins.     (line    6)
* 'asm' assembler template:              Extended Asm.       (line  218)
* 'asm' clobbers:                        Extended Asm.       (line  575)
* 'asm' constraints:                     Constraints.        (line    6)
* 'asm' expressions:                     Extended Asm.       (line  480)
* 'asm' goto labels:                     Extended Asm.       (line  644)
* 'asm' input operands:                  Extended Asm.       (line  480)
* 'asm' keyword:                         Using Assembly Language with C.
                                                             (line    6)
* 'asm' output operands:                 Extended Asm.       (line  321)
* 'asm' volatile:                        Extended Asm.       (line  109)
* assembler names for identifiers:       Asm Labels.         (line    6)
* assembly code, invalid:                Bug Criteria.       (line   12)
* assembly language in C:                Using Assembly Language with C.
                                                             (line    6)
* assembly language in C, basic:         Basic Asm.          (line    6)
* assembly language in C, extended:      Extended Asm.       (line    6)
* 'assume_aligned' attribute:            Function Attributes.
                                                             (line  111)
* atan:                                  Other Builtins.     (line    6)
* atan2:                                 Other Builtins.     (line    6)
* atan2f:                                Other Builtins.     (line    6)
* atan2l:                                Other Builtins.     (line    6)
* atanf:                                 Other Builtins.     (line    6)
* atanh:                                 Other Builtins.     (line    6)
* atanhf:                                Other Builtins.     (line    6)
* atanhl:                                Other Builtins.     (line    6)
* atanl:                                 Other Builtins.     (line    6)
* attribute of types:                    Type Attributes.    (line    6)
* attribute of variables:                Variable Attributes.
                                                             (line    6)
* attribute syntax:                      Attribute Syntax.   (line    6)
* autoincrement/decrement addressing:    Simple Constraints. (line   30)
* automatic 'inline' for C++ member fns: Inline.             (line   71)
* AVR Options:                           AVR Options.        (line    6)
* Backwards Compatibility:               Backwards Compatibility.
                                                             (line    6)
* base class members:                    Name lookup.        (line    6)
* basic 'asm':                           Basic Asm.          (line    6)
* bcmp:                                  Other Builtins.     (line    6)
* 'below100' attribute:                  Variable Attributes.
                                                             (line  611)
* binary compatibility:                  Compatibility.      (line    6)
* Binary constants using the '0b' prefix: Binary constants.  (line    6)
* Blackfin Options:                      Blackfin Options.   (line    6)
* 'bnd_instrument' function attribute:   Function Attributes.
                                                             (line 1339)
* 'bnd_legacy' function attribute:       Function Attributes.
                                                             (line 1334)
* bound pointer to member function:      Bound member functions.
                                                             (line    6)
* break handler functions:               Function Attributes.
                                                             (line 1427)
* bug criteria:                          Bug Criteria.       (line    6)
* bugs:                                  Bugs.               (line    6)
* bugs, known:                           Trouble.            (line    6)
* built-in functions:                    C Dialect Options.  (line   73)
* built-in functions <1>:                Other Builtins.     (line    6)
* bzero:                                 Other Builtins.     (line    6)
* C:                                     Clang and LLVM.     (line    6)
* C compilation options:                 Invoking LLVM.      (line   30)
* C intermediate output, nonexistent:    Clang and LLVM.     (line   37)
* C language extensions:                 C Extensions.       (line    6)
* C language, traditional:               C Dialect Options.  (line  325)
* C standard:                            Standards.          (line   13)
* C standards:                           Standards.          (line   13)
* C++:                                   Clang and LLVM.     (line    6)
* C++ comments:                          C++ Comments.       (line    6)
* C++ compilation options:               Invoking LLVM.      (line   36)
* C++ interface and implementation headers: C++ Interface.   (line    6)
* C++ language extensions:               C++ Extensions.     (line    6)
* C++ member fns, automatically 'inline': Inline.            (line   71)
* C++ misunderstandings:                 C++ Misunderstandings.
                                                             (line    6)
* C++ options, command-line:             C++ Dialect Options.
                                                             (line    6)
* C++ pragmas, effect on inlining:       C++ Interface.      (line   57)
* C++ source file suffixes:              Invoking Clang/LLVM for C++.
                                                             (line    6)
* C++ static data, declaring and defining: Static Definitions.
                                                             (line    6)
* C11:                                   Standards.          (line   13)
* C1X:                                   Standards.          (line   13)
* C6X Options:                           C6X Options.        (line    6)
* C89:                                   Standards.          (line   13)
* C90:                                   Standards.          (line   13)
* C94:                                   Standards.          (line   13)
* C95:                                   Standards.          (line   13)
* C99:                                   Standards.          (line   13)
* C9X:                                   Standards.          (line   13)
* cabs:                                  Other Builtins.     (line    6)
* cabsf:                                 Other Builtins.     (line    6)
* cabsl:                                 Other Builtins.     (line    6)
* cacos:                                 Other Builtins.     (line    6)
* cacosf:                                Other Builtins.     (line    6)
* cacosh:                                Other Builtins.     (line    6)
* cacoshf:                               Other Builtins.     (line    6)
* cacoshl:                               Other Builtins.     (line    6)
* cacosl:                                Other Builtins.     (line    6)
* 'callee_pop_aggregate_return' attribute: Function Attributes.
                                                             (line 1016)
* calling functions through the function vector on H8/300, M16C, M32C and SH2A processors: Function Attributes.
                                                             (line  555)
* calloc:                                Other Builtins.     (line    6)
* caret:                                 Multi-Alternative.  (line   38)
* caret GCC_COLORS capability:           Diagnostic Message Formatting Options.
                                                             (line   70)
* carg:                                  Other Builtins.     (line    6)
* cargf:                                 Other Builtins.     (line    6)
* cargl:                                 Other Builtins.     (line    6)
* case labels in initializers:           Designated Inits.   (line    6)
* case ranges:                           Case Ranges.        (line    6)
* casin:                                 Other Builtins.     (line    6)
* casinf:                                Other Builtins.     (line    6)
* casinh:                                Other Builtins.     (line    6)
* casinhf:                               Other Builtins.     (line    6)
* casinhl:                               Other Builtins.     (line    6)
* casinl:                                Other Builtins.     (line    6)
* cast to a union:                       Cast to Union.      (line    6)
* catan:                                 Other Builtins.     (line    6)
* catanf:                                Other Builtins.     (line    6)
* catanh:                                Other Builtins.     (line    6)
* catanhf:                               Other Builtins.     (line    6)
* catanhl:                               Other Builtins.     (line    6)
* catanl:                                Other Builtins.     (line    6)
* cbrt:                                  Other Builtins.     (line    6)
* cbrtf:                                 Other Builtins.     (line    6)
* cbrtl:                                 Other Builtins.     (line    6)
* ccos:                                  Other Builtins.     (line    6)
* ccosf:                                 Other Builtins.     (line    6)
* ccosh:                                 Other Builtins.     (line    6)
* ccoshf:                                Other Builtins.     (line    6)
* ccoshl:                                Other Builtins.     (line    6)
* ccosl:                                 Other Builtins.     (line    6)
* ceil:                                  Other Builtins.     (line    6)
* ceilf:                                 Other Builtins.     (line    6)
* ceill:                                 Other Builtins.     (line    6)
* cexp:                                  Other Builtins.     (line    6)
* cexpf:                                 Other Builtins.     (line    6)
* cexpl:                                 Other Builtins.     (line    6)
* character set, execution:              Preprocessor Options.
                                                             (line  105)
* character set, input:                  Preprocessor Options.
                                                             (line  114)
* cimag:                                 Other Builtins.     (line    6)
* cimagf:                                Other Builtins.     (line    6)
* cimagl:                                Other Builtins.     (line    6)
* Clang:                                 Clang and LLVM.     (line    6)
* clang++:                               Invoking Clang/LLVM for C++.
                                                             (line   13)
* Clang/LLVM command options:            Invoking LLVM.      (line    6)
* 'cleanup' attribute:                   Variable Attributes.
                                                             (line   90)
* clog:                                  Other Builtins.     (line    6)
* clogf:                                 Other Builtins.     (line    6)
* clogl:                                 Other Builtins.     (line    6)
* code generation conventions:           Code Gen Options.   (line    6)
* code, mixed with declarations:         Mixed Declarations. (line    6)
* 'cold' function attribute:             Function Attributes.
                                                             (line 1298)
* 'cold' label attribute:                Label Attributes.   (line   43)
* command options:                       Invoking LLVM.      (line    6)
* comments, C++ style:                   C++ Comments.       (line    6)
* 'common' attribute:                    Variable Attributes.
                                                             (line  105)
* comparison of signed and unsigned values, warning: Warning Options.
                                                             (line 1628)
* compilation statistics:                Developer Options.  (line    6)
* compiler bugs, reporting:              Bug Reporting.      (line    6)
* compiler compared to C++ preprocessor: Clang and LLVM.     (line   37)
* compiler options, C++:                 C++ Dialect Options.
                                                             (line    6)
* compiler options, Objective-C and Objective-C++: Objective-C and Objective-C++ Dialect Options.
                                                             (line    6)
* COMPILER_PATH:                         Environment Variables.
                                                             (line   86)
* complex conjugation:                   Complex.            (line   34)
* complex numbers:                       Complex.            (line    6)
* compound literals:                     Compound Literals.  (line    6)
* computed gotos:                        Labels as Values.   (line    6)
* conditional expressions, extensions:   Conditionals.       (line    6)
* conflicting types:                     Disappointments.    (line   21)
* conj:                                  Other Builtins.     (line    6)
* conjf:                                 Other Builtins.     (line    6)
* conjl:                                 Other Builtins.     (line    6)
* 'const' applied to function:           Function Attributes.
                                                             (line    6)
* 'const' function attribute:            Function Attributes.
                                                             (line  221)
* const qualifier:                       Pointers to Arrays. (line    6)
* constants in constraints:              Simple Constraints. (line   68)
* constraint modifier characters:        Modifiers.          (line    6)
* constraint, matching:                  Simple Constraints. (line  137)
* constraints, 'asm':                    Constraints.        (line    6)
* constraints, machine specific:         Machine Constraints.
                                                             (line    6)
* constructing calls:                    Constructing Calls. (line    6)
* constructor expressions:               Compound Literals.  (line    6)
* 'constructor' function attribute:      Function Attributes.
                                                             (line  236)
* contributors:                          Contributors.       (line    6)
* copysign:                              Other Builtins.     (line    6)
* copysignf:                             Other Builtins.     (line    6)
* copysignl:                             Other Builtins.     (line    6)
* core dump:                             Bug Criteria.       (line    9)
* cos:                                   Other Builtins.     (line    6)
* cosf:                                  Other Builtins.     (line    6)
* cosh:                                  Other Builtins.     (line    6)
* coshf:                                 Other Builtins.     (line    6)
* coshl:                                 Other Builtins.     (line    6)
* cosl:                                  Other Builtins.     (line    6)
* CPATH:                                 Environment Variables.
                                                             (line  122)
* CPLUS_INCLUDE_PATH:                    Environment Variables.
                                                             (line  124)
* cpow:                                  Other Builtins.     (line    6)
* cpowf:                                 Other Builtins.     (line    6)
* cpowl:                                 Other Builtins.     (line    6)
* cproj:                                 Other Builtins.     (line    6)
* cprojf:                                Other Builtins.     (line    6)
* cprojl:                                Other Builtins.     (line    6)
* CR16 Options:                          CR16 Options.       (line    6)
* creal:                                 Other Builtins.     (line    6)
* crealf:                                Other Builtins.     (line    6)
* creall:                                Other Builtins.     (line    6)
* CRIS Options:                          CRIS Options.       (line    6)
* 'critical' attribute:                  Function Attributes.
                                                             (line  708)
* csin:                                  Other Builtins.     (line    6)
* csinf:                                 Other Builtins.     (line    6)
* csinh:                                 Other Builtins.     (line    6)
* csinhf:                                Other Builtins.     (line    6)
* csinhl:                                Other Builtins.     (line    6)
* csinl:                                 Other Builtins.     (line    6)
* csqrt:                                 Other Builtins.     (line    6)
* csqrtf:                                Other Builtins.     (line    6)
* csqrtl:                                Other Builtins.     (line    6)
* ctan:                                  Other Builtins.     (line    6)
* ctanf:                                 Other Builtins.     (line    6)
* ctanh:                                 Other Builtins.     (line    6)
* ctanhf:                                Other Builtins.     (line    6)
* ctanhl:                                Other Builtins.     (line    6)
* ctanl:                                 Other Builtins.     (line    6)
* CUDA:                                  Standards.          (line  229)
* C_INCLUDE_PATH:                        Environment Variables.
                                                             (line  123)
* D:                                     Clang and LLVM.     (line   24)
* Darwin Options:                        Darwin Options.     (line    6)
* dcgettext:                             Other Builtins.     (line    6)
* 'dd' integer suffix:                   Decimal Float.      (line    6)
* 'DD' integer suffix:                   Decimal Float.      (line    6)
* deallocating variable length arrays:   Variable Length.    (line   22)
* debug dump options:                    Developer Options.  (line    6)
* debugging GCC:                         Developer Options.  (line    6)
* debugging information options:         Debugging Options.  (line    6)
* DEC Alpha Options:                     DEC Alpha Options.  (line    6)
* decimal floating types:                Decimal Float.      (line    6)
* declaration scope:                     Incompatibilities.  (line   80)
* declarations inside expressions:       Statement Exprs.    (line    6)
* declarations, mixed with code:         Mixed Declarations. (line    6)
* declaring attributes of functions:     Function Attributes.
                                                             (line    6)
* declaring static data in C++:          Static Definitions. (line    6)
* defining static data in C++:           Static Definitions. (line    6)
* dependencies for make as output:       Environment Variables.
                                                             (line  150)
* dependencies for make as output <1>:   Environment Variables.
                                                             (line  166)
* dependencies, 'make':                  Preprocessor Options.
                                                             (line  227)
* DEPENDENCIES_OUTPUT:                   Environment Variables.
                                                             (line  149)
* dependent name lookup:                 Name lookup.        (line    6)
* 'deprecated' attribute:                Variable Attributes.
                                                             (line  114)
* 'deprecated' attribute.:               Function Attributes.
                                                             (line  258)
* designated initializers:               Designated Inits.   (line    6)
* designator lists:                      Designated Inits.   (line   96)
* designators:                           Designated Inits.   (line   64)
* 'destructor' function attribute:       Function Attributes.
                                                             (line  236)
* developer options:                     Developer Options.  (line    6)
* 'df' integer suffix:                   Decimal Float.      (line    6)
* 'DF' integer suffix:                   Decimal Float.      (line    6)
* dgettext:                              Other Builtins.     (line    6)
* diagnostic messages:                   Diagnostic Message Formatting Options.
                                                             (line    6)
* dialect options:                       C Dialect Options.  (line    6)
* digits in constraint:                  Simple Constraints. (line  125)
* directory options:                     Directory Options.  (line    6)
* 'disinterrupt' attribute:              Function Attributes.
                                                             (line  278)
* 'dl' integer suffix:                   Decimal Float.      (line    6)
* 'DL' integer suffix:                   Decimal Float.      (line    6)
* dollar sign:                           Multi-Alternative.  (line   42)
* dollar signs in identifier names:      Dollar Signs.       (line    6)
* double-word arithmetic:                Long Long.          (line    6)
* downward funargs:                      Nested Functions.   (line    6)
* drem:                                  Other Builtins.     (line    6)
* dremf:                                 Other Builtins.     (line    6)
* dreml:                                 Other Builtins.     (line    6)
* dump options:                          Developer Options.  (line    6)
* 'E' in constraint:                     Simple Constraints. (line   87)
* earlyclobber operand:                  Modifiers.          (line   25)
* eight-bit data on the H8/300, H8/300H, and H8S: Function Attributes.
                                                             (line  366)
* empty structures:                      Empty Structures.   (line    6)
* environment variables:                 Environment Variables.
                                                             (line    6)
* erf:                                   Other Builtins.     (line    6)
* erfc:                                  Other Builtins.     (line    6)
* erfcf:                                 Other Builtins.     (line    6)
* erfcl:                                 Other Builtins.     (line    6)
* erff:                                  Other Builtins.     (line    6)
* erfl:                                  Other Builtins.     (line    6)
* 'error' function attribute:            Function Attributes.
                                                             (line  191)
* error GCC_COLORS capability:           Diagnostic Message Formatting Options.
                                                             (line   61)
* error messages:                        Warnings and Errors.
                                                             (line    6)
* escaped newlines:                      Escaped Newlines.   (line    6)
* exception handler functions:           Function Attributes.
                                                             (line  376)
* exception handler functions on the Blackfin processor: Function Attributes.
                                                             (line  381)
* exclamation point:                     Multi-Alternative.  (line   33)
* exit:                                  Other Builtins.     (line    6)
* exp:                                   Other Builtins.     (line    6)
* exp10:                                 Other Builtins.     (line    6)
* exp10f:                                Other Builtins.     (line    6)
* exp10l:                                Other Builtins.     (line    6)
* exp2:                                  Other Builtins.     (line    6)
* exp2f:                                 Other Builtins.     (line    6)
* exp2l:                                 Other Builtins.     (line    6)
* expf:                                  Other Builtins.     (line    6)
* expl:                                  Other Builtins.     (line    6)
* explicit register variables:           Explicit Reg Vars.  (line    6)
* expm1:                                 Other Builtins.     (line    6)
* expm1f:                                Other Builtins.     (line    6)
* expm1l:                                Other Builtins.     (line    6)
* expressions containing statements:     Statement Exprs.    (line    6)
* expressions, constructor:              Compound Literals.  (line    6)
* extended 'asm':                        Extended Asm.       (line    6)
* extensible constraints:                Simple Constraints. (line  161)
* extensions, '?:':                      Conditionals.       (line    6)
* extensions, C language:                C Extensions.       (line    6)
* extensions, C++ language:              C++ Extensions.     (line    6)
* external declaration scope:            Incompatibilities.  (line   80)
* 'externally_visible' attribute.:       Function Attributes.
                                                             (line  387)
* 'F' in constraint:                     Simple Constraints. (line   92)
* fabs:                                  Other Builtins.     (line    6)
* fabsf:                                 Other Builtins.     (line    6)
* fabsl:                                 Other Builtins.     (line    6)
* fatal signal:                          Bug Criteria.       (line    9)
* fdim:                                  Other Builtins.     (line    6)
* fdimf:                                 Other Builtins.     (line    6)
* fdiml:                                 Other Builtins.     (line    6)
* FDL, GNU Free Documentation License:   GNU Free Documentation License.
                                                             (line    6)
* ffs:                                   Other Builtins.     (line    6)
* file name suffix:                      Overall Options.    (line   20)
* file names:                            Link Options.       (line   16)
* fixed-point types:                     Fixed-Point.        (line    6)
* 'flatten' function attribute:          Function Attributes.
                                                             (line  184)
* flexible array members:                Zero Length.        (line    6)
* 'float' as function value type:        Incompatibilities.  (line  141)
* floating point precision:              Disappointments.    (line   68)
* floor:                                 Other Builtins.     (line    6)
* floorf:                                Other Builtins.     (line    6)
* floorl:                                Other Builtins.     (line    6)
* fma:                                   Other Builtins.     (line    6)
* fmaf:                                  Other Builtins.     (line    6)
* fmal:                                  Other Builtins.     (line    6)
* fmax:                                  Other Builtins.     (line    6)
* fmaxf:                                 Other Builtins.     (line    6)
* fmaxl:                                 Other Builtins.     (line    6)
* fmin:                                  Other Builtins.     (line    6)
* fminf:                                 Other Builtins.     (line    6)
* fminl:                                 Other Builtins.     (line    6)
* fmod:                                  Other Builtins.     (line    6)
* fmodf:                                 Other Builtins.     (line    6)
* fmodl:                                 Other Builtins.     (line    6)
* 'force_align_arg_pointer' attribute:   Function Attributes.
                                                             (line 1379)
* 'format' function attribute:           Function Attributes.
                                                             (line  444)
* 'format_arg' function attribute:       Function Attributes.
                                                             (line  509)
* Fortran:                               Clang and LLVM.     (line   24)
* 'forwarder_section' attribute:         Function Attributes.
                                                             (line  747)
* forwarding calls:                      Constructing Calls. (line    6)
* fprintf:                               Other Builtins.     (line    6)
* fprintf_unlocked:                      Other Builtins.     (line    6)
* fputs:                                 Other Builtins.     (line    6)
* fputs_unlocked:                        Other Builtins.     (line    6)
* FR30 Options:                          FR30 Options.       (line    6)
* freestanding environment:              Standards.          (line   13)
* freestanding implementation:           Standards.          (line   13)
* frexp:                                 Other Builtins.     (line    6)
* frexpf:                                Other Builtins.     (line    6)
* frexpl:                                Other Builtins.     (line    6)
* FRV Options:                           FRV Options.        (line    6)
* fscanf:                                Other Builtins.     (line    6)
* 'fscanf', and constant strings:        Incompatibilities.  (line   17)
* FT32 Options:                          FT32 Options.       (line    6)
* function addressability on the M32R/D: Function Attributes.
                                                             (line  974)
* function attributes:                   Function Attributes.
                                                             (line    6)
* function pointers, arithmetic:         Pointer Arith.      (line    6)
* function prototype declarations:       Function Prototypes.
                                                             (line    6)
* function versions:                     Function Multiversioning.
                                                             (line    6)
* function without a prologue/epilogue code: Function Attributes.
                                                             (line 1048)
* function, size of pointer to:          Pointer Arith.      (line    6)
* functions called via pointer on the RS/6000 and PowerPC: Function Attributes.
                                                             (line  908)
* functions in arbitrary sections:       Function Attributes.
                                                             (line    6)
* functions that are dynamically resolved: Function Attributes.
                                                             (line    6)
* functions that are passed arguments in registers on x86-32: Function Attributes.
                                                             (line    6)
* functions that are passed arguments in registers on x86-32 <1>: Function Attributes.
                                                             (line 1344)
* functions that behave like malloc:     Function Attributes.
                                                             (line    6)
* functions that do not handle memory bank switching on 68HC11/68HC12: Function Attributes.
                                                             (line 1059)
* functions that do not pop the argument stack on x86-32: Function Attributes.
                                                             (line    6)
* functions that do pop the argument stack on x86-32: Function Attributes.
                                                             (line  215)
* functions that handle memory bank switching: Function Attributes.
                                                             (line  400)
* functions that have different compilation options on x86-32: Function Attributes.
                                                             (line    6)
* functions that have different optimization options: Function Attributes.
                                                             (line    6)
* functions that have no side effects:   Function Attributes.
                                                             (line    6)
* functions that never return:           Function Attributes.
                                                             (line    6)
* functions that pop the argument stack on x86-32: Function Attributes.
                                                             (line    6)
* functions that pop the argument stack on x86-32 <1>: Function Attributes.
                                                             (line  426)
* functions that pop the argument stack on x86-32 <2>: Function Attributes.
                                                             (line  434)
* functions that pop the argument stack on x86-32 <3>: Function Attributes.
                                                             (line 1511)
* functions that return more than once:  Function Attributes.
                                                             (line    6)
* functions with non-null pointer arguments: Function Attributes.
                                                             (line    6)
* functions with 'printf', 'scanf', 'strftime' or 'strfmon' style arguments: Function Attributes.
                                                             (line    6)
* 'G' in constraint:                     Simple Constraints. (line   96)
* 'g' in constraint:                     Simple Constraints. (line  118)
* gamma:                                 Other Builtins.     (line    6)
* gammaf:                                Other Builtins.     (line    6)
* gammaf_r:                              Other Builtins.     (line    6)
* gammal:                                Other Builtins.     (line    6)
* gammal_r:                              Other Builtins.     (line    6)
* gamma_r:                               Other Builtins.     (line    6)
* GCC_COLORS environment variable:       Diagnostic Message Formatting Options.
                                                             (line   27)
* GCC_EXEC_PREFIX:                       Environment Variables.
                                                             (line   54)
* 'gcc_struct':                          Type Attributes.    (line  390)
* 'gcc_struct' attribute:                Variable Attributes.
                                                             (line  490)
* 'gcov':                                Instrumentation Options.
                                                             (line   29)
* generic options to control warnings:   Warning Options.    (line    6)
* generic warning messages:              Warning Options.    (line    6)
* gettext:                               Other Builtins.     (line    6)
* global offset table:                   Code Gen Options.   (line  108)
* global register after 'longjmp':       Global Reg Vars.    (line   65)
* global register variables:             Global Reg Vars.    (line    6)
* GNAT:                                  Clang and LLVM.     (line   24)
* GNU/Linux Options:                     GNU/Linux Options.  (line    6)
* 'gnu_inline' function attribute:       Function Attributes.
                                                             (line  136)
* goto with computed label:              Labels as Values.   (line    6)
* 'gprof':                               Instrumentation Options.
                                                             (line  556)
* grouping options:                      Invoking LLVM.      (line   39)
* 'H' in constraint:                     Simple Constraints. (line   96)
* H8/300 Options:                        H8/300 Options.     (line    6)
* half-precision floating point:         Half-Precision.     (line    6)
* hardware models and configurations, specifying: Submodel Options.
                                                             (line    6)
* hex floats:                            Hex Floats.         (line    6)
* highlight, color, colour:              Diagnostic Message Formatting Options.
                                                             (line   27)
* 'hk' fixed-suffix:                     Fixed-Point.        (line    6)
* 'HK' fixed-suffix:                     Fixed-Point.        (line    6)
* hosted environment:                    Standards.          (line   13)
* hosted environment <1>:                C Dialect Options.  (line  111)
* hosted environment <2>:                C Dialect Options.  (line  142)
* hosted implementation:                 Standards.          (line   13)
* 'hot' function attribute:              Function Attributes.
                                                             (line 1288)
* 'hot' label attribute:                 Label Attributes.   (line   36)
* 'hotpatch' attribute:                  Function Attributes.
                                                             (line 1035)
* HPPA Options:                          HPPA Options.       (line    6)
* 'hr' fixed-suffix:                     Fixed-Point.        (line    6)
* 'HR' fixed-suffix:                     Fixed-Point.        (line    6)
* hypot:                                 Other Builtins.     (line    6)
* hypotf:                                Other Builtins.     (line    6)
* hypotl:                                Other Builtins.     (line    6)
* 'i' in constraint:                     Simple Constraints. (line   68)
* 'I' in constraint:                     Simple Constraints. (line   79)
* IA-64 Options:                         IA-64 Options.      (line    6)
* identifier names, dollar signs in:     Dollar Signs.       (line    6)
* identifiers, names in assembler code:  Asm Labels.         (line    6)
* 'ifunc' attribute:                     Function Attributes.
                                                             (line  616)
* ilogb:                                 Other Builtins.     (line    6)
* ilogbf:                                Other Builtins.     (line    6)
* ilogbl:                                Other Builtins.     (line    6)
* imaxabs:                               Other Builtins.     (line    6)
* implementation-defined behavior, C language: C Implementation.
                                                             (line    6)
* implementation-defined behavior, C++ language: C++ Implementation.
                                                             (line    6)
* implied '#pragma implementation':      C++ Interface.      (line   43)
* incompatibilities of GCC:              Incompatibilities.  (line    6)
* increment operators:                   Bug Criteria.       (line   17)
* index:                                 Other Builtins.     (line    6)
* indirect calls on ARC:                 Function Attributes.
                                                             (line  897)
* indirect calls on ARM:                 Function Attributes.
                                                             (line  897)
* indirect calls on Epiphany:            Function Attributes.
                                                             (line  897)
* indirect calls on MIPS:                Function Attributes.
                                                             (line  920)
* initializations in expressions:        Compound Literals.  (line    6)
* initializers with labeled elements:    Designated Inits.   (line    6)
* initializers, non-constant:            Initializers.       (line    6)
* 'init_priority' attribute:             C++ Attributes.     (line   35)
* inline assembly language:              Using Assembly Language with C.
                                                             (line    6)
* 'inline' automatic for C++ member fns: Inline.             (line   71)
* inline functions:                      Inline.             (line    6)
* inline functions, omission of:         Inline.             (line   51)
* inlining and C++ pragmas:              C++ Interface.      (line   57)
* installation trouble:                  Trouble.            (line    6)
* instrumentation options:               Instrumentation Options.
                                                             (line    6)
* integrating function code:             Inline.             (line    6)
* interface and implementation headers, C++: C++ Interface.  (line    6)
* intermediate C version, nonexistent:   Clang and LLVM.     (line   37)
* interrupt handler functions:           Function Attributes.
                                                             (line  179)
* interrupt handler functions <1>:       Function Attributes.
                                                             (line  420)
* interrupt handler functions <2>:       Function Attributes.
                                                             (line  656)
* interrupt handler functions on the AVR processors: Function Attributes.
                                                             (line 1483)
* interrupt handler functions on the Blackfin, m68k, H8/300 and SH processors: Function Attributes.
                                                             (line  835)
* interrupt service routines on ARM:     Function Attributes.
                                                             (line  849)
* interrupt thread functions on fido:    Function Attributes.
                                                             (line  841)
* introduction:                          Top.                (line    6)
* invalid assembly code:                 Bug Criteria.       (line   12)
* invalid input:                         Bug Criteria.       (line   42)
* invoking 'clang++':                    Invoking Clang/LLVM for C++.
                                                             (line   21)
* isalnum:                               Other Builtins.     (line    6)
* isalpha:                               Other Builtins.     (line    6)
* isascii:                               Other Builtins.     (line    6)
* isblank:                               Other Builtins.     (line    6)
* iscntrl:                               Other Builtins.     (line    6)
* isdigit:                               Other Builtins.     (line    6)
* isgraph:                               Other Builtins.     (line    6)
* islower:                               Other Builtins.     (line    6)
* ISO 9899:                              Standards.          (line   13)
* ISO C:                                 Standards.          (line   13)
* ISO C standard:                        Standards.          (line   13)
* ISO C11:                               Standards.          (line   13)
* ISO C1X:                               Standards.          (line   13)
* ISO C90:                               Standards.          (line   13)
* ISO C94:                               Standards.          (line   13)
* ISO C95:                               Standards.          (line   13)
* ISO C99:                               Standards.          (line   13)
* ISO C9X:                               Standards.          (line   13)
* ISO support:                           C Dialect Options.  (line   16)
* ISO/IEC 9899:                          Standards.          (line   13)
* isprint:                               Other Builtins.     (line    6)
* ispunct:                               Other Builtins.     (line    6)
* isspace:                               Other Builtins.     (line    6)
* isupper:                               Other Builtins.     (line    6)
* iswalnum:                              Other Builtins.     (line    6)
* iswalpha:                              Other Builtins.     (line    6)
* iswblank:                              Other Builtins.     (line    6)
* iswcntrl:                              Other Builtins.     (line    6)
* iswdigit:                              Other Builtins.     (line    6)
* iswgraph:                              Other Builtins.     (line    6)
* iswlower:                              Other Builtins.     (line    6)
* iswprint:                              Other Builtins.     (line    6)
* iswpunct:                              Other Builtins.     (line    6)
* iswspace:                              Other Builtins.     (line    6)
* iswupper:                              Other Builtins.     (line    6)
* iswxdigit:                             Other Builtins.     (line    6)
* isxdigit:                              Other Builtins.     (line    6)
* j0:                                    Other Builtins.     (line    6)
* j0f:                                   Other Builtins.     (line    6)
* j0l:                                   Other Builtins.     (line    6)
* j1:                                    Other Builtins.     (line    6)
* j1f:                                   Other Builtins.     (line    6)
* j1l:                                   Other Builtins.     (line    6)
* 'java_interface' attribute:            C++ Attributes.     (line   56)
* jn:                                    Other Builtins.     (line    6)
* jnf:                                   Other Builtins.     (line    6)
* jnl:                                   Other Builtins.     (line    6)
* 'k' fixed-suffix:                      Fixed-Point.        (line    6)
* 'K' fixed-suffix:                      Fixed-Point.        (line    6)
* K&R C:                                 Standards.          (line   13)
* 'keep_interrupts_masked' attribute:    Function Attributes.
                                                             (line  769)
* keywords, alternate:                   Alternate Keywords. (line    6)
* known causes of trouble:               Trouble.            (line    6)
* 'l1_data' variable attribute:          Variable Attributes.
                                                             (line  385)
* 'l1_data_A' variable attribute:        Variable Attributes.
                                                             (line  385)
* 'l1_data_B' variable attribute:        Variable Attributes.
                                                             (line  385)
* 'l1_text' function attribute:          Function Attributes.
                                                             (line  858)
* 'l2' function attribute:               Function Attributes.
                                                             (line  864)
* 'l2' variable attribute:               Variable Attributes.
                                                             (line  393)
* Label Attributes:                      Label Attributes.   (line    6)
* labeled elements in initializers:      Designated Inits.   (line    6)
* labels as values:                      Labels as Values.   (line    6)
* labs:                                  Other Builtins.     (line    6)
* LANG:                                  Environment Variables.
                                                             (line   23)
* LANG <1>:                              Environment Variables.
                                                             (line  101)
* language dialect options:              C Dialect Options.  (line    6)
* LC_ALL:                                Environment Variables.
                                                             (line   23)
* LC_CTYPE:                              Environment Variables.
                                                             (line   23)
* LC_MESSAGES:                           Environment Variables.
                                                             (line   23)
* ldexp:                                 Other Builtins.     (line    6)
* ldexpf:                                Other Builtins.     (line    6)
* ldexpl:                                Other Builtins.     (line    6)
* 'leaf' function attribute:             Function Attributes.
                                                             (line  870)
* length-zero arrays:                    Zero Length.        (line    6)
* lgamma:                                Other Builtins.     (line    6)
* lgammaf:                               Other Builtins.     (line    6)
* lgammaf_r:                             Other Builtins.     (line    6)
* lgammal:                               Other Builtins.     (line    6)
* lgammal_r:                             Other Builtins.     (line    6)
* lgamma_r:                              Other Builtins.     (line    6)
* Libraries:                             Link Options.       (line   43)
* LIBRARY_PATH:                          Environment Variables.
                                                             (line   92)
* link options:                          Link Options.       (line    6)
* 'lk' fixed-suffix:                     Fixed-Point.        (line    6)
* 'LK' fixed-suffix:                     Fixed-Point.        (line    6)
* 'LL' integer suffix:                   Long Long.          (line    6)
* llabs:                                 Other Builtins.     (line    6)
* 'llk' fixed-suffix:                    Fixed-Point.        (line    6)
* 'LLK' fixed-suffix:                    Fixed-Point.        (line    6)
* 'llr' fixed-suffix:                    Fixed-Point.        (line    6)
* 'LLR' fixed-suffix:                    Fixed-Point.        (line    6)
* llrint:                                Other Builtins.     (line    6)
* llrintf:                               Other Builtins.     (line    6)
* llrintl:                               Other Builtins.     (line    6)
* llround:                               Other Builtins.     (line    6)
* llroundf:                              Other Builtins.     (line    6)
* llroundl:                              Other Builtins.     (line    6)
* LLVM:                                  Clang and LLVM.     (line    6)
* LLVM command options:                  Invoking LLVM.      (line    6)
* LM32 Options:                          LM32 Options.       (line    6)
* load address instruction:              Simple Constraints. (line  152)
* local labels:                          Local Labels.       (line    6)
* local variables in macros:             Typeof.             (line   46)
* local variables, specifying registers: Local Reg Vars.     (line    6)
* locale:                                Environment Variables.
                                                             (line   23)
* locale definition:                     Environment Variables.
                                                             (line  101)
* locus GCC_COLORS capability:           Diagnostic Message Formatting Options.
                                                             (line   73)
* log:                                   Other Builtins.     (line    6)
* log10:                                 Other Builtins.     (line    6)
* log10f:                                Other Builtins.     (line    6)
* log10l:                                Other Builtins.     (line    6)
* log1p:                                 Other Builtins.     (line    6)
* log1pf:                                Other Builtins.     (line    6)
* log1pl:                                Other Builtins.     (line    6)
* log2:                                  Other Builtins.     (line    6)
* log2f:                                 Other Builtins.     (line    6)
* log2l:                                 Other Builtins.     (line    6)
* logb:                                  Other Builtins.     (line    6)
* logbf:                                 Other Builtins.     (line    6)
* logbl:                                 Other Builtins.     (line    6)
* logf:                                  Other Builtins.     (line    6)
* logl:                                  Other Builtins.     (line    6)
* 'long long' data types:                Long Long.          (line    6)
* longjmp:                               Global Reg Vars.    (line   65)
* 'longjmp' incompatibilities:           Incompatibilities.  (line   39)
* Low Level Virtual Machine:             Clang and LLVM.     (line    6)
* 'lr' fixed-suffix:                     Fixed-Point.        (line    6)
* 'LR' fixed-suffix:                     Fixed-Point.        (line    6)
* lrint:                                 Other Builtins.     (line    6)
* lrintf:                                Other Builtins.     (line    6)
* lrintl:                                Other Builtins.     (line    6)
* lround:                                Other Builtins.     (line    6)
* lroundf:                               Other Builtins.     (line    6)
* lroundl:                               Other Builtins.     (line    6)
* 'm' in constraint:                     Simple Constraints. (line   17)
* M32C Options:                          M32C Options.       (line    6)
* M32R/D Options:                        M32R/D Options.     (line    6)
* M680x0 Options:                        M680x0 Options.     (line    6)
* machine dependent options:             Submodel Options.   (line    6)
* machine specific constraints:          Machine Constraints.
                                                             (line    6)
* macro with variable arguments:         Variadic Macros.    (line    6)
* macros, inline alternative:            Inline.             (line    6)
* macros, local labels:                  Local Labels.       (line    6)
* macros, local variables in:            Typeof.             (line   46)
* macros, statements in expressions:     Statement Exprs.    (line    6)
* macros, types of arguments:            Typeof.             (line    6)
* 'make':                                Preprocessor Options.
                                                             (line  227)
* malloc:                                Other Builtins.     (line    6)
* 'malloc' attribute:                    Function Attributes.
                                                             (line  930)
* matching constraint:                   Simple Constraints. (line  137)
* MCore Options:                         MCore Options.      (line    6)
* member fns, automatically 'inline':    Inline.             (line   71)
* memchr:                                Other Builtins.     (line    6)
* memcmp:                                Other Builtins.     (line    6)
* memcpy:                                Other Builtins.     (line    6)
* memory references in constraints:      Simple Constraints. (line   17)
* mempcpy:                               Other Builtins.     (line    6)
* memset:                                Other Builtins.     (line    6)
* MeP Options:                           MeP Options.        (line    6)
* message formatting:                    Diagnostic Message Formatting Options.
                                                             (line    6)
* messages, generic warning:             Warning Options.    (line    6)
* messages, warning and error:           Warnings and Errors.
                                                             (line    6)
* MicroBlaze Options:                    MicroBlaze Options. (line    6)
* 'micromips' attribute:                 Function Attributes.
                                                             (line  957)
* middle-operands, omitted:              Conditionals.       (line    6)
* MIPS Options:                          MIPS Options.       (line    6)
* 'mips16' attribute:                    Function Attributes.
                                                             (line  942)
* misunderstandings in C++:              C++ Misunderstandings.
                                                             (line    6)
* mixed declarations and code:           Mixed Declarations. (line    6)
* mixing assembly language and C:        Using Assembly Language with C.
                                                             (line    6)
* 'mktemp', and constant strings:        Incompatibilities.  (line   13)
* MMIX Options:                          MMIX Options.       (line    6)
* MN10300 Options:                       MN10300 Options.    (line    6)
* 'mode' attribute:                      Variable Attributes.
                                                             (line  134)
* modf:                                  Other Builtins.     (line    6)
* modff:                                 Other Builtins.     (line    6)
* modfl:                                 Other Builtins.     (line    6)
* modifiers in constraints:              Modifiers.          (line    6)
* Moxie Options:                         Moxie Options.      (line    6)
* MSP430 Options:                        MSP430 Options.     (line    6)
* 'ms_abi' attribute:                    Function Attributes.
                                                             (line 1003)
* 'ms_hook_prologue' attribute:          Function Attributes.
                                                             (line 1028)
* 'ms_struct':                           Type Attributes.    (line  390)
* 'ms_struct' attribute:                 Variable Attributes.
                                                             (line  490)
* multiple alternative constraints:      Multi-Alternative.  (line    6)
* multiprecision arithmetic:             Long Long.          (line    6)
* 'n' in constraint:                     Simple Constraints. (line   73)
* Named Address Spaces:                  Named Address Spaces.
                                                             (line    6)
* names used in assembler code:          Asm Labels.         (line    6)
* naming convention, implementation headers: C++ Interface.  (line   43)
* NDS32 Options:                         NDS32 Options.      (line    6)
* nearbyint:                             Other Builtins.     (line    6)
* nearbyintf:                            Other Builtins.     (line    6)
* nearbyintl:                            Other Builtins.     (line    6)
* 'nested' attribute:                    Function Attributes.
                                                             (line  797)
* nested functions:                      Nested Functions.   (line    6)
* 'nested_ready' attribute:              Function Attributes.
                                                             (line  801)
* newlines (escaped):                    Escaped Newlines.   (line    6)
* nextafter:                             Other Builtins.     (line    6)
* nextafterf:                            Other Builtins.     (line    6)
* nextafterl:                            Other Builtins.     (line    6)
* nexttoward:                            Other Builtins.     (line    6)
* nexttowardf:                           Other Builtins.     (line    6)
* nexttowardl:                           Other Builtins.     (line    6)
* Nios II Options:                       Nios II Options.    (line    6)
* 'nmi' attribute:                       Function Attributes.
                                                             (line 1366)
* NMI handler functions on the Blackfin processor: Function Attributes.
                                                             (line 1074)
* 'noclone' function attribute:          Function Attributes.
                                                             (line 1113)
* 'nocommon' attribute:                  Variable Attributes.
                                                             (line  105)
* 'nocompression' attribute:             Function Attributes.
                                                             (line 1080)
* 'noinline' function attribute:         Function Attributes.
                                                             (line 1102)
* 'nomicromips' attribute:               Function Attributes.
                                                             (line  957)
* 'nomips16' attribute:                  Function Attributes.
                                                             (line  942)
* non-constant initializers:             Initializers.       (line    6)
* non-static inline function:            Inline.             (line   85)
* 'nonnull' function attribute:          Function Attributes.
                                                             (line 1123)
* 'noreturn' function attribute:         Function Attributes.
                                                             (line 1165)
* 'nosave_low_regs' attribute:           Function Attributes.
                                                             (line 1203)
* note GCC_COLORS capability:            Diagnostic Message Formatting Options.
                                                             (line   67)
* 'nothrow' function attribute:          Function Attributes.
                                                             (line 1196)
* 'not_nested' attribute:                Function Attributes.
                                                             (line  799)
* 'no_icf' function attribute:           Function Attributes.
                                                             (line 1119)
* 'no_instrument_function' function attribute: Function Attributes.
                                                             (line 1086)
* 'no_reorder' function or variable attribute: Function Attributes.
                                                             (line 1147)
* 'no_sanitize_address' function attribute: Function Attributes.
                                                             (line 1315)
* 'no_sanitize_thread' function attribute: Function Attributes.
                                                             (line 1323)
* 'no_sanitize_undefined' function attribute: Function Attributes.
                                                             (line 1328)
* 'no_split_stack' function attribute:   Function Attributes.
                                                             (line 1091)
* Nvidia PTX Options:                    Nvidia PTX Options. (line    6)
* Nvidia(R) CUDA:                        Standards.          (line  229)
* 'o' in constraint:                     Simple Constraints. (line   23)
* OBJC_INCLUDE_PATH:                     Environment Variables.
                                                             (line  125)
* Objective-C:                           Clang and LLVM.     (line    6)
* Objective-C <1>:                       Standards.          (line  168)
* Objective-C and Objective-C++ options, command-line: Objective-C and Objective-C++ Dialect Options.
                                                             (line    6)
* Objective-C++:                         Clang and LLVM.     (line    6)
* Objective-C++ <1>:                     Standards.          (line  168)
* offsettable address:                   Simple Constraints. (line   23)
* old-style function definitions:        Function Prototypes.
                                                             (line    6)
* omitted middle-operands:               Conditionals.       (line    6)
* open coding:                           Inline.             (line    6)
* OpenCL:                                Standards.          (line  229)
* OpenMP parallel:                       C Dialect Options.  (line  185)
* operand constraints, 'asm':            Constraints.        (line    6)
* 'optimize' function attribute:         Function Attributes.
                                                             (line 1209)
* optimize options:                      Optimize Options.   (line    6)
* options to control diagnostics formatting: Diagnostic Message Formatting Options.
                                                             (line    6)
* options, C++:                          C++ Dialect Options.
                                                             (line    6)
* options, Clang command:                Invoking LLVM.      (line    6)
* options, code generation:              Code Gen Options.   (line    6)
* options, debugging:                    Debugging Options.  (line    6)
* options, dialect:                      C Dialect Options.  (line    6)
* options, directory search:             Directory Options.  (line    6)
* options, grouping:                     Invoking LLVM.      (line   39)
* options, linking:                      Link Options.       (line    6)
* options, LLVM command:                 Invoking LLVM.      (line    6)
* options, Objective-C and Objective-C++: Objective-C and Objective-C++ Dialect Options.
                                                             (line    6)
* options, optimization:                 Optimize Options.   (line    6)
* options, order:                        Invoking LLVM.      (line   43)
* options, preprocessor:                 Preprocessor Options.
                                                             (line    6)
* options, profiling:                    Instrumentation Options.
                                                             (line    6)
* options, program instrumentation:      Instrumentation Options.
                                                             (line    6)
* options, run-time error checking:      Instrumentation Options.
                                                             (line    6)
* order of evaluation, side effects:     Non-bugs.           (line  196)
* order of options:                      Invoking LLVM.      (line   43)
* 'OS_main' AVR function attribute:      Function Attributes.
                                                             (line 1226)
* 'OS_task' AVR function attribute:      Function Attributes.
                                                             (line 1226)
* other register constraints:            Simple Constraints. (line  161)
* output file option:                    Overall Options.    (line  168)
* overloaded virtual function, warning:  C++ Dialect Options.
                                                             (line  320)
* 'p' in constraint:                     Simple Constraints. (line  152)
* 'packed' attribute:                    Variable Attributes.
                                                             (line  145)
* parameter forward declaration:         Variable Length.    (line   68)
* 'partial_save' attribute:              Function Attributes.
                                                             (line  809)
* 'pcs' function attribute:              Function Attributes.
                                                             (line 1250)
* PDP-11 Options:                        PDP-11 Options.     (line    6)
* PIC:                                   Code Gen Options.   (line  108)
* picoChip Options:                      picoChip Options.   (line    6)
* pmf:                                   Bound member functions.
                                                             (line    6)
* pointer arguments:                     Function Attributes.
                                                             (line  226)
* pointer to member function:            Bound member functions.
                                                             (line    6)
* pointers to arrays:                    Pointers to Arrays. (line    6)
* portions of temporary objects, pointers to: Temporaries.   (line    6)
* pow:                                   Other Builtins.     (line    6)
* pow10:                                 Other Builtins.     (line    6)
* pow10f:                                Other Builtins.     (line    6)
* pow10l:                                Other Builtins.     (line    6)
* PowerPC Options:                       PowerPC Options.    (line    6)
* powf:                                  Other Builtins.     (line    6)
* powl:                                  Other Builtins.     (line    6)
* pragma GCC ivdep:                      Loop-Specific Pragmas.
                                                             (line    7)
* pragma GCC optimize:                   Function Specific Option Pragmas.
                                                             (line   20)
* pragma GCC pop_options:                Function Specific Option Pragmas.
                                                             (line   31)
* pragma GCC push_options:               Function Specific Option Pragmas.
                                                             (line   31)
* pragma GCC reset_options:              Function Specific Option Pragmas.
                                                             (line   39)
* pragma GCC target:                     Function Specific Option Pragmas.
                                                             (line    7)
* pragma, address:                       M32C Pragmas.       (line   15)
* pragma, align:                         Solaris Pragmas.    (line   11)
* pragma, call:                          MeP Pragmas.        (line   48)
* pragma, coprocessor available:         MeP Pragmas.        (line   13)
* pragma, coprocessor call_saved:        MeP Pragmas.        (line   20)
* pragma, coprocessor subclass:          MeP Pragmas.        (line   28)
* pragma, custom io_volatile:            MeP Pragmas.        (line    7)
* pragma, diagnostic:                    Diagnostic Pragmas. (line   14)
* pragma, diagnostic <1>:                Diagnostic Pragmas. (line   57)
* pragma, disinterrupt:                  MeP Pragmas.        (line   38)
* pragma, fini:                          Solaris Pragmas.    (line   20)
* pragma, init:                          Solaris Pragmas.    (line   26)
* pragma, longcall:                      RS/6000 and PowerPC Pragmas.
                                                             (line   14)
* pragma, long_calls:                    ARM Pragmas.        (line   11)
* pragma, long_calls_off:                ARM Pragmas.        (line   17)
* pragma, mark:                          Darwin Pragmas.     (line   11)
* pragma, memregs:                       M32C Pragmas.       (line    7)
* pragma, no_long_calls:                 ARM Pragmas.        (line   14)
* pragma, options align:                 Darwin Pragmas.     (line   14)
* pragma, pop_macro:                     Push/Pop Macro Pragmas.
                                                             (line   15)
* pragma, push_macro:                    Push/Pop Macro Pragmas.
                                                             (line   11)
* pragma, reason for not using:          Function Attributes.
                                                             (line 2063)
* pragma, redefine_extname:              Symbol-Renaming Pragmas.
                                                             (line   13)
* pragma, segment:                       Darwin Pragmas.     (line   21)
* pragma, unused:                        Darwin Pragmas.     (line   24)
* pragma, visibility:                    Visibility Pragmas. (line    8)
* pragma, weak:                          Weak Pragmas.       (line   10)
* pragmas:                               Pragmas.            (line    6)
* pragmas in C++, effect on inlining:    C++ Interface.      (line   57)
* pragmas, interface and implementation: C++ Interface.      (line    6)
* pragmas, warning of unknown:           Warning Options.    (line 1922)
* precompiled headers:                   Precompiled Headers.
                                                             (line    6)
* preprocessing numbers:                 Incompatibilities.  (line  173)
* preprocessing tokens:                  Incompatibilities.  (line  173)
* preprocessor options:                  Preprocessor Options.
                                                             (line    6)
* printf:                                Other Builtins.     (line    6)
* printf_unlocked:                       Other Builtins.     (line    6)
* profiling options:                     Instrumentation Options.
                                                             (line    6)
* 'progmem' AVR variable attribute:      Variable Attributes.
                                                             (line  315)
* program instrumentation options:       Instrumentation Options.
                                                             (line    6)
* promotion of formal parameters:        Function Prototypes.
                                                             (line    6)
* 'pure' function attribute:             Function Attributes.
                                                             (line 1269)
* push address instruction:              Simple Constraints. (line  152)
* putchar:                               Other Builtins.     (line    6)
* puts:                                  Other Builtins.     (line    6)
* 'q' floating point suffix:             Floating Types.     (line    6)
* 'Q' floating point suffix:             Floating Types.     (line    6)
* 'qsort', and global register variables: Global Reg Vars.   (line   41)
* question mark:                         Multi-Alternative.  (line   27)
* quote GCC_COLORS capability:           Diagnostic Message Formatting Options.
                                                             (line   77)
* 'r' fixed-suffix:                      Fixed-Point.        (line    6)
* 'R' fixed-suffix:                      Fixed-Point.        (line    6)
* 'r' in constraint:                     Simple Constraints. (line   64)
* ranges in case statements:             Case Ranges.        (line    6)
* read-only strings:                     Incompatibilities.  (line    9)
* 'reentrant' attribute:                 Function Attributes.
                                                             (line  714)
* register variable after 'longjmp':     Global Reg Vars.    (line   65)
* registers for local variables:         Local Reg Vars.     (line    6)
* registers in constraints:              Simple Constraints. (line   64)
* registers, global allocation:          Explicit Reg Vars.  (line    6)
* registers, global variables in:        Global Reg Vars.    (line    6)
* 'regparm' attribute:                   Function Attributes.
                                                             (line 1344)
* remainder:                             Other Builtins.     (line    6)
* remainderf:                            Other Builtins.     (line    6)
* remainderl:                            Other Builtins.     (line    6)
* remquo:                                Other Builtins.     (line    6)
* remquof:                               Other Builtins.     (line    6)
* remquol:                               Other Builtins.     (line    6)
* 'renesas' attribute:                   Function Attributes.
                                                             (line 1387)
* reordering, warning:                   C++ Dialect Options.
                                                             (line  339)
* reporting bugs:                        Bugs.               (line    6)
* 'resbank' attribute:                   Function Attributes.
                                                             (line 1391)
* reset handler functions:               Function Attributes.
                                                             (line 1361)
* rest argument (in macro):              Variadic Macros.    (line    6)
* restricted pointers:                   Restricted Pointers.
                                                             (line    6)
* restricted references:                 Restricted Pointers.
                                                             (line    6)
* restricted this pointer:               Restricted Pointers.
                                                             (line    6)
* 'returns_nonnull' function attribute:  Function Attributes.
                                                             (line 1155)
* 'returns_twice' attribute:             Function Attributes.
                                                             (line 1405)
* rindex:                                Other Builtins.     (line    6)
* rint:                                  Other Builtins.     (line    6)
* rintf:                                 Other Builtins.     (line    6)
* rintl:                                 Other Builtins.     (line    6)
* RL78 Options:                          RL78 Options.       (line    6)
* round:                                 Other Builtins.     (line    6)
* roundf:                                Other Builtins.     (line    6)
* roundl:                                Other Builtins.     (line    6)
* RS/6000 and PowerPC Options:           RS/6000 and PowerPC Options.
                                                             (line    6)
* RTTI:                                  Vague Linkage.      (line   42)
* run-time error checking options:       Instrumentation Options.
                                                             (line    6)
* run-time options:                      Code Gen Options.   (line    6)
* RX Options:                            RX Options.         (line    6)
* 's' in constraint:                     Simple Constraints. (line  100)
* S/390 and zSeries Options:             S/390 and zSeries Options.
                                                             (line    6)
* save all registers on the Blackfin, H8/300, H8/300H, and H8S: Function Attributes.
                                                             (line 1414)
* save volatile registers on the MicroBlaze: Function Attributes.
                                                             (line 1419)
* 'save_all' attribute:                  Function Attributes.
                                                             (line  806)
* scalb:                                 Other Builtins.     (line    6)
* scalbf:                                Other Builtins.     (line    6)
* scalbl:                                Other Builtins.     (line    6)
* scalbln:                               Other Builtins.     (line    6)
* scalblnf:                              Other Builtins.     (line    6)
* scalblnf <1>:                          Other Builtins.     (line    6)
* scalbn:                                Other Builtins.     (line    6)
* scalbnf:                               Other Builtins.     (line    6)
* 'scanf', and constant strings:         Incompatibilities.  (line   17)
* scanfnl:                               Other Builtins.     (line    6)
* scope of a variable length array:      Variable Length.    (line   22)
* scope of declaration:                  Disappointments.    (line   21)
* scope of external declarations:        Incompatibilities.  (line   80)
* Score Options:                         Score Options.      (line    6)
* search path:                           Directory Options.  (line    6)
* 'section' function attribute:          Function Attributes.
                                                             (line 1436)
* 'section' variable attribute:          Variable Attributes.
                                                             (line  166)
* 'sentinel' function attribute:         Function Attributes.
                                                             (line 1452)
* setjmp:                                Global Reg Vars.    (line   65)
* 'setjmp' incompatibilities:            Incompatibilities.  (line   39)
* SH Options:                            SH Options.         (line    6)
* shared strings:                        Incompatibilities.  (line    9)
* 'shared' variable attribute:           Variable Attributes.
                                                             (line  211)
* side effect in '?:':                   Conditionals.       (line   20)
* side effects, macro argument:          Statement Exprs.    (line   35)
* side effects, order of evaluation:     Non-bugs.           (line  196)
* signbit:                               Other Builtins.     (line    6)
* signbitd128:                           Other Builtins.     (line    6)
* signbitd32:                            Other Builtins.     (line    6)
* signbitd64:                            Other Builtins.     (line    6)
* signbitf:                              Other Builtins.     (line    6)
* signbitl:                              Other Builtins.     (line    6)
* signed and unsigned values, comparison warning: Warning Options.
                                                             (line 1628)
* significand:                           Other Builtins.     (line    6)
* significandf:                          Other Builtins.     (line    6)
* significandl:                          Other Builtins.     (line    6)
* simple constraints:                    Simple Constraints. (line    6)
* sin:                                   Other Builtins.     (line    6)
* sincos:                                Other Builtins.     (line    6)
* sincosf:                               Other Builtins.     (line    6)
* sincosl:                               Other Builtins.     (line    6)
* sinf:                                  Other Builtins.     (line    6)
* sinh:                                  Other Builtins.     (line    6)
* sinhf:                                 Other Builtins.     (line    6)
* sinhl:                                 Other Builtins.     (line    6)
* sinl:                                  Other Builtins.     (line    6)
* sizeof:                                Typeof.             (line    6)
* snprintf:                              Other Builtins.     (line    6)
* Solaris 2 Options:                     Solaris 2 Options.  (line    6)
* SPARC Options:                         SPARC Options.      (line    6)
* specified registers:                   Explicit Reg Vars.  (line    6)
* specifying hardware config:            Submodel Options.   (line    6)
* specifying registers for local variables: Local Reg Vars.  (line    6)
* speed of compilation:                  Precompiled Headers.
                                                             (line    6)
* sprintf:                               Other Builtins.     (line    6)
* SPU Options:                           SPU Options.        (line    6)
* 'sp_switch' attribute:                 Function Attributes.
                                                             (line 1501)
* sqrt:                                  Other Builtins.     (line    6)
* sqrtf:                                 Other Builtins.     (line    6)
* sqrtl:                                 Other Builtins.     (line    6)
* sscanf:                                Other Builtins.     (line    6)
* 'sscanf', and constant strings:        Incompatibilities.  (line   17)
* 'sseregparm' attribute:                Function Attributes.
                                                             (line 1372)
* 'stack_protect' function attribute:    Function Attributes.
                                                             (line 1097)
* statements inside expressions:         Statement Exprs.    (line    6)
* static data in C++, declaring and defining: Static Definitions.
                                                             (line    6)
* stpcpy:                                Other Builtins.     (line    6)
* stpncpy:                               Other Builtins.     (line    6)
* strcasecmp:                            Other Builtins.     (line    6)
* strcat:                                Other Builtins.     (line    6)
* strchr:                                Other Builtins.     (line    6)
* strcmp:                                Other Builtins.     (line    6)
* strcpy:                                Other Builtins.     (line    6)
* strcspn:                               Other Builtins.     (line    6)
* strdup:                                Other Builtins.     (line    6)
* strfmon:                               Other Builtins.     (line    6)
* strftime:                              Other Builtins.     (line    6)
* string constants:                      Incompatibilities.  (line    9)
* strlen:                                Other Builtins.     (line    6)
* strncasecmp:                           Other Builtins.     (line    6)
* strncat:                               Other Builtins.     (line    6)
* strncmp:                               Other Builtins.     (line    6)
* strncpy:                               Other Builtins.     (line    6)
* strndup:                               Other Builtins.     (line    6)
* strpbrk:                               Other Builtins.     (line    6)
* strrchr:                               Other Builtins.     (line    6)
* strspn:                                Other Builtins.     (line    6)
* strstr:                                Other Builtins.     (line    6)
* 'struct':                              Unnamed Fields.     (line    6)
* struct __htm_tdb:                      S/390 System z Built-in Functions.
                                                             (line   49)
* structures:                            Incompatibilities.  (line  146)
* structures, constructor expression:    Compound Literals.  (line    6)
* submodel options:                      Submodel Options.   (line    6)
* subscripting:                          Subscripting.       (line    6)
* subscripting and function values:      Subscripting.       (line    6)
* suffixes for C++ source:               Invoking Clang/LLVM for C++.
                                                             (line    6)
* SUNPRO_DEPENDENCIES:                   Environment Variables.
                                                             (line  165)
* suppressing generic warnings:          Warning Options.    (line    6)
* surprises in C++:                      C++ Misunderstandings.
                                                             (line    6)
* syntax checking:                       Warning Options.    (line   19)
* 'syscall_linkage' attribute:           Function Attributes.
                                                             (line 1516)
* system headers, warnings from:         Warning Options.    (line 1816)
* System V Options:                      System V Options.   (line    6)
* 'sysv_abi' attribute:                  Function Attributes.
                                                             (line 1003)
* tan:                                   Other Builtins.     (line    6)
* tanf:                                  Other Builtins.     (line    6)
* tanh:                                  Other Builtins.     (line    6)
* tanhf:                                 Other Builtins.     (line    6)
* tanhl:                                 Other Builtins.     (line    6)
* tanl:                                  Other Builtins.     (line    6)
* 'target' function attribute:           Function Attributes.
                                                             (line 1523)
* 'target("abm")' attribute:             Function Attributes.
                                                             (line 1556)
* 'target("aes")' attribute:             Function Attributes.
                                                             (line 1561)
* 'target("align-stringops")' attribute: Function Attributes.
                                                             (line 1655)
* 'target("altivec")' attribute:         Function Attributes.
                                                             (line 1681)
* 'target("arch=ARCH")' attribute:       Function Attributes.
                                                             (line 1664)
* 'target("avoid-indexed-addresses")' attribute: Function Attributes.
                                                             (line 1802)
* 'target("cld")' attribute:             Function Attributes.
                                                             (line 1626)
* 'target("cmpb")' attribute:            Function Attributes.
                                                             (line 1687)
* 'target("cpu=CPU")' attribute:         Function Attributes.
                                                             (line 1817)
* 'target("custom-fpu-cfg=NAME")' attribute: Function Attributes.
                                                             (line 1842)
* 'target("custom-INSN=N")' attribute:   Function Attributes.
                                                             (line 1834)
* 'target("default")' attribute:         Function Attributes.
                                                             (line 1564)
* 'target("dlmzb")' attribute:           Function Attributes.
                                                             (line 1693)
* 'target("fancy-math-387")' attribute:  Function Attributes.
                                                             (line 1630)
* 'target("fma4")' attribute:            Function Attributes.
                                                             (line 1610)
* 'target("fpmath=FPMATH")' attribute:   Function Attributes.
                                                             (line 1672)
* 'target("fprnd")' attribute:           Function Attributes.
                                                             (line 1700)
* 'target("friz")' attribute:            Function Attributes.
                                                             (line 1793)
* 'target("fused-madd")' attribute:      Function Attributes.
                                                             (line 1635)
* 'target("hard-dfp")' attribute:        Function Attributes.
                                                             (line 1706)
* 'target("ieee-fp")' attribute:         Function Attributes.
                                                             (line 1640)
* 'target("inline-all-stringops")' attribute: Function Attributes.
                                                             (line 1645)
* 'target("inline-stringops-dynamically")' attribute: Function Attributes.
                                                             (line 1649)
* 'target("isel")' attribute:            Function Attributes.
                                                             (line 1712)
* 'target("longcall")' attribute:        Function Attributes.
                                                             (line 1812)
* 'target("lwp")' attribute:             Function Attributes.
                                                             (line 1618)
* 'target("mfcrf")' attribute:           Function Attributes.
                                                             (line 1716)
* 'target("mfpgpr")' attribute:          Function Attributes.
                                                             (line 1723)
* 'target("mmx")' attribute:             Function Attributes.
                                                             (line 1569)
* 'target("mulhw")' attribute:           Function Attributes.
                                                             (line 1730)
* 'target("multiple")' attribute:        Function Attributes.
                                                             (line 1737)
* 'target("no-custom-INSN")' attribute:  Function Attributes.
                                                             (line 1834)
* 'target("paired")' attribute:          Function Attributes.
                                                             (line 1807)
* 'target("pclmul")' attribute:          Function Attributes.
                                                             (line 1573)
* 'target("popcnt")' attribute:          Function Attributes.
                                                             (line 1577)
* 'target("popcntb")' attribute:         Function Attributes.
                                                             (line 1748)
* 'target("popcntd")' attribute:         Function Attributes.
                                                             (line 1755)
* 'target("powerpc-gfxopt")' attribute:  Function Attributes.
                                                             (line 1761)
* 'target("powerpc-gpopt")' attribute:   Function Attributes.
                                                             (line 1767)
* 'target("recip")' attribute:           Function Attributes.
                                                             (line 1659)
* 'target("recip-precision")' attribute: Function Attributes.
                                                             (line 1773)
* 'target("sse")' attribute:             Function Attributes.
                                                             (line 1581)
* 'target("sse2")' attribute:            Function Attributes.
                                                             (line 1585)
* 'target("sse3")' attribute:            Function Attributes.
                                                             (line 1589)
* 'target("sse4")' attribute:            Function Attributes.
                                                             (line 1593)
* 'target("sse4.1")' attribute:          Function Attributes.
                                                             (line 1598)
* 'target("sse4.2")' attribute:          Function Attributes.
                                                             (line 1602)
* 'target("sse4a")' attribute:           Function Attributes.
                                                             (line 1606)
* 'target("ssse3")' attribute:           Function Attributes.
                                                             (line 1622)
* 'target("string")' attribute:          Function Attributes.
                                                             (line 1779)
* 'target("tune=TUNE")' attribute:       Function Attributes.
                                                             (line 1668)
* 'target("tune=TUNE")' attribute <1>:   Function Attributes.
                                                             (line 1824)
* 'target("update")' attribute:          Function Attributes.
                                                             (line 1742)
* 'target("vsx")' attribute:             Function Attributes.
                                                             (line 1785)
* 'target("xop")' attribute:             Function Attributes.
                                                             (line 1614)
* TC1:                                   Standards.          (line   13)
* TC2:                                   Standards.          (line   13)
* TC3:                                   Standards.          (line   13)
* Technical Corrigenda:                  Standards.          (line   13)
* Technical Corrigendum 1:               Standards.          (line   13)
* Technical Corrigendum 2:               Standards.          (line   13)
* Technical Corrigendum 3:               Standards.          (line   13)
* template instantiation:                Template Instantiation.
                                                             (line    6)
* temporaries, lifetime of:              Temporaries.        (line    6)
* tgamma:                                Other Builtins.     (line    6)
* tgammaf:                               Other Builtins.     (line    6)
* tgammal:                               Other Builtins.     (line    6)
* Thread-Local Storage:                  Thread-Local.       (line    6)
* thunks:                                Nested Functions.   (line    6)
* TILE-Gx Options:                       TILE-Gx Options.    (line    6)
* TILEPro Options:                       TILEPro Options.    (line    6)
* tiny data section on the H8/300H and H8S: Function Attributes.
                                                             (line 1853)
* TLS:                                   Thread-Local.       (line    6)
* 'tls_model' attribute:                 Variable Attributes.
                                                             (line  234)
* TMPDIR:                                Environment Variables.
                                                             (line   47)
* toascii:                               Other Builtins.     (line    6)
* tolower:                               Other Builtins.     (line    6)
* toupper:                               Other Builtins.     (line    6)
* towlower:                              Other Builtins.     (line    6)
* towupper:                              Other Builtins.     (line    6)
* traditional C language:                C Dialect Options.  (line  325)
* 'transparent_union' attribute:         Type Attributes.    (line  143)
* 'trapa_handler' attribute:             Function Attributes.
                                                             (line 1865)
* 'trap_exit' attribute:                 Function Attributes.
                                                             (line 1860)
* trunc:                                 Other Builtins.     (line    6)
* truncf:                                Other Builtins.     (line    6)
* truncl:                                Other Builtins.     (line    6)
* two-stage name lookup:                 Name lookup.        (line    6)
* type alignment:                        Alignment.          (line    6)
* type attributes:                       Type Attributes.    (line    6)
* typedef names as function parameters:  Incompatibilities.  (line   97)
* typeof:                                Typeof.             (line    6)
* 'type_info':                           Vague Linkage.      (line   42)
* 'uhk' fixed-suffix:                    Fixed-Point.        (line    6)
* 'UHK' fixed-suffix:                    Fixed-Point.        (line    6)
* 'uhr' fixed-suffix:                    Fixed-Point.        (line    6)
* 'UHR' fixed-suffix:                    Fixed-Point.        (line    6)
* 'uk' fixed-suffix:                     Fixed-Point.        (line    6)
* 'UK' fixed-suffix:                     Fixed-Point.        (line    6)
* 'ulk' fixed-suffix:                    Fixed-Point.        (line    6)
* 'ULK' fixed-suffix:                    Fixed-Point.        (line    6)
* 'ULL' integer suffix:                  Long Long.          (line    6)
* 'ullk' fixed-suffix:                   Fixed-Point.        (line    6)
* 'ULLK' fixed-suffix:                   Fixed-Point.        (line    6)
* 'ullr' fixed-suffix:                   Fixed-Point.        (line    6)
* 'ULLR' fixed-suffix:                   Fixed-Point.        (line    6)
* 'ulr' fixed-suffix:                    Fixed-Point.        (line    6)
* 'ULR' fixed-suffix:                    Fixed-Point.        (line    6)
* undefined behavior:                    Bug Criteria.       (line   17)
* undefined function value:              Bug Criteria.       (line   17)
* underscores in variables in macros:    Typeof.             (line   46)
* 'union':                               Unnamed Fields.     (line    6)
* union, casting to a:                   Cast to Union.      (line    6)
* unions:                                Incompatibilities.  (line  146)
* unknown pragmas, warning:              Warning Options.    (line 1922)
* unresolved references and '-nodefaultlibs': Link Options.  (line  107)
* unresolved references and '-nostdlib': Link Options.       (line  107)
* 'unused' attribute.:                   Function Attributes.
                                                             (line 1869)
* 'unused' label attribute:              Label Attributes.   (line   29)
* 'ur' fixed-suffix:                     Fixed-Point.        (line    6)
* 'UR' fixed-suffix:                     Fixed-Point.        (line    6)
* 'used' attribute.:                     Function Attributes.
                                                             (line 1874)
* User stack pointer in interrupts on the Blackfin: Function Attributes.
                                                             (line  853)
* 'use_debug_exception_return' attribute: Function Attributes.
                                                             (line  774)
* 'use_shadow_register_set' attribute:   Function Attributes.
                                                             (line  765)
* 'V' in constraint:                     Simple Constraints. (line   43)
* V850 Options:                          V850 Options.       (line    6)
* vague linkage:                         Vague Linkage.      (line    6)
* value after 'longjmp':                 Global Reg Vars.    (line   65)
* variable addressability on the IA-64:  Function Attributes.
                                                             (line  974)
* variable addressability on the M32R/D: Variable Attributes.
                                                             (line  403)
* variable alignment:                    Alignment.          (line    6)
* variable attributes:                   Variable Attributes.
                                                             (line    6)
* variable number of arguments:          Variadic Macros.    (line    6)
* variable-length array in a structure:  Variable Length.    (line   26)
* variable-length array scope:           Variable Length.    (line   22)
* variable-length arrays:                Variable Length.    (line    6)
* variables in specified registers:      Explicit Reg Vars.  (line    6)
* variables, local, in macros:           Typeof.             (line   46)
* variadic macros:                       Variadic Macros.    (line    6)
* VAX Options:                           VAX Options.        (line    6)
* 'vector' attribute:                    Function Attributes.
                                                             (line 1884)
* 'version_id' attribute:                Function Attributes.
                                                             (line 1891)
* vfprintf:                              Other Builtins.     (line    6)
* vfscanf:                               Other Builtins.     (line    6)
* 'visibility' attribute:                Function Attributes.
                                                             (line 1901)
* Visium Options:                        Visium Options.     (line    6)
* VLAs:                                  Variable Length.    (line    6)
* 'vliw' attribute:                      Function Attributes.
                                                             (line 1997)
* VMS Options:                           VMS Options.        (line    6)
* void:                                  Pointer Bounds Checker builtins.
                                                             (line  124)
* void <1>:                              Pointer Bounds Checker builtins.
                                                             (line  136)
* void pointers, arithmetic:             Pointer Arith.      (line    6)
* void, size of pointer to:              Pointer Arith.      (line    6)
* volatile access:                       Volatiles.          (line    6)
* volatile access <1>:                   C++ Volatiles.      (line    6)
* 'volatile' applied to function:        Function Attributes.
                                                             (line    6)
* volatile 'asm':                        Extended Asm.       (line  109)
* volatile read:                         Volatiles.          (line    6)
* volatile read <1>:                     C++ Volatiles.      (line    6)
* volatile write:                        Volatiles.          (line    6)
* volatile write <1>:                    C++ Volatiles.      (line    6)
* vprintf:                               Other Builtins.     (line    6)
* vscanf:                                Other Builtins.     (line    6)
* vsnprintf:                             Other Builtins.     (line    6)
* vsprintf:                              Other Builtins.     (line    6)
* vsscanf:                               Other Builtins.     (line    6)
* vtable:                                Vague Linkage.      (line   27)
* VxWorks Options:                       VxWorks Options.    (line    6)
* 'w' floating point suffix:             Floating Types.     (line    6)
* 'W' floating point suffix:             Floating Types.     (line    6)
* 'wakeup' attribute:                    Function Attributes.
                                                             (line  720)
* 'warm' attribute:                      Function Attributes.
                                                             (line 1368)
* warning for comparison of signed and unsigned values: Warning Options.
                                                             (line 1628)
* warning for overloaded virtual function: C++ Dialect Options.
                                                             (line  320)
* warning for reordering of member initializers: C++ Dialect Options.
                                                             (line  339)
* warning for unknown pragmas:           Warning Options.    (line 1922)
* 'warning' function attribute:          Function Attributes.
                                                             (line  204)
* warning GCC_COLORS capability:         Diagnostic Message Formatting Options.
                                                             (line   64)
* warnings from system headers:          Warning Options.    (line 1816)
* warnings vs errors:                    Warnings and Errors.
                                                             (line    6)
* 'warn_unused' attribute:               C++ Attributes.     (line   64)
* 'warn_unused_result' attribute:        Function Attributes.
                                                             (line 2003)
* 'weak' attribute:                      Function Attributes.
                                                             (line 2020)
* 'weakref' attribute:                   Function Attributes.
                                                             (line 2029)
* whitespace:                            Incompatibilities.  (line  112)
* 'X' in constraint:                     Simple Constraints. (line  122)
* X3.159-1989:                           Standards.          (line   13)
* x86 Options:                           x86 Options.        (line    6)
* x86 Windows Options:                   x86 Windows Options.
                                                             (line    6)
* Xstormy16 Options:                     Xstormy16 Options.  (line    6)
* Xtensa Options:                        Xtensa Options.     (line    6)
* y0:                                    Other Builtins.     (line    6)
* y0f:                                   Other Builtins.     (line    6)
* y0l:                                   Other Builtins.     (line    6)
* y1:                                    Other Builtins.     (line    6)
* y1f:                                   Other Builtins.     (line    6)
* y1l:                                   Other Builtins.     (line    6)
* yn:                                    Other Builtins.     (line    6)
* ynf:                                   Other Builtins.     (line    6)
* ynl:                                   Other Builtins.     (line    6)
* zero-length arrays:                    Zero Length.        (line    6)
* zero-size structures:                  Empty Structures.   (line    6)
* zSeries Options:                       zSeries Options.    (line    6)

