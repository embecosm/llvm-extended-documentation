This is llvm.info, produced by makeinfo version 6.0 from llvm.texi.

Copyright (C) 2015 Embecosm Limited
Copyright (C) 1988-2015 Free Software Foundation, Inc.

 Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with the
Invariant Sections being "Funding Free Software", the Front-Cover Texts
being (a, c) (see below), and with the Back-Cover Texts being (b, d)
(see below).  A copy of the license is included in the section entitled
"GNU Free Documentation License".

 (a) The FSF's Front-Cover Text is:

 A GNU Manual

 (b) The FSF's Back-Cover Text is:

 You have freedom to copy and modify this GNU Manual, like GNU software.
Copies published by the Free Software Foundation raise funds for GNU
development.

 (c) Embecosm's Front-Cover Text is:

 Derivative Manual for LLVM

 (d) Embecosm's Back-Cover Text is:

 You have freedom to copy and modify this manual.  Copies published by
Embecosm support introducing others to free and open source software and
hardware.
INFO-DIR-SECTION Software development
START-INFO-DIR-ENTRY
* llvm: (llvm).                The LLVM compiler
END-INFO-DIR-ENTRY

 This file documents the use of the LLVM compiler.

 Copyright (C) 2015 Embecosm Limited
Copyright (C) 1988-2015 Free Software Foundation, Inc.

 Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with the
Invariant Sections being "Funding Free Software", the Front-Cover Texts
being (a, c) (see below), and with the Back-Cover Texts being (b, d)
(see below).  A copy of the license is included in the section entitled
"GNU Free Documentation License".

 (a) The FSF's Front-Cover Text is:

 A GNU Manual

 (b) The FSF's Back-Cover Text is:

 You have freedom to copy and modify this GNU Manual, like GNU software.
Copies published by the Free Software Foundation raise funds for GNU
development.

 (c) Embecosm's Front-Cover Text is:

 Derivative Manual for LLVM

 (d) Embecosm's Back-Cover Text is:

 You have freedom to copy and modify this manual.  Copies published by
Embecosm support introducing others to free and open source software and
hardware.


File: llvm.info,  Node: GNU Project,  Next: Copying,  Prev: Funding,  Up: Top

The GNU Project and GNU/Linux
*****************************

The GNU Project was launched in 1984 to develop a complete Unix-like
operating system which is free software: the GNU system.  (GNU is a
recursive acronym for "GNU's Not Unix"; it is pronounced "guh-NEW".)
Variants of the GNU operating system, which use the kernel Linux, are
now widely used; though these systems are often referred to as "Linux",
they are more accurately called GNU/Linux systems.

 For more information, see:
     <http://www.gnu.org/>
     <http://www.gnu.org/gnu/linux-and-gnu.html>


File: llvm.info,  Node: Copying,  Next: GNU Free Documentation License,  Prev: GNU Project,  Up: Top

GNU General Public License
**************************

                        Version 3, 29 June 2007

     Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies of this
     license document, but changing it is not allowed.

Preamble
========

The GNU General Public License is a free, copyleft license for software
and other kinds of works.

 The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program-to make sure it remains free
software for all its users.  We, the Free Software Foundation, use the
GNU General Public License for most of our software; it applies also to
any other work released this way by its authors.  You can apply it to
your programs, too.

 When we speak of free software, we are referring to freedom, not price.
Our General Public Licenses are designed to make sure that you have the
freedom to distribute copies of free software (and charge for them if
you wish), that you receive source code or can get it if you want it,
that you can change the software or use pieces of it in new free
programs, and that you know you can do these things.

 To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you have
certain responsibilities if you distribute copies of the software, or if
you modify it: responsibilities to respect the freedom of others.

 For example, if you distribute copies of such a program, whether gratis
or for a fee, you must pass on to the recipients the same freedoms that
you received.  You must make sure that they, too, receive or can get the
source code.  And you must show them these terms so they know their
rights.

 Developers that use the GNU GPL protect your rights with two steps: (1)
assert copyright on the software, and (2) offer you this License giving
you legal permission to copy, distribute and/or modify it.

 For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software.  For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

 Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the manufacturer
can do so.  This is fundamentally incompatible with the aim of
protecting users' freedom to change the software.  The systematic
pattern of such abuse occurs in the area of products for individuals to
use, which is precisely where it is most unacceptable.  Therefore, we
have designed this version of the GPL to prohibit the practice for those
products.  If such problems arise substantially in other domains, we
stand ready to extend this provision to those domains in future versions
of the GPL, as needed to protect the freedom of users.

 Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

 The precise terms and conditions for copying, distribution and
modification follow.

TERMS AND CONDITIONS
====================

  0. Definitions.

     "This License" refers to version 3 of the GNU General Public
     License.

     "Copyright" also means copyright-like laws that apply to other
     kinds of works, such as semiconductor masks.

     "The Program" refers to any copyrightable work licensed under this
     License.  Each licensee is addressed as "you".  "Licensees" and
     "recipients" may be individuals or organizations.

     To "modify" a work means to copy from or adapt all or part of the
     work in a fashion requiring copyright permission, other than the
     making of an exact copy.  The resulting work is called a "modified
     version" of the earlier work or a work "based on" the earlier work.

     A "covered work" means either the unmodified Program or a work
     based on the Program.

     To "propagate" a work means to do anything with it that, without
     permission, would make you directly or secondarily liable for
     infringement under applicable copyright law, except executing it on
     a computer or modifying a private copy.  Propagation includes
     copying, distribution (with or without modification), making
     available to the public, and in some countries other activities as
     well.

     To "convey" a work means any kind of propagation that enables other
     parties to make or receive copies.  Mere interaction with a user
     through a computer network, with no transfer of a copy, is not
     conveying.

     An interactive user interface displays "Appropriate Legal Notices"
     to the extent that it includes a convenient and prominently visible
     feature that (1) displays an appropriate copyright notice, and (2)
     tells the user that there is no warranty for the work (except to
     the extent that warranties are provided), that licensees may convey
     the work under this License, and how to view a copy of this
     License.  If the interface presents a list of user commands or
     options, such as a menu, a prominent item in the list meets this
     criterion.

  1. Source Code.

     The "source code" for a work means the preferred form of the work
     for making modifications to it.  "Object code" means any non-source
     form of a work.

     A "Standard Interface" means an interface that either is an
     official standard defined by a recognized standards body, or, in
     the case of interfaces specified for a particular programming
     language, one that is widely used among developers working in that
     language.

     The "System Libraries" of an executable work include anything,
     other than the work as a whole, that (a) is included in the normal
     form of packaging a Major Component, but which is not part of that
     Major Component, and (b) serves only to enable use of the work with
     that Major Component, or to implement a Standard Interface for
     which an implementation is available to the public in source code
     form.  A "Major Component", in this context, means a major
     essential component (kernel, window system, and so on) of the
     specific operating system (if any) on which the executable work
     runs, or a compiler used to produce the work, or an object code
     interpreter used to run it.

     The "Corresponding Source" for a work in object code form means all
     the source code needed to generate, install, and (for an executable
     work) run the object code and to modify the work, including scripts
     to control those activities.  However, it does not include the
     work's System Libraries, or general-purpose tools or generally
     available free programs which are used unmodified in performing
     those activities but which are not part of the work.  For example,
     Corresponding Source includes interface definition files associated
     with source files for the work, and the source code for shared
     libraries and dynamically linked subprograms that the work is
     specifically designed to require, such as by intimate data
     communication or control flow between those subprograms and other
     parts of the work.

     The Corresponding Source need not include anything that users can
     regenerate automatically from other parts of the Corresponding
     Source.

     The Corresponding Source for a work in source code form is that
     same work.

  2. Basic Permissions.

     All rights granted under this License are granted for the term of
     copyright on the Program, and are irrevocable provided the stated
     conditions are met.  This License explicitly affirms your unlimited
     permission to run the unmodified Program.  The output from running
     a covered work is covered by this License only if the output, given
     its content, constitutes a covered work.  This License acknowledges
     your rights of fair use or other equivalent, as provided by
     copyright law.

     You may make, run and propagate covered works that you do not
     convey, without conditions so long as your license otherwise
     remains in force.  You may convey covered works to others for the
     sole purpose of having them make modifications exclusively for you,
     or provide you with facilities for running those works, provided
     that you comply with the terms of this License in conveying all
     material for which you do not control copyright.  Those thus making
     or running the covered works for you must do so exclusively on your
     behalf, under your direction and control, on terms that prohibit
     them from making any copies of your copyrighted material outside
     their relationship with you.

     Conveying under any other circumstances is permitted solely under
     the conditions stated below.  Sublicensing is not allowed; section
     10 makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

     No covered work shall be deemed part of an effective technological
     measure under any applicable law fulfilling obligations under
     article 11 of the WIPO copyright treaty adopted on 20 December
     1996, or similar laws prohibiting or restricting circumvention of
     such measures.

     When you convey a covered work, you waive any legal power to forbid
     circumvention of technological measures to the extent such
     circumvention is effected by exercising rights under this License
     with respect to the covered work, and you disclaim any intention to
     limit operation or modification of the work as a means of
     enforcing, against the work's users, your or third parties' legal
     rights to forbid circumvention of technological measures.

  4. Conveying Verbatim Copies.

     You may convey verbatim copies of the Program's source code as you
     receive it, in any medium, provided that you conspicuously and
     appropriately publish on each copy an appropriate copyright notice;
     keep intact all notices stating that this License and any
     non-permissive terms added in accord with section 7 apply to the
     code; keep intact all notices of the absence of any warranty; and
     give all recipients a copy of this License along with the Program.

     You may charge any price or no price for each copy that you convey,
     and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

     You may convey a work based on the Program, or the modifications to
     produce it from the Program, in the form of source code under the
     terms of section 4, provided that you also meet all of these
     conditions:

       a. The work must carry prominent notices stating that you
          modified it, and giving a relevant date.

       b. The work must carry prominent notices stating that it is
          released under this License and any conditions added under
          section 7.  This requirement modifies the requirement in
          section 4 to "keep intact all notices".

       c. You must license the entire work, as a whole, under this
          License to anyone who comes into possession of a copy.  This
          License will therefore apply, along with any applicable
          section 7 additional terms, to the whole of the work, and all
          its parts, regardless of how they are packaged.  This License
          gives no permission to license the work in any other way, but
          it does not invalidate such permission if you have separately
          received it.

       d. If the work has interactive user interfaces, each must display
          Appropriate Legal Notices; however, if the Program has
          interactive interfaces that do not display Appropriate Legal
          Notices, your work need not make them do so.

     A compilation of a covered work with other separate and independent
     works, which are not by their nature extensions of the covered
     work, and which are not combined with it such as to form a larger
     program, in or on a volume of a storage or distribution medium, is
     called an "aggregate" if the compilation and its resulting
     copyright are not used to limit the access or legal rights of the
     compilation's users beyond what the individual works permit.
     Inclusion of a covered work in an aggregate does not cause this
     License to apply to the other parts of the aggregate.

  6. Conveying Non-Source Forms.

     You may convey a covered work in object code form under the terms
     of sections 4 and 5, provided that you also convey the
     machine-readable Corresponding Source under the terms of this
     License, in one of these ways:

       a. Convey the object code in, or embodied in, a physical product
          (including a physical distribution medium), accompanied by the
          Corresponding Source fixed on a durable physical medium
          customarily used for software interchange.

       b. Convey the object code in, or embodied in, a physical product
          (including a physical distribution medium), accompanied by a
          written offer, valid for at least three years and valid for as
          long as you offer spare parts or customer support for that
          product model, to give anyone who possesses the object code
          either (1) a copy of the Corresponding Source for all the
          software in the product that is covered by this License, on a
          durable physical medium customarily used for software
          interchange, for a price no more than your reasonable cost of
          physically performing this conveying of source, or (2) access
          to copy the Corresponding Source from a network server at no
          charge.

       c. Convey individual copies of the object code with a copy of the
          written offer to provide the Corresponding Source.  This
          alternative is allowed only occasionally and noncommercially,
          and only if you received the object code with such an offer,
          in accord with subsection 6b.

       d. Convey the object code by offering access from a designated
          place (gratis or for a charge), and offer equivalent access to
          the Corresponding Source in the same way through the same
          place at no further charge.  You need not require recipients
          to copy the Corresponding Source along with the object code.
          If the place to copy the object code is a network server, the
          Corresponding Source may be on a different server (operated by
          you or a third party) that supports equivalent copying
          facilities, provided you maintain clear directions next to the
          object code saying where to find the Corresponding Source.
          Regardless of what server hosts the Corresponding Source, you
          remain obligated to ensure that it is available for as long as
          needed to satisfy these requirements.

       e. Convey the object code using peer-to-peer transmission,
          provided you inform other peers where the object code and
          Corresponding Source of the work are being offered to the
          general public at no charge under subsection 6d.

     A separable portion of the object code, whose source code is
     excluded from the Corresponding Source as a System Library, need
     not be included in conveying the object code work.

     A "User Product" is either (1) a "consumer product", which means
     any tangible personal property which is normally used for personal,
     family, or household purposes, or (2) anything designed or sold for
     incorporation into a dwelling.  In determining whether a product is
     a consumer product, doubtful cases shall be resolved in favor of
     coverage.  For a particular product received by a particular user,
     "normally used" refers to a typical or common use of that class of
     product, regardless of the status of the particular user or of the
     way in which the particular user actually uses, or expects or is
     expected to use, the product.  A product is a consumer product
     regardless of whether the product has substantial commercial,
     industrial or non-consumer uses, unless such uses represent the
     only significant mode of use of the product.

     "Installation Information" for a User Product means any methods,
     procedures, authorization keys, or other information required to
     install and execute modified versions of a covered work in that
     User Product from a modified version of its Corresponding Source.
     The information must suffice to ensure that the continued
     functioning of the modified object code is in no case prevented or
     interfered with solely because modification has been made.

     If you convey an object code work under this section in, or with,
     or specifically for use in, a User Product, and the conveying
     occurs as part of a transaction in which the right of possession
     and use of the User Product is transferred to the recipient in
     perpetuity or for a fixed term (regardless of how the transaction
     is characterized), the Corresponding Source conveyed under this
     section must be accompanied by the Installation Information.  But
     this requirement does not apply if neither you nor any third party
     retains the ability to install modified object code on the User
     Product (for example, the work has been installed in ROM).

     The requirement to provide Installation Information does not
     include a requirement to continue to provide support service,
     warranty, or updates for a work that has been modified or installed
     by the recipient, or for the User Product in which it has been
     modified or installed.  Access to a network may be denied when the
     modification itself materially and adversely affects the operation
     of the network or violates the rules and protocols for
     communication across the network.

     Corresponding Source conveyed, and Installation Information
     provided, in accord with this section must be in a format that is
     publicly documented (and with an implementation available to the
     public in source code form), and must require no special password
     or key for unpacking, reading or copying.

  7. Additional Terms.

     "Additional permissions" are terms that supplement the terms of
     this License by making exceptions from one or more of its
     conditions.  Additional permissions that are applicable to the
     entire Program shall be treated as though they were included in
     this License, to the extent that they are valid under applicable
     law.  If additional permissions apply only to part of the Program,
     that part may be used separately under those permissions, but the
     entire Program remains governed by this License without regard to
     the additional permissions.

     When you convey a copy of a covered work, you may at your option
     remove any additional permissions from that copy, or from any part
     of it.  (Additional permissions may be written to require their own
     removal in certain cases when you modify the work.)  You may place
     additional permissions on material, added by you to a covered work,
     for which you have or can give appropriate copyright permission.

     Notwithstanding any other provision of this License, for material
     you add to a covered work, you may (if authorized by the copyright
     holders of that material) supplement the terms of this License with
     terms:

       a. Disclaiming warranty or limiting liability differently from
          the terms of sections 15 and 16 of this License; or

       b. Requiring preservation of specified reasonable legal notices
          or author attributions in that material or in the Appropriate
          Legal Notices displayed by works containing it; or

       c. Prohibiting misrepresentation of the origin of that material,
          or requiring that modified versions of such material be marked
          in reasonable ways as different from the original version; or

       d. Limiting the use for publicity purposes of names of licensors
          or authors of the material; or

       e. Declining to grant rights under trademark law for use of some
          trade names, trademarks, or service marks; or

       f. Requiring indemnification of licensors and authors of that
          material by anyone who conveys the material (or modified
          versions of it) with contractual assumptions of liability to
          the recipient, for any liability that these contractual
          assumptions directly impose on those licensors and authors.

     All other non-permissive additional terms are considered "further
     restrictions" within the meaning of section 10.  If the Program as
     you received it, or any part of it, contains a notice stating that
     it is governed by this License along with a term that is a further
     restriction, you may remove that term.  If a license document
     contains a further restriction but permits relicensing or conveying
     under this License, you may add to a covered work material governed
     by the terms of that license document, provided that the further
     restriction does not survive such relicensing or conveying.

     If you add terms to a covered work in accord with this section, you
     must place, in the relevant source files, a statement of the
     additional terms that apply to those files, or a notice indicating
     where to find the applicable terms.

     Additional terms, permissive or non-permissive, may be stated in
     the form of a separately written license, or stated as exceptions;
     the above requirements apply either way.

  8. Termination.

     You may not propagate or modify a covered work except as expressly
     provided under this License.  Any attempt otherwise to propagate or
     modify it is void, and will automatically terminate your rights
     under this License (including any patent licenses granted under the
     third paragraph of section 11).

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, you do not qualify to receive new licenses
     for the same material under section 10.

  9. Acceptance Not Required for Having Copies.

     You are not required to accept this License in order to receive or
     run a copy of the Program.  Ancillary propagation of a covered work
     occurring solely as a consequence of using peer-to-peer
     transmission to receive a copy likewise does not require
     acceptance.  However, nothing other than this License grants you
     permission to propagate or modify any covered work.  These actions
     infringe copyright if you do not accept this License.  Therefore,
     by modifying or propagating a covered work, you indicate your
     acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

     Each time you convey a covered work, the recipient automatically
     receives a license from the original licensors, to run, modify and
     propagate that work, subject to this License.  You are not
     responsible for enforcing compliance by third parties with this
     License.

     An "entity transaction" is a transaction transferring control of an
     organization, or substantially all assets of one, or subdividing an
     organization, or merging organizations.  If propagation of a
     covered work results from an entity transaction, each party to that
     transaction who receives a copy of the work also receives whatever
     licenses to the work the party's predecessor in interest had or
     could give under the previous paragraph, plus a right to possession
     of the Corresponding Source of the work from the predecessor in
     interest, if the predecessor has it or can get it with reasonable
     efforts.

     You may not impose any further restrictions on the exercise of the
     rights granted or affirmed under this License.  For example, you
     may not impose a license fee, royalty, or other charge for exercise
     of rights granted under this License, and you may not initiate
     litigation (including a cross-claim or counterclaim in a lawsuit)
     alleging that any patent claim is infringed by making, using,
     selling, offering for sale, or importing the Program or any portion
     of it.

  11. Patents.

     A "contributor" is a copyright holder who authorizes use under this
     License of the Program or a work on which the Program is based.
     The work thus licensed is called the contributor's "contributor
     version".

     A contributor's "essential patent claims" are all patent claims
     owned or controlled by the contributor, whether already acquired or
     hereafter acquired, that would be infringed by some manner,
     permitted by this License, of making, using, or selling its
     contributor version, but do not include claims that would be
     infringed only as a consequence of further modification of the
     contributor version.  For purposes of this definition, "control"
     includes the right to grant patent sublicenses in a manner
     consistent with the requirements of this License.

     Each contributor grants you a non-exclusive, worldwide,
     royalty-free patent license under the contributor's essential
     patent claims, to make, use, sell, offer for sale, import and
     otherwise run, modify and propagate the contents of its contributor
     version.

     In the following three paragraphs, a "patent license" is any
     express agreement or commitment, however denominated, not to
     enforce a patent (such as an express permission to practice a
     patent or covenant not to sue for patent infringement).  To "grant"
     such a patent license to a party means to make such an agreement or
     commitment not to enforce a patent against the party.

     If you convey a covered work, knowingly relying on a patent
     license, and the Corresponding Source of the work is not available
     for anyone to copy, free of charge and under the terms of this
     License, through a publicly available network server or other
     readily accessible means, then you must either (1) cause the
     Corresponding Source to be so available, or (2) arrange to deprive
     yourself of the benefit of the patent license for this particular
     work, or (3) arrange, in a manner consistent with the requirements
     of this License, to extend the patent license to downstream
     recipients.  "Knowingly relying" means you have actual knowledge
     that, but for the patent license, your conveying the covered work
     in a country, or your recipient's use of the covered work in a
     country, would infringe one or more identifiable patents in that
     country that you have reason to believe are valid.

     If, pursuant to or in connection with a single transaction or
     arrangement, you convey, or propagate by procuring conveyance of, a
     covered work, and grant a patent license to some of the parties
     receiving the covered work authorizing them to use, propagate,
     modify or convey a specific copy of the covered work, then the
     patent license you grant is automatically extended to all
     recipients of the covered work and works based on it.

     A patent license is "discriminatory" if it does not include within
     the scope of its coverage, prohibits the exercise of, or is
     conditioned on the non-exercise of one or more of the rights that
     are specifically granted under this License.  You may not convey a
     covered work if you are a party to an arrangement with a third
     party that is in the business of distributing software, under which
     you make payment to the third party based on the extent of your
     activity of conveying the work, and under which the third party
     grants, to any of the parties who would receive the covered work
     from you, a discriminatory patent license (a) in connection with
     copies of the covered work conveyed by you (or copies made from
     those copies), or (b) primarily for and in connection with specific
     products or compilations that contain the covered work, unless you
     entered into that arrangement, or that patent license was granted,
     prior to 28 March 2007.

     Nothing in this License shall be construed as excluding or limiting
     any implied license or other defenses to infringement that may
     otherwise be available to you under applicable patent law.

  12. No Surrender of Others' Freedom.

     If conditions are imposed on you (whether by court order, agreement
     or otherwise) that contradict the conditions of this License, they
     do not excuse you from the conditions of this License.  If you
     cannot convey a covered work so as to satisfy simultaneously your
     obligations under this License and any other pertinent obligations,
     then as a consequence you may not convey it at all.  For example,
     if you agree to terms that obligate you to collect a royalty for
     further conveying from those to whom you convey the Program, the
     only way you could satisfy both those terms and this License would
     be to refrain entirely from conveying the Program.

  13. Use with the GNU Affero General Public License.

     Notwithstanding any other provision of this License, you have
     permission to link or combine any covered work with a work licensed
     under version 3 of the GNU Affero General Public License into a
     single combined work, and to convey the resulting work.  The terms
     of this License will continue to apply to the part which is the
     covered work, but the special requirements of the GNU Affero
     General Public License, section 13, concerning interaction through
     a network will apply to the combination as such.

  14. Revised Versions of this License.

     The Free Software Foundation may publish revised and/or new
     versions of the GNU General Public License from time to time.  Such
     new versions will be similar in spirit to the present version, but
     may differ in detail to address new problems or concerns.

     Each version is given a distinguishing version number.  If the
     Program specifies that a certain numbered version of the GNU
     General Public License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that numbered version or of any later version published by the Free
     Software Foundation.  If the Program does not specify a version
     number of the GNU General Public License, you may choose any
     version ever published by the Free Software Foundation.

     If the Program specifies that a proxy can decide which future
     versions of the GNU General Public License can be used, that
     proxy's public statement of acceptance of a version permanently
     authorizes you to choose that version for the Program.

     Later license versions may give you additional or different
     permissions.  However, no additional obligations are imposed on any
     author or copyright holder as a result of your choosing to follow a
     later version.

  15. Disclaimer of Warranty.

     THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
     APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE
     COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS"
     WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,
     INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE
     RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.
     SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
     NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

     IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
     WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES
     AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR
     DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR
     CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE
     THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA
     BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
     PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
     PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF
     THE POSSIBILITY OF SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

     If the disclaimer of warranty and limitation of liability provided
     above cannot be given local legal effect according to their terms,
     reviewing courts shall apply local law that most closely
     approximates an absolute waiver of all civil liability in
     connection with the Program, unless a warranty or assumption of
     liability accompanies a copy of the Program in return for a fee.

END OF TERMS AND CONDITIONS
===========================

How to Apply These Terms to Your New Programs
=============================================

If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

 To do so, attach the following notices to the program.  It is safest to
attach them to the start of each source file to most effectively state
the exclusion of warranty; and each file should have at least the
"copyright" line and a pointer to where the full notice is found.

     ONE LINE TO GIVE THE PROGRAM'S NAME AND A BRIEF IDEA OF WHAT IT DOES.
     Copyright (C) YEAR NAME OF AUTHOR

     This program is free software: you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation, either version 3 of the License, or (at
     your option) any later version.

     This program is distributed in the hope that it will be useful, but
     WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program.  If not, see <http://www.gnu.org/licenses/>.

 Also add information on how to contact you by electronic and paper
mail.

 If the program does terminal interaction, make it output a short notice
like this when it starts in an interactive mode:

     PROGRAM Copyright (C) YEAR NAME OF AUTHOR
     This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'.
     This is free software, and you are welcome to redistribute it
     under certain conditions; type 'show c' for details.

 The hypothetical commands 'show w' and 'show c' should show the
appropriate parts of the General Public License.  Of course, your
program's commands might be different; for a GUI interface, you would
use an "about box".

 You should also get your employer (if you work as a programmer) or
school, if any, to sign a "copyright disclaimer" for the program, if
necessary.  For more information on this, and how to apply and follow
the GNU GPL, see <http://www.gnu.org/licenses/>.

 The GNU General Public License does not permit incorporating your
program into proprietary programs.  If your program is a subroutine
library, you may consider it more useful to permit linking proprietary
applications with the library.  If this is what you want to do, use the
GNU Lesser General Public License instead of this License.  But first,
please read <http://www.gnu.org/philosophy/why-not-lgpl.html>.


File: llvm.info,  Node: GNU Free Documentation License,  Next: Contributors,  Prev: Copying,  Up: Top

GNU Free Documentation License
******************************

                     Version 1.3, 3 November 2008

     Copyright (C) 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
     <http://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document "free" in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of "copyleft", which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.  We
     recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it can
     be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     "Document", below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as "you".  You accept
     the license if you copy, modify or distribute the work in a way
     requiring permission under copyright law.

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document's overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The "Invariant Sections" are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in the
     notice that says that the Document is released under this License.
     If a section does not fit the above definition of Secondary then it
     is not allowed to be designated as Invariant.  The Document may
     contain zero Invariant Sections.  If the Document does not identify
     any Invariant Sections then there are none.

     The "Cover Texts" are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images composed
     of pixels) generic paint programs or (for drawings) some widely
     available drawing editor, and that is suitable for input to text
     formatters or for automatic translation to a variety of formats
     suitable for input to text formatters.  A copy made in an otherwise
     Transparent file format whose markup, or absence of markup, has
     been arranged to thwart or discourage subsequent modification by
     readers is not Transparent.  An image format is not Transparent if
     used for any substantial amount of text.  A copy that is not
     "Transparent" is called "Opaque".

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and standard-conforming
     simple HTML, PostScript or PDF designed for human modification.
     Examples of transparent image formats include PNG, XCF and JPG.
     Opaque formats include proprietary formats that can be read and
     edited only by proprietary word processors, SGML or XML for which
     the DTD and/or processing tools are not generally available, and
     the machine-generated HTML, PostScript or PDF produced by some word
     processors for output purposes only.

     The "Title Page" means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, "Title
     Page" means the text near the most prominent appearance of the
     work's title, preceding the beginning of the body of the text.

     The "publisher" means any person or entity that distributes copies
     of the Document to the public.

     A section "Entitled XYZ" means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     "Acknowledgements", "Dedications", "Endorsements", or "History".)
     To "Preserve the Title" of such a section when you modify the
     Document means that it remains a section "Entitled XYZ" according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow the
     conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document's license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the title
     equally prominent and visible.  You may add other material on the
     covers in addition.  Copying with changes limited to the covers, as
     long as they preserve the title of the Document and satisfy these
     conditions, can be treated as verbatim copying in other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a machine-readable
     Transparent copy along with each Opaque copy, or state in or with
     each Opaque copy a computer-network location from which the general
     network-using public has access to download using public-standard
     network protocols a complete Transparent copy of the Document, free
     of added material.  If you use the latter option, you must take
     reasonably prudent steps, when you begin distribution of Opaque
     copies in quantity, to ensure that this Transparent copy will
     remain thus accessible at the stated location until at least one
     year after the last time you distribute an Opaque copy (directly or
     through your agents or retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of copies,
     to give them a chance to provide you with an updated version of the
     Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with the
     Modified Version filling the role of the Document, thus licensing
     distribution and modification of the Modified Version to whoever
     possesses a copy of it.  In addition, you must do these things in
     the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of previous
          versions (which should, if there were any, be listed in the
          History section of the Document).  You may use the same title
          as a previous version if the original publisher of that
          version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document's
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled "History", Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on the
          Title Page.  If there is no section Entitled "History" in the
          Document, create one stating the title, year, authors, and
          publisher of the Document as given on its Title Page, then add
          an item describing the Modified Version as stated in the
          previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in the
          "History" section.  You may omit a network location for a work
          that was published at least four years before the Document
          itself, or if the original publisher of the version it refers
          to gives permission.

       K. For any section Entitled "Acknowledgements" or "Dedications",
          Preserve the Title of the section, and preserve in the section
          all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document, unaltered
          in their text and in their titles.  Section numbers or the
          equivalent are not considered part of the section titles.

       M. Delete any section Entitled "Endorsements".  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          "Endorsements" or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option designate
     some or all of these sections as invariant.  To do this, add their
     titles to the list of Invariant Sections in the Modified Version's
     license notice.  These titles must be distinct from any other
     section titles.

     You may add a section Entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various
     parties--for example, statements of peer review or that the text
     has been approved by an organization as the authoritative
     definition of a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end of
     the list of Cover Texts in the Modified Version.  Only one passage
     of Front-Cover Text and one of Back-Cover Text may be added by (or
     through arrangements made by) any one entity.  If the Document
     already includes a cover text for the same cover, previously added
     by you or by arrangement made by the same entity you are acting on
     behalf of, you may not add another; but you may replace the old
     one, on explicit permission from the previous publisher that added
     the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination all
     of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     "History" in the various original documents, forming one section
     Entitled "History"; likewise combine any sections Entitled
     "Acknowledgements", and any sections Entitled "Dedications".  You
     must delete all sections Entitled "Endorsements."

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the documents
     in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow this
     License in all other respects regarding verbatim copying of that
     document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of a
     storage or distribution medium, is called an "aggregate" if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation's users beyond what the individual
     works permit.  When the Document is included in an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document's Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled "Acknowledgements",
     "Dedications", or "History", the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense, or distribute it is void,
     and will automatically terminate your rights under this License.

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, receipt of a copy of some or all of the
     same material does not give you any rights to use it.

  10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     <http://www.gnu.org/copyleft/>.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If the
     Document does not specify a version number of this License, you may
     choose any version ever published (not as a draft) by the Free
     Software Foundation.  If the Document specifies that a proxy can
     decide which future versions of this License can be used, that
     proxy's public statement of acceptance of a version permanently
     authorizes you to choose that version for the Document.

  11. RELICENSING

     "Massive Multiauthor Collaboration Site" (or "MMC Site") means any
     World Wide Web server that publishes copyrightable works and also
     provides prominent facilities for anybody to edit those works.  A
     public wiki that anybody can edit is an example of such a server.
     A "Massive Multiauthor Collaboration" (or "MMC") contained in the
     site means any set of copyrightable works thus published on the MMC
     site.

     "CC-BY-SA" means the Creative Commons Attribution-Share Alike 3.0
     license published by Creative Commons Corporation, a not-for-profit
     corporation with a principal place of business in San Francisco,
     California, as well as future copyleft versions of that license
     published by that same organization.

     "Incorporate" means to publish or republish a Document, in whole or
     in part, as part of another Document.

     An MMC is "eligible for relicensing" if it is licensed under this
     License, and if all works that were first published under this
     License somewhere other than this MMC, and subsequently
     incorporated in whole or in part into the MMC, (1) had no cover
     texts or invariant sections, and (2) were thus incorporated prior
     to November 1, 2008.

     The operator of an MMC Site may republish an MMC contained in the
     site under CC-BY-SA on the same site at any time before August 1,
     2009, provided the MMC is eligible for relicensing.

ADDENDUM: How to use this License for your documents
====================================================

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.3
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
       Texts.  A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

 If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts,
replace the "with...Texts."  line with this:

         with the Invariant Sections being LIST THEIR TITLES, with
         the Front-Cover Texts being LIST, and with the Back-Cover Texts
         being LIST.

 If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

 If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of free
software license, such as the GNU General Public License, to permit
their use in free software.


File: llvm.info,  Node: Contributors,  Next: Option Index,  Prev: GNU Free Documentation License,  Up: Top

Contributors to GCC
*******************

The GCC project would like to thank its many contributors.  Without them
the project would not have been nearly as successful as it has been.
Any omissions in this list are accidental.  Feel free to contact
<law@redhat.com> or <gerald@pfeifer.com> if you have been left out or
some of your contributions are not listed.  Please keep this list in
alphabetical order.

   * Analog Devices helped implement the support for complex data types
     and iterators.

   * John David Anglin for threading-related fixes and improvements to
     libstdc++-v3, and the HP-UX port.

   * James van Artsdalen wrote the code that makes efficient use of the
     Intel 80387 register stack.

   * Abramo and Roberto Bagnara for the SysV68 Motorola 3300 Delta
     Series port.

   * Alasdair Baird for various bug fixes.

   * Giovanni Bajo for analyzing lots of complicated C++ problem
     reports.

   * Peter Barada for his work to improve code generation for new
     ColdFire cores.

   * Gerald Baumgartner added the signature extension to the C++ front
     end.

   * Godmar Back for his Java improvements and encouragement.

   * Scott Bambrough for help porting the Java compiler.

   * Wolfgang Bangerth for processing tons of bug reports.

   * Jon Beniston for his Microsoft Windows port of Java and port to
     Lattice Mico32.

   * Daniel Berlin for better DWARF2 support, faster/better
     optimizations, improved alias analysis, plus migrating GCC to
     Bugzilla.

   * Geoff Berry for his Java object serialization work and various
     patches.

   * David Binderman tests weekly snapshots of GCC trunk against Fedora
     Rawhide for several architectures.

   * Uros Bizjak for the implementation of x87 math built-in functions
     and for various middle end and i386 back end improvements and bug
     fixes.

   * Eric Blake for helping to make GCJ and libgcj conform to the
     specifications.

   * Janne Blomqvist for contributions to GNU Fortran.

   * Segher Boessenkool for various fixes.

   * Hans-J. Boehm for his garbage collector, IA-64 libffi port, and
     other Java work.

   * Neil Booth for work on cpplib, lang hooks, debug hooks and other
     miscellaneous clean-ups.

   * Steven Bosscher for integrating the GNU Fortran front end into GCC
     and for contributing to the tree-ssa branch.

   * Eric Botcazou for fixing middle- and backend bugs left and right.

   * Per Bothner for his direction via the steering committee and
     various improvements to the infrastructure for supporting new
     languages.  Chill front end implementation.  Initial
     implementations of cpplib, fix-header, config.guess, libio, and
     past C++ library (libg++) maintainer.  Dreaming up, designing and
     implementing much of GCJ.

   * Devon Bowen helped port GCC to the Tahoe.

   * Don Bowman for mips-vxworks contributions.

   * Dave Brolley for work on cpplib and Chill.

   * Paul Brook for work on the ARM architecture and maintaining GNU
     Fortran.

   * Robert Brown implemented the support for Encore 32000 systems.

   * Christian Bruel for improvements to local store elimination.

   * Herman A.J. ten Brugge for various fixes.

   * Joerg Brunsmann for Java compiler hacking and help with the GCJ
     FAQ.

   * Joe Buck for his direction via the steering committee.

   * Craig Burley for leadership of the G77 Fortran effort.

   * Stephan Buys for contributing Doxygen notes for libstdc++.

   * Paolo Carlini for libstdc++ work: lots of efficiency improvements
     to the C++ strings, streambufs and formatted I/O, hard detective
     work on the frustrating localization issues, and keeping up with
     the problem reports.

   * John Carr for his alias work, SPARC hacking, infrastructure
     improvements, previous contributions to the steering committee,
     loop optimizations, etc.

   * Stephane Carrez for 68HC11 and 68HC12 ports.

   * Steve Chamberlain for support for the Renesas SH and H8 processors
     and the PicoJava processor, and for GCJ config fixes.

   * Glenn Chambers for help with the GCJ FAQ.

   * John-Marc Chandonia for various libgcj patches.

   * Denis Chertykov for contributing and maintaining the AVR port, the
     first GCC port for an 8-bit architecture.

   * Scott Christley for his Objective-C contributions.

   * Eric Christopher for his Java porting help and clean-ups.

   * Branko Cibej for more warning contributions.

   * The GNU Classpath project for all of their merged runtime code.

   * Nick Clifton for arm, mcore, fr30, v850, m32r, msp430 rx work,
     '--help', and other random hacking.

   * Michael Cook for libstdc++ cleanup patches to reduce warnings.

   * R. Kelley Cook for making GCC buildable from a read-only directory
     as well as other miscellaneous build process and documentation
     clean-ups.

   * Ralf Corsepius for SH testing and minor bug fixing.

   * Stan Cox for care and feeding of the x86 port and lots of behind
     the scenes hacking.

   * Alex Crain provided changes for the 3b1.

   * Ian Dall for major improvements to the NS32k port.

   * Paul Dale for his work to add uClinux platform support to the m68k
     backend.

   * Dario Dariol contributed the four varieties of sample programs that
     print a copy of their source.

   * Russell Davidson for fstream and stringstream fixes in libstdc++.

   * Bud Davis for work on the G77 and GNU Fortran compilers.

   * Mo DeJong for GCJ and libgcj bug fixes.

   * DJ Delorie for the DJGPP port, build and libiberty maintenance,
     various bug fixes, and the M32C, MeP, MSP430, and RL78 ports.

   * Arnaud Desitter for helping to debug GNU Fortran.

   * Gabriel Dos Reis for contributions to G++, contributions and
     maintenance of GCC diagnostics infrastructure, libstdc++-v3,
     including 'valarray<>', 'complex<>', maintaining the numerics
     library (including that pesky '<limits>' :-) and keeping up-to-date
     anything to do with numbers.

   * Ulrich Drepper for his work on glibc, testing of GCC using glibc,
     ISO C99 support, CFG dumping support, etc., plus support of the C++
     runtime libraries including for all kinds of C interface issues,
     contributing and maintaining 'complex<>', sanity checking and
     disbursement, configuration architecture, libio maintenance, and
     early math work.

   * Franc,ois Dumont for his work on libstdc++-v3, especially
     maintaining and improving 'debug-mode' and associative and
     unordered containers.

   * Zdenek Dvorak for a new loop unroller and various fixes.

   * Michael Eager for his work on the Xilinx MicroBlaze port.

   * Richard Earnshaw for his ongoing work with the ARM.

   * David Edelsohn for his direction via the steering committee,
     ongoing work with the RS6000/PowerPC port, help cleaning up Haifa
     loop changes, doing the entire AIX port of libstdc++ with his bare
     hands, and for ensuring GCC properly keeps working on AIX.

   * Kevin Ediger for the floating point formatting of num_put::do_put
     in libstdc++.

   * Phil Edwards for libstdc++ work including configuration hackery,
     documentation maintainer, chief breaker of the web pages, the
     occasional iostream bug fix, and work on shared library symbol
     versioning.

   * Paul Eggert for random hacking all over GCC.

   * Mark Elbrecht for various DJGPP improvements, and for libstdc++
     configuration support for locales and fstream-related fixes.

   * Vadim Egorov for libstdc++ fixes in strings, streambufs, and
     iostreams.

   * Christian Ehrhardt for dealing with bug reports.

   * Ben Elliston for his work to move the Objective-C runtime into its
     own subdirectory and for his work on autoconf.

   * Revital Eres for work on the PowerPC 750CL port.

   * Marc Espie for OpenBSD support.

   * Doug Evans for much of the global optimization framework, arc,
     m32r, and SPARC work.

   * Christopher Faylor for his work on the Cygwin port and for caring
     and feeding the gcc.gnu.org box and saving its users tons of spam.

   * Fred Fish for BeOS support and Ada fixes.

   * Ivan Fontes Garcia for the Portuguese translation of the GCJ FAQ.

   * Peter Gerwinski for various bug fixes and the Pascal front end.

   * Kaveh R. Ghazi for his direction via the steering committee,
     amazing work to make '-W -Wall -W* -Werror' useful, and testing GCC
     on a plethora of platforms.  Kaveh extends his gratitude to the
     CAIP Center at Rutgers University for providing him with computing
     resources to work on Free Software from the late 1980s to 2010.

   * John Gilmore for a donation to the FSF earmarked improving GNU
     Java.

   * Judy Goldberg for c++ contributions.

   * Torbjorn Granlund for various fixes and the c-torture testsuite,
     multiply- and divide-by-constant optimization, improved long long
     support, improved leaf function register allocation, and his
     direction via the steering committee.

   * Jonny Grant for improvements to 'collect2's' '--help'
     documentation.

   * Anthony Green for his '-Os' contributions, the moxie port, and Java
     front end work.

   * Stu Grossman for gdb hacking, allowing GCJ developers to debug Java
     code.

   * Michael K. Gschwind contributed the port to the PDP-11.

   * Richard Biener for his ongoing middle-end contributions and bug
     fixes and for release management.

   * Ron Guilmette implemented the 'protoize' and 'unprotoize' tools,
     the support for Dwarf symbolic debugging information, and much of
     the support for System V Release 4.  He has also worked heavily on
     the Intel 386 and 860 support.

   * Sumanth Gundapaneni for contributing the CR16 port.

   * Mostafa Hagog for Swing Modulo Scheduling (SMS) and post reload
     GCSE.

   * Bruno Haible for improvements in the runtime overhead for EH, new
     warnings and assorted bug fixes.

   * Andrew Haley for his amazing Java compiler and library efforts.

   * Chris Hanson assisted in making GCC work on HP-UX for the 9000
     series 300.

   * Michael Hayes for various thankless work he's done trying to get
     the c30/c40 ports functional.  Lots of loop and unroll improvements
     and fixes.

   * Dara Hazeghi for wading through myriads of target-specific bug
     reports.

   * Kate Hedstrom for staking the G77 folks with an initial testsuite.

   * Richard Henderson for his ongoing SPARC, alpha, ia32, and ia64
     work, loop opts, and generally fixing lots of old problems we've
     ignored for years, flow rewrite and lots of further stuff,
     including reviewing tons of patches.

   * Aldy Hernandez for working on the PowerPC port, SIMD support, and
     various fixes.

   * Nobuyuki Hikichi of Software Research Associates, Tokyo,
     contributed the support for the Sony NEWS machine.

   * Kazu Hirata for caring and feeding the Renesas H8/300 port and
     various fixes.

   * Katherine Holcomb for work on GNU Fortran.

   * Manfred Hollstein for his ongoing work to keep the m88k alive, lots
     of testing and bug fixing, particularly of GCC configury code.

   * Steve Holmgren for MachTen patches.

   * Mat Hostetter for work on the TILE-Gx and TILEPro ports.

   * Jan Hubicka for his x86 port improvements.

   * Falk Hueffner for working on C and optimization bug reports.

   * Bernardo Innocenti for his m68k work, including merging of ColdFire
     improvements and uClinux support.

   * Christian Iseli for various bug fixes.

   * Kamil Iskra for general m68k hacking.

   * Lee Iverson for random fixes and MIPS testing.

   * Balaji V. Iyer for Cilk+ development and merging.

   * Andreas Jaeger for testing and benchmarking of GCC and various bug
     fixes.

   * Jakub Jelinek for his SPARC work and sibling call optimizations as
     well as lots of bug fixes and test cases, and for improving the
     Java build system.

   * Janis Johnson for ia64 testing and fixes, her quality improvement
     sidetracks, and web page maintenance.

   * Kean Johnston for SCO OpenServer support and various fixes.

   * Tim Josling for the sample language treelang based originally on
     Richard Kenner's "toy" language.

   * Nicolai Josuttis for additional libstdc++ documentation.

   * Klaus Kaempf for his ongoing work to make alpha-vms a viable
     target.

   * Steven G. Kargl for work on GNU Fortran.

   * David Kashtan of SRI adapted GCC to VMS.

   * Ryszard Kabatek for many, many libstdc++ bug fixes and
     optimizations of strings, especially member functions, and for
     auto_ptr fixes.

   * Geoffrey Keating for his ongoing work to make the PPC work for
     GNU/Linux and his automatic regression tester.

   * Brendan Kehoe for his ongoing work with G++ and for a lot of early
     work in just about every part of libstdc++.

   * Oliver M. Kellogg of Deutsche Aerospace contributed the port to the
     MIL-STD-1750A.

   * Richard Kenner of the New York University Ultracomputer Research
     Laboratory wrote the machine descriptions for the AMD 29000, the
     DEC Alpha, the IBM RT PC, and the IBM RS/6000 as well as the
     support for instruction attributes.  He also made changes to better
     support RISC processors including changes to common subexpression
     elimination, strength reduction, function calling sequence
     handling, and condition code support, in addition to generalizing
     the code for frame pointer elimination and delay slot scheduling.
     Richard Kenner was also the head maintainer of GCC for several
     years.

   * Mumit Khan for various contributions to the Cygwin and Mingw32
     ports and maintaining binary releases for Microsoft Windows hosts,
     and for massive libstdc++ porting work to Cygwin/Mingw32.

   * Robin Kirkham for cpu32 support.

   * Mark Klein for PA improvements.

   * Thomas Koenig for various bug fixes.

   * Bruce Korb for the new and improved fixincludes code.

   * Benjamin Kosnik for his G++ work and for leading the libstdc++-v3
     effort.

   * Charles LaBrec contributed the support for the Integrated Solutions
     68020 system.

   * Asher Langton and Mike Kumbera for contributing Cray pointer
     support to GNU Fortran, and for other GNU Fortran improvements.

   * Jeff Law for his direction via the steering committee, coordinating
     the entire egcs project and GCC 2.95, rolling out snapshots and
     releases, handling merges from GCC2, reviewing tons of patches that
     might have fallen through the cracks else, and random but extensive
     hacking.

   * Walter Lee for work on the TILE-Gx and TILEPro ports.

   * Marc Lehmann for his direction via the steering committee and
     helping with analysis and improvements of x86 performance.

   * Victor Leikehman for work on GNU Fortran.

   * Ted Lemon wrote parts of the RTL reader and printer.

   * Kriang Lerdsuwanakij for C++ improvements including template as
     template parameter support, and many C++ fixes.

   * Warren Levy for tremendous work on libgcj (Java Runtime Library)
     and random work on the Java front end.

   * Alain Lichnewsky ported GCC to the MIPS CPU.

   * Oskar Liljeblad for hacking on AWT and his many Java bug reports
     and patches.

   * Robert Lipe for OpenServer support, new testsuites, testing, etc.

   * Chen Liqin for various S+core related fixes/improvement, and for
     maintaining the S+core port.

   * Weiwen Liu for testing and various bug fixes.

   * Manuel Lo'pez-Iba'n~ez for improving '-Wconversion' and many other
     diagnostics fixes and improvements.

   * Dave Love for his ongoing work with the Fortran front end and
     runtime libraries.

   * Martin von Lo"wis for internal consistency checking infrastructure,
     various C++ improvements including namespace support, and tons of
     assistance with libstdc++/compiler merges.

   * H.J. Lu for his previous contributions to the steering committee,
     many x86 bug reports, prototype patches, and keeping the GNU/Linux
     ports working.

   * Greg McGary for random fixes and (someday) bounded pointers.

   * Andrew MacLeod for his ongoing work in building a real EH system,
     various code generation improvements, work on the global optimizer,
     etc.

   * Vladimir Makarov for hacking some ugly i960 problems, PowerPC
     hacking improvements to compile-time performance, overall knowledge
     and direction in the area of instruction scheduling, and design and
     implementation of the automaton based instruction scheduler.

   * Bob Manson for his behind the scenes work on dejagnu.

   * Philip Martin for lots of libstdc++ string and vector iterator
     fixes and improvements, and string clean up and testsuites.

   * All of the Mauve project contributors, for Java test code.

   * Bryce McKinlay for numerous GCJ and libgcj fixes and improvements.

   * Adam Megacz for his work on the Microsoft Windows port of GCJ.

   * Michael Meissner for LRS framework, ia32, m32r, v850, m88k, MIPS,
     powerpc, haifa, ECOFF debug support, and other assorted hacking.

   * Jason Merrill for his direction via the steering committee and
     leading the G++ effort.

   * Martin Michlmayr for testing GCC on several architectures using the
     entire Debian archive.

   * David Miller for his direction via the steering committee, lots of
     SPARC work, improvements in jump.c and interfacing with the Linux
     kernel developers.

   * Gary Miller ported GCC to Charles River Data Systems machines.

   * Alfred Minarik for libstdc++ string and ios bug fixes, and turning
     the entire libstdc++ testsuite namespace-compatible.

   * Mark Mitchell for his direction via the steering committee,
     mountains of C++ work, load/store hoisting out of loops, alias
     analysis improvements, ISO C 'restrict' support, and serving as
     release manager from 2000 to 2011.

   * Alan Modra for various GNU/Linux bits and testing.

   * Toon Moene for his direction via the steering committee, Fortran
     maintenance, and his ongoing work to make us make Fortran run fast.

   * Jason Molenda for major help in the care and feeding of all the
     services on the gcc.gnu.org (formerly egcs.cygnus.com)
     machine--mail, web services, ftp services, etc etc.  Doing all this
     work on scrap paper and the backs of envelopes would have been...
     difficult.

   * Catherine Moore for fixing various ugly problems we have sent her
     way, including the haifa bug which was killing the Alpha & PowerPC
     Linux kernels.

   * Mike Moreton for his various Java patches.

   * David Mosberger-Tang for various Alpha improvements, and for the
     initial IA-64 port.

   * Stephen Moshier contributed the floating point emulator that
     assists in cross-compilation and permits support for floating point
     numbers wider than 64 bits and for ISO C99 support.

   * Bill Moyer for his behind the scenes work on various issues.

   * Philippe De Muyter for his work on the m68k port.

   * Joseph S. Myers for his work on the PDP-11 port, format checking
     and ISO C99 support, and continuous emphasis on (and contributions
     to) documentation.

   * Nathan Myers for his work on libstdc++-v3: architecture and
     authorship through the first three snapshots, including
     implementation of locale infrastructure, string, shadow C headers,
     and the initial project documentation (DESIGN, CHECKLIST, and so
     forth).  Later, more work on MT-safe string and shadow headers.

   * Felix Natter for documentation on porting libstdc++.

   * Nathanael Nerode for cleaning up the configuration/build process.

   * NeXT, Inc. donated the front end that supports the Objective-C
     language.

   * Hans-Peter Nilsson for the CRIS and MMIX ports, improvements to the
     search engine setup, various documentation fixes and other small
     fixes.

   * Geoff Noer for his work on getting cygwin native builds working.

   * Diego Novillo for his work on Tree SSA, OpenMP, SPEC performance
     tracking web pages, GIMPLE tuples, and assorted fixes.

   * David O'Brien for the FreeBSD/alpha, FreeBSD/AMD x86-64,
     FreeBSD/ARM, FreeBSD/PowerPC, and FreeBSD/SPARC64 ports and related
     infrastructure improvements.

   * Alexandre Oliva for various build infrastructure improvements,
     scripts and amazing testing work, including keeping libtool issues
     sane and happy.

   * Stefan Olsson for work on mt_alloc.

   * Melissa O'Neill for various NeXT fixes.

   * Rainer Orth for random MIPS work, including improvements to GCC's
     o32 ABI support, improvements to dejagnu's MIPS support, Java
     configuration clean-ups and porting work, and maintaining the IRIX,
     Solaris 2, and Tru64 UNIX ports.

   * Hartmut Penner for work on the s390 port.

   * Paul Petersen wrote the machine description for the Alliant FX/8.

   * Alexandre Petit-Bianco for implementing much of the Java compiler
     and continued Java maintainership.

   * Matthias Pfaller for major improvements to the NS32k port.

   * Gerald Pfeifer for his direction via the steering committee,
     pointing out lots of problems we need to solve, maintenance of the
     web pages, and taking care of documentation maintenance in general.

   * Andrew Pinski for processing bug reports by the dozen.

   * Ovidiu Predescu for his work on the Objective-C front end and
     runtime libraries.

   * Jerry Quinn for major performance improvements in C++ formatted
     I/O.

   * Ken Raeburn for various improvements to checker, MIPS ports and
     various cleanups in the compiler.

   * Rolf W. Rasmussen for hacking on AWT.

   * David Reese of Sun Microsystems contributed to the Solaris on
     PowerPC port.

   * Volker Reichelt for keeping up with the problem reports.

   * Joern Rennecke for maintaining the sh port, loop, regmove & reload
     hacking and developing and maintaining the Epiphany port.

   * Loren J. Rittle for improvements to libstdc++-v3 including the
     FreeBSD port, threading fixes, thread-related configury changes,
     critical threading documentation, and solutions to really tricky
     I/O problems, as well as keeping GCC properly working on FreeBSD
     and continuous testing.

   * Craig Rodrigues for processing tons of bug reports.

   * Ola Ro"nnerup for work on mt_alloc.

   * Gavin Romig-Koch for lots of behind the scenes MIPS work.

   * David Ronis inspired and encouraged Craig to rewrite the G77
     documentation in texinfo format by contributing a first pass at a
     translation of the old 'g77-0.5.16/f/DOC' file.

   * Ken Rose for fixes to GCC's delay slot filling code.

   * Paul Rubin wrote most of the preprocessor.

   * Pe'tur Runo'lfsson for major performance improvements in C++
     formatted I/O and large file support in C++ filebuf.

   * Chip Salzenberg for libstdc++ patches and improvements to locales,
     traits, Makefiles, libio, libtool hackery, and "long long" support.

   * Juha Sarlin for improvements to the H8 code generator.

   * Greg Satz assisted in making GCC work on HP-UX for the 9000 series
     300.

   * Roger Sayle for improvements to constant folding and GCC's RTL
     optimizers as well as for fixing numerous bugs.

   * Bradley Schatz for his work on the GCJ FAQ.

   * Peter Schauer wrote the code to allow debugging to work on the
     Alpha.

   * William Schelter did most of the work on the Intel 80386 support.

   * Tobias Schlu"ter for work on GNU Fortran.

   * Bernd Schmidt for various code generation improvements and major
     work in the reload pass, serving as release manager for GCC 2.95.3,
     and work on the Blackfin and C6X ports.

   * Peter Schmid for constant testing of libstdc++--especially
     application testing, going above and beyond what was requested for
     the release criteria--and libstdc++ header file tweaks.

   * Jason Schroeder for jcf-dump patches.

   * Andreas Schwab for his work on the m68k port.

   * Lars Segerlund for work on GNU Fortran.

   * Dodji Seketeli for numerous C++ bug fixes and debug info
     improvements.

   * Tim Shen for major work on '<regex>'.

   * Joel Sherrill for his direction via the steering committee, RTEMS
     contributions and RTEMS testing.

   * Nathan Sidwell for many C++ fixes/improvements.

   * Jeffrey Siegal for helping RMS with the original design of GCC,
     some code which handles the parse tree and RTL data structures,
     constant folding and help with the original VAX & m68k ports.

   * Kenny Simpson for prompting libstdc++ fixes due to defect reports
     from the LWG (thereby keeping GCC in line with updates from the
     ISO).

   * Franz Sirl for his ongoing work with making the PPC port stable for
     GNU/Linux.

   * Andrey Slepuhin for assorted AIX hacking.

   * Trevor Smigiel for contributing the SPU port.

   * Christopher Smith did the port for Convex machines.

   * Danny Smith for his major efforts on the Mingw (and Cygwin) ports.

   * Randy Smith finished the Sun FPA support.

   * Ed Smith-Rowland for his continuous work on libstdc++-v3, special
     functions, '<random>', and various improvements to C++11 features.

   * Scott Snyder for queue, iterator, istream, and string fixes and
     libstdc++ testsuite entries.  Also for providing the patch to G77
     to add rudimentary support for 'INTEGER*1', 'INTEGER*2', and
     'LOGICAL*1'.

   * Zdenek Sojka for running automated regression testing of GCC and
     reporting numerous bugs.

   * Jayant Sonar for contributing the CR16 port.

   * Brad Spencer for contributions to the GLIBCPP_FORCE_NEW technique.

   * Richard Stallman, for writing the original GCC and launching the
     GNU project.

   * Jan Stein of the Chalmers Computer Society provided support for
     Genix, as well as part of the 32000 machine description.

   * Nigel Stephens for various mips16 related fixes/improvements.

   * Jonathan Stone wrote the machine description for the Pyramid
     computer.

   * Graham Stott for various infrastructure improvements.

   * John Stracke for his Java HTTP protocol fixes.

   * Mike Stump for his Elxsi port, G++ contributions over the years and
     more recently his vxworks contributions

   * Jeff Sturm for Java porting help, bug fixes, and encouragement.

   * Shigeya Suzuki for this fixes for the bsdi platforms.

   * Ian Lance Taylor for the Go frontend, the initial mips16 and mips64
     support, general configury hacking, fixincludes, etc.

   * Holger Teutsch provided the support for the Clipper CPU.

   * Gary Thomas for his ongoing work to make the PPC work for
     GNU/Linux.

   * Philipp Thomas for random bug fixes throughout the compiler

   * Jason Thorpe for thread support in libstdc++ on NetBSD.

   * Kresten Krab Thorup wrote the run time support for the Objective-C
     language and the fantastic Java bytecode interpreter.

   * Michael Tiemann for random bug fixes, the first instruction
     scheduler, initial C++ support, function integration, NS32k, SPARC
     and M88k machine description work, delay slot scheduling.

   * Andreas Tobler for his work porting libgcj to Darwin.

   * Teemu Torma for thread safe exception handling support.

   * Leonard Tower wrote parts of the parser, RTL generator, and RTL
     definitions, and of the VAX machine description.

   * Daniel Towner and Hariharan Sandanagobalane contributed and
     maintain the picoChip port.

   * Tom Tromey for internationalization support and for his many Java
     contributions and libgcj maintainership.

   * Lassi Tuura for improvements to config.guess to determine HP
     processor types.

   * Petter Urkedal for libstdc++ CXXFLAGS, math, and algorithms fixes.

   * Andy Vaught for the design and initial implementation of the GNU
     Fortran front end.

   * Brent Verner for work with the libstdc++ cshadow files and their
     associated configure steps.

   * Todd Vierling for contributions for NetBSD ports.

   * Jonathan Wakely for contributing libstdc++ Doxygen notes and XHTML
     guidance.

   * Dean Wakerley for converting the install documentation from HTML to
     texinfo in time for GCC 3.0.

   * Krister Walfridsson for random bug fixes.

   * Feng Wang for contributions to GNU Fortran.

   * Stephen M. Webb for time and effort on making libstdc++ shadow
     files work with the tricky Solaris 8+ headers, and for pushing the
     build-time header tree.  Also, for starting and driving the
     '<regex>' effort.

   * John Wehle for various improvements for the x86 code generator,
     related infrastructure improvements to help x86 code generation,
     value range propagation and other work, WE32k port.

   * Ulrich Weigand for work on the s390 port.

   * Zack Weinberg for major work on cpplib and various other bug fixes.

   * Matt Welsh for help with Linux Threads support in GCJ.

   * Urban Widmark for help fixing java.io.

   * Mark Wielaard for new Java library code and his work integrating
     with Classpath.

   * Dale Wiles helped port GCC to the Tahoe.

   * Bob Wilson from Tensilica, Inc. for the Xtensa port.

   * Jim Wilson for his direction via the steering committee, tackling
     hard problems in various places that nobody else wanted to work on,
     strength reduction and other loop optimizations.

   * Paul Woegerer and Tal Agmon for the CRX port.

   * Carlo Wood for various fixes.

   * Tom Wood for work on the m88k port.

   * Chung-Ju Wu for his work on the Andes NDS32 port.

   * Canqun Yang for work on GNU Fortran.

   * Masanobu Yuhara of Fujitsu Laboratories implemented the machine
     description for the Tron architecture (specifically, the Gmicro).

   * Kevin Zachmann helped port GCC to the Tahoe.

   * Ayal Zaks for Swing Modulo Scheduling (SMS).

   * Xiaoqiang Zhang for work on GNU Fortran.

   * Gilles Zunino for help porting Java to Irix.

 The following people are recognized for their contributions to GNAT,
the Ada front end of GCC:
   * Bernard Banner

   * Romain Berrendonner

   * Geert Bosch

   * Emmanuel Briot

   * Joel Brobecker

   * Ben Brosgol

   * Vincent Celier

   * Arnaud Charlet

   * Chien Chieng

   * Cyrille Comar

   * Cyrille Crozes

   * Robert Dewar

   * Gary Dismukes

   * Robert Duff

   * Ed Falis

   * Ramon Fernandez

   * Sam Figueroa

   * Vasiliy Fofanov

   * Michael Friess

   * Franco Gasperoni

   * Ted Giering

   * Matthew Gingell

   * Laurent Guerby

   * Jerome Guitton

   * Olivier Hainque

   * Jerome Hugues

   * Hristian Kirtchev

   * Jerome Lambourg

   * Bruno Leclerc

   * Albert Lee

   * Sean McNeil

   * Javier Miranda

   * Laurent Nana

   * Pascal Obry

   * Dong-Ik Oh

   * Laurent Pautet

   * Brett Porter

   * Thomas Quinot

   * Nicolas Roche

   * Pat Rogers

   * Jose Ruiz

   * Douglas Rupp

   * Sergey Rybin

   * Gail Schenker

   * Ed Schonberg

   * Nicolas Setton

   * Samuel Tardieu

 The following people are recognized for their contributions of new
features, bug reports, testing and integration of classpath/libgcj for
GCC version 4.1:
   * Lillian Angel for 'JTree' implementation and lots Free Swing
     additions and bug fixes.

   * Wolfgang Baer for 'GapContent' bug fixes.

   * Anthony Balkissoon for 'JList', Free Swing 1.5 updates and mouse
     event fixes, lots of Free Swing work including 'JTable' editing.

   * Stuart Ballard for RMI constant fixes.

   * Goffredo Baroncelli for 'HTTPURLConnection' fixes.

   * Gary Benson for 'MessageFormat' fixes.

   * Daniel Bonniot for 'Serialization' fixes.

   * Chris Burdess for lots of gnu.xml and http protocol fixes, 'StAX'
     and 'DOM xml:id' support.

   * Ka-Hing Cheung for 'TreePath' and 'TreeSelection' fixes.

   * Archie Cobbs for build fixes, VM interface updates,
     'URLClassLoader' updates.

   * Kelley Cook for build fixes.

   * Martin Cordova for Suggestions for better 'SocketTimeoutException'.

   * David Daney for 'BitSet' bug fixes, 'HttpURLConnection' rewrite and
     improvements.

   * Thomas Fitzsimmons for lots of upgrades to the gtk+ AWT and Cairo
     2D support.  Lots of imageio framework additions, lots of AWT and
     Free Swing bug fixes.

   * Jeroen Frijters for 'ClassLoader' and nio cleanups, serialization
     fixes, better 'Proxy' support, bug fixes and IKVM integration.

   * Santiago Gala for 'AccessControlContext' fixes.

   * Nicolas Geoffray for 'VMClassLoader' and 'AccessController'
     improvements.

   * David Gilbert for 'basic' and 'metal' icon and plaf support and
     lots of documenting, Lots of Free Swing and metal theme additions.
     'MetalIconFactory' implementation.

   * Anthony Green for 'MIDI' framework, 'ALSA' and 'DSSI' providers.

   * Andrew Haley for 'Serialization' and 'URLClassLoader' fixes, gcj
     build speedups.

   * Kim Ho for 'JFileChooser' implementation.

   * Andrew John Hughes for 'Locale' and net fixes, URI RFC2986 updates,
     'Serialization' fixes, 'Properties' XML support and generic branch
     work, VMIntegration guide update.

   * Bastiaan Huisman for 'TimeZone' bug fixing.

   * Andreas Jaeger for mprec updates.

   * Paul Jenner for better '-Werror' support.

   * Ito Kazumitsu for 'NetworkInterface' implementation and updates.

   * Roman Kennke for 'BoxLayout', 'GrayFilter' and 'SplitPane', plus
     bug fixes all over.  Lots of Free Swing work including styled text.

   * Simon Kitching for 'String' cleanups and optimization suggestions.

   * Michael Koch for configuration fixes, 'Locale' updates, bug and
     build fixes.

   * Guilhem Lavaux for configuration, thread and channel fixes and
     Kaffe integration.  JCL native 'Pointer' updates.  Logger bug
     fixes.

   * David Lichteblau for JCL support library global/local reference
     cleanups.

   * Aaron Luchko for JDWP updates and documentation fixes.

   * Ziga Mahkovec for 'Graphics2D' upgraded to Cairo 0.5 and new regex
     features.

   * Sven de Marothy for BMP imageio support, CSS and 'TextLayout'
     fixes.  'GtkImage' rewrite, 2D, awt, free swing and date/time fixes
     and implementing the Qt4 peers.

   * Casey Marshall for crypto algorithm fixes, 'FileChannel' lock,
     'SystemLogger' and 'FileHandler' rotate implementations, NIO
     'FileChannel.map' support, security and policy updates.

   * Bryce McKinlay for RMI work.

   * Audrius Meskauskas for lots of Free Corba, RMI and HTML work plus
     testing and documenting.

   * Kalle Olavi Niemitalo for build fixes.

   * Rainer Orth for build fixes.

   * Andrew Overholt for 'File' locking fixes.

   * Ingo Proetel for 'Image', 'Logger' and 'URLClassLoader' updates.

   * Olga Rodimina for 'MenuSelectionManager' implementation.

   * Jan Roehrich for 'BasicTreeUI' and 'JTree' fixes.

   * Julian Scheid for documentation updates and gjdoc support.

   * Christian Schlichtherle for zip fixes and cleanups.

   * Robert Schuster for documentation updates and beans fixes,
     'TreeNode' enumerations and 'ActionCommand' and various fixes, XML
     and URL, AWT and Free Swing bug fixes.

   * Keith Seitz for lots of JDWP work.

   * Christian Thalinger for 64-bit cleanups, Configuration and VM
     interface fixes and 'CACAO' integration, 'fdlibm' updates.

   * Gael Thomas for 'VMClassLoader' boot packages support suggestions.

   * Andreas Tobler for Darwin and Solaris testing and fixing, 'Qt4'
     support for Darwin/OS X, 'Graphics2D' support, 'gtk+' updates.

   * Dalibor Topic for better 'DEBUG' support, build cleanups and Kaffe
     integration.  'Qt4' build infrastructure, 'SHA1PRNG' and
     'GdkPixbugDecoder' updates.

   * Tom Tromey for Eclipse integration, generics work, lots of bug
     fixes and gcj integration including coordinating The Big Merge.

   * Mark Wielaard for bug fixes, packaging and release management,
     'Clipboard' implementation, system call interrupts and network
     timeouts and 'GdkPixpufDecoder' fixes.

 In addition to the above, all of which also contributed time and energy
in testing GCC, we would like to thank the following for their
contributions to testing:

   * Michael Abd-El-Malek

   * Thomas Arend

   * Bonzo Armstrong

   * Steven Ashe

   * Chris Baldwin

   * David Billinghurst

   * Jim Blandy

   * Stephane Bortzmeyer

   * Horst von Brand

   * Frank Braun

   * Rodney Brown

   * Sidney Cadot

   * Bradford Castalia

   * Robert Clark

   * Jonathan Corbet

   * Ralph Doncaster

   * Richard Emberson

   * Levente Farkas

   * Graham Fawcett

   * Mark Fernyhough

   * Robert A. French

   * Jo"rgen Freyh

   * Mark K. Gardner

   * Charles-Antoine Gauthier

   * Yung Shing Gene

   * David Gilbert

   * Simon Gornall

   * Fred Gray

   * John Griffin

   * Patrik Hagglund

   * Phil Hargett

   * Amancio Hasty

   * Takafumi Hayashi

   * Bryan W. Headley

   * Kevin B. Hendricks

   * Joep Jansen

   * Christian Joensson

   * Michel Kern

   * David Kidd

   * Tobias Kuipers

   * Anand Krishnaswamy

   * A. O. V. Le Blanc

   * llewelly

   * Damon Love

   * Brad Lucier

   * Matthias Klose

   * Martin Knoblauch

   * Rick Lutowski

   * Jesse Macnish

   * Stefan Morrell

   * Anon A. Mous

   * Matthias Mueller

   * Pekka Nikander

   * Rick Niles

   * Jon Olson

   * Magnus Persson

   * Chris Pollard

   * Richard Polton

   * Derk Reefman

   * David Rees

   * Paul Reilly

   * Tom Reilly

   * Torsten Rueger

   * Danny Sadinoff

   * Marc Schifer

   * Erik Schnetter

   * Wayne K. Schroll

   * David Schuler

   * Vin Shelton

   * Tim Souder

   * Adam Sulmicki

   * Bill Thorson

   * George Talbot

   * Pedro A. M. Vazquez

   * Gregory Warnes

   * Ian Watson

   * David E. Young

   * And many others

 And finally we'd like to thank everyone who uses the compiler, provides
feedback and generally reminds us why we're doing this work in the first
place.


File: llvm.info,  Node: Option Index,  Next: Keyword Index,  Prev: Contributors,  Up: Top

Option Index
************

GCC's command line options are indexed here without any initial '-' or
'--'.  Where an option has both positive and negative forms (such as
'-fOPTION' and '-fno-OPTION'), relevant entries in the manual are
indexed under the most appropriate form; it may sometimes be useful to
look up both forms.

 [index ]
* Menu:

* ###:                                   Overall Options.    (line  109)
* @:                                     Overall Options.    (line   96)
* A:                                     Preprocessor Options.
                                                             (line  512)
* ansi:                                  Standards.          (line   23)
* ansi <1>:                              C Dialect Options.  (line   17)
* ansi <2>:                              Other Builtins.     (line   21)
* ansi <3>:                              Non-bugs.           (line  107)
* B:                                     Directory Options.  (line   59)
* c:                                     Overall Options.    (line  115)
* C:                                     Preprocessor Options.
                                                             (line  569)
* c <1>:                                 Link Options.       (line   26)
* coverage:                              Debugging Options.  (line  361)
* coverage <1>:                          Instrumentation Options.
                                                             (line   51)
* D:                                     Preprocessor Options.
                                                             (line   73)
* d:                                     Developer Options.  (line   24)
* da:                                    Developer Options.  (line  229)
* dA:                                    Developer Options.  (line  232)
* dD:                                    Preprocessor Options.
                                                             (line  543)
* dD <1>:                                Developer Options.  (line  236)
* dH:                                    Developer Options.  (line  240)
* dI:                                    Preprocessor Options.
                                                             (line  552)
* dM:                                    Preprocessor Options.
                                                             (line  528)
* dN:                                    Preprocessor Options.
                                                             (line  549)
* dp:                                    Developer Options.  (line  243)
* dP:                                    Developer Options.  (line  248)
* dU:                                    Preprocessor Options.
                                                             (line  556)
* dumpmachine:                           Debugging Options.  (line  500)
* dumpmachine <1>:                       Developer Options.  (line 1025)
* dumpspecs:                             Debugging Options.  (line  508)
* dumpspecs <1>:                         Developer Options.  (line 1033)
* dumpversion:                           Debugging Options.  (line  504)
* dumpversion <1>:                       Developer Options.  (line 1029)
* dx:                                    Developer Options.  (line  252)
* E:                                     Overall Options.    (line  126)
* E <1>:                                 Link Options.       (line   26)
* emit-ast:                              Overall Options.    (line  133)
* emit-llvm:                             Overall Options.    (line  137)
* faggressive-loop-optimizations:        Optimize Options.   (line  508)
* falign-functions:                      Optimize Options.   (line 1566)
* falign-jumps:                          Optimize Options.   (line 1615)
* falign-labels:                         Optimize Options.   (line 1584)
* falign-loops:                          Optimize Options.   (line 1602)
* fasan-shadow-offset:                   Instrumentation Options.
                                                             (line  289)
* fassociative-math:                     Optimize Options.   (line 2125)
* fasynchronous-unwind-tables:           Code Gen Options.   (line  152)
* fauto-inc-dec:                         Optimize Options.   (line  532)
* fauto-profile:                         Optimize Options.   (line 2005)
* fblocks:                               C Dialect Options.  (line   66)
* fborland-extensions:                   C Dialect Options.  (line   70)
* fbounds-check:                         Instrumentation Options.
                                                             (line  337)
* fbounds-check <1>:                     Code Gen Options.   (line   21)
* fbranch-probabilities:                 Optimize Options.   (line 2253)
* fbranch-target-load-optimize:          Optimize Options.   (line 2376)
* fbranch-target-load-optimize2:         Optimize Options.   (line 2382)
* fbtr-bb-exclusive:                     Optimize Options.   (line 2386)
* fbuild-session-file:                   Overall Options.    (line  141)
* fbuild-session-timestamp:              Overall Options.    (line  145)
* fcall-saved:                           Code Gen Options.   (line  362)
* fcall-used:                            Code Gen Options.   (line  348)
* fcaller-saves:                         Optimize Options.   (line  881)
* fcheck-data-deps:                      Optimize Options.   (line 1201)
* fcheck-new:                            C++ Dialect Options.
                                                             (line   33)
* fcheck-pointer-bounds:                 Instrumentation Options.
                                                             (line  343)
* fchecking:                             Developer Options.  (line  724)
* fchkp-check-incomplete-type:           Instrumentation Options.
                                                             (line  381)
* fchkp-check-read:                      Instrumentation Options.
                                                             (line  431)
* fchkp-check-write:                     Instrumentation Options.
                                                             (line  435)
* fchkp-first-field-has-own-bounds:      Instrumentation Options.
                                                             (line  392)
* fchkp-instrument-calls:                Instrumentation Options.
                                                             (line  443)
* fchkp-instrument-marked-only:          Instrumentation Options.
                                                             (line  447)
* fchkp-narrow-bounds:                   Instrumentation Options.
                                                             (line  385)
* fchkp-narrow-to-innermost-array:       Instrumentation Options.
                                                             (line  398)
* fchkp-optimize:                        Instrumentation Options.
                                                             (line  403)
* fchkp-store-bounds:                    Instrumentation Options.
                                                             (line  439)
* fchkp-treat-zero-dynamic-size-as-infinite: Instrumentation Options.
                                                             (line  424)
* fchkp-use-fast-string-functions:       Instrumentation Options.
                                                             (line  407)
* fchkp-use-nochk-string-functions:      Instrumentation Options.
                                                             (line  411)
* fchkp-use-static-bounds:               Instrumentation Options.
                                                             (line  415)
* fchkp-use-static-const-bounds:         Instrumentation Options.
                                                             (line  419)
* fchkp-use-wrappers:                    Instrumentation Options.
                                                             (line  452)
* fcombine-stack-adjustments:            Optimize Options.   (line  893)
* fcommon:                               Variable Attributes.
                                                             (line  105)
* fcompare-debug:                        Developer Options.  (line  817)
* fcompare-debug-second:                 Developer Options.  (line  843)
* fcompare-elim:                         Optimize Options.   (line 1938)
* fconserve-stack:                       Optimize Options.   (line  908)
* fconstant-string-class:                Objective-C and Objective-C++ Dialect Options.
                                                             (line   43)
* fconstexpr-depth:                      C++ Dialect Options.
                                                             (line   43)
* fcprop-registers:                      Optimize Options.   (line 1950)
* fcrossjumping:                         Optimize Options.   (line  525)
* fcse-follow-jumps:                     Optimize Options.   (line  444)
* fcse-skip-blocks:                      Optimize Options.   (line  453)
* fcx-fortran-rules:                     Optimize Options.   (line 2240)
* fcx-limited-range:                     Optimize Options.   (line 2228)
* fcxx-exceptions:                       C++ Dialect Options.
                                                             (line   49)
* fdata-sections:                        Optimize Options.   (line 2357)
* fdbg-cnt:                              Developer Options.  (line  949)
* fdbg-cnt-list:                         Developer Options.  (line  946)
* fdce:                                  Optimize Options.   (line  538)
* fdebug-cpp:                            Preprocessor Options.
                                                             (line  443)
* fdebug-prefix-map:                     Debugging Options.  (line  321)
* fdebug-types-section:                  Debugging Options.  (line   94)
* fdeclone-ctor-dtor:                    Optimize Options.   (line  561)
* fdelayed-branch:                       Optimize Options.   (line  711)
* fdelayed-template-parsing:             C++ Dialect Options.
                                                             (line   53)
* fdelete-dead-exceptions:               Code Gen Options.   (line  137)
* fdelete-null-pointer-checks:           Optimize Options.   (line  572)
* fdevirtualize:                         Optimize Options.   (line  590)
* fdevirtualize-at-ltrans:               Optimize Options.   (line  607)
* fdevirtualize-speculatively:           Optimize Options.   (line  597)
* fdiagnostics-color:                    Diagnostic Message Formatting Options.
                                                             (line   45)
* fdiagnostics-show-location:            Diagnostic Message Formatting Options.
                                                             (line   30)
* fdiagnostics-show-option:              Diagnostic Message Formatting Options.
                                                             (line   98)
* fdirectives-only:                      Preprocessor Options.
                                                             (line  392)
* fdisable-:                             Developer Options.  (line  656)
* fdollars-in-identifiers:               Preprocessor Options.
                                                             (line  413)
* fdollars-in-identifiers <1>:           Interoperation.     (line  141)
* fdse:                                  Optimize Options.   (line  542)
* fdump-class-hierarchy:                 Developer Options.  (line  287)
* fdump-final-insns:                     Developer Options.  (line  811)
* fdump-ipa:                             Developer Options.  (line  295)
* fdump-noaddr:                          Developer Options.  (line  256)
* fdump-passes:                          Developer Options.  (line  312)
* fdump-rtl-alignments:                  Developer Options.  (line   48)
* fdump-rtl-all:                         Developer Options.  (line  229)
* fdump-rtl-asmcons:                     Developer Options.  (line   51)
* fdump-rtl-auto_inc_dec:                Developer Options.  (line   55)
* fdump-rtl-barriers:                    Developer Options.  (line   59)
* fdump-rtl-bbpart:                      Developer Options.  (line   62)
* fdump-rtl-bbro:                        Developer Options.  (line   65)
* fdump-rtl-btl2:                        Developer Options.  (line   69)
* fdump-rtl-btl2 <1>:                    Developer Options.  (line   69)
* fdump-rtl-bypass:                      Developer Options.  (line   73)
* fdump-rtl-ce1:                         Developer Options.  (line   84)
* fdump-rtl-ce2:                         Developer Options.  (line   84)
* fdump-rtl-ce3:                         Developer Options.  (line   84)
* fdump-rtl-combine:                     Developer Options.  (line   76)
* fdump-rtl-compgotos:                   Developer Options.  (line   79)
* fdump-rtl-cprop_hardreg:               Developer Options.  (line   88)
* fdump-rtl-csa:                         Developer Options.  (line   91)
* fdump-rtl-cse1:                        Developer Options.  (line   95)
* fdump-rtl-cse2:                        Developer Options.  (line   95)
* fdump-rtl-dbr:                         Developer Options.  (line  102)
* fdump-rtl-dce:                         Developer Options.  (line   99)
* fdump-rtl-dce1:                        Developer Options.  (line  106)
* fdump-rtl-dce2:                        Developer Options.  (line  106)
* fdump-rtl-dfinish:                     Developer Options.  (line  225)
* fdump-rtl-dfinit:                      Developer Options.  (line  225)
* fdump-rtl-eh:                          Developer Options.  (line  110)
* fdump-rtl-eh_ranges:                   Developer Options.  (line  113)
* fdump-rtl-expand:                      Developer Options.  (line  116)
* fdump-rtl-fwprop1:                     Developer Options.  (line  120)
* fdump-rtl-fwprop2:                     Developer Options.  (line  120)
* fdump-rtl-gcse1:                       Developer Options.  (line  125)
* fdump-rtl-gcse2:                       Developer Options.  (line  125)
* fdump-rtl-init-regs:                   Developer Options.  (line  129)
* fdump-rtl-initvals:                    Developer Options.  (line  132)
* fdump-rtl-into_cfglayout:              Developer Options.  (line  135)
* fdump-rtl-ira:                         Developer Options.  (line  138)
* fdump-rtl-jump:                        Developer Options.  (line  141)
* fdump-rtl-loop2:                       Developer Options.  (line  144)
* fdump-rtl-mach:                        Developer Options.  (line  148)
* fdump-rtl-mode_sw:                     Developer Options.  (line  152)
* fdump-rtl-outof_cfglayout:             Developer Options.  (line  158)
* fdump-rtl-PASS:                        Developer Options.  (line   24)
* fdump-rtl-peephole2:                   Developer Options.  (line  161)
* fdump-rtl-postreload:                  Developer Options.  (line  164)
* fdump-rtl-pro_and_epilogue:            Developer Options.  (line  167)
* fdump-rtl-ree:                         Developer Options.  (line  175)
* fdump-rtl-regclass:                    Developer Options.  (line  225)
* fdump-rtl-rnreg:                       Developer Options.  (line  155)
* fdump-rtl-sched1:                      Developer Options.  (line  171)
* fdump-rtl-sched2:                      Developer Options.  (line  171)
* fdump-rtl-seqabstr:                    Developer Options.  (line  178)
* fdump-rtl-shorten:                     Developer Options.  (line  181)
* fdump-rtl-sibling:                     Developer Options.  (line  184)
* fdump-rtl-sms:                         Developer Options.  (line  195)
* fdump-rtl-split1:                      Developer Options.  (line  191)
* fdump-rtl-split2:                      Developer Options.  (line  191)
* fdump-rtl-split3:                      Developer Options.  (line  191)
* fdump-rtl-split4:                      Developer Options.  (line  191)
* fdump-rtl-split5:                      Developer Options.  (line  191)
* fdump-rtl-stack:                       Developer Options.  (line  199)
* fdump-rtl-subreg1:                     Developer Options.  (line  205)
* fdump-rtl-subreg2:                     Developer Options.  (line  205)
* fdump-rtl-subregs_of_mode_finish:      Developer Options.  (line  225)
* fdump-rtl-subregs_of_mode_init:        Developer Options.  (line  225)
* fdump-rtl-unshare:                     Developer Options.  (line  209)
* fdump-rtl-vartrack:                    Developer Options.  (line  212)
* fdump-rtl-vregs:                       Developer Options.  (line  215)
* fdump-rtl-web:                         Developer Options.  (line  218)
* fdump-statistics:                      Developer Options.  (line  316)
* fdump-translation-unit:                Developer Options.  (line  278)
* fdump-tree:                            Developer Options.  (line  328)
* fdump-tree-alias:                      Developer Options.  (line  455)
* fdump-tree-all:                        Developer Options.  (line  544)
* fdump-tree-backprop:                   Developer Options.  (line  510)
* fdump-tree-ccp:                        Developer Options.  (line  459)
* fdump-tree-cfg:                        Developer Options.  (line  443)
* fdump-tree-ch:                         Developer Options.  (line  447)
* fdump-tree-copyprop:                   Developer Options.  (line  475)
* fdump-tree-dce:                        Developer Options.  (line  483)
* fdump-tree-dom:                        Developer Options.  (line  496)
* fdump-tree-dse:                        Developer Options.  (line  501)
* fdump-tree-forwprop:                   Developer Options.  (line  515)
* fdump-tree-fre:                        Developer Options.  (line  471)
* fdump-tree-gimple:                     Developer Options.  (line  438)
* fdump-tree-nrv:                        Developer Options.  (line  520)
* fdump-tree-oaccdevlow:                 Developer Options.  (line  539)
* fdump-tree-optimized:                  Developer Options.  (line  435)
* fdump-tree-original:                   Developer Options.  (line  432)
* fdump-tree-phiopt:                     Developer Options.  (line  505)
* fdump-tree-pre:                        Developer Options.  (line  467)
* fdump-tree-sink:                       Developer Options.  (line  492)
* fdump-tree-slp:                        Developer Options.  (line  530)
* fdump-tree-split-paths:                Developer Options.  (line  417)
* fdump-tree-sra:                        Developer Options.  (line  487)
* fdump-tree-ssa:                        Developer Options.  (line  451)
* fdump-tree-storeccp:                   Developer Options.  (line  463)
* fdump-tree-store_copyprop:             Developer Options.  (line  479)
* fdump-tree-vect:                       Developer Options.  (line  525)
* fdump-tree-vrp:                        Developer Options.  (line  535)
* fdump-unnumbered:                      Developer Options.  (line  266)
* fdump-unnumbered-links:                Developer Options.  (line  272)
* fdwarf2-cfi-asm:                       Debugging Options.  (line  325)
* fearly-inlining:                       Optimize Options.   (line  296)
* feliminate-unused-debug-types:         Debugging Options.  (line  512)
* femit-all-decls:                       C Dialect Options.  (line  110)
* fenable-:                              Developer Options.  (line  656)
* fexceptions:                           Code Gen Options.   (line  115)
* fexcess-precision:                     Optimize Options.   (line 2052)
* fexec-charset:                         Preprocessor Options.
                                                             (line  470)
* fexpensive-optimizations:              Optimize Options.   (line  614)
* fext-numeric-literals:                 C++ Dialect Options.
                                                             (line  236)
* fextended-identifiers:                 Preprocessor Options.
                                                             (line  416)
* ffast-math:                            Optimize Options.   (line 2075)
* ffat-lto-objects:                      Optimize Options.   (line 1920)
* ffinite-math-only:                     Optimize Options.   (line 2152)
* ffixed:                                Code Gen Options.   (line  336)
* ffloat-store:                          Optimize Options.   (line 2038)
* ffloat-store <1>:                      Disappointments.    (line   77)
* ffor-scope:                            C++ Dialect Options.
                                                             (line   64)
* fforward-propagate:                    Optimize Options.   (line  200)
* ffp-contract:                          Optimize Options.   (line  209)
* ffreestanding:                         Standards.          (line   98)
* ffreestanding <1>:                     C Dialect Options.  (line  114)
* ffreestanding <2>:                     Warning Options.    (line  392)
* ffreestanding <3>:                     Function Attributes.
                                                             (line  484)
* ffriend-injection:                     C++ Dialect Options.
                                                             (line   76)
* ffunction-sections:                    Optimize Options.   (line 2357)
* fgcse:                                 Optimize Options.   (line  467)
* fgcse-after-reload:                    Optimize Options.   (line  503)
* fgcse-las:                             Optimize Options.   (line  496)
* fgcse-lm:                              Optimize Options.   (line  478)
* fgcse-sm:                              Optimize Options.   (line  487)
* fgnu-runtime:                          Objective-C and Objective-C++ Dialect Options.
                                                             (line   52)
* fgnu89-inline:                         C Dialect Options.  (line  125)
* fgraphite-identity:                    Optimize Options.   (line 1175)
* fhoist-adjacent-loads:                 Optimize Options.   (line  941)
* fhosted:                               C Dialect Options.  (line  146)
* fif-conversion:                        Optimize Options.   (line  546)
* fif-conversion2:                       Optimize Options.   (line  555)
* findirect-inlining:                    Optimize Options.   (line  269)
* finhibit-size-directive:               Code Gen Options.   (line  257)
* finline-functions:                     Optimize Options.   (line  277)
* finline-functions-called-once:         Optimize Options.   (line  288)
* finline-limit:                         Optimize Options.   (line  312)
* finline-small-functions:               Optimize Options.   (line  260)
* finput-charset:                        Preprocessor Options.
                                                             (line  483)
* finstrument-functions:                 Instrumentation Options.
                                                             (line  606)
* finstrument-functions <1>:             Code Gen Options.   (line  392)
* finstrument-functions <2>:             Function Attributes.
                                                             (line 1084)
* finstrument-functions-exclude-file-list: Instrumentation Options.
                                                             (line  641)
* finstrument-functions-exclude-file-list <1>: Code Gen Options.
                                                             (line  427)
* finstrument-functions-exclude-function-list: Instrumentation Options.
                                                             (line  662)
* finstrument-functions-exclude-function-list <1>: Code Gen Options.
                                                             (line  448)
* fipa-cp:                               Optimize Options.   (line  974)
* fipa-cp-alignment:                     Optimize Options.   (line  992)
* fipa-cp-clone:                         Optimize Options.   (line  982)
* fipa-icf:                              Optimize Options.   (line  999)
* fipa-profile:                          Optimize Options.   (line  966)
* fipa-pta:                              Optimize Options.   (line  960)
* fipa-pure-const:                       Optimize Options.   (line  952)
* fipa-ra:                               Optimize Options.   (line  899)
* fipa-reference:                        Optimize Options.   (line  956)
* fipa-sra:                              Optimize Options.   (line  305)
* fira-algorithm:                        Optimize Options.   (line  642)
* fira-hoist-pressure:                   Optimize Options.   (line  671)
* fira-loop-pressure:                    Optimize Options.   (line  678)
* fira-region:                           Optimize Options.   (line  650)
* fira-verbose:                          Optimize Options.   (line  698)
* fira-verbose <1>:                      Developer Options.  (line  876)
* fisolate-erroneous-paths-attribute:    Optimize Options.   (line 1020)
* fisolate-erroneous-paths-dereference:  Optimize Options.   (line 1013)
* fivopts:                               Optimize Options.   (line 1277)
* fkeep-inline-functions:                Optimize Options.   (line  343)
* fkeep-inline-functions <1>:            Inline.             (line   51)
* fkeep-static-consts:                   Optimize Options.   (line  350)
* flax-vector-conversions:               C Dialect Options.  (line  154)
* fleading-underscore:                   Code Gen Options.   (line  530)
* flive-range-shrinkage:                 Optimize Options.   (line  637)
* floop-block:                           Optimize Options.   (line 1146)
* floop-interchange:                     Optimize Options.   (line 1101)
* floop-nest-optimize:                   Optimize Options.   (line 1183)
* floop-parallelize-all:                 Optimize Options.   (line 1195)
* floop-strip-mine:                      Optimize Options.   (line 1125)
* floop-unroll-and-jam:                  Optimize Options.   (line 1189)
* flra-remat:                            Optimize Options.   (line  704)
* flto:                                  Optimize Options.   (line 1669)
* flto-compression-level:                Optimize Options.   (line 1882)
* flto-odr-type-merging:                 Optimize Options.   (line 1877)
* flto-partition:                        Optimize Options.   (line 1863)
* flto-report:                           Optimize Options.   (line 1890)
* flto-report <1>:                       Developer Options.  (line  882)
* flto-report-wpa:                       Optimize Options.   (line 1898)
* flto-report-wpa <1>:                   Developer Options.  (line  890)
* fmax-errors:                           Warning Options.    (line   55)
* fmem-report:                           Debugging Options.  (line  339)
* fmem-report <1>:                       Developer Options.  (line  894)
* fmem-report-wpa:                       Debugging Options.  (line  343)
* fmem-report-wpa <1>:                   Developer Options.  (line  898)
* fmerge-all-constants:                  Optimize Options.   (line  369)
* fmerge-constants:                      Optimize Options.   (line  359)
* fmessage-length:                       Diagnostic Message Formatting Options.
                                                             (line   24)
* fmodulo-sched:                         Optimize Options.   (line  380)
* fmodulo-sched-allow-regmoves:          Optimize Options.   (line  385)
* fmove-loop-invariants:                 Optimize Options.   (line 2347)
* fms-compatibility:                     C Dialect Options.  (line  159)
* fms-compatibility-version:             C Dialect Options.  (line  163)
* fms-extensions:                        C Dialect Options.  (line  167)
* fms-extensions <1>:                    C++ Dialect Options.
                                                             (line  222)
* fms-extensions <2>:                    Unnamed Fields.     (line   36)
* fmsc-version:                          C Dialect Options.  (line  185)
* fnext-runtime:                         Objective-C and Objective-C++ Dialect Options.
                                                             (line   56)
* fno-access-control:                    C++ Dialect Options.
                                                             (line   25)
* fno-asm:                               C Dialect Options.  (line   53)
* fno-assume-sane-operator-new:          C++ Dialect Options.
                                                             (line   29)
* fno-branch-count-reg:                  Optimize Options.   (line  392)
* fno-builtin:                           C Dialect Options.  (line   75)
* fno-builtin <1>:                       Warning Options.    (line  392)
* fno-builtin <2>:                       Function Attributes.
                                                             (line  484)
* fno-builtin <3>:                       Other Builtins.     (line   14)
* fno-canonical-system-headers:          Preprocessor Options.
                                                             (line  420)
* fno-check-pointer-bounds:              Instrumentation Options.
                                                             (line  343)
* fno-checking:                          Developer Options.  (line  724)
* fno-chkp-check-incomplete-type:        Instrumentation Options.
                                                             (line  381)
* fno-chkp-check-read:                   Instrumentation Options.
                                                             (line  431)
* fno-chkp-check-write:                  Instrumentation Options.
                                                             (line  435)
* fno-chkp-first-field-has-own-bounds:   Instrumentation Options.
                                                             (line  392)
* fno-chkp-instrument-calls:             Instrumentation Options.
                                                             (line  443)
* fno-chkp-instrument-marked-only:       Instrumentation Options.
                                                             (line  447)
* fno-chkp-narrow-bounds:                Instrumentation Options.
                                                             (line  385)
* fno-chkp-narrow-to-innermost-array:    Instrumentation Options.
                                                             (line  398)
* fno-chkp-optimize:                     Instrumentation Options.
                                                             (line  403)
* fno-chkp-store-bounds:                 Instrumentation Options.
                                                             (line  439)
* fno-chkp-treat-zero-dynamic-size-as-infinite: Instrumentation Options.
                                                             (line  424)
* fno-chkp-use-fast-string-functions:    Instrumentation Options.
                                                             (line  407)
* fno-chkp-use-nochk-string-functions:   Instrumentation Options.
                                                             (line  411)
* fno-chkp-use-static-bounds:            Instrumentation Options.
                                                             (line  415)
* fno-chkp-use-static-const-bounds:      Instrumentation Options.
                                                             (line  419)
* fno-chkp-use-wrappers:                 Instrumentation Options.
                                                             (line  452)
* fno-common:                            Code Gen Options.   (line  235)
* fno-common <1>:                        Variable Attributes.
                                                             (line  105)
* fno-compare-debug:                     Developer Options.  (line  817)
* fno-debug-types-section:               Debugging Options.  (line   94)
* fno-default-inline:                    Inline.             (line   71)
* fno-defer-pop:                         Optimize Options.   (line  192)
* fno-diagnostics-show-option:           Diagnostic Message Formatting Options.
                                                             (line   98)
* fno-dwarf2-cfi-asm:                    Debugging Options.  (line  325)
* fno-elide-constructors:                C++ Dialect Options.
                                                             (line   57)
* fno-eliminate-unused-debug-types:      Debugging Options.  (line  512)
* fno-ext-numeric-literals:              C++ Dialect Options.
                                                             (line  236)
* fno-for-scope:                         C++ Dialect Options.
                                                             (line   64)
* fno-function-cse:                      Optimize Options.   (line  404)
* fno-gnu-inline-asm:                    C Dialect Options.  (line  142)
* fno-gnu-keywords:                      C++ Dialect Options.
                                                             (line   89)
* fno-gnu-unique:                        Code Gen Options.   (line  158)
* fno-guess-branch-probability:          Optimize Options.   (line 1436)
* fno-ident:                             Code Gen Options.   (line  254)
* fno-implement-inlines:                 C++ Dialect Options.
                                                             (line  100)
* fno-implement-inlines <1>:             C++ Interface.      (line   66)
* fno-implicit-templates:                C++ Dialect Options.
                                                             (line   94)
* fno-implicit-templates <1>:            Template Instantiation.
                                                             (line   78)
* fno-inline:                            Optimize Options.   (line  252)
* fno-ira-share-save-slots:              Optimize Options.   (line  686)
* fno-ira-share-spill-slots:             Optimize Options.   (line  692)
* fno-jump-tables:                       Code Gen Options.   (line  328)
* fno-keep-inline-dllexport:             Optimize Options.   (line  337)
* fno-lifetime-dse:                      Optimize Options.   (line  628)
* fno-math-errno:                        Optimize Options.   (line 2089)
* fno-operator-names:                    C++ Dialect Options.
                                                             (line  105)
* fno-peephole:                          Optimize Options.   (line 1427)
* fno-peephole2:                         Optimize Options.   (line 1427)
* fno-rtti:                              C++ Dialect Options.
                                                             (line  114)
* fno-sanitize-recover:                  Instrumentation Options.
                                                             (line  298)
* fno-sanitize=all:                      Debugging Options.  (line  308)
* fno-sanitize=all <1>:                  Instrumentation Options.
                                                             (line  283)
* fno-sched-interblock:                  Optimize Options.   (line  737)
* fno-sched-spec:                        Optimize Options.   (line  742)
* fno-show-column:                       Preprocessor Options.
                                                             (line  507)
* fno-signed-bitfields:                  C Dialect Options.  (line  206)
* fno-signed-zeros:                      Optimize Options.   (line 2164)
* fno-spell-checking:                    C Dialect Options.  (line  219)
* fno-stack-limit:                       Instrumentation Options.
                                                             (line  518)
* fno-stack-limit <1>:                   Code Gen Options.   (line  498)
* fno-threadsafe-statics:                C++ Dialect Options.
                                                             (line  147)
* fno-toplevel-reorder:                  Optimize Options.   (line 1635)
* fno-trapping-math:                     Optimize Options.   (line 2174)
* fno-unsigned-bitfields:                C Dialect Options.  (line  206)
* fno-var-tracking-assignments-toggle:   Developer Options.  (line  864)
* fno-weak:                              C++ Dialect Options.
                                                             (line  245)
* fno-working-directory:                 Preprocessor Options.
                                                             (line  493)
* fno-zero-initialized-in-bss:           Optimize Options.   (line  415)
* fnon-call-exceptions:                  Code Gen Options.   (line  129)
* fobjc-abi-version:                     Objective-C and Objective-C++ Dialect Options.
                                                             (line   62)
* fobjc-call-cxx-cdtors:                 Objective-C and Objective-C++ Dialect Options.
                                                             (line   73)
* fobjc-exceptions:                      Objective-C and Objective-C++ Dialect Options.
                                                             (line   98)
* fobjc-gc:                              Objective-C and Objective-C++ Dialect Options.
                                                             (line  107)
* fomit-frame-pointer:                   Optimize Options.   (line  220)
* fopenmp:                               C Dialect Options.  (line  189)
* fopt-info:                             Developer Options.  (line  550)
* foptimize-sibling-calls:               Optimize Options.   (line  240)
* foptimize-strlen:                      Optimize Options.   (line  245)
* fpack-struct:                          Code Gen Options.   (line  379)
* fpartial-inlining:                     Optimize Options.   (line 1402)
* fpascal-strings:                       C Dialect Options.  (line  199)
* fpcc-struct-return:                    Code Gen Options.   (line  171)
* fpcc-struct-return <1>:                Incompatibilities.  (line  170)
* fpch-deps:                             Preprocessor Options.
                                                             (line  282)
* fpch-preprocess:                       Preprocessor Options.
                                                             (line  290)
* fpeel-loops:                           Optimize Options.   (line 2339)
* fpermissive:                           C++ Dialect Options.
                                                             (line  109)
* fpic:                                  Code Gen Options.   (line  285)
* fPIC:                                  Code Gen Options.   (line  306)
* fpie:                                  Code Gen Options.   (line  319)
* fPIE:                                  Code Gen Options.   (line  319)
* fplan9-extensions:                     Unnamed Fields.     (line   43)
* fplugin:                               Overall Options.    (line  149)
* fpost-ipa-mem-report:                  Developer Options.  (line  903)
* fpre-ipa-mem-report:                   Developer Options.  (line  902)
* fpredictive-commoning:                 Optimize Options.   (line 1409)
* fprefetch-loop-arrays:                 Optimize Options.   (line 1416)
* fpreprocessed:                         Preprocessor Options.
                                                             (line  424)
* fprofile-arcs:                         Debugging Options.  (line  347)
* fprofile-arcs <1>:                     Instrumentation Options.
                                                             (line   37)
* fprofile-arcs <2>:                     Other Builtins.     (line  260)
* fprofile-correction:                   Optimize Options.   (line 1957)
* fprofile-dir:                          Optimize Options.   (line 1964)
* fprofile-dir <1>:                      Instrumentation Options.
                                                             (line   99)
* fprofile-generate:                     Optimize Options.   (line 1975)
* fprofile-generate <1>:                 Instrumentation Options.
                                                             (line  110)
* fprofile-reorder-functions:            Optimize Options.   (line 2281)
* fprofile-report:                       Developer Options.  (line  907)
* fprofile-use:                          Optimize Options.   (line 1989)
* fprofile-values:                       Optimize Options.   (line 2272)
* frandom-seed:                          Debugging Options.  (line  409)
* frandom-seed <1>:                      Developer Options.  (line  728)
* freciprocal-math:                      Optimize Options.   (line 2142)
* frecord-gcc-switches:                  Code Gen Options.   (line  273)
* free:                                  Optimize Options.   (line  620)
* freg-struct-return:                    Code Gen Options.   (line  189)
* frename-registers:                     Optimize Options.   (line 2298)
* freorder-blocks:                       Optimize Options.   (line 1453)
* freorder-blocks-and-partition:         Optimize Options.   (line 1459)
* freorder-functions:                    Optimize Options.   (line 1472)
* frepo:                                 Template Instantiation.
                                                             (line   54)
* freport-bug:                           Developer Options.  (line  262)
* frerun-cse-after-loop:                 Optimize Options.   (line  461)
* freschedule-modulo-scheduled-loops:    Optimize Options.   (line  836)
* frounding-math:                        Optimize Options.   (line 2189)
* fsanitize-coverage=trace-pc:           Instrumentation Options.
                                                             (line  333)
* fsanitize-recover:                     Instrumentation Options.
                                                             (line  298)
* fsanitize-sections:                    Instrumentation Options.
                                                             (line  294)
* fsanitize-undefined-trap-on-error:     Debugging Options.  (line  314)
* fsanitize-undefined-trap-on-error <1>: Instrumentation Options.
                                                             (line  326)
* fsanitize=address:                     Debugging Options.  (line  160)
* fsanitize=address <1>:                 Instrumentation Options.
                                                             (line  127)
* fsanitize=alignment:                   Debugging Options.  (line  248)
* fsanitize=alignment <1>:               Instrumentation Options.
                                                             (line  223)
* fsanitize=bool:                        Debugging Options.  (line  286)
* fsanitize=bool <1>:                    Instrumentation Options.
                                                             (line  261)
* fsanitize=bounds:                      Debugging Options.  (line  242)
* fsanitize=bounds <1>:                  Instrumentation Options.
                                                             (line  210)
* fsanitize=bounds-strict:               Instrumentation Options.
                                                             (line  216)
* fsanitize=enum:                        Debugging Options.  (line  291)
* fsanitize=enum <1>:                    Instrumentation Options.
                                                             (line  266)
* fsanitize=float-cast-overflow:         Debugging Options.  (line  266)
* fsanitize=float-cast-overflow <1>:     Instrumentation Options.
                                                             (line  241)
* fsanitize=float-divide-by-zero:        Debugging Options.  (line  260)
* fsanitize=float-divide-by-zero <1>:    Instrumentation Options.
                                                             (line  235)
* fsanitize=integer-divide-by-zero:      Debugging Options.  (line  205)
* fsanitize=integer-divide-by-zero <1>:  Instrumentation Options.
                                                             (line  173)
* fsanitize=kernel-address:              Debugging Options.  (line  170)
* fsanitize=kernel-address <1>:          Instrumentation Options.
                                                             (line  139)
* fsanitize=leak:                        Debugging Options.  (line  184)
* fsanitize=leak <1>:                    Instrumentation Options.
                                                             (line  152)
* fsanitize=nonnull-attribute:           Debugging Options.  (line  274)
* fsanitize=nonnull-attribute <1>:       Instrumentation Options.
                                                             (line  249)
* fsanitize=null:                        Debugging Options.  (line  219)
* fsanitize=null <1>:                    Instrumentation Options.
                                                             (line  187)
* fsanitize=object-size:                 Debugging Options.  (line  255)
* fsanitize=object-size <1>:             Instrumentation Options.
                                                             (line  230)
* fsanitize=return:                      Debugging Options.  (line  227)
* fsanitize=return <1>:                  Instrumentation Options.
                                                             (line  195)
* fsanitize=returns-nonnull-attribute:   Debugging Options.  (line  280)
* fsanitize=returns-nonnull-attribute <1>: Instrumentation Options.
                                                             (line  255)
* fsanitize=shift:                       Debugging Options.  (line  199)
* fsanitize=shift <1>:                   Instrumentation Options.
                                                             (line  167)
* fsanitize=signed-integer-overflow:     Debugging Options.  (line  233)
* fsanitize=signed-integer-overflow <1>: Instrumentation Options.
                                                             (line  201)
* fsanitize=thread:                      Debugging Options.  (line  175)
* fsanitize=thread <1>:                  Instrumentation Options.
                                                             (line  143)
* fsanitize=undefined:                   Debugging Options.  (line  194)
* fsanitize=undefined <1>:               Instrumentation Options.
                                                             (line  162)
* fsanitize=unreachable:                 Debugging Options.  (line  209)
* fsanitize=unreachable <1>:             Instrumentation Options.
                                                             (line  177)
* fsanitize=vla-bound:                   Debugging Options.  (line  215)
* fsanitize=vla-bound <1>:               Instrumentation Options.
                                                             (line  183)
* fsanitize=vptr:                        Debugging Options.  (line  297)
* fsanitize=vptr <1>:                    Instrumentation Options.
                                                             (line  272)
* fsched-critical-path-heuristic:        Optimize Options.   (line  802)
* fsched-dep-count-heuristic:            Optimize Options.   (line  829)
* fsched-group-heuristic:                Optimize Options.   (line  796)
* fsched-last-insn-heuristic:            Optimize Options.   (line  822)
* fsched-pressure:                       Optimize Options.   (line  747)
* fsched-rank-heuristic:                 Optimize Options.   (line  815)
* fsched-spec-insn-heuristic:            Optimize Options.   (line  808)
* fsched-spec-load:                      Optimize Options.   (line  756)
* fsched-spec-load-dangerous:            Optimize Options.   (line  761)
* fsched-stalled-insns:                  Optimize Options.   (line  767)
* fsched-stalled-insns-dep:              Optimize Options.   (line  777)
* fsched-verbose:                        Developer Options.  (line  642)
* fsched2-use-superblocks:               Optimize Options.   (line  786)
* fschedule-fusion:                      Optimize Options.   (line 2308)
* fschedule-insns:                       Optimize Options.   (line  718)
* fschedule-insns2:                      Optimize Options.   (line  728)
* fsection-anchors:                      Optimize Options.   (line 2415)
* fsel-sched-pipelining:                 Optimize Options.   (line  849)
* fsel-sched-pipelining-outer-loops:     Optimize Options.   (line  854)
* fselective-scheduling:                 Optimize Options.   (line  841)
* fselective-scheduling2:                Optimize Options.   (line  845)
* fsemantic-interposition:               Optimize Options.   (line  859)
* fshort-double:                         Code Gen Options.   (line  217)
* fshort-enums:                          Code Gen Options.   (line  207)
* fshort-enums <1>:                      Structures unions enumerations and bit-fields implementation.
                                                             (line   48)
* fshort-enums <2>:                      Type Attributes.    (line  114)
* fshort-enums <3>:                      Non-bugs.           (line   42)
* fshort-wchar:                          Code Gen Options.   (line  225)
* fshow-overloads:                       C++ Dialect Options.
                                                             (line  217)
* fshrink-wrap:                          Optimize Options.   (line  876)
* fsignaling-nans:                       Optimize Options.   (line 2209)
* fsigned-bitfields:                     C Dialect Options.  (line  206)
* fsigned-bitfields <1>:                 Non-bugs.           (line   57)
* fsigned-char:                          C Dialect Options.  (line  212)
* fsigned-char <1>:                      Characters implementation.
                                                             (line   31)
* fsimd-cost-model:                      Optimize Options.   (line 1367)
* fsingle-precision-constant:            Optimize Options.   (line 2224)
* fsized-deallocation:                   C++ Dialect Options.
                                                             (line  124)
* fsplit-ivs-in-unroller:                Optimize Options.   (line 1383)
* fsplit-stack:                          Instrumentation Options.
                                                             (line  535)
* fsplit-stack <1>:                      Code Gen Options.   (line  512)
* fsplit-stack <2>:                      Function Attributes.
                                                             (line 1089)
* fsplit-wide-types:                     Optimize Options.   (line  436)
* fssa-phiopt:                           Optimize Options.   (line 1043)
* fstack-check:                          Instrumentation Options.
                                                             (line  480)
* fstack-check <1>:                      Code Gen Options.   (line  460)
* fstack-limit-register:                 Instrumentation Options.
                                                             (line  518)
* fstack-limit-register <1>:             Code Gen Options.   (line  498)
* fstack-limit-symbol:                   Instrumentation Options.
                                                             (line  518)
* fstack-limit-symbol <1>:               Code Gen Options.   (line  498)
* fstack-protector:                      Optimize Options.   (line 2390)
* fstack-protector <1>:                  Instrumentation Options.
                                                             (line  459)
* fstack-protector-all:                  Optimize Options.   (line 2399)
* fstack-protector-all <1>:              Instrumentation Options.
                                                             (line  468)
* fstack-protector-explicit:             Optimize Options.   (line 2407)
* fstack-protector-explicit <1>:         Instrumentation Options.
                                                             (line  476)
* fstack-protector-strong:               Optimize Options.   (line 2402)
* fstack-protector-strong <1>:           Instrumentation Options.
                                                             (line  471)
* fstack-usage:                          Developer Options.  (line  911)
* fstack_reuse:                          Code Gen Options.   (line   27)
* fstats:                                Developer Options.  (line  940)
* fstdarg-opt:                           Optimize Options.   (line 2411)
* fstrict-aliasing:                      Optimize Options.   (line 1485)
* fstrict-enums:                         C++ Dialect Options.
                                                             (line  227)
* fstrict-overflow:                      Optimize Options.   (line 1531)
* fstrict-volatile-bitfields:            Code Gen Options.   (line  617)
* fsync-libcalls:                        Code Gen Options.   (line  649)
* fsyntax-only:                          Warning Options.    (line   51)
* ftabstop:                              Preprocessor Options.
                                                             (line  437)
* ftemplate-backtrace-limit:             C++ Dialect Options.
                                                             (line  134)
* ftemplate-depth:                       C++ Dialect Options.
                                                             (line  138)
* ftest-coverage:                        Debugging Options.  (line  401)
* ftest-coverage <1>:                    Instrumentation Options.
                                                             (line   91)
* fthread-jumps:                         Optimize Options.   (line  427)
* ftime-report:                          Debugging Options.  (line  335)
* ftime-report <1>:                      Developer Options.  (line  872)
* ftls-model:                            Code Gen Options.   (line  541)
* ftracer:                               Optimize Options.   (line 2316)
* ftrack-macro-expansion:                Preprocessor Options.
                                                             (line  452)
* ftrapv:                                Code Gen Options.   (line  103)
* ftree-bit-ccp:                         Optimize Options.   (line 1032)
* ftree-builtin-call-dce:                Optimize Options.   (line 1064)
* ftree-ccp:                             Optimize Options.   (line 1038)
* ftree-ch:                              Optimize Options.   (line 1084)
* ftree-coalesce-inlined-vars:           Optimize Options.   (line 1308)
* ftree-coalesce-vars:                   Optimize Options.   (line 1317)
* ftree-copy-prop:                       Optimize Options.   (line  947)
* ftree-copyrename:                      Optimize Options.   (line 1301)
* ftree-dce:                             Optimize Options.   (line 1060)
* ftree-dominator-opts:                  Optimize Options.   (line 1070)
* ftree-dse:                             Optimize Options.   (line 1077)
* ftree-forwprop:                        Optimize Options.   (line  926)
* ftree-fre:                             Optimize Options.   (line  930)
* ftree-loop-distribute-patterns:        Optimize Options.   (line 1242)
* ftree-loop-distribution:               Optimize Options.   (line 1225)
* ftree-loop-if-convert:                 Optimize Options.   (line 1205)
* ftree-loop-if-convert-stores:          Optimize Options.   (line 1212)
* ftree-loop-im:                         Optimize Options.   (line 1262)
* ftree-loop-ivcanon:                    Optimize Options.   (line 1271)
* ftree-loop-linear:                     Optimize Options.   (line 1095)
* ftree-loop-optimize:                   Optimize Options.   (line 1091)
* ftree-loop-vectorize:                  Optimize Options.   (line 1345)
* ftree-parallelize-loops:               Optimize Options.   (line 1282)
* ftree-partial-pre:                     Optimize Options.   (line  922)
* ftree-phiprop:                         Optimize Options.   (line  937)
* ftree-pre:                             Optimize Options.   (line  918)
* ftree-pta:                             Optimize Options.   (line 1291)
* ftree-reassoc:                         Optimize Options.   (line  914)
* ftree-sink:                            Optimize Options.   (line 1028)
* ftree-slp-vectorize:                   Optimize Options.   (line 1349)
* ftree-slsr:                            Optimize Options.   (line 1334)
* ftree-sra:                             Optimize Options.   (line 1295)
* ftree-switch-conversion:               Optimize Options.   (line 1047)
* ftree-tail-merge:                      Optimize Options.   (line 1052)
* ftree-ter:                             Optimize Options.   (line 1326)
* ftree-vectorize:                       Optimize Options.   (line 1340)
* ftree-vrp:                             Optimize Options.   (line 1374)
* funique-section-names:                 C Dialect Options.  (line  343)
* funit-at-a-time:                       Optimize Options.   (line 1628)
* funroll-all-loops:                     Optimize Options.   (line 2333)
* funroll-loops:                         Optimize Options.   (line 2323)
* funsafe-loop-optimizations:            Optimize Options.   (line  517)
* funsafe-math-optimizations:            Optimize Options.   (line 2107)
* funsigned-bitfields:                   C Dialect Options.  (line  206)
* funsigned-bitfields <1>:               Structures unions enumerations and bit-fields implementation.
                                                             (line   17)
* funsigned-bitfields <2>:               Non-bugs.           (line   57)
* funsigned-char:                        C Dialect Options.  (line  347)
* funsigned-char <1>:                    Characters implementation.
                                                             (line   31)
* funswitch-loops:                       Optimize Options.   (line 2351)
* funwind-tables:                        Code Gen Options.   (line  145)
* fuse-cxa-atexit:                       C++ Dialect Options.
                                                             (line  153)
* fuse-ld=bfd:                           Link Options.       (line   31)
* fuse-ld=gold:                          Link Options.       (line   34)
* fuse-linker-plugin:                    Optimize Options.   (line 1902)
* fvar-tracking-assignments-toggle:      Developer Options.  (line  864)
* fvariable-expansion-in-unroller:       Optimize Options.   (line 1397)
* fvect-cost-model:                      Optimize Options.   (line 1353)
* fverbose-asm:                          Code Gen Options.   (line  264)
* fvisibility:                           Code Gen Options.   (line  552)
* fvisibility-inlines-hidden:            C++ Dialect Options.
                                                             (line  160)
* fvisibility-ms-compat:                 C++ Dialect Options.
                                                             (line  188)
* fvpt:                                  Optimize Options.   (line 2288)
* fvtable-verify:                        Instrumentation Options.
                                                             (line  553)
* fvtv-counts:                           Instrumentation Options.
                                                             (line  589)
* fvtv-debug:                            Instrumentation Options.
                                                             (line  576)
* fweb:                                  Optimize Options.   (line 1647)
* fwhole-program:                        Optimize Options.   (line 1658)
* fwide-exec-charset:                    Preprocessor Options.
                                                             (line  475)
* fworking-directory:                    Preprocessor Options.
                                                             (line  493)
* fwrapv:                                Code Gen Options.   (line  107)
* fwritable-strings:                     C Dialect Options.  (line  365)
* g:                                     Debugging Options.  (line   57)
* gcc-toolchain:                         Overall Options.    (line  156)
* gdwarf-VERSION:                        Debugging Options.  (line  103)
* ggdb:                                  Debugging Options.  (line   84)
* ggnu-pubnames:                         Debugging Options.  (line   89)
* gno-record-gcc-switches:               Debugging Options.  (line  121)
* gno-strict-dwarf:                      Debugging Options.  (line  131)
* grecord-gcc-switches:                  Debugging Options.  (line  112)
* gsplit-dwarf:                          Debugging Options.  (line   77)
* gstrict-dwarf:                         Debugging Options.  (line  125)
* gtoggle:                               Developer Options.  (line  856)
* H:                                     Preprocessor Options.
                                                             (line  597)
* help:                                  Overall Options.    (line  161)
* I:                                     Preprocessor Options.
                                                             (line  104)
* I <1>:                                 Directory Options.  (line   25)
* I-:                                    Directory Options.  (line  131)
* idirafter:                             Preprocessor Options.
                                                             (line  355)
* imacros:                               Preprocessor Options.
                                                             (line  346)
* imultilib:                             Preprocessor Options.
                                                             (line  380)
* include:                               Preprocessor Options.
                                                             (line  335)
* iplugindir=:                           Directory Options.  (line   44)
* iprefix:                               Preprocessor Options.
                                                             (line  362)
* iquote:                                Directory Options.  (line   49)
* isysroot:                              Preprocessor Options.
                                                             (line  374)
* isystem:                               Preprocessor Options.
                                                             (line  384)
* iwithprefix:                           Preprocessor Options.
                                                             (line  368)
* iwithprefixbefore:                     Preprocessor Options.
                                                             (line  368)
* l:                                     Link Options.       (line   38)
* L:                                     Directory Options.  (line   55)
* lobjc:                                 Link Options.       (line   65)
* M:                                     Preprocessor Options.
                                                             (line  171)
* mabi:                                  AArch64 Options.    (line    9)
* march:                                 AArch64 Options.    (line   73)
* mbig-endian:                           AArch64 Options.    (line   20)
* mcmodel=large:                         AArch64 Options.    (line   44)
* mcmodel=small:                         AArch64 Options.    (line   38)
* mcmodel=tiny:                          AArch64 Options.    (line   31)
* mcpu:                                  AArch64 Options.    (line  106)
* MD:                                    Preprocessor Options.
                                                             (line  262)
* MF:                                    Preprocessor Options.
                                                             (line  206)
* mfix-cortex-a53-835769:                AArch64 Options.    (line   67)
* mfpmath:                               Optimize Options.   (line 2067)
* MG:                                    Preprocessor Options.
                                                             (line  215)
* mgeneral-regs-only:                    AArch64 Options.    (line   24)
* mlittle-endian:                        AArch64 Options.    (line   27)
* MM:                                    Preprocessor Options.
                                                             (line  196)
* MMD:                                   Preprocessor Options.
                                                             (line  278)
* mno-fix-cortex-a53-835769:             AArch64 Options.    (line   67)
* mno-omit-leaf-frame-pointer:           AArch64 Options.    (line   54)
* momit-leaf-frame-pointer:              AArch64 Options.    (line   54)
* MP:                                    Preprocessor Options.
                                                             (line  225)
* MQ:                                    Preprocessor Options.
                                                             (line  252)
* mrtd:                                  Function Attributes.
                                                             (line  215)
* mstrict-align:                         AArch64 Options.    (line   49)
* MT:                                    Preprocessor Options.
                                                             (line  237)
* mtls-dialect=desc:                     AArch64 Options.    (line   58)
* mtls-dialect=traditional:              AArch64 Options.    (line   62)
* mtune:                                 AArch64 Options.    (line   90)
* no-canonical-prefixes:                 Directory Options.  (line   16)
* no-integrated-cpp:                     Preprocessor Options.
                                                             (line   63)
* no-sysroot-suffix:                     Directory Options.  (line  124)
* nodefaultlibs:                         Link Options.       (line   74)
* nostartfiles:                          Link Options.       (line   69)
* nostdinc:                              Preprocessor Options.
                                                             (line  325)
* nostdinc++:                            C++ Dialect Options.
                                                             (line  252)
* nostdinc++ <1>:                        Preprocessor Options.
                                                             (line  330)
* nostdlib:                              Link Options.       (line   86)
* o:                                     Overall Options.    (line  173)
* O:                                     Optimize Options.   (line   45)
* O0:                                    Optimize Options.   (line  151)
* O1:                                    Optimize Options.   (line   45)
* O2:                                    Optimize Options.   (line   97)
* O3:                                    Optimize Options.   (line  142)
* ObjC:                                  Standards.          (line  168)
* ObjC <1>:                              Overall Options.    (line  184)
* ObjC++:                                Standards.          (line  168)
* ObjC++ <1>:                            Overall Options.    (line  188)
* Ofast:                                 Optimize Options.   (line  165)
* Og:                                    Optimize Options.   (line  171)
* Os:                                    Optimize Options.   (line  155)
* p:                                     Instrumentation Options.
                                                             (line   25)
* P:                                     Preprocessor Options.
                                                             (line  563)
* param:                                 Optimize Options.   (line 2439)
* pedantic:                              Standards.          (line   23)
* pedantic <1>:                          Warning Options.    (line  118)
* pedantic <2>:                          Preprocessor Options.
                                                             (line  161)
* pedantic <3>:                          C Extensions.       (line    6)
* pedantic <4>:                          Alternate Keywords. (line   30)
* pedantic <5>:                          Warnings and Errors.
                                                             (line   25)
* pedantic-errors:                       Standards.          (line   23)
* pedantic-errors <1>:                   Warning Options.    (line  159)
* pedantic-errors <2>:                   Preprocessor Options.
                                                             (line  166)
* pedantic-errors <3>:                   Non-bugs.           (line  216)
* pedantic-errors <4>:                   Warnings and Errors.
                                                             (line   25)
* pg:                                    Debugging Options.  (line  329)
* pg <1>:                                Instrumentation Options.
                                                             (line   31)
* pie:                                   Link Options.       (line  111)
* pipe:                                  Overall Options.    (line  192)
* print-file-name:                       Debugging Options.  (line  449)
* print-file-name <1>:                   Developer Options.  (line  958)
* print-libgcc-file-name:                Debugging Options.  (line  479)
* print-libgcc-file-name <1>:            Developer Options.  (line  992)
* print-multi-directory:                 Debugging Options.  (line  455)
* print-multi-directory <1>:             Developer Options.  (line  964)
* print-multi-lib:                       Debugging Options.  (line  460)
* print-multi-lib <1>:                   Developer Options.  (line  969)
* print-multi-os-directory:              Debugging Options.  (line  467)
* print-multi-os-directory <1>:          Developer Options.  (line  976)
* print-multiarch:                       Developer Options.  (line  985)
* print-objc-runtime-info:               Objective-C and Objective-C++ Dialect Options.
                                                             (line  155)
* print-prog-name:                       Debugging Options.  (line  476)
* print-prog-name <1>:                   Developer Options.  (line  989)
* print-search-dirs:                     Debugging Options.  (line  487)
* print-search-dirs <1>:                 Developer Options.  (line 1000)
* print-sysroot:                         Developer Options.  (line 1013)
* print-sysroot-headers-suffix:          Developer Options.  (line 1020)
* Q:                                     Developer Options.  (line  868)
* Qunused-arguments:                     Overall Options.    (line  199)
* rdynamic:                              Link Options.       (line  117)
* remap:                                 Preprocessor Options.
                                                             (line  593)
* S:                                     Overall Options.    (line  203)
* S <1>:                                 Link Options.       (line   26)
* s:                                     Link Options.       (line  124)
* save-temps:                            Debugging Options.  (line  419)
* save-temps <1>:                        Developer Options.  (line  743)
* save-temps=obj:                        Developer Options.  (line  769)
* shared:                                Link Options.       (line  132)
* shared-libgcc:                         Link Options.       (line  140)
* specs:                                 Directory Options.  (line  101)
* static:                                Link Options.       (line  128)
* static-libasan:                        Link Options.       (line  175)
* static-libgcc:                         Link Options.       (line  140)
* static-liblsan:                        Link Options.       (line  191)
* static-libmpx:                         Link Options.       (line  208)
* static-libmpxwrappers:                 Link Options.       (line  217)
* static-libstdc++:                      Link Options.       (line  227)
* static-libtsan:                        Link Options.       (line  183)
* static-libubsan:                       Link Options.       (line  199)
* std:                                   Standards.          (line   23)
* std <1>:                               C Dialect Options.  (line  223)
* std <2>:                               Other Builtins.     (line   21)
* std <3>:                               Non-bugs.           (line  107)
* symbolic:                              Link Options.       (line  238)
* sysroot:                               Directory Options.  (line  109)
* T:                                     Link Options.       (line  244)
* time:                                  Developer Options.  (line  784)
* traditional:                           Standards.          (line   16)
* traditional <1>:                       C Dialect Options.  (line  333)
* traditional <2>:                       Incompatibilities.  (line    6)
* traditional-cpp:                       C Dialect Options.  (line  333)
* trigraphs:                             C Dialect Options.  (line  339)
* U:                                     Preprocessor Options.
                                                             (line   96)
* u:                                     Link Options.       (line  276)
* undef:                                 Preprocessor Options.
                                                             (line  100)
* v:                                     Overall Options.    (line  213)
* version:                               Overall Options.    (line  219)
* w:                                     Warning Options.    (line   59)
* W:                                     Warning Options.    (line  219)
* W <1>:                                 Warning Options.    (line  536)
* w <1>:                                 Preprocessor Options.
                                                             (line  157)
* W <2>:                                 Incompatibilities.  (line   64)
* Wa:                                    Assembler Options.  (line   15)
* Wabi:                                  C++ Dialect Options.
                                                             (line  260)
* Waddress:                              Warning Options.    (line  258)
* Waggregate-return:                     Warning Options.    (line  271)
* Wall:                                  Warning Options.    (line  168)
* Wall <1>:                              Standard Libraries. (line    6)
* Warray-bounds:                         Warning Options.    (line  276)
* Wattributes:                           Warning Options.    (line  281)
* Wbad-function-cast:                    Warning Options.    (line 1095)
* Wbuiltin-macro-redefined:              Warning Options.    (line  287)
* Wc++-compat:                           Warning Options.    (line 1100)
* Wc++11-compat:                         Warning Options.    (line 1177)
* Wcast-align:                           Warning Options.    (line  292)
* Wcast-qual:                            Warning Options.    (line  298)
* Wchar-subscripts:                      Warning Options.    (line  314)
* Wcomment:                              Warning Options.    (line  319)
* Wcomments:                             Warning Options.    (line  319)
* Wconversion:                           Warning Options.    (line  324)
* Wconversion-null:                      C++ Dialect Options.
                                                             (line  279)
* Wctor-dtor-privacy:                    C++ Dialect Options.
                                                             (line  283)
* Wdeclaration-after-statement:          Warning Options.    (line 1105)
* Wdelete-incomplete:                    Warning Options.    (line 1183)
* Wdelete-non-virtual-dtor:              C++ Dialect Options.
                                                             (line  290)
* Wdeprecated:                           Warning Options.    (line  342)
* Wdeprecated-declarations:              Warning Options.    (line  346)
* Wdisabled-optimization:                Warning Options.    (line  352)
* Wdiv-by-zero:                          Warning Options.    (line  361)
* Weffc++:                               C++ Dialect Options.
                                                             (line  297)
* Wempty-body:                           Warning Options.    (line  366)
* Wendif-labels:                         Preprocessor Options.
                                                             (line  138)
* Wenum-compare:                         Warning Options.    (line  370)
* Werror:                                Warning Options.    (line   62)
* Werror=WARNING:                        Warning Options.    (line   65)
* Wextra:                                Warning Options.    (line  219)
* Wextra <1>:                            Warning Options.    (line  536)
* Wfatal-errors:                         Warning Options.    (line   83)
* Wfloat-equal:                          Warning Options.    (line  376)
* Wformat:                               Warning Options.    (line  392)
* Wformat <1>:                           Function Attributes.
                                                             (line  444)
* Wformat-extra-args:                    Warning Options.    (line  419)
* Wformat-nonliteral:                    Warning Options.    (line  432)
* Wformat-nonliteral <1>:                Function Attributes.
                                                             (line  509)
* Wformat-security:                      Warning Options.    (line  437)
* Wformat-y2k:                           Warning Options.    (line  448)
* Wformat-zero-length:                   Warning Options.    (line  452)
* Wframe-larger-than:                    Warning Options.    (line  456)
* Wignored-qualifiers:                   Warning Options.    (line 1111)
* Wimplicit:                             Warning Options.    (line 1122)
* Wimplicit-function-declaration:        Warning Options.    (line 1126)
* Wimplicit-int:                         Warning Options.    (line 1132)
* Wincompatible-pointer-types:           Warning Options.    (line 1136)
* Winherited-variadic-ctor:              Warning Options.    (line 1187)
* Winit-self:                            Warning Options.    (line 1067)
* Winline:                               Warning Options.    (line  469)
* Winline <1>:                           Inline.             (line   63)
* Wint-conversion:                       Warning Options.    (line 1142)
* Wint-to-pointer-cast:                  Warning Options.    (line  482)
* Winvalid-pch:                          Warning Options.    (line  487)
* Wl:                                    Link Options.       (line  268)
* Wlarger-than-LEN:                      Warning Options.    (line  491)
* Wlarger-than=LEN:                      Warning Options.    (line  491)
* Wlogical-not-parentheses:              Warning Options.    (line  498)
* Wlong-long:                            Warning Options.    (line  513)
* Wmain:                                 Warning Options.    (line  518)
* Wmissing-braces:                       Warning Options.    (line  525)
* Wmissing-declarations:                 Warning Options.    (line 1082)
* Wmissing-field-initializers:           Warning Options.    (line  536)
* Wmissing-format-attribute:             Warning Options.    (line  560)
* Wmissing-include-dirs:                 Warning Options.    (line 1092)
* Wmissing-prototypes:                   Warning Options.    (line 1148)
* Wmultichar:                            Warning Options.    (line  580)
* Wnarrowing:                            C++ Dialect Options.
                                                             (line  325)
* Wnested-externs:                       Warning Options.    (line 1158)
* Wno-abi:                               C++ Dialect Options.
                                                             (line  260)
* Wno-address:                           Warning Options.    (line  258)
* Wno-aggregate-return:                  Warning Options.    (line  271)
* Wno-all:                               Warning Options.    (line  168)
* Wno-array-bounds:                      Warning Options.    (line  276)
* Wno-attributes:                        Warning Options.    (line  281)
* Wno-bad-function-cast:                 Warning Options.    (line 1095)
* Wno-builtin-macro-redefined:           Warning Options.    (line  287)
* Wno-cast-align:                        Warning Options.    (line  292)
* Wno-cast-qual:                         Warning Options.    (line  298)
* Wno-char-subscripts:                   Warning Options.    (line  314)
* Wno-comment:                           Warning Options.    (line  319)
* Wno-comments:                          Warning Options.    (line  319)
* Wno-conversion:                        Warning Options.    (line  324)
* Wno-conversion-null:                   C++ Dialect Options.
                                                             (line  279)
* Wno-ctor-dtor-privacy:                 C++ Dialect Options.
                                                             (line  283)
* Wno-declaration-after-statement:       Warning Options.    (line 1105)
* Wno-delete-incomplete:                 Warning Options.    (line 1183)
* Wno-delete-non-virtual-dtor:           C++ Dialect Options.
                                                             (line  290)
* Wno-deprecated:                        Warning Options.    (line  342)
* Wno-deprecated-declarations:           Warning Options.    (line  346)
* Wno-disabled-optimization:             Warning Options.    (line  352)
* Wno-div-by-zero:                       Warning Options.    (line  361)
* Wno-effc++:                            C++ Dialect Options.
                                                             (line  297)
* Wno-empty-body:                        Warning Options.    (line  366)
* Wno-endif-labels:                      Preprocessor Options.
                                                             (line  138)
* Wno-enum-compare:                      Warning Options.    (line  370)
* Wno-error:                             Warning Options.    (line   62)
* Wno-error=WARNING:                     Warning Options.    (line   65)
* Wno-extra:                             Warning Options.    (line  219)
* Wno-extra <1>:                         Warning Options.    (line  536)
* Wno-fatal-errors:                      Warning Options.    (line   83)
* Wno-float-equal:                       Warning Options.    (line  376)
* Wno-format:                            Warning Options.    (line  392)
* Wno-format-extra-args:                 Warning Options.    (line  419)
* Wno-format-nonliteral:                 Warning Options.    (line  432)
* Wno-format-security:                   Warning Options.    (line  437)
* Wno-format-y2k:                        Warning Options.    (line  448)
* Wno-format-zero-length:                Warning Options.    (line  452)
* Wno-ignored-qualifiers:                Warning Options.    (line 1111)
* Wno-implicit:                          Warning Options.    (line 1122)
* Wno-implicit-function-declaration:     Warning Options.    (line 1126)
* Wno-implicit-int:                      Warning Options.    (line 1132)
* Wno-incompatible-pointer-types:        Warning Options.    (line 1136)
* Wno-inherited-variadic-ctor:           Warning Options.    (line 1187)
* Wno-init-self:                         Warning Options.    (line 1067)
* Wno-inline:                            Warning Options.    (line  469)
* Wno-int-conversion:                    Warning Options.    (line 1142)
* Wno-int-to-pointer-cast:               Warning Options.    (line  482)
* Wno-invalid-pch:                       Warning Options.    (line  487)
* Wno-logical-not-parentheses:           Warning Options.    (line  498)
* Wno-long-long:                         Warning Options.    (line  513)
* Wno-main:                              Warning Options.    (line  518)
* Wno-missing-braces:                    Warning Options.    (line  525)
* Wno-missing-declarations:              Warning Options.    (line 1082)
* Wno-missing-field-initializers:        Warning Options.    (line  536)
* Wno-missing-format-attribute:          Warning Options.    (line  560)
* Wno-missing-include-dirs:              Warning Options.    (line 1092)
* Wno-missing-prototypes:                Warning Options.    (line 1148)
* Wno-multichar:                         Warning Options.    (line  580)
* Wno-narrowing:                         C++ Dialect Options.
                                                             (line  325)
* Wno-nested-externs:                    Warning Options.    (line 1158)
* Wno-non-virtual-dtor:                  C++ Dialect Options.
                                                             (line  338)
* Wno-nonnull:                           Warning Options.    (line  586)
* Wno-odr:                               Warning Options.    (line  593)
* Wno-old-style-cast:                    C++ Dialect Options.
                                                             (line  346)
* Wno-overflow:                          Warning Options.    (line  601)
* Wno-overlength-strings:                Warning Options.    (line  604)
* Wno-overloaded-virtual:                C++ Dialect Options.
                                                             (line  352)
* Wno-packed:                            Warning Options.    (line  619)
* Wno-padded:                            Warning Options.    (line  636)
* Wno-parentheses:                       Warning Options.    (line  643)
* Wno-pmf-conversions:                   Bound member functions.
                                                             (line   35)
* Wno-pointer-arith:                     Warning Options.    (line  692)
* Wno-pointer-sign:                      Warning Options.    (line 1161)
* Wno-pointer-to-int-cast:               Warning Options.    (line 1167)
* Wno-protocol:                          Objective-C and Objective-C++ Dialect Options.
                                                             (line  113)
* Wno-redundant-decls:                   Warning Options.    (line  699)
* Wno-reorder:                           C++ Dialect Options.
                                                             (line  371)
* Wno-return-type:                       Warning Options.    (line  703)
* Wno-selector:                          Objective-C and Objective-C++ Dialect Options.
                                                             (line  123)
* Wno-sequence-point:                    Warning Options.    (line  717)
* Wno-shadow:                            Warning Options.    (line  763)
* Wno-shadow-ivar:                       Warning Options.    (line  771)
* Wno-shift-count-negative:              Warning Options.    (line  775)
* Wno-shift-count-overflow:              Warning Options.    (line  779)
* Wno-sign-compare:                      Warning Options.    (line  783)
* Wno-sign-conversion:                   Warning Options.    (line  790)
* Wno-sign-promo:                        C++ Dialect Options.
                                                             (line  385)
* Wno-sizeof-array-argument:             Warning Options.    (line  796)
* Wno-sizeof-pointer-memaccess:          Warning Options.    (line  801)
* Wno-stack-protector:                   Warning Options.    (line  809)
* Wno-strict-aliasing:                   Warning Options.    (line  814)
* Wno-strict-overflow:                   Warning Options.    (line  853)
* Wno-strict-prototypes:                 Warning Options.    (line 1171)
* Wno-strict-selector-match:             Objective-C and Objective-C++ Dialect Options.
                                                             (line  135)
* Wno-switch:                            Warning Options.    (line  902)
* Wno-switch-default:                    Warning Options.    (line  910)
* Wno-switch-enum:                       Warning Options.    (line  913)
* Wno-system-headers:                    Warning Options.    (line  922)
* Wno-trigraphs:                         Warning Options.    (line  933)
* Wno-type-limits:                       Warning Options.    (line  938)
* Wno-undeclared-selector:               Objective-C and Objective-C++ Dialect Options.
                                                             (line  143)
* Wno-undef:                             Preprocessor Options.
                                                             (line  114)
* Wno-uninitialized:                     Warning Options.    (line  945)
* Wno-unknown-pragmas:                   Warning Options.    (line  967)
* Wno-unused:                            Warning Options.    (line  974)
* Wno-unused-function:                   Warning Options.    (line  981)
* Wno-unused-label:                      Warning Options.    (line  986)
* Wno-unused-parameter:                  Warning Options.    (line  993)
* Wno-unused-result:                     Warning Options.    (line 1000)
* Wno-unused-value:                      Warning Options.    (line 1013)
* Wno-unused-variable:                   Warning Options.    (line 1005)
* Wno-useless-cast:                      Warning Options.    (line 1192)
* Wno-varargs:                           Warning Options.    (line 1023)
* Wno-variadic-macros:                   Warning Options.    (line 1028)
* Wno-vla:                               Warning Options.    (line 1034)
* Wno-volatile-register-var:             Warning Options.    (line 1042)
* Wno-write-strings:                     Warning Options.    (line 1048)
* Wnon-virtual-dtor:                     C++ Dialect Options.
                                                             (line  338)
* Wnonnull:                              Warning Options.    (line  586)
* Wodr:                                  Warning Options.    (line  593)
* Wold-style-cast:                       C++ Dialect Options.
                                                             (line  346)
* working-directory:                     Overall Options.    (line  223)
* Woverflow:                             Warning Options.    (line  601)
* Woverlength-strings:                   Warning Options.    (line  604)
* Woverloaded-virtual:                   C++ Dialect Options.
                                                             (line  352)
* Wp:                                    Preprocessor Options.
                                                             (line   43)
* Wpacked:                               Warning Options.    (line  619)
* Wpadded:                               Warning Options.    (line  636)
* Wparentheses:                          Warning Options.    (line  643)
* Wpedantic:                             Warning Options.    (line  118)
* Wpointer-arith:                        Warning Options.    (line  692)
* Wpointer-arith <1>:                    Pointer Arith.      (line   13)
* Wpointer-sign:                         Warning Options.    (line 1161)
* Wpointer-to-int-cast:                  Warning Options.    (line 1167)
* Wprotocol:                             Objective-C and Objective-C++ Dialect Options.
                                                             (line  113)
* Wredundant-decls:                      Warning Options.    (line  699)
* Wreorder:                              C++ Dialect Options.
                                                             (line  371)
* Wreturn-type:                          Warning Options.    (line  703)
* Wselector:                             Objective-C and Objective-C++ Dialect Options.
                                                             (line  123)
* Wsequence-point:                       Warning Options.    (line  717)
* Wshadow:                               Warning Options.    (line  763)
* Wshadow-ivar:                          Warning Options.    (line  771)
* Wshift-count-negative:                 Warning Options.    (line  775)
* Wshift-count-overflow:                 Warning Options.    (line  779)
* Wsign-compare:                         Warning Options.    (line  783)
* Wsign-conversion:                      Warning Options.    (line  790)
* Wsign-promo:                           C++ Dialect Options.
                                                             (line  385)
* Wsizeof-array-argument:                Warning Options.    (line  796)
* Wsizeof-pointer-memaccess:             Warning Options.    (line  801)
* Wstack-protector:                      Warning Options.    (line  809)
* Wstrict-aliasing:                      Warning Options.    (line  814)
* Wstrict-aliasing=n:                    Warning Options.    (line  821)
* Wstrict-overflow:                      Warning Options.    (line  853)
* Wstrict-prototypes:                    Warning Options.    (line 1171)
* Wstrict-selector-match:                Objective-C and Objective-C++ Dialect Options.
                                                             (line  135)
* Wswitch:                               Warning Options.    (line  902)
* Wswitch-default:                       Warning Options.    (line  910)
* Wswitch-enum:                          Warning Options.    (line  913)
* Wsystem-headers:                       Warning Options.    (line  922)
* Wsystem-headers <1>:                   Preprocessor Options.
                                                             (line  151)
* Wtrigraphs:                            Warning Options.    (line  933)
* Wtype-limits:                          Warning Options.    (line  938)
* Wundeclared-selector:                  Objective-C and Objective-C++ Dialect Options.
                                                             (line  143)
* Wundef:                                Preprocessor Options.
                                                             (line  114)
* Wuninitialized:                        Warning Options.    (line  945)
* Wunknown-pragmas:                      Warning Options.    (line  967)
* Wunused:                               Warning Options.    (line  974)
* Wunused-function:                      Warning Options.    (line  981)
* Wunused-label:                         Warning Options.    (line  986)
* Wunused-macros:                        Preprocessor Options.
                                                             (line  119)
* Wunused-parameter:                     Warning Options.    (line  993)
* Wunused-result:                        Warning Options.    (line 1000)
* Wunused-value:                         Warning Options.    (line 1013)
* Wunused-variable:                      Warning Options.    (line 1005)
* Wuseless-cast:                         Warning Options.    (line 1192)
* Wvarargs:                              Warning Options.    (line 1023)
* Wvariadic-macros:                      Warning Options.    (line 1028)
* Wvla:                                  Warning Options.    (line 1034)
* Wvolatile-register-var:                Warning Options.    (line 1042)
* Wwrite-strings:                        Warning Options.    (line 1048)
* x:                                     Overall Options.    (line  227)
* x <1>:                                 Preprocessor Options.
                                                             (line  310)
* Xassembler:                            Assembler Options.  (line   19)
* Xclang:                                Overall Options.    (line  246)
* Xlinker:                               Link Options.       (line  250)
* Xpreprocessor:                         Preprocessor Options.
                                                             (line   54)
* z:                                     Link Options.       (line  281)


File: llvm.info,  Node: Keyword Index,  Prev: Option Index,  Up: Top

Keyword Index
*************

 [index ]
* Menu:

* '!' in constraint:                     Multi-Alternative.  (line   33)
* '#' in constraint:                     Modifiers.          (line   68)
* '#pragma':                             Pragmas.            (line    6)
* #pragma implementation:                C++ Interface.      (line   36)
* '#pragma implementation', implied:     C++ Interface.      (line   43)
* #pragma interface:                     C++ Interface.      (line   17)
* '#pragma', reason for not using:       Function Attributes.
                                                             (line 2061)
* $:                                     Dollar Signs.       (line    6)
* '$' in constraint:                     Multi-Alternative.  (line   42)
* '%' in constraint:                     Modifiers.          (line   52)
* '&' in constraint:                     Modifiers.          (line   25)
* ''':                                   Incompatibilities.  (line  116)
* *:                                     Pointer Bounds Checker builtins.
                                                             (line   11)
* * <1>:                                 Pointer Bounds Checker builtins.
                                                             (line   26)
* * <2>:                                 Pointer Bounds Checker builtins.
                                                             (line   44)
* * <3>:                                 Pointer Bounds Checker builtins.
                                                             (line   56)
* * <4>:                                 Pointer Bounds Checker builtins.
                                                             (line   64)
* '*' in constraint:                     Modifiers.          (line   73)
* *__builtin_assume_aligned:             Other Builtins.     (line  339)
* '+' in constraint:                     Modifiers.          (line   12)
* '-lgcc', use with '-nodefaultlibs':    Link Options.       (line   97)
* '-lgcc', use with '-nostdlib':         Link Options.       (line   97)
* '-march' feature modifiers:            AArch64 Options.    (line  127)
* '-mcpu' feature modifiers:             AArch64 Options.    (line  127)
* '-nodefaultlibs' and unresolved references: Link Options.  (line   97)
* '-nostdlib' and unresolved references: Link Options.       (line   97)
* '//':                                  C++ Comments.       (line    6)
* '0' in constraint:                     Simple Constraints. (line  125)
* '<' in constraint:                     Simple Constraints. (line   47)
* '=' in constraint:                     Modifiers.          (line    8)
* '>' in constraint:                     Simple Constraints. (line   59)
* '?' in constraint:                     Multi-Alternative.  (line   27)
* '?:' extensions:                       Conditionals.       (line    6)
* '?:' side effect:                      Conditionals.       (line   20)
* '^' in constraint:                     Multi-Alternative.  (line   38)
* '_' in variables in macros:            Typeof.             (line   46)
* '_Accum' data type:                    Fixed-Point.        (line    6)
* '_Complex' keyword:                    Complex.            (line    6)
* '_Decimal128' data type:               Decimal Float.      (line    6)
* '_Decimal32' data type:                Decimal Float.      (line    6)
* '_Decimal64' data type:                Decimal Float.      (line    6)
* _Exit:                                 Other Builtins.     (line    6)
* _exit:                                 Other Builtins.     (line    6)
* '_Fract' data type:                    Fixed-Point.        (line    6)
* _HTM_FIRST_USER_ABORT_CODE:            S/390 System z Built-in Functions.
                                                             (line   44)
* '_Sat' data type:                      Fixed-Point.        (line    6)
* _xabort:                               x86 transactional memory intrinsics.
                                                             (line   57)
* _xbegin:                               x86 transactional memory intrinsics.
                                                             (line   19)
* _xend:                                 x86 transactional memory intrinsics.
                                                             (line   48)
* _xtest:                                x86 transactional memory intrinsics.
                                                             (line   53)
* __atomic_add_fetch:                    __atomic Builtins.  (line  153)
* __atomic_always_lock_free:             __atomic Builtins.  (line  230)
* __atomic_and_fetch:                    __atomic Builtins.  (line  157)
* __atomic_clear:                        __atomic Builtins.  (line  204)
* __atomic_compare_exchange:             __atomic Builtins.  (line  145)
* __atomic_compare_exchange_n:           __atomic Builtins.  (line  124)
* __atomic_exchange:                     __atomic Builtins.  (line  118)
* __atomic_exchange_n:                   __atomic Builtins.  (line  108)
* __atomic_fetch_add:                    __atomic Builtins.  (line  172)
* __atomic_fetch_and:                    __atomic Builtins.  (line  176)
* __atomic_fetch_nand:                   __atomic Builtins.  (line  182)
* __atomic_fetch_or:                     __atomic Builtins.  (line  180)
* __atomic_fetch_sub:                    __atomic Builtins.  (line  174)
* __atomic_fetch_xor:                    __atomic Builtins.  (line  178)
* __atomic_is_lock_free:                 __atomic Builtins.  (line  244)
* __atomic_load:                         __atomic Builtins.  (line   90)
* __atomic_load_n:                       __atomic Builtins.  (line   83)
* __atomic_nand_fetch:                   __atomic Builtins.  (line  163)
* __atomic_or_fetch:                     __atomic Builtins.  (line  161)
* __atomic_signal_fence:                 __atomic Builtins.  (line  223)
* __atomic_store:                        __atomic Builtins.  (line  103)
* __atomic_store_n:                      __atomic Builtins.  (line   95)
* __atomic_sub_fetch:                    __atomic Builtins.  (line  155)
* __atomic_test_and_set:                 __atomic Builtins.  (line  192)
* __atomic_thread_fence:                 __atomic Builtins.  (line  216)
* __atomic_xor_fetch:                    __atomic Builtins.  (line  159)
* __builtin_add_overflow:                Integer Overflow Builtins.
                                                             (line    9)
* __builtin_apply:                       Constructing Calls. (line   29)
* __builtin_apply_args:                  Constructing Calls. (line   19)
* __builtin_arc_aligned:                 ARC Built-in Functions.
                                                             (line   18)
* __builtin_arc_brk:                     ARC Built-in Functions.
                                                             (line   28)
* __builtin_arc_core_read:               ARC Built-in Functions.
                                                             (line   32)
* __builtin_arc_core_write:              ARC Built-in Functions.
                                                             (line   39)
* __builtin_arc_divaw:                   ARC Built-in Functions.
                                                             (line   46)
* __builtin_arc_flag:                    ARC Built-in Functions.
                                                             (line   53)
* __builtin_arc_lr:                      ARC Built-in Functions.
                                                             (line   57)
* __builtin_arc_mul64:                   ARC Built-in Functions.
                                                             (line   64)
* __builtin_arc_mulu64:                  ARC Built-in Functions.
                                                             (line   68)
* __builtin_arc_nop:                     ARC Built-in Functions.
                                                             (line   73)
* __builtin_arc_norm:                    ARC Built-in Functions.
                                                             (line   77)
* __builtin_arc_normw:                   ARC Built-in Functions.
                                                             (line   84)
* __builtin_arc_rtie:                    ARC Built-in Functions.
                                                             (line   91)
* __builtin_arc_sleep:                   ARC Built-in Functions.
                                                             (line   95)
* __builtin_arc_sr:                      ARC Built-in Functions.
                                                             (line   99)
* __builtin_arc_swap:                    ARC Built-in Functions.
                                                             (line  106)
* __builtin_arc_swi:                     ARC Built-in Functions.
                                                             (line  112)
* __builtin_arc_sync:                    ARC Built-in Functions.
                                                             (line  116)
* __builtin_arc_trap_s:                  ARC Built-in Functions.
                                                             (line  120)
* __builtin_arc_unimp_s:                 ARC Built-in Functions.
                                                             (line  124)
* __builtin_bswap16:                     Other Builtins.     (line  606)
* __builtin_bswap32:                     Other Builtins.     (line  610)
* __builtin_bswap64:                     Other Builtins.     (line  614)
* __builtin_call_with_static_chain:      Other Builtins.     (line    6)
* __builtin_call_with_static_chain <1>:  Other Builtins.     (line  154)
* __builtin_choose_expr:                 Other Builtins.     (line  165)
* __builtin_clrsb:                       Other Builtins.     (line  536)
* __builtin_clrsbl:                      Other Builtins.     (line  558)
* __builtin_clrsbll:                     Other Builtins.     (line  581)
* __builtin_clz:                         Other Builtins.     (line  528)
* __builtin_clzl:                        Other Builtins.     (line  550)
* __builtin_clzll:                       Other Builtins.     (line  573)
* __builtin_complex:                     Other Builtins.     (line  205)
* __builtin_constant_p:                  Other Builtins.     (line  214)
* __builtin_cpu_init:                    x86 Built-in Functions.
                                                             (line   62)
* __builtin_cpu_is:                      x86 Built-in Functions.
                                                             (line   90)
* __builtin_cpu_supports:                x86 Built-in Functions.
                                                             (line  162)
* __builtin_ctz:                         Other Builtins.     (line  532)
* __builtin_ctzl:                        Other Builtins.     (line  554)
* __builtin_ctzll:                       Other Builtins.     (line  577)
* __builtin_expect:                      Other Builtins.     (line  259)
* __builtin_extract_return_addr:         Return Address.     (line   35)
* __builtin_ffs:                         Other Builtins.     (line  524)
* __builtin_ffsl:                        Other Builtins.     (line  547)
* __builtin_ffsll:                       Other Builtins.     (line  569)
* __builtin_FILE:                        Other Builtins.     (line  368)
* __builtin_fpclassify:                  Other Builtins.     (line    6)
* __builtin_fpclassify <1>:              Other Builtins.     (line  438)
* __builtin_frame_address:               Return Address.     (line   47)
* __builtin_frob_return_address:         Return Address.     (line   44)
* __builtin_FUNCTION:                    Other Builtins.     (line  363)
* __builtin_huge_val:                    Other Builtins.     (line  426)
* __builtin_huge_valf:                   Other Builtins.     (line  431)
* __builtin_huge_vall:                   Other Builtins.     (line  434)
* __builtin_huge_valq:                   x86 Built-in Functions.
                                                             (line   57)
* __builtin_inf:                         Other Builtins.     (line  449)
* __builtin_infd128:                     Other Builtins.     (line  459)
* __builtin_infd32:                      Other Builtins.     (line  453)
* __builtin_infd64:                      Other Builtins.     (line  456)
* __builtin_inff:                        Other Builtins.     (line  463)
* __builtin_infl:                        Other Builtins.     (line  468)
* __builtin_infq:                        x86 Built-in Functions.
                                                             (line   54)
* __builtin_isfinite:                    Other Builtins.     (line    6)
* __builtin_isgreater:                   Other Builtins.     (line    6)
* __builtin_isgreaterequal:              Other Builtins.     (line    6)
* __builtin_isinf_sign:                  Other Builtins.     (line    6)
* __builtin_isinf_sign <1>:              Other Builtins.     (line  472)
* __builtin_isless:                      Other Builtins.     (line    6)
* __builtin_islessequal:                 Other Builtins.     (line    6)
* __builtin_islessgreater:               Other Builtins.     (line    6)
* __builtin_isnormal:                    Other Builtins.     (line    6)
* __builtin_isunordered:                 Other Builtins.     (line    6)
* __builtin_LINE:                        Other Builtins.     (line  357)
* __builtin_mul_overflow:                Integer Overflow Builtins.
                                                             (line   60)
* __builtin_nan:                         Other Builtins.     (line  480)
* __builtin_nand128:                     Other Builtins.     (line  502)
* __builtin_nand32:                      Other Builtins.     (line  496)
* __builtin_nand64:                      Other Builtins.     (line  499)
* __builtin_nanf:                        Other Builtins.     (line  506)
* __builtin_nanl:                        Other Builtins.     (line  509)
* __builtin_nans:                        Other Builtins.     (line  513)
* __builtin_nansf:                       Other Builtins.     (line  517)
* __builtin_nansl:                       Other Builtins.     (line  520)
* __builtin_nds32_isb:                   NDS32 Built-in Functions.
                                                             (line   12)
* __builtin_nds32_isync:                 NDS32 Built-in Functions.
                                                             (line    8)
* __builtin_nds32_mfsr:                  NDS32 Built-in Functions.
                                                             (line   15)
* __builtin_nds32_mfusr:                 NDS32 Built-in Functions.
                                                             (line   18)
* __builtin_nds32_mtsr:                  NDS32 Built-in Functions.
                                                             (line   21)
* __builtin_nds32_mtusr:                 NDS32 Built-in Functions.
                                                             (line   24)
* __builtin_nds32_setgie_dis:            NDS32 Built-in Functions.
                                                             (line   30)
* __builtin_nds32_setgie_en:             NDS32 Built-in Functions.
                                                             (line   27)
* __builtin_non_tx_store:                S/390 System z Built-in Functions.
                                                             (line   98)
* __builtin_object_size:                 Object Size Checking.
                                                             (line    6)
* __builtin_object_size <1>:             Object Size Checking.
                                                             (line    9)
* __builtin_offsetof:                    Offsetof.           (line    6)
* __builtin_parity:                      Other Builtins.     (line  544)
* __builtin_parityl:                     Other Builtins.     (line  565)
* __builtin_parityll:                    Other Builtins.     (line  589)
* __builtin_popcount:                    Other Builtins.     (line  541)
* __builtin_popcountl:                   Other Builtins.     (line  561)
* __builtin_popcountll:                  Other Builtins.     (line  585)
* __builtin_powi:                        Other Builtins.     (line    6)
* __builtin_powi <1>:                    Other Builtins.     (line  593)
* __builtin_powif:                       Other Builtins.     (line    6)
* __builtin_powif <1>:                   Other Builtins.     (line  598)
* __builtin_powil:                       Other Builtins.     (line    6)
* __builtin_powil <1>:                   Other Builtins.     (line  602)
* __builtin_prefetch:                    Other Builtins.     (line  387)
* __builtin_return:                      Constructing Calls. (line   47)
* __builtin_return_address:              Return Address.     (line    9)
* __builtin_rx_brk:                      RX Built-in Functions.
                                                             (line   10)
* __builtin_rx_clrpsw:                   RX Built-in Functions.
                                                             (line   13)
* __builtin_rx_int:                      RX Built-in Functions.
                                                             (line   17)
* __builtin_rx_machi:                    RX Built-in Functions.
                                                             (line   21)
* __builtin_rx_maclo:                    RX Built-in Functions.
                                                             (line   26)
* __builtin_rx_mulhi:                    RX Built-in Functions.
                                                             (line   31)
* __builtin_rx_mullo:                    RX Built-in Functions.
                                                             (line   36)
* __builtin_rx_mvfachi:                  RX Built-in Functions.
                                                             (line   41)
* __builtin_rx_mvfacmi:                  RX Built-in Functions.
                                                             (line   45)
* __builtin_rx_mvfc:                     RX Built-in Functions.
                                                             (line   49)
* __builtin_rx_mvtachi:                  RX Built-in Functions.
                                                             (line   53)
* __builtin_rx_mvtaclo:                  RX Built-in Functions.
                                                             (line   57)
* __builtin_rx_mvtc:                     RX Built-in Functions.
                                                             (line   61)
* __builtin_rx_mvtipl:                   RX Built-in Functions.
                                                             (line   65)
* __builtin_rx_racw:                     RX Built-in Functions.
                                                             (line   69)
* __builtin_rx_revw:                     RX Built-in Functions.
                                                             (line   73)
* __builtin_rx_rmpa:                     RX Built-in Functions.
                                                             (line   78)
* __builtin_rx_round:                    RX Built-in Functions.
                                                             (line   82)
* __builtin_rx_sat:                      RX Built-in Functions.
                                                             (line   87)
* __builtin_rx_setpsw:                   RX Built-in Functions.
                                                             (line   91)
* __builtin_rx_wait:                     RX Built-in Functions.
                                                             (line   95)
* __builtin_saddll_overflow:             Integer Overflow Builtins.
                                                             (line   15)
* __builtin_saddl_overflow:              Integer Overflow Builtins.
                                                             (line   13)
* __builtin_sadd_overflow:               Integer Overflow Builtins.
                                                             (line   11)
* __builtin_set_thread_pointer:          SH Built-in Functions.
                                                             (line    9)
* __builtin_sh_get_fpscr:                SH Built-in Functions.
                                                             (line   35)
* __builtin_sh_set_fpscr:                SH Built-in Functions.
                                                             (line   38)
* __builtin_smulll_overflow:             Integer Overflow Builtins.
                                                             (line   66)
* __builtin_smull_overflow:              Integer Overflow Builtins.
                                                             (line   64)
* __builtin_smul_overflow:               Integer Overflow Builtins.
                                                             (line   62)
* __builtin_ssubll_overflow:             Integer Overflow Builtins.
                                                             (line   47)
* __builtin_ssubl_overflow:              Integer Overflow Builtins.
                                                             (line   45)
* __builtin_ssub_overflow:               Integer Overflow Builtins.
                                                             (line   43)
* __builtin_sub_overflow:                Integer Overflow Builtins.
                                                             (line   41)
* __builtin_tabort:                      S/390 System z Built-in Functions.
                                                             (line   82)
* __builtin_tbegin:                      S/390 System z Built-in Functions.
                                                             (line    6)
* __builtin_tbeginc:                     S/390 System z Built-in Functions.
                                                             (line   73)
* __builtin_tbegin_nofloat:              S/390 System z Built-in Functions.
                                                             (line   54)
* __builtin_tbegin_retry:                S/390 System z Built-in Functions.
                                                             (line   60)
* __builtin_tbegin_retry_nofloat:        S/390 System z Built-in Functions.
                                                             (line   67)
* __builtin_tend:                        S/390 System z Built-in Functions.
                                                             (line   77)
* __builtin_thread_pointer:              SH Built-in Functions.
                                                             (line   18)
* __builtin_trap:                        Other Builtins.     (line  283)
* __builtin_tx_assist:                   S/390 System z Built-in Functions.
                                                             (line   87)
* __builtin_tx_nesting_depth:            S/390 System z Built-in Functions.
                                                             (line   93)
* __builtin_types_compatible_p:          Other Builtins.     (line  109)
* __builtin_uaddll_overflow:             Integer Overflow Builtins.
                                                             (line   21)
* __builtin_uaddl_overflow:              Integer Overflow Builtins.
                                                             (line   19)
* __builtin_uadd_overflow:               Integer Overflow Builtins.
                                                             (line   17)
* __builtin_umulll_overflow:             Integer Overflow Builtins.
                                                             (line   72)
* __builtin_umull_overflow:              Integer Overflow Builtins.
                                                             (line   70)
* __builtin_umul_overflow:               Integer Overflow Builtins.
                                                             (line   68)
* __builtin_unreachable:                 Other Builtins.     (line  290)
* __builtin_usubll_overflow:             Integer Overflow Builtins.
                                                             (line   53)
* __builtin_usubl_overflow:              Integer Overflow Builtins.
                                                             (line   51)
* __builtin_usub_overflow:               Integer Overflow Builtins.
                                                             (line   49)
* __builtin_va_arg_pack:                 Constructing Calls. (line   52)
* __builtin_va_arg_pack_len:             Constructing Calls. (line   75)
* __builtin___bnd_chk_ptr_bounds:        Pointer Bounds Checker builtins.
                                                             (line    6)
* __builtin___bnd_chk_ptr_bounds <1>:    Pointer Bounds Checker builtins.
                                                             (line  106)
* __builtin___bnd_chk_ptr_lbounds:       Pointer Bounds Checker builtins.
                                                             (line    6)
* __builtin___bnd_chk_ptr_lbounds <1>:   Pointer Bounds Checker builtins.
                                                             (line   81)
* __builtin___bnd_chk_ptr_ubounds:       Pointer Bounds Checker builtins.
                                                             (line    6)
* __builtin___bnd_chk_ptr_ubounds <1>:   Pointer Bounds Checker builtins.
                                                             (line   99)
* __builtin___bnd_copy_ptr_bounds:       Pointer Bounds Checker builtins.
                                                             (line    6)
* __builtin___bnd_get_ptr_lbound:        Pointer Bounds Checker builtins.
                                                             (line    6)
* __builtin___bnd_get_ptr_ubound:        Pointer Bounds Checker builtins.
                                                             (line    6)
* __builtin___bnd_init_ptr_bounds:       Pointer Bounds Checker builtins.
                                                             (line    6)
* __builtin___bnd_narrow_ptr_bounds:     Pointer Bounds Checker builtins.
                                                             (line    6)
* __builtin___bnd_null_ptr_bounds:       Pointer Bounds Checker builtins.
                                                             (line    6)
* __builtin___bnd_set_ptr_bounds:        Pointer Bounds Checker builtins.
                                                             (line    6)
* __builtin___bnd_store_ptr_bounds:      Pointer Bounds Checker builtins.
                                                             (line    6)
* __builtin___bnd_store_ptr_bounds <1>:  Pointer Bounds Checker builtins.
                                                             (line   72)
* __builtin___clear_cache:               Other Builtins.     (line  374)
* __builtin___fprintf_chk:               Object Size Checking.
                                                             (line    6)
* __builtin___memcpy_chk:                Object Size Checking.
                                                             (line    6)
* __builtin___memmove_chk:               Object Size Checking.
                                                             (line    6)
* __builtin___mempcpy_chk:               Object Size Checking.
                                                             (line    6)
* __builtin___memset_chk:                Object Size Checking.
                                                             (line    6)
* __builtin___printf_chk:                Object Size Checking.
                                                             (line    6)
* __builtin___snprintf_chk:              Object Size Checking.
                                                             (line    6)
* __builtin___sprintf_chk:               Object Size Checking.
                                                             (line    6)
* __builtin___stpcpy_chk:                Object Size Checking.
                                                             (line    6)
* __builtin___strcat_chk:                Object Size Checking.
                                                             (line    6)
* __builtin___strcpy_chk:                Object Size Checking.
                                                             (line    6)
* __builtin___strncat_chk:               Object Size Checking.
                                                             (line    6)
* __builtin___strncpy_chk:               Object Size Checking.
                                                             (line    6)
* __builtin___vfprintf_chk:              Object Size Checking.
                                                             (line    6)
* __builtin___vprintf_chk:               Object Size Checking.
                                                             (line    6)
* __builtin___vsnprintf_chk:             Object Size Checking.
                                                             (line    6)
* __builtin___vsprintf_chk:              Object Size Checking.
                                                             (line    6)
* '__complex__' keyword:                 Complex.            (line    6)
* '__declspec(dllexport)':               Function Attributes.
                                                             (line  283)
* '__declspec(dllimport)':               Function Attributes.
                                                             (line  315)
* '__ea' SPU Named Address Spaces:       Named Address Spaces.
                                                             (line  155)
* __extension__:                         Alternate Keywords. (line   30)
* '__far' M32C Named Address Spaces:     Named Address Spaces.
                                                             (line  138)
* '__far' RL78 Named Address Spaces:     Named Address Spaces.
                                                             (line  147)
* '__flash' AVR Named Address Spaces:    Named Address Spaces.
                                                             (line   31)
* '__flash1' AVR Named Address Spaces:   Named Address Spaces.
                                                             (line   40)
* '__flash2' AVR Named Address Spaces:   Named Address Spaces.
                                                             (line   40)
* '__flash3' AVR Named Address Spaces:   Named Address Spaces.
                                                             (line   40)
* '__flash4' AVR Named Address Spaces:   Named Address Spaces.
                                                             (line   40)
* '__flash5' AVR Named Address Spaces:   Named Address Spaces.
                                                             (line   40)
* '__float128' data type:                Floating Types.     (line    6)
* '__float80' data type:                 Floating Types.     (line    6)
* '__fp16' data type:                    Half-Precision.     (line    6)
* '__FUNCTION__' identifier:             Function Names.     (line    6)
* '__func__' identifier:                 Function Names.     (line    6)
* '__imag__' keyword:                    Complex.            (line   27)
* '__int128' data types:                 __int128.           (line    6)
* '__memx' AVR Named Address Spaces:     Named Address Spaces.
                                                             (line   46)
* '__PRETTY_FUNCTION__' identifier:      Function Names.     (line    6)
* '__real__' keyword:                    Complex.            (line   27)
* __STDC_HOSTED__:                       Standards.          (line   13)
* __sync_add_and_fetch:                  __sync Builtins.    (line   60)
* __sync_and_and_fetch:                  __sync Builtins.    (line   60)
* __sync_bool_compare_and_swap:          __sync Builtins.    (line   71)
* __sync_fetch_and_add:                  __sync Builtins.    (line   44)
* __sync_fetch_and_and:                  __sync Builtins.    (line   44)
* __sync_fetch_and_nand:                 __sync Builtins.    (line   44)
* __sync_fetch_and_or:                   __sync Builtins.    (line   44)
* __sync_fetch_and_sub:                  __sync Builtins.    (line   44)
* __sync_fetch_and_xor:                  __sync Builtins.    (line   44)
* __sync_lock_release:                   __sync Builtins.    (line  101)
* __sync_lock_test_and_set:              __sync Builtins.    (line   83)
* __sync_nand_and_fetch:                 __sync Builtins.    (line   60)
* __sync_or_and_fetch:                   __sync Builtins.    (line   60)
* __sync_sub_and_fetch:                  __sync Builtins.    (line   60)
* __sync_synchronize:                    __sync Builtins.    (line   80)
* __sync_val_compare_and_swap:           __sync Builtins.    (line   71)
* __sync_xor_and_fetch:                  __sync Builtins.    (line   60)
* '__thread':                            Thread-Local.       (line    6)
* AArch64 Options:                       AArch64 Options.    (line    6)
* ABI:                                   Compatibility.      (line    6)
* 'abi_tag' attribute:                   C++ Attributes.     (line    9)
* abort:                                 Other Builtins.     (line    6)
* abs:                                   Other Builtins.     (line    6)
* accessing volatiles:                   Volatiles.          (line    6)
* accessing volatiles <1>:               C++ Volatiles.      (line    6)
* acos:                                  Other Builtins.     (line    6)
* acosf:                                 Other Builtins.     (line    6)
* acosh:                                 Other Builtins.     (line    6)
* acoshf:                                Other Builtins.     (line    6)
* acoshl:                                Other Builtins.     (line    6)
* acosl:                                 Other Builtins.     (line    6)
* Ada:                                   Clang and LLVM.     (line   24)
* Adapteva Epiphany Options:             Adapteva Epiphany Options.
                                                             (line    6)
* additional floating types:             Floating Types.     (line    6)
* address constraints:                   Simple Constraints. (line  152)
* address of a label:                    Labels as Values.   (line    6)
* address_operand:                       Simple Constraints. (line  156)
* 'alias' attribute:                     Function Attributes.
                                                             (line   40)
* 'aligned' attribute:                   Function Attributes.
                                                             (line   53)
* 'aligned' attribute <1>:               Variable Attributes.
                                                             (line   24)
* 'aligned' attribute <2>:               Type Attributes.    (line   32)
* alignment:                             Alignment.          (line    6)
* alloca:                                Other Builtins.     (line    6)
* 'alloca' vs variable-length arrays:    Variable Length.    (line   35)
* 'alloc_align' attribute:               Function Attributes.
                                                             (line   94)
* 'alloc_size' attribute:                Function Attributes.
                                                             (line   73)
* Allow nesting in an interrupt handler on the Blackfin processor.: Function Attributes.
                                                             (line 1067)
* alternate keywords:                    Alternate Keywords. (line    6)
* 'always_inline' function attribute:    Function Attributes.
                                                             (line  126)
* AMD1:                                  Standards.          (line   13)
* ANSI C:                                Standards.          (line   13)
* ANSI C standard:                       Standards.          (line   13)
* ANSI C89:                              Standards.          (line   13)
* ANSI support:                          C Dialect Options.  (line   16)
* ANSI X3.159-1989:                      Standards.          (line   13)
* apostrophes:                           Incompatibilities.  (line  116)
* application binary interface:          Compatibility.      (line    6)
* ARC Options:                           ARC Options.        (line    6)
* ARM Options:                           ARM Options.        (line    6)
* ARM [Annotated C++ Reference Manual]:  Backwards Compatibility.
                                                             (line    6)
* arrays of length zero:                 Zero Length.        (line    6)
* arrays of variable length:             Variable Length.    (line    6)
* arrays, non-lvalue:                    Subscripting.       (line    6)
* 'artificial' function attribute:       Function Attributes.
                                                             (line  172)
* asin:                                  Other Builtins.     (line    6)
* asinf:                                 Other Builtins.     (line    6)
* asinh:                                 Other Builtins.     (line    6)
* asinhf:                                Other Builtins.     (line    6)
* asinhl:                                Other Builtins.     (line    6)
* asinl:                                 Other Builtins.     (line    6)
* 'asm' assembler template:              Extended Asm.       (line  218)
* 'asm' clobbers:                        Extended Asm.       (line  575)
* 'asm' constraints:                     Constraints.        (line    6)
* 'asm' expressions:                     Extended Asm.       (line  480)
* 'asm' goto labels:                     Extended Asm.       (line  644)
* 'asm' input operands:                  Extended Asm.       (line  480)
* 'asm' keyword:                         Using Assembly Language with C.
                                                             (line    6)
* 'asm' output operands:                 Extended Asm.       (line  321)
* 'asm' volatile:                        Extended Asm.       (line  109)
* assembler names for identifiers:       Asm Labels.         (line    6)
* assembly code, invalid:                Bug Criteria.       (line   12)
* assembly language in C:                Using Assembly Language with C.
                                                             (line    6)
* assembly language in C, basic:         Basic Asm.          (line    6)
* assembly language in C, extended:      Extended Asm.       (line    6)
* 'assume_aligned' attribute:            Function Attributes.
                                                             (line  111)
* atan:                                  Other Builtins.     (line    6)
* atan2:                                 Other Builtins.     (line    6)
* atan2f:                                Other Builtins.     (line    6)
* atan2l:                                Other Builtins.     (line    6)
* atanf:                                 Other Builtins.     (line    6)
* atanh:                                 Other Builtins.     (line    6)
* atanhf:                                Other Builtins.     (line    6)
* atanhl:                                Other Builtins.     (line    6)
* atanl:                                 Other Builtins.     (line    6)
* attribute of types:                    Type Attributes.    (line    6)
* attribute of variables:                Variable Attributes.
                                                             (line    6)
* attribute syntax:                      Attribute Syntax.   (line    6)
* autoincrement/decrement addressing:    Simple Constraints. (line   30)
* automatic 'inline' for C++ member fns: Inline.             (line   71)
* AVR Options:                           AVR Options.        (line    6)
* Backwards Compatibility:               Backwards Compatibility.
                                                             (line    6)
* base class members:                    Name lookup.        (line    6)
* basic 'asm':                           Basic Asm.          (line    6)
* bcmp:                                  Other Builtins.     (line    6)
* 'below100' attribute:                  Variable Attributes.
                                                             (line  611)
* binary compatibility:                  Compatibility.      (line    6)
* Binary constants using the '0b' prefix: Binary constants.  (line    6)
* Blackfin Options:                      Blackfin Options.   (line    6)
* 'bnd_instrument' function attribute:   Function Attributes.
                                                             (line 1337)
* 'bnd_legacy' function attribute:       Function Attributes.
                                                             (line 1332)
* bound pointer to member function:      Bound member functions.
                                                             (line    6)
* break handler functions:               Function Attributes.
                                                             (line 1425)
* bug criteria:                          Bug Criteria.       (line    6)
* bugs:                                  Bugs.               (line    6)
* bugs, known:                           Trouble.            (line    6)
* built-in functions:                    C Dialect Options.  (line   75)
* built-in functions <1>:                Other Builtins.     (line    6)
* bzero:                                 Other Builtins.     (line    6)
* C:                                     Clang and LLVM.     (line    6)
* C compilation options:                 Invoking LLVM.      (line   30)
* C intermediate output, nonexistent:    Clang and LLVM.     (line   37)
* C language extensions:                 C Extensions.       (line    6)
* C language, traditional:               C Dialect Options.  (line  331)
* C standard:                            Standards.          (line   13)
* C standards:                           Standards.          (line   13)
* C++:                                   Clang and LLVM.     (line    6)
* C++ comments:                          C++ Comments.       (line    6)
* C++ compilation options:               Invoking LLVM.      (line   36)
* C++ interface and implementation headers: C++ Interface.   (line    6)
* C++ language extensions:               C++ Extensions.     (line    6)
* C++ member fns, automatically 'inline': Inline.            (line   71)
* C++ misunderstandings:                 C++ Misunderstandings.
                                                             (line    6)
* C++ options, command-line:             C++ Dialect Options.
                                                             (line    6)
* C++ pragmas, effect on inlining:       C++ Interface.      (line   57)
* C++ source file suffixes:              Invoking Clang/LLVM for C++.
                                                             (line    6)
* C++ static data, declaring and defining: Static Definitions.
                                                             (line    6)
* C11:                                   Standards.          (line   13)
* C1X:                                   Standards.          (line   13)
* C6X Options:                           C6X Options.        (line    6)
* C89:                                   Standards.          (line   13)
* C90:                                   Standards.          (line   13)
* C94:                                   Standards.          (line   13)
* C95:                                   Standards.          (line   13)
* C99:                                   Standards.          (line   13)
* C9X:                                   Standards.          (line   13)
* cabs:                                  Other Builtins.     (line    6)
* cabsf:                                 Other Builtins.     (line    6)
* cabsl:                                 Other Builtins.     (line    6)
* cacos:                                 Other Builtins.     (line    6)
* cacosf:                                Other Builtins.     (line    6)
* cacosh:                                Other Builtins.     (line    6)
* cacoshf:                               Other Builtins.     (line    6)
* cacoshl:                               Other Builtins.     (line    6)
* cacosl:                                Other Builtins.     (line    6)
* 'callee_pop_aggregate_return' attribute: Function Attributes.
                                                             (line 1014)
* calling functions through the function vector on H8/300, M16C, M32C and SH2A processors: Function Attributes.
                                                             (line  555)
* calloc:                                Other Builtins.     (line    6)
* caret:                                 Multi-Alternative.  (line   38)
* caret GCC_COLORS capability:           Diagnostic Message Formatting Options.
                                                             (line   88)
* carg:                                  Other Builtins.     (line    6)
* cargf:                                 Other Builtins.     (line    6)
* cargl:                                 Other Builtins.     (line    6)
* case labels in initializers:           Designated Inits.   (line    6)
* case ranges:                           Case Ranges.        (line    6)
* casin:                                 Other Builtins.     (line    6)
* casinf:                                Other Builtins.     (line    6)
* casinh:                                Other Builtins.     (line    6)
* casinhf:                               Other Builtins.     (line    6)
* casinhl:                               Other Builtins.     (line    6)
* casinl:                                Other Builtins.     (line    6)
* cast to a union:                       Cast to Union.      (line    6)
* catan:                                 Other Builtins.     (line    6)
* catanf:                                Other Builtins.     (line    6)
* catanh:                                Other Builtins.     (line    6)
* catanhf:                               Other Builtins.     (line    6)
* catanhl:                               Other Builtins.     (line    6)
* catanl:                                Other Builtins.     (line    6)
* cbrt:                                  Other Builtins.     (line    6)
* cbrtf:                                 Other Builtins.     (line    6)
* cbrtl:                                 Other Builtins.     (line    6)
* ccos:                                  Other Builtins.     (line    6)
* ccosf:                                 Other Builtins.     (line    6)
* ccosh:                                 Other Builtins.     (line    6)
* ccoshf:                                Other Builtins.     (line    6)
* ccoshl:                                Other Builtins.     (line    6)
* ccosl:                                 Other Builtins.     (line    6)
* ceil:                                  Other Builtins.     (line    6)
* ceilf:                                 Other Builtins.     (line    6)
* ceill:                                 Other Builtins.     (line    6)
* cexp:                                  Other Builtins.     (line    6)
* cexpf:                                 Other Builtins.     (line    6)
* cexpl:                                 Other Builtins.     (line    6)
* character set, execution:              Preprocessor Options.
                                                             (line  470)
* character set, input:                  Preprocessor Options.
                                                             (line  483)
* character set, wide execution:         Preprocessor Options.
                                                             (line  475)
* cimag:                                 Other Builtins.     (line    6)
* cimagf:                                Other Builtins.     (line    6)
* cimagl:                                Other Builtins.     (line    6)
* Clang:                                 Clang and LLVM.     (line    6)
* clang++:                               Invoking Clang/LLVM for C++.
                                                             (line   13)
* Clang/LLVM command options:            Invoking LLVM.      (line    6)
* 'cleanup' attribute:                   Variable Attributes.
                                                             (line   90)
* clog:                                  Other Builtins.     (line    6)
* clogf:                                 Other Builtins.     (line    6)
* clogl:                                 Other Builtins.     (line    6)
* code generation conventions:           Code Gen Options.   (line    6)
* code, mixed with declarations:         Mixed Declarations. (line    6)
* 'cold' function attribute:             Function Attributes.
                                                             (line 1296)
* 'cold' label attribute:                Label Attributes.   (line   43)
* command options:                       Invoking LLVM.      (line    6)
* comments, C++ style:                   C++ Comments.       (line    6)
* 'common' attribute:                    Variable Attributes.
                                                             (line  105)
* comparison of signed and unsigned values, warning: Warning Options.
                                                             (line  783)
* compilation statistics:                Developer Options.  (line    6)
* compiler bugs, reporting:              Bug Reporting.      (line    6)
* compiler compared to C++ preprocessor: Clang and LLVM.     (line   37)
* compiler options, C++:                 C++ Dialect Options.
                                                             (line    6)
* compiler options, Objective-C and Objective-C++: Objective-C and Objective-C++ Dialect Options.
                                                             (line    6)
* COMPILER_PATH:                         Environment Variables.
                                                             (line   91)
* complex conjugation:                   Complex.            (line   34)
* complex numbers:                       Complex.            (line    6)
* compound literals:                     Compound Literals.  (line    6)
* computed gotos:                        Labels as Values.   (line    6)
* conditional expressions, extensions:   Conditionals.       (line    6)
* conflicting types:                     Disappointments.    (line   21)
* conj:                                  Other Builtins.     (line    6)
* conjf:                                 Other Builtins.     (line    6)
* conjl:                                 Other Builtins.     (line    6)
* 'const' applied to function:           Function Attributes.
                                                             (line    6)
* 'const' function attribute:            Function Attributes.
                                                             (line  221)
* const qualifier:                       Pointers to Arrays. (line    6)
* constants in constraints:              Simple Constraints. (line   68)
* constraint modifier characters:        Modifiers.          (line    6)
* constraint, matching:                  Simple Constraints. (line  137)
* constraints, 'asm':                    Constraints.        (line    6)
* constraints, machine specific:         Machine Constraints.
                                                             (line    6)
* constructing calls:                    Constructing Calls. (line    6)
* constructor expressions:               Compound Literals.  (line    6)
* 'constructor' function attribute:      Function Attributes.
                                                             (line  236)
* contributors:                          Contributors.       (line    6)
* copysign:                              Other Builtins.     (line    6)
* copysignf:                             Other Builtins.     (line    6)
* copysignl:                             Other Builtins.     (line    6)
* core dump:                             Bug Criteria.       (line    9)
* cos:                                   Other Builtins.     (line    6)
* cosf:                                  Other Builtins.     (line    6)
* cosh:                                  Other Builtins.     (line    6)
* coshf:                                 Other Builtins.     (line    6)
* coshl:                                 Other Builtins.     (line    6)
* cosl:                                  Other Builtins.     (line    6)
* CPATH:                                 Environment Variables.
                                                             (line  127)
* CPLUS_INCLUDE_PATH:                    Environment Variables.
                                                             (line  129)
* cpow:                                  Other Builtins.     (line    6)
* cpowf:                                 Other Builtins.     (line    6)
* cpowl:                                 Other Builtins.     (line    6)
* cproj:                                 Other Builtins.     (line    6)
* cprojf:                                Other Builtins.     (line    6)
* cprojl:                                Other Builtins.     (line    6)
* CR16 Options:                          CR16 Options.       (line    6)
* creal:                                 Other Builtins.     (line    6)
* crealf:                                Other Builtins.     (line    6)
* creall:                                Other Builtins.     (line    6)
* CRIS Options:                          CRIS Options.       (line    6)
* 'critical' attribute:                  Function Attributes.
                                                             (line  708)
* csin:                                  Other Builtins.     (line    6)
* csinf:                                 Other Builtins.     (line    6)
* csinh:                                 Other Builtins.     (line    6)
* csinhf:                                Other Builtins.     (line    6)
* csinhl:                                Other Builtins.     (line    6)
* csinl:                                 Other Builtins.     (line    6)
* csqrt:                                 Other Builtins.     (line    6)
* csqrtf:                                Other Builtins.     (line    6)
* csqrtl:                                Other Builtins.     (line    6)
* ctan:                                  Other Builtins.     (line    6)
* ctanf:                                 Other Builtins.     (line    6)
* ctanh:                                 Other Builtins.     (line    6)
* ctanhf:                                Other Builtins.     (line    6)
* ctanhl:                                Other Builtins.     (line    6)
* ctanl:                                 Other Builtins.     (line    6)
* CUDA:                                  Standards.          (line  229)
* C_INCLUDE_PATH:                        Environment Variables.
                                                             (line  128)
* D:                                     Clang and LLVM.     (line   24)
* Darwin Options:                        Darwin Options.     (line    6)
* dcgettext:                             Other Builtins.     (line    6)
* 'dd' integer suffix:                   Decimal Float.      (line    6)
* 'DD' integer suffix:                   Decimal Float.      (line    6)
* deallocating variable length arrays:   Variable Length.    (line   22)
* debug dump options:                    Developer Options.  (line    6)
* debugging GCC:                         Developer Options.  (line    6)
* debugging information options:         Debugging Options.  (line    6)
* DEC Alpha Options:                     DEC Alpha Options.  (line    6)
* decimal floating types:                Decimal Float.      (line    6)
* declaration scope:                     Incompatibilities.  (line   80)
* declarations inside expressions:       Statement Exprs.    (line    6)
* declarations, mixed with code:         Mixed Declarations. (line    6)
* declaring attributes of functions:     Function Attributes.
                                                             (line    6)
* declaring static data in C++:          Static Definitions. (line    6)
* defining static data in C++:           Static Definitions. (line    6)
* dependencies for make as output:       Environment Variables.
                                                             (line  156)
* dependencies for make as output <1>:   Environment Variables.
                                                             (line  172)
* dependencies, 'make':                  Preprocessor Options.
                                                             (line  171)
* DEPENDENCIES_OUTPUT:                   Environment Variables.
                                                             (line  155)
* dependent name lookup:                 Name lookup.        (line    6)
* 'deprecated' attribute:                Variable Attributes.
                                                             (line  114)
* 'deprecated' attribute.:               Function Attributes.
                                                             (line  258)
* designated initializers:               Designated Inits.   (line    6)
* designator lists:                      Designated Inits.   (line   96)
* designators:                           Designated Inits.   (line   64)
* 'destructor' function attribute:       Function Attributes.
                                                             (line  236)
* developer options:                     Developer Options.  (line    6)
* 'df' integer suffix:                   Decimal Float.      (line    6)
* 'DF' integer suffix:                   Decimal Float.      (line    6)
* dgettext:                              Other Builtins.     (line    6)
* diagnostic messages:                   Diagnostic Message Formatting Options.
                                                             (line    6)
* dialect options:                       C Dialect Options.  (line    6)
* digits in constraint:                  Simple Constraints. (line  125)
* directory options:                     Directory Options.  (line    6)
* 'disinterrupt' attribute:              Function Attributes.
                                                             (line  278)
* 'dl' integer suffix:                   Decimal Float.      (line    6)
* 'DL' integer suffix:                   Decimal Float.      (line    6)
* dollar sign:                           Multi-Alternative.  (line   42)
* dollar signs in identifier names:      Dollar Signs.       (line    6)
* double-word arithmetic:                Long Long.          (line    6)
* downward funargs:                      Nested Functions.   (line    6)
* drem:                                  Other Builtins.     (line    6)
* dremf:                                 Other Builtins.     (line    6)
* dreml:                                 Other Builtins.     (line    6)
* dump options:                          Developer Options.  (line    6)
* 'E' in constraint:                     Simple Constraints. (line   87)
* earlyclobber operand:                  Modifiers.          (line   25)
* eight-bit data on the H8/300, H8/300H, and H8S: Function Attributes.
                                                             (line  366)
* empty structures:                      Empty Structures.   (line    6)
* environment variables:                 Environment Variables.
                                                             (line    6)
* erf:                                   Other Builtins.     (line    6)
* erfc:                                  Other Builtins.     (line    6)
* erfcf:                                 Other Builtins.     (line    6)
* erfcl:                                 Other Builtins.     (line    6)
* erff:                                  Other Builtins.     (line    6)
* erfl:                                  Other Builtins.     (line    6)
* 'error' function attribute:            Function Attributes.
                                                             (line  191)
* error GCC_COLORS capability:           Diagnostic Message Formatting Options.
                                                             (line   79)
* error messages:                        Warnings and Errors.
                                                             (line    6)
* escaped newlines:                      Escaped Newlines.   (line    6)
* exception handler functions:           Function Attributes.
                                                             (line  376)
* exception handler functions on the Blackfin processor: Function Attributes.
                                                             (line  381)
* exclamation point:                     Multi-Alternative.  (line   33)
* exit:                                  Other Builtins.     (line    6)
* exp:                                   Other Builtins.     (line    6)
* exp10:                                 Other Builtins.     (line    6)
* exp10f:                                Other Builtins.     (line    6)
* exp10l:                                Other Builtins.     (line    6)
* exp2:                                  Other Builtins.     (line    6)
* exp2f:                                 Other Builtins.     (line    6)
* exp2l:                                 Other Builtins.     (line    6)
* expf:                                  Other Builtins.     (line    6)
* expl:                                  Other Builtins.     (line    6)
* explicit register variables:           Explicit Reg Vars.  (line    6)
* expm1:                                 Other Builtins.     (line    6)
* expm1f:                                Other Builtins.     (line    6)
* expm1l:                                Other Builtins.     (line    6)
* expressions containing statements:     Statement Exprs.    (line    6)
* expressions, constructor:              Compound Literals.  (line    6)
* extended 'asm':                        Extended Asm.       (line    6)
* extensible constraints:                Simple Constraints. (line  161)
* extensions, '?:':                      Conditionals.       (line    6)
* extensions, C language:                C Extensions.       (line    6)
* extensions, C++ language:              C++ Extensions.     (line    6)
* external declaration scope:            Incompatibilities.  (line   80)
* 'externally_visible' attribute.:       Function Attributes.
                                                             (line  387)
* 'F' in constraint:                     Simple Constraints. (line   92)
* fabs:                                  Other Builtins.     (line    6)
* fabsf:                                 Other Builtins.     (line    6)
* fabsl:                                 Other Builtins.     (line    6)
* fatal signal:                          Bug Criteria.       (line    9)
* fdim:                                  Other Builtins.     (line    6)
* fdimf:                                 Other Builtins.     (line    6)
* fdiml:                                 Other Builtins.     (line    6)
* FDL, GNU Free Documentation License:   GNU Free Documentation License.
                                                             (line    6)
* ffs:                                   Other Builtins.     (line    6)
* file name suffix:                      Overall Options.    (line   20)
* file names:                            Link Options.       (line   16)
* fixed-point types:                     Fixed-Point.        (line    6)
* 'flatten' function attribute:          Function Attributes.
                                                             (line  184)
* flexible array members:                Zero Length.        (line    6)
* 'float' as function value type:        Incompatibilities.  (line  141)
* floating point precision:              Disappointments.    (line   68)
* floating-point precision:              Optimize Options.   (line 2042)
* floor:                                 Other Builtins.     (line    6)
* floorf:                                Other Builtins.     (line    6)
* floorl:                                Other Builtins.     (line    6)
* fma:                                   Other Builtins.     (line    6)
* fmaf:                                  Other Builtins.     (line    6)
* fmal:                                  Other Builtins.     (line    6)
* fmax:                                  Other Builtins.     (line    6)
* fmaxf:                                 Other Builtins.     (line    6)
* fmaxl:                                 Other Builtins.     (line    6)
* fmin:                                  Other Builtins.     (line    6)
* fminf:                                 Other Builtins.     (line    6)
* fminl:                                 Other Builtins.     (line    6)
* fmod:                                  Other Builtins.     (line    6)
* fmodf:                                 Other Builtins.     (line    6)
* fmodl:                                 Other Builtins.     (line    6)
* 'force_align_arg_pointer' attribute:   Function Attributes.
                                                             (line 1377)
* 'format' function attribute:           Function Attributes.
                                                             (line  444)
* 'format_arg' function attribute:       Function Attributes.
                                                             (line  509)
* Fortran:                               Clang and LLVM.     (line   24)
* 'forwarder_section' attribute:         Function Attributes.
                                                             (line  745)
* forwarding calls:                      Constructing Calls. (line    6)
* fprintf:                               Other Builtins.     (line    6)
* fprintf_unlocked:                      Other Builtins.     (line    6)
* fputs:                                 Other Builtins.     (line    6)
* fputs_unlocked:                        Other Builtins.     (line    6)
* FR30 Options:                          FR30 Options.       (line    6)
* freestanding environment:              Standards.          (line   13)
* freestanding implementation:           Standards.          (line   13)
* frexp:                                 Other Builtins.     (line    6)
* frexpf:                                Other Builtins.     (line    6)
* frexpl:                                Other Builtins.     (line    6)
* FRV Options:                           FRV Options.        (line    6)
* fscanf:                                Other Builtins.     (line    6)
* 'fscanf', and constant strings:        Incompatibilities.  (line   17)
* FT32 Options:                          FT32 Options.       (line    6)
* function addressability on the M32R/D: Function Attributes.
                                                             (line  972)
* function attributes:                   Function Attributes.
                                                             (line    6)
* function pointers, arithmetic:         Pointer Arith.      (line    6)
* function prototype declarations:       Function Prototypes.
                                                             (line    6)
* function versions:                     Function Multiversioning.
                                                             (line    6)
* function without a prologue/epilogue code: Function Attributes.
                                                             (line 1046)
* function, size of pointer to:          Pointer Arith.      (line    6)
* functions called via pointer on the RS/6000 and PowerPC: Function Attributes.
                                                             (line  906)
* functions in arbitrary sections:       Function Attributes.
                                                             (line    6)
* functions that are dynamically resolved: Function Attributes.
                                                             (line    6)
* functions that are passed arguments in registers on x86-32: Function Attributes.
                                                             (line    6)
* functions that are passed arguments in registers on x86-32 <1>: Function Attributes.
                                                             (line 1342)
* functions that behave like malloc:     Function Attributes.
                                                             (line    6)
* functions that do not handle memory bank switching on 68HC11/68HC12: Function Attributes.
                                                             (line 1057)
* functions that do not pop the argument stack on x86-32: Function Attributes.
                                                             (line    6)
* functions that do pop the argument stack on x86-32: Function Attributes.
                                                             (line  215)
* functions that handle memory bank switching: Function Attributes.
                                                             (line  400)
* functions that have different compilation options on x86-32: Function Attributes.
                                                             (line    6)
* functions that have different optimization options: Function Attributes.
                                                             (line    6)
* functions that have no side effects:   Function Attributes.
                                                             (line    6)
* functions that never return:           Function Attributes.
                                                             (line    6)
* functions that pop the argument stack on x86-32: Function Attributes.
                                                             (line    6)
* functions that pop the argument stack on x86-32 <1>: Function Attributes.
                                                             (line  426)
* functions that pop the argument stack on x86-32 <2>: Function Attributes.
                                                             (line  434)
* functions that pop the argument stack on x86-32 <3>: Function Attributes.
                                                             (line 1509)
* functions that return more than once:  Function Attributes.
                                                             (line    6)
* functions with non-null pointer arguments: Function Attributes.
                                                             (line    6)
* functions with 'printf', 'scanf', 'strftime' or 'strfmon' style arguments: Function Attributes.
                                                             (line    6)
* 'G' in constraint:                     Simple Constraints. (line   96)
* 'g' in constraint:                     Simple Constraints. (line  118)
* gamma:                                 Other Builtins.     (line    6)
* gammaf:                                Other Builtins.     (line    6)
* gammaf_r:                              Other Builtins.     (line    6)
* gammal:                                Other Builtins.     (line    6)
* gammal_r:                              Other Builtins.     (line    6)
* gamma_r:                               Other Builtins.     (line    6)
* GCC_COLORS environment variable:       Diagnostic Message Formatting Options.
                                                             (line   45)
* GCC_COMPARE_DEBUG:                     Environment Variables.
                                                             (line   52)
* GCC_EXEC_PREFIX:                       Environment Variables.
                                                             (line   57)
* 'gcc_struct':                          Type Attributes.    (line  390)
* 'gcc_struct' attribute:                Variable Attributes.
                                                             (line  490)
* 'gcov':                                Debugging Options.  (line  360)
* 'gcov' <1>:                            Instrumentation Options.
                                                             (line   50)
* generic options to control warnings:   Warning Options.    (line    6)
* generic warning messages:              Warning Options.    (line    6)
* gettext:                               Other Builtins.     (line    6)
* global offset table:                   Code Gen Options.   (line  285)
* global register after 'longjmp':       Global Reg Vars.    (line   65)
* global register variables:             Global Reg Vars.    (line    6)
* GNAT:                                  Clang and LLVM.     (line   24)
* GNU/Linux Options:                     GNU/Linux Options.  (line    6)
* 'gnu_inline' function attribute:       Function Attributes.
                                                             (line  136)
* goto with computed label:              Labels as Values.   (line    6)
* 'gprof':                               Debugging Options.  (line  328)
* 'gprof' <1>:                           Instrumentation Options.
                                                             (line   30)
* grouping options:                      Invoking LLVM.      (line   39)
* 'H' in constraint:                     Simple Constraints. (line   96)
* H8/300 Options:                        H8/300 Options.     (line    6)
* half-precision floating point:         Half-Precision.     (line    6)
* hardware models and configurations, specifying: Submodel Options.
                                                             (line    6)
* hex floats:                            Hex Floats.         (line    6)
* highlight, color, colour:              Diagnostic Message Formatting Options.
                                                             (line   45)
* 'hk' fixed-suffix:                     Fixed-Point.        (line    6)
* 'HK' fixed-suffix:                     Fixed-Point.        (line    6)
* hosted environment:                    Standards.          (line   13)
* hosted environment <1>:                C Dialect Options.  (line  114)
* hosted environment <2>:                C Dialect Options.  (line  146)
* hosted implementation:                 Standards.          (line   13)
* 'hot' function attribute:              Function Attributes.
                                                             (line 1286)
* 'hot' label attribute:                 Label Attributes.   (line   36)
* 'hotpatch' attribute:                  Function Attributes.
                                                             (line 1033)
* HPPA Options:                          HPPA Options.       (line    6)
* 'hr' fixed-suffix:                     Fixed-Point.        (line    6)
* 'HR' fixed-suffix:                     Fixed-Point.        (line    6)
* hypot:                                 Other Builtins.     (line    6)
* hypotf:                                Other Builtins.     (line    6)
* hypotl:                                Other Builtins.     (line    6)
* 'i' in constraint:                     Simple Constraints. (line   68)
* 'I' in constraint:                     Simple Constraints. (line   79)
* IA-64 Options:                         IA-64 Options.      (line    6)
* identifier names, dollar signs in:     Dollar Signs.       (line    6)
* identifiers, names in assembler code:  Asm Labels.         (line    6)
* 'ifunc' attribute:                     Function Attributes.
                                                             (line  616)
* ilogb:                                 Other Builtins.     (line    6)
* ilogbf:                                Other Builtins.     (line    6)
* ilogbl:                                Other Builtins.     (line    6)
* imaxabs:                               Other Builtins.     (line    6)
* implementation-defined behavior, C language: C Implementation.
                                                             (line    6)
* implementation-defined behavior, C++ language: C++ Implementation.
                                                             (line    6)
* implied '#pragma implementation':      C++ Interface.      (line   43)
* incompatibilities of GCC:              Incompatibilities.  (line    6)
* increment operators:                   Bug Criteria.       (line   17)
* index:                                 Other Builtins.     (line    6)
* indirect calls on ARC:                 Function Attributes.
                                                             (line  895)
* indirect calls on ARM:                 Function Attributes.
                                                             (line  895)
* indirect calls on Epiphany:            Function Attributes.
                                                             (line  895)
* indirect calls on MIPS:                Function Attributes.
                                                             (line  918)
* initializations in expressions:        Compound Literals.  (line    6)
* initializers with labeled elements:    Designated Inits.   (line    6)
* initializers, non-constant:            Initializers.       (line    6)
* 'init_priority' attribute:             C++ Attributes.     (line   35)
* inline assembly language:              Using Assembly Language with C.
                                                             (line    6)
* 'inline' automatic for C++ member fns: Inline.             (line   71)
* inline functions:                      Inline.             (line    6)
* inline functions, omission of:         Inline.             (line   51)
* inlining and C++ pragmas:              C++ Interface.      (line   57)
* installation trouble:                  Trouble.            (line    6)
* instrumentation options:               Instrumentation Options.
                                                             (line    6)
* integrating function code:             Inline.             (line    6)
* interface and implementation headers, C++: C++ Interface.  (line    6)
* intermediate C version, nonexistent:   Clang and LLVM.     (line   37)
* interrupt handler functions:           Function Attributes.
                                                             (line  179)
* interrupt handler functions <1>:       Function Attributes.
                                                             (line  420)
* interrupt handler functions <2>:       Function Attributes.
                                                             (line  656)
* interrupt handler functions on the AVR processors: Function Attributes.
                                                             (line 1481)
* interrupt handler functions on the Blackfin, m68k, H8/300 and SH processors: Function Attributes.
                                                             (line  833)
* interrupt service routines on ARM:     Function Attributes.
                                                             (line  847)
* interrupt thread functions on fido:    Function Attributes.
                                                             (line  839)
* introduction:                          Top.                (line    6)
* invalid assembly code:                 Bug Criteria.       (line   12)
* invalid input:                         Bug Criteria.       (line   42)
* invoking 'clang++':                    Invoking Clang/LLVM for C++.
                                                             (line   21)
* isalnum:                               Other Builtins.     (line    6)
* isalpha:                               Other Builtins.     (line    6)
* isascii:                               Other Builtins.     (line    6)
* isblank:                               Other Builtins.     (line    6)
* iscntrl:                               Other Builtins.     (line    6)
* isdigit:                               Other Builtins.     (line    6)
* isgraph:                               Other Builtins.     (line    6)
* islower:                               Other Builtins.     (line    6)
* ISO 9899:                              Standards.          (line   13)
* ISO C:                                 Standards.          (line   13)
* ISO C standard:                        Standards.          (line   13)
* ISO C11:                               Standards.          (line   13)
* ISO C1X:                               Standards.          (line   13)
* ISO C90:                               Standards.          (line   13)
* ISO C94:                               Standards.          (line   13)
* ISO C95:                               Standards.          (line   13)
* ISO C99:                               Standards.          (line   13)
* ISO C9X:                               Standards.          (line   13)
* ISO support:                           C Dialect Options.  (line   16)
* ISO/IEC 9899:                          Standards.          (line   13)
* isprint:                               Other Builtins.     (line    6)
* ispunct:                               Other Builtins.     (line    6)
* isspace:                               Other Builtins.     (line    6)
* isupper:                               Other Builtins.     (line    6)
* iswalnum:                              Other Builtins.     (line    6)
* iswalpha:                              Other Builtins.     (line    6)
* iswblank:                              Other Builtins.     (line    6)
* iswcntrl:                              Other Builtins.     (line    6)
* iswdigit:                              Other Builtins.     (line    6)
* iswgraph:                              Other Builtins.     (line    6)
* iswlower:                              Other Builtins.     (line    6)
* iswprint:                              Other Builtins.     (line    6)
* iswpunct:                              Other Builtins.     (line    6)
* iswspace:                              Other Builtins.     (line    6)
* iswupper:                              Other Builtins.     (line    6)
* iswxdigit:                             Other Builtins.     (line    6)
* isxdigit:                              Other Builtins.     (line    6)
* j0:                                    Other Builtins.     (line    6)
* j0f:                                   Other Builtins.     (line    6)
* j0l:                                   Other Builtins.     (line    6)
* j1:                                    Other Builtins.     (line    6)
* j1f:                                   Other Builtins.     (line    6)
* j1l:                                   Other Builtins.     (line    6)
* 'java_interface' attribute:            C++ Attributes.     (line   56)
* jn:                                    Other Builtins.     (line    6)
* jnf:                                   Other Builtins.     (line    6)
* jnl:                                   Other Builtins.     (line    6)
* 'k' fixed-suffix:                      Fixed-Point.        (line    6)
* 'K' fixed-suffix:                      Fixed-Point.        (line    6)
* K&R C:                                 Standards.          (line   13)
* 'keep_interrupts_masked' attribute:    Function Attributes.
                                                             (line  767)
* keywords, alternate:                   Alternate Keywords. (line    6)
* known causes of trouble:               Trouble.            (line    6)
* 'l1_data' variable attribute:          Variable Attributes.
                                                             (line  385)
* 'l1_data_A' variable attribute:        Variable Attributes.
                                                             (line  385)
* 'l1_data_B' variable attribute:        Variable Attributes.
                                                             (line  385)
* 'l1_text' function attribute:          Function Attributes.
                                                             (line  856)
* 'l2' function attribute:               Function Attributes.
                                                             (line  862)
* 'l2' variable attribute:               Variable Attributes.
                                                             (line  393)
* Label Attributes:                      Label Attributes.   (line    6)
* labeled elements in initializers:      Designated Inits.   (line    6)
* labels as values:                      Labels as Values.   (line    6)
* labs:                                  Other Builtins.     (line    6)
* LANG:                                  Environment Variables.
                                                             (line   21)
* LANG <1>:                              Environment Variables.
                                                             (line  106)
* language dialect options:              C Dialect Options.  (line    6)
* LC_ALL:                                Environment Variables.
                                                             (line   21)
* LC_CTYPE:                              Environment Variables.
                                                             (line   21)
* LC_MESSAGES:                           Environment Variables.
                                                             (line   21)
* ldexp:                                 Other Builtins.     (line    6)
* ldexpf:                                Other Builtins.     (line    6)
* ldexpl:                                Other Builtins.     (line    6)
* 'leaf' function attribute:             Function Attributes.
                                                             (line  868)
* length-zero arrays:                    Zero Length.        (line    6)
* lgamma:                                Other Builtins.     (line    6)
* lgammaf:                               Other Builtins.     (line    6)
* lgammaf_r:                             Other Builtins.     (line    6)
* lgammal:                               Other Builtins.     (line    6)
* lgammal_r:                             Other Builtins.     (line    6)
* lgamma_r:                              Other Builtins.     (line    6)
* Libraries:                             Link Options.       (line   36)
* LIBRARY_PATH:                          Environment Variables.
                                                             (line   97)
* link options:                          Link Options.       (line    6)
* linker script:                         Link Options.       (line  244)
* 'lk' fixed-suffix:                     Fixed-Point.        (line    6)
* 'LK' fixed-suffix:                     Fixed-Point.        (line    6)
* 'LL' integer suffix:                   Long Long.          (line    6)
* llabs:                                 Other Builtins.     (line    6)
* 'llk' fixed-suffix:                    Fixed-Point.        (line    6)
* 'LLK' fixed-suffix:                    Fixed-Point.        (line    6)
* 'llr' fixed-suffix:                    Fixed-Point.        (line    6)
* 'LLR' fixed-suffix:                    Fixed-Point.        (line    6)
* llrint:                                Other Builtins.     (line    6)
* llrintf:                               Other Builtins.     (line    6)
* llrintl:                               Other Builtins.     (line    6)
* llround:                               Other Builtins.     (line    6)
* llroundf:                              Other Builtins.     (line    6)
* llroundl:                              Other Builtins.     (line    6)
* LLVM:                                  Clang and LLVM.     (line    6)
* LLVM command options:                  Invoking LLVM.      (line    6)
* LM32 Options:                          LM32 Options.       (line    6)
* load address instruction:              Simple Constraints. (line  152)
* local labels:                          Local Labels.       (line    6)
* local variables in macros:             Typeof.             (line   46)
* local variables, specifying registers: Local Reg Vars.     (line    6)
* locale:                                Environment Variables.
                                                             (line   21)
* locale definition:                     Environment Variables.
                                                             (line  106)
* locus GCC_COLORS capability:           Diagnostic Message Formatting Options.
                                                             (line   91)
* log:                                   Other Builtins.     (line    6)
* log10:                                 Other Builtins.     (line    6)
* log10f:                                Other Builtins.     (line    6)
* log10l:                                Other Builtins.     (line    6)
* log1p:                                 Other Builtins.     (line    6)
* log1pf:                                Other Builtins.     (line    6)
* log1pl:                                Other Builtins.     (line    6)
* log2:                                  Other Builtins.     (line    6)
* log2f:                                 Other Builtins.     (line    6)
* log2l:                                 Other Builtins.     (line    6)
* logb:                                  Other Builtins.     (line    6)
* logbf:                                 Other Builtins.     (line    6)
* logbl:                                 Other Builtins.     (line    6)
* logf:                                  Other Builtins.     (line    6)
* logl:                                  Other Builtins.     (line    6)
* 'long long' data types:                Long Long.          (line    6)
* longjmp:                               Global Reg Vars.    (line   65)
* 'longjmp' incompatibilities:           Incompatibilities.  (line   39)
* Low Level Virtual Machine:             Clang and LLVM.     (line    6)
* 'lr' fixed-suffix:                     Fixed-Point.        (line    6)
* 'LR' fixed-suffix:                     Fixed-Point.        (line    6)
* lrint:                                 Other Builtins.     (line    6)
* lrintf:                                Other Builtins.     (line    6)
* lrintl:                                Other Builtins.     (line    6)
* lround:                                Other Builtins.     (line    6)
* lroundf:                               Other Builtins.     (line    6)
* lroundl:                               Other Builtins.     (line    6)
* 'm' in constraint:                     Simple Constraints. (line   17)
* M32C Options:                          M32C Options.       (line    6)
* M32R/D Options:                        M32R/D Options.     (line    6)
* M680x0 Options:                        M680x0 Options.     (line    6)
* machine dependent options:             Submodel Options.   (line    6)
* machine specific constraints:          Machine Constraints.
                                                             (line    6)
* macro with variable arguments:         Variadic Macros.    (line    6)
* macros, inline alternative:            Inline.             (line    6)
* macros, local labels:                  Local Labels.       (line    6)
* macros, local variables in:            Typeof.             (line   46)
* macros, statements in expressions:     Statement Exprs.    (line    6)
* macros, types of arguments:            Typeof.             (line    6)
* 'make':                                Preprocessor Options.
                                                             (line  171)
* malloc:                                Other Builtins.     (line    6)
* 'malloc' attribute:                    Function Attributes.
                                                             (line  928)
* matching constraint:                   Simple Constraints. (line  137)
* MCore Options:                         MCore Options.      (line    6)
* member fns, automatically 'inline':    Inline.             (line   71)
* memchr:                                Other Builtins.     (line    6)
* memcmp:                                Other Builtins.     (line    6)
* memcpy:                                Other Builtins.     (line    6)
* memory references in constraints:      Simple Constraints. (line   17)
* mempcpy:                               Other Builtins.     (line    6)
* memset:                                Other Builtins.     (line    6)
* MeP Options:                           MeP Options.        (line    6)
* message formatting:                    Diagnostic Message Formatting Options.
                                                             (line    6)
* messages, generic warning:             Warning Options.    (line    6)
* messages, warning and error:           Warnings and Errors.
                                                             (line    6)
* MicroBlaze Options:                    MicroBlaze Options. (line    6)
* 'micromips' attribute:                 Function Attributes.
                                                             (line  955)
* middle-operands, omitted:              Conditionals.       (line    6)
* MIPS Options:                          MIPS Options.       (line    6)
* 'mips16' attribute:                    Function Attributes.
                                                             (line  940)
* misunderstandings in C++:              C++ Misunderstandings.
                                                             (line    6)
* mixed declarations and code:           Mixed Declarations. (line    6)
* mixing assembly language and C:        Using Assembly Language with C.
                                                             (line    6)
* 'mktemp', and constant strings:        Incompatibilities.  (line   13)
* MMIX Options:                          MMIX Options.       (line    6)
* MN10300 Options:                       MN10300 Options.    (line    6)
* 'mode' attribute:                      Variable Attributes.
                                                             (line  134)
* modf:                                  Other Builtins.     (line    6)
* modff:                                 Other Builtins.     (line    6)
* modfl:                                 Other Builtins.     (line    6)
* modifiers in constraints:              Modifiers.          (line    6)
* Moxie Options:                         Moxie Options.      (line    6)
* MSP430 Options:                        MSP430 Options.     (line    6)
* 'ms_abi' attribute:                    Function Attributes.
                                                             (line 1001)
* 'ms_hook_prologue' attribute:          Function Attributes.
                                                             (line 1026)
* 'ms_struct':                           Type Attributes.    (line  390)
* 'ms_struct' attribute:                 Variable Attributes.
                                                             (line  490)
* multiple alternative constraints:      Multi-Alternative.  (line    6)
* multiprecision arithmetic:             Long Long.          (line    6)
* 'n' in constraint:                     Simple Constraints. (line   73)
* Named Address Spaces:                  Named Address Spaces.
                                                             (line    6)
* names used in assembler code:          Asm Labels.         (line    6)
* naming convention, implementation headers: C++ Interface.  (line   43)
* NDS32 Options:                         NDS32 Options.      (line    6)
* nearbyint:                             Other Builtins.     (line    6)
* nearbyintf:                            Other Builtins.     (line    6)
* nearbyintl:                            Other Builtins.     (line    6)
* 'nested' attribute:                    Function Attributes.
                                                             (line  795)
* nested functions:                      Nested Functions.   (line    6)
* 'nested_ready' attribute:              Function Attributes.
                                                             (line  799)
* newlines (escaped):                    Escaped Newlines.   (line    6)
* nextafter:                             Other Builtins.     (line    6)
* nextafterf:                            Other Builtins.     (line    6)
* nextafterl:                            Other Builtins.     (line    6)
* nexttoward:                            Other Builtins.     (line    6)
* nexttowardf:                           Other Builtins.     (line    6)
* nexttowardl:                           Other Builtins.     (line    6)
* Nios II Options:                       Nios II Options.    (line    6)
* 'nmi' attribute:                       Function Attributes.
                                                             (line 1364)
* NMI handler functions on the Blackfin processor: Function Attributes.
                                                             (line 1072)
* 'noclone' function attribute:          Function Attributes.
                                                             (line 1111)
* 'nocommon' attribute:                  Variable Attributes.
                                                             (line  105)
* 'nocompression' attribute:             Function Attributes.
                                                             (line 1078)
* 'noinline' function attribute:         Function Attributes.
                                                             (line 1100)
* 'nomicromips' attribute:               Function Attributes.
                                                             (line  955)
* 'nomips16' attribute:                  Function Attributes.
                                                             (line  940)
* non-constant initializers:             Initializers.       (line    6)
* non-static inline function:            Inline.             (line   85)
* 'nonnull' function attribute:          Function Attributes.
                                                             (line 1121)
* 'noreturn' function attribute:         Function Attributes.
                                                             (line 1163)
* 'nosave_low_regs' attribute:           Function Attributes.
                                                             (line 1201)
* note GCC_COLORS capability:            Diagnostic Message Formatting Options.
                                                             (line   85)
* 'nothrow' function attribute:          Function Attributes.
                                                             (line 1194)
* 'not_nested' attribute:                Function Attributes.
                                                             (line  797)
* 'no_icf' function attribute:           Function Attributes.
                                                             (line 1117)
* 'no_instrument_function' function attribute: Function Attributes.
                                                             (line 1084)
* 'no_reorder' function or variable attribute: Function Attributes.
                                                             (line 1145)
* 'no_sanitize_address' function attribute: Function Attributes.
                                                             (line 1313)
* 'no_sanitize_thread' function attribute: Function Attributes.
                                                             (line 1321)
* 'no_sanitize_undefined' function attribute: Function Attributes.
                                                             (line 1326)
* 'no_split_stack' function attribute:   Function Attributes.
                                                             (line 1089)
* Nvidia PTX Options:                    Nvidia PTX Options. (line    6)
* Nvidia(R) CUDA:                        Standards.          (line  229)
* 'o' in constraint:                     Simple Constraints. (line   23)
* OBJC_INCLUDE_PATH:                     Environment Variables.
                                                             (line  130)
* Objective-C:                           Clang and LLVM.     (line    6)
* Objective-C <1>:                       Standards.          (line  168)
* Objective-C and Objective-C++ options, command-line: Objective-C and Objective-C++ Dialect Options.
                                                             (line    6)
* Objective-C++:                         Clang and LLVM.     (line    6)
* Objective-C++ <1>:                     Standards.          (line  168)
* offsettable address:                   Simple Constraints. (line   23)
* old-style function definitions:        Function Prototypes.
                                                             (line    6)
* omitted middle-operands:               Conditionals.       (line    6)
* open coding:                           Inline.             (line    6)
* OpenCL:                                Standards.          (line  229)
* OpenMP parallel:                       C Dialect Options.  (line  189)
* operand constraints, 'asm':            Constraints.        (line    6)
* 'optimize' function attribute:         Function Attributes.
                                                             (line 1207)
* optimize options:                      Optimize Options.   (line    6)
* options to control diagnostics formatting: Diagnostic Message Formatting Options.
                                                             (line    6)
* options, C++:                          C++ Dialect Options.
                                                             (line    6)
* options, Clang command:                Invoking LLVM.      (line    6)
* options, code generation:              Code Gen Options.   (line    6)
* options, debugging:                    Debugging Options.  (line    6)
* options, dialect:                      C Dialect Options.  (line    6)
* options, directory search:             Directory Options.  (line    6)
* options, grouping:                     Invoking LLVM.      (line   39)
* options, linking:                      Link Options.       (line    6)
* options, LLVM command:                 Invoking LLVM.      (line    6)
* options, Objective-C and Objective-C++: Objective-C and Objective-C++ Dialect Options.
                                                             (line    6)
* options, optimization:                 Optimize Options.   (line    6)
* options, order:                        Invoking LLVM.      (line   43)
* options, preprocessor:                 Preprocessor Options.
                                                             (line    6)
* options, profiling:                    Instrumentation Options.
                                                             (line    6)
* options, program instrumentation:      Instrumentation Options.
                                                             (line    6)
* options, run-time error checking:      Instrumentation Options.
                                                             (line    6)
* order of evaluation, side effects:     Non-bugs.           (line  196)
* order of options:                      Invoking LLVM.      (line   43)
* 'OS_main' AVR function attribute:      Function Attributes.
                                                             (line 1224)
* 'OS_task' AVR function attribute:      Function Attributes.
                                                             (line 1224)
* other register constraints:            Simple Constraints. (line  161)
* output file option:                    Overall Options.    (line  173)
* overloaded virtual function, warning:  C++ Dialect Options.
                                                             (line  352)
* 'p' in constraint:                     Simple Constraints. (line  152)
* 'packed' attribute:                    Variable Attributes.
                                                             (line  145)
* parameter forward declaration:         Variable Length.    (line   68)
* 'partial_save' attribute:              Function Attributes.
                                                             (line  807)
* 'pcs' function attribute:              Function Attributes.
                                                             (line 1248)
* PDP-11 Options:                        PDP-11 Options.     (line    6)
* PIC:                                   Code Gen Options.   (line  285)
* picoChip Options:                      picoChip Options.   (line    6)
* pmf:                                   Bound member functions.
                                                             (line    6)
* pointer arguments:                     Function Attributes.
                                                             (line  226)
* Pointer Bounds Checker options:        Instrumentation Options.
                                                             (line  343)
* pointer to member function:            Bound member functions.
                                                             (line    6)
* pointers to arrays:                    Pointers to Arrays. (line    6)
* portions of temporary objects, pointers to: Temporaries.   (line    6)
* pow:                                   Other Builtins.     (line    6)
* pow10:                                 Other Builtins.     (line    6)
* pow10f:                                Other Builtins.     (line    6)
* pow10l:                                Other Builtins.     (line    6)
* PowerPC Options:                       PowerPC Options.    (line    6)
* powf:                                  Other Builtins.     (line    6)
* powl:                                  Other Builtins.     (line    6)
* pragma GCC ivdep:                      Loop-Specific Pragmas.
                                                             (line    7)
* pragma GCC optimize:                   Function Specific Option Pragmas.
                                                             (line   20)
* pragma GCC pop_options:                Function Specific Option Pragmas.
                                                             (line   31)
* pragma GCC push_options:               Function Specific Option Pragmas.
                                                             (line   31)
* pragma GCC reset_options:              Function Specific Option Pragmas.
                                                             (line   39)
* pragma GCC target:                     Function Specific Option Pragmas.
                                                             (line    7)
* pragma, address:                       M32C Pragmas.       (line   15)
* pragma, align:                         Solaris Pragmas.    (line   11)
* pragma, call:                          MeP Pragmas.        (line   48)
* pragma, coprocessor available:         MeP Pragmas.        (line   13)
* pragma, coprocessor call_saved:        MeP Pragmas.        (line   20)
* pragma, coprocessor subclass:          MeP Pragmas.        (line   28)
* pragma, custom io_volatile:            MeP Pragmas.        (line    7)
* pragma, diagnostic:                    Diagnostic Pragmas. (line   14)
* pragma, diagnostic <1>:                Diagnostic Pragmas. (line   57)
* pragma, disinterrupt:                  MeP Pragmas.        (line   38)
* pragma, fini:                          Solaris Pragmas.    (line   20)
* pragma, init:                          Solaris Pragmas.    (line   26)
* pragma, longcall:                      RS/6000 and PowerPC Pragmas.
                                                             (line   14)
* pragma, long_calls:                    ARM Pragmas.        (line   11)
* pragma, long_calls_off:                ARM Pragmas.        (line   17)
* pragma, mark:                          Darwin Pragmas.     (line   11)
* pragma, memregs:                       M32C Pragmas.       (line    7)
* pragma, no_long_calls:                 ARM Pragmas.        (line   14)
* pragma, options align:                 Darwin Pragmas.     (line   14)
* pragma, pop_macro:                     Push/Pop Macro Pragmas.
                                                             (line   15)
* pragma, push_macro:                    Push/Pop Macro Pragmas.
                                                             (line   11)
* pragma, reason for not using:          Function Attributes.
                                                             (line 2061)
* pragma, redefine_extname:              Symbol-Renaming Pragmas.
                                                             (line   13)
* pragma, segment:                       Darwin Pragmas.     (line   21)
* pragma, unused:                        Darwin Pragmas.     (line   24)
* pragma, visibility:                    Visibility Pragmas. (line    8)
* pragma, weak:                          Weak Pragmas.       (line   10)
* pragmas:                               Pragmas.            (line    6)
* pragmas in C++, effect on inlining:    C++ Interface.      (line   57)
* pragmas, interface and implementation: C++ Interface.      (line    6)
* pragmas, warning of unknown:           Warning Options.    (line  967)
* precompiled headers:                   Precompiled Headers.
                                                             (line    6)
* preprocessing numbers:                 Incompatibilities.  (line  173)
* preprocessing tokens:                  Incompatibilities.  (line  173)
* preprocessor options:                  Preprocessor Options.
                                                             (line    6)
* printf:                                Other Builtins.     (line    6)
* printf_unlocked:                       Other Builtins.     (line    6)
* 'prof':                                Instrumentation Options.
                                                             (line   24)
* profiling options:                     Instrumentation Options.
                                                             (line    6)
* 'progmem' AVR variable attribute:      Variable Attributes.
                                                             (line  315)
* program instrumentation options:       Instrumentation Options.
                                                             (line    6)
* promotion of formal parameters:        Function Prototypes.
                                                             (line    6)
* 'pure' function attribute:             Function Attributes.
                                                             (line 1267)
* push address instruction:              Simple Constraints. (line  152)
* putchar:                               Other Builtins.     (line    6)
* puts:                                  Other Builtins.     (line    6)
* 'q' floating point suffix:             Floating Types.     (line    6)
* 'Q' floating point suffix:             Floating Types.     (line    6)
* 'qsort', and global register variables: Global Reg Vars.   (line   41)
* question mark:                         Multi-Alternative.  (line   27)
* quote GCC_COLORS capability:           Diagnostic Message Formatting Options.
                                                             (line   95)
* 'r' fixed-suffix:                      Fixed-Point.        (line    6)
* 'R' fixed-suffix:                      Fixed-Point.        (line    6)
* 'r' in constraint:                     Simple Constraints. (line   64)
* ranges in case statements:             Case Ranges.        (line    6)
* read-only strings:                     Incompatibilities.  (line    9)
* 'reentrant' attribute:                 Function Attributes.
                                                             (line  714)
* register variable after 'longjmp':     Global Reg Vars.    (line   65)
* registers for local variables:         Local Reg Vars.     (line    6)
* registers in constraints:              Simple Constraints. (line   64)
* registers, global allocation:          Explicit Reg Vars.  (line    6)
* registers, global variables in:        Global Reg Vars.    (line    6)
* 'regparm' attribute:                   Function Attributes.
                                                             (line 1342)
* remainder:                             Other Builtins.     (line    6)
* remainderf:                            Other Builtins.     (line    6)
* remainderl:                            Other Builtins.     (line    6)
* remquo:                                Other Builtins.     (line    6)
* remquof:                               Other Builtins.     (line    6)
* remquol:                               Other Builtins.     (line    6)
* 'renesas' attribute:                   Function Attributes.
                                                             (line 1385)
* reordering, warning:                   C++ Dialect Options.
                                                             (line  371)
* reporting bugs:                        Bugs.               (line    6)
* 'resbank' attribute:                   Function Attributes.
                                                             (line 1389)
* reset handler functions:               Function Attributes.
                                                             (line 1359)
* rest argument (in macro):              Variadic Macros.    (line    6)
* restricted pointers:                   Restricted Pointers.
                                                             (line    6)
* restricted references:                 Restricted Pointers.
                                                             (line    6)
* restricted this pointer:               Restricted Pointers.
                                                             (line    6)
* 'returns_nonnull' function attribute:  Function Attributes.
                                                             (line 1153)
* 'returns_twice' attribute:             Function Attributes.
                                                             (line 1403)
* rindex:                                Other Builtins.     (line    6)
* rint:                                  Other Builtins.     (line    6)
* rintf:                                 Other Builtins.     (line    6)
* rintl:                                 Other Builtins.     (line    6)
* RL78 Options:                          RL78 Options.       (line    6)
* round:                                 Other Builtins.     (line    6)
* roundf:                                Other Builtins.     (line    6)
* roundl:                                Other Builtins.     (line    6)
* RS/6000 and PowerPC Options:           RS/6000 and PowerPC Options.
                                                             (line    6)
* RTTI:                                  Vague Linkage.      (line   42)
* run-time error checking options:       Instrumentation Options.
                                                             (line    6)
* run-time options:                      Code Gen Options.   (line    6)
* RX Options:                            RX Options.         (line    6)
* 's' in constraint:                     Simple Constraints. (line  100)
* S/390 and zSeries Options:             S/390 and zSeries Options.
                                                             (line    6)
* save all registers on the Blackfin, H8/300, H8/300H, and H8S: Function Attributes.
                                                             (line 1412)
* save volatile registers on the MicroBlaze: Function Attributes.
                                                             (line 1417)
* 'save_all' attribute:                  Function Attributes.
                                                             (line  804)
* scalb:                                 Other Builtins.     (line    6)
* scalbf:                                Other Builtins.     (line    6)
* scalbl:                                Other Builtins.     (line    6)
* scalbln:                               Other Builtins.     (line    6)
* scalblnf:                              Other Builtins.     (line    6)
* scalblnf <1>:                          Other Builtins.     (line    6)
* scalbn:                                Other Builtins.     (line    6)
* scalbnf:                               Other Builtins.     (line    6)
* 'scanf', and constant strings:         Incompatibilities.  (line   17)
* scanfnl:                               Other Builtins.     (line    6)
* scope of a variable length array:      Variable Length.    (line   22)
* scope of declaration:                  Disappointments.    (line   21)
* scope of external declarations:        Incompatibilities.  (line   80)
* Score Options:                         Score Options.      (line    6)
* search path:                           Directory Options.  (line    6)
* 'section' function attribute:          Function Attributes.
                                                             (line 1434)
* 'section' variable attribute:          Variable Attributes.
                                                             (line  166)
* 'sentinel' function attribute:         Function Attributes.
                                                             (line 1450)
* setjmp:                                Global Reg Vars.    (line   65)
* 'setjmp' incompatibilities:            Incompatibilities.  (line   39)
* SH Options:                            SH Options.         (line    6)
* shared strings:                        Incompatibilities.  (line    9)
* 'shared' variable attribute:           Variable Attributes.
                                                             (line  211)
* side effect in '?:':                   Conditionals.       (line   20)
* side effects, macro argument:          Statement Exprs.    (line   35)
* side effects, order of evaluation:     Non-bugs.           (line  196)
* signbit:                               Other Builtins.     (line    6)
* signbitd128:                           Other Builtins.     (line    6)
* signbitd32:                            Other Builtins.     (line    6)
* signbitd64:                            Other Builtins.     (line    6)
* signbitf:                              Other Builtins.     (line    6)
* signbitl:                              Other Builtins.     (line    6)
* signed and unsigned values, comparison warning: Warning Options.
                                                             (line  783)
* significand:                           Other Builtins.     (line    6)
* significandf:                          Other Builtins.     (line    6)
* significandl:                          Other Builtins.     (line    6)
* simple constraints:                    Simple Constraints. (line    6)
* sin:                                   Other Builtins.     (line    6)
* sincos:                                Other Builtins.     (line    6)
* sincosf:                               Other Builtins.     (line    6)
* sincosl:                               Other Builtins.     (line    6)
* sinf:                                  Other Builtins.     (line    6)
* sinh:                                  Other Builtins.     (line    6)
* sinhf:                                 Other Builtins.     (line    6)
* sinhl:                                 Other Builtins.     (line    6)
* sinl:                                  Other Builtins.     (line    6)
* sizeof:                                Typeof.             (line    6)
* snprintf:                              Other Builtins.     (line    6)
* Solaris 2 Options:                     Solaris 2 Options.  (line    6)
* SPARC Options:                         SPARC Options.      (line    6)
* specified registers:                   Explicit Reg Vars.  (line    6)
* specifying hardware config:            Submodel Options.   (line    6)
* specifying registers for local variables: Local Reg Vars.  (line    6)
* speed of compilation:                  Precompiled Headers.
                                                             (line    6)
* sprintf:                               Other Builtins.     (line    6)
* SPU Options:                           SPU Options.        (line    6)
* 'sp_switch' attribute:                 Function Attributes.
                                                             (line 1499)
* sqrt:                                  Other Builtins.     (line    6)
* sqrtf:                                 Other Builtins.     (line    6)
* sqrtl:                                 Other Builtins.     (line    6)
* sscanf:                                Other Builtins.     (line    6)
* 'sscanf', and constant strings:        Incompatibilities.  (line   17)
* 'sseregparm' attribute:                Function Attributes.
                                                             (line 1370)
* 'stack_protect' function attribute:    Function Attributes.
                                                             (line 1095)
* statements inside expressions:         Statement Exprs.    (line    6)
* static data in C++, declaring and defining: Static Definitions.
                                                             (line    6)
* stpcpy:                                Other Builtins.     (line    6)
* stpncpy:                               Other Builtins.     (line    6)
* strcasecmp:                            Other Builtins.     (line    6)
* strcat:                                Other Builtins.     (line    6)
* strchr:                                Other Builtins.     (line    6)
* strcmp:                                Other Builtins.     (line    6)
* strcpy:                                Other Builtins.     (line    6)
* strcspn:                               Other Builtins.     (line    6)
* strdup:                                Other Builtins.     (line    6)
* strfmon:                               Other Builtins.     (line    6)
* strftime:                              Other Builtins.     (line    6)
* string constants:                      Incompatibilities.  (line    9)
* strlen:                                Other Builtins.     (line    6)
* strncasecmp:                           Other Builtins.     (line    6)
* strncat:                               Other Builtins.     (line    6)
* strncmp:                               Other Builtins.     (line    6)
* strncpy:                               Other Builtins.     (line    6)
* strndup:                               Other Builtins.     (line    6)
* strpbrk:                               Other Builtins.     (line    6)
* strrchr:                               Other Builtins.     (line    6)
* strspn:                                Other Builtins.     (line    6)
* strstr:                                Other Builtins.     (line    6)
* 'struct':                              Unnamed Fields.     (line    6)
* struct __htm_tdb:                      S/390 System z Built-in Functions.
                                                             (line   49)
* structures:                            Incompatibilities.  (line  146)
* structures, constructor expression:    Compound Literals.  (line    6)
* submodel options:                      Submodel Options.   (line    6)
* subscripting:                          Subscripting.       (line    6)
* subscripting and function values:      Subscripting.       (line    6)
* suffixes for C++ source:               Invoking Clang/LLVM for C++.
                                                             (line    6)
* SUNPRO_DEPENDENCIES:                   Environment Variables.
                                                             (line  171)
* suppressing generic warnings:          Warning Options.    (line    6)
* surprises in C++:                      C++ Misunderstandings.
                                                             (line    6)
* syntax checking:                       Warning Options.    (line   50)
* 'syscall_linkage' attribute:           Function Attributes.
                                                             (line 1514)
* system headers, warnings from:         Warning Options.    (line  922)
* System V Options:                      System V Options.   (line    6)
* 'sysv_abi' attribute:                  Function Attributes.
                                                             (line 1001)
* tan:                                   Other Builtins.     (line    6)
* tanf:                                  Other Builtins.     (line    6)
* tanh:                                  Other Builtins.     (line    6)
* tanhf:                                 Other Builtins.     (line    6)
* tanhl:                                 Other Builtins.     (line    6)
* tanl:                                  Other Builtins.     (line    6)
* 'target' function attribute:           Function Attributes.
                                                             (line 1521)
* 'target("abm")' attribute:             Function Attributes.
                                                             (line 1554)
* 'target("aes")' attribute:             Function Attributes.
                                                             (line 1559)
* 'target("align-stringops")' attribute: Function Attributes.
                                                             (line 1653)
* 'target("altivec")' attribute:         Function Attributes.
                                                             (line 1679)
* 'target("arch=ARCH")' attribute:       Function Attributes.
                                                             (line 1662)
* 'target("avoid-indexed-addresses")' attribute: Function Attributes.
                                                             (line 1800)
* 'target("cld")' attribute:             Function Attributes.
                                                             (line 1624)
* 'target("cmpb")' attribute:            Function Attributes.
                                                             (line 1685)
* 'target("cpu=CPU")' attribute:         Function Attributes.
                                                             (line 1815)
* 'target("custom-fpu-cfg=NAME")' attribute: Function Attributes.
                                                             (line 1840)
* 'target("custom-INSN=N")' attribute:   Function Attributes.
                                                             (line 1832)
* 'target("default")' attribute:         Function Attributes.
                                                             (line 1562)
* 'target("dlmzb")' attribute:           Function Attributes.
                                                             (line 1691)
* 'target("fancy-math-387")' attribute:  Function Attributes.
                                                             (line 1628)
* 'target("fma4")' attribute:            Function Attributes.
                                                             (line 1608)
* 'target("fpmath=FPMATH")' attribute:   Function Attributes.
                                                             (line 1670)
* 'target("fprnd")' attribute:           Function Attributes.
                                                             (line 1698)
* 'target("friz")' attribute:            Function Attributes.
                                                             (line 1791)
* 'target("fused-madd")' attribute:      Function Attributes.
                                                             (line 1633)
* 'target("hard-dfp")' attribute:        Function Attributes.
                                                             (line 1704)
* 'target("ieee-fp")' attribute:         Function Attributes.
                                                             (line 1638)
* 'target("inline-all-stringops")' attribute: Function Attributes.
                                                             (line 1643)
* 'target("inline-stringops-dynamically")' attribute: Function Attributes.
                                                             (line 1647)
* 'target("isel")' attribute:            Function Attributes.
                                                             (line 1710)
* 'target("longcall")' attribute:        Function Attributes.
                                                             (line 1810)
* 'target("lwp")' attribute:             Function Attributes.
                                                             (line 1616)
* 'target("mfcrf")' attribute:           Function Attributes.
                                                             (line 1714)
* 'target("mfpgpr")' attribute:          Function Attributes.
                                                             (line 1721)
* 'target("mmx")' attribute:             Function Attributes.
                                                             (line 1567)
* 'target("mulhw")' attribute:           Function Attributes.
                                                             (line 1728)
* 'target("multiple")' attribute:        Function Attributes.
                                                             (line 1735)
* 'target("no-custom-INSN")' attribute:  Function Attributes.
                                                             (line 1832)
* 'target("paired")' attribute:          Function Attributes.
                                                             (line 1805)
* 'target("pclmul")' attribute:          Function Attributes.
                                                             (line 1571)
* 'target("popcnt")' attribute:          Function Attributes.
                                                             (line 1575)
* 'target("popcntb")' attribute:         Function Attributes.
                                                             (line 1746)
* 'target("popcntd")' attribute:         Function Attributes.
                                                             (line 1753)
* 'target("powerpc-gfxopt")' attribute:  Function Attributes.
                                                             (line 1759)
* 'target("powerpc-gpopt")' attribute:   Function Attributes.
                                                             (line 1765)
* 'target("recip")' attribute:           Function Attributes.
                                                             (line 1657)
* 'target("recip-precision")' attribute: Function Attributes.
                                                             (line 1771)
* 'target("sse")' attribute:             Function Attributes.
                                                             (line 1579)
* 'target("sse2")' attribute:            Function Attributes.
                                                             (line 1583)
* 'target("sse3")' attribute:            Function Attributes.
                                                             (line 1587)
* 'target("sse4")' attribute:            Function Attributes.
                                                             (line 1591)
* 'target("sse4.1")' attribute:          Function Attributes.
                                                             (line 1596)
* 'target("sse4.2")' attribute:          Function Attributes.
                                                             (line 1600)
* 'target("sse4a")' attribute:           Function Attributes.
                                                             (line 1604)
* 'target("ssse3")' attribute:           Function Attributes.
                                                             (line 1620)
* 'target("string")' attribute:          Function Attributes.
                                                             (line 1777)
* 'target("tune=TUNE")' attribute:       Function Attributes.
                                                             (line 1666)
* 'target("tune=TUNE")' attribute <1>:   Function Attributes.
                                                             (line 1822)
* 'target("update")' attribute:          Function Attributes.
                                                             (line 1740)
* 'target("vsx")' attribute:             Function Attributes.
                                                             (line 1783)
* 'target("xop")' attribute:             Function Attributes.
                                                             (line 1612)
* TC1:                                   Standards.          (line   13)
* TC2:                                   Standards.          (line   13)
* TC3:                                   Standards.          (line   13)
* Technical Corrigenda:                  Standards.          (line   13)
* Technical Corrigendum 1:               Standards.          (line   13)
* Technical Corrigendum 2:               Standards.          (line   13)
* Technical Corrigendum 3:               Standards.          (line   13)
* template instantiation:                Template Instantiation.
                                                             (line    6)
* temporaries, lifetime of:              Temporaries.        (line    6)
* tgamma:                                Other Builtins.     (line    6)
* tgammaf:                               Other Builtins.     (line    6)
* tgammal:                               Other Builtins.     (line    6)
* Thread-Local Storage:                  Thread-Local.       (line    6)
* thunks:                                Nested Functions.   (line    6)
* TILE-Gx Options:                       TILE-Gx Options.    (line    6)
* TILEPro Options:                       TILEPro Options.    (line    6)
* tiny data section on the H8/300H and H8S: Function Attributes.
                                                             (line 1851)
* TLS:                                   Thread-Local.       (line    6)
* 'tls_model' attribute:                 Variable Attributes.
                                                             (line  234)
* TMPDIR:                                Environment Variables.
                                                             (line   45)
* toascii:                               Other Builtins.     (line    6)
* tolower:                               Other Builtins.     (line    6)
* toupper:                               Other Builtins.     (line    6)
* towlower:                              Other Builtins.     (line    6)
* towupper:                              Other Builtins.     (line    6)
* traditional C language:                C Dialect Options.  (line  331)
* 'transparent_union' attribute:         Type Attributes.    (line  143)
* 'trapa_handler' attribute:             Function Attributes.
                                                             (line 1863)
* 'trap_exit' attribute:                 Function Attributes.
                                                             (line 1858)
* trunc:                                 Other Builtins.     (line    6)
* truncf:                                Other Builtins.     (line    6)
* truncl:                                Other Builtins.     (line    6)
* two-stage name lookup:                 Name lookup.        (line    6)
* type alignment:                        Alignment.          (line    6)
* type attributes:                       Type Attributes.    (line    6)
* typedef names as function parameters:  Incompatibilities.  (line   97)
* typeof:                                Typeof.             (line    6)
* 'type_info':                           Vague Linkage.      (line   42)
* 'uhk' fixed-suffix:                    Fixed-Point.        (line    6)
* 'UHK' fixed-suffix:                    Fixed-Point.        (line    6)
* 'uhr' fixed-suffix:                    Fixed-Point.        (line    6)
* 'UHR' fixed-suffix:                    Fixed-Point.        (line    6)
* 'uk' fixed-suffix:                     Fixed-Point.        (line    6)
* 'UK' fixed-suffix:                     Fixed-Point.        (line    6)
* 'ulk' fixed-suffix:                    Fixed-Point.        (line    6)
* 'ULK' fixed-suffix:                    Fixed-Point.        (line    6)
* 'ULL' integer suffix:                  Long Long.          (line    6)
* 'ullk' fixed-suffix:                   Fixed-Point.        (line    6)
* 'ULLK' fixed-suffix:                   Fixed-Point.        (line    6)
* 'ullr' fixed-suffix:                   Fixed-Point.        (line    6)
* 'ULLR' fixed-suffix:                   Fixed-Point.        (line    6)
* 'ulr' fixed-suffix:                    Fixed-Point.        (line    6)
* 'ULR' fixed-suffix:                    Fixed-Point.        (line    6)
* undefined behavior:                    Bug Criteria.       (line   17)
* undefined function value:              Bug Criteria.       (line   17)
* underscores in variables in macros:    Typeof.             (line   46)
* 'union':                               Unnamed Fields.     (line    6)
* union, casting to a:                   Cast to Union.      (line    6)
* unions:                                Incompatibilities.  (line  146)
* unknown pragmas, warning:              Warning Options.    (line  967)
* unresolved references and '-nodefaultlibs': Link Options.  (line   97)
* unresolved references and '-nostdlib': Link Options.       (line   97)
* 'unused' attribute.:                   Function Attributes.
                                                             (line 1867)
* 'unused' label attribute:              Label Attributes.   (line   29)
* 'ur' fixed-suffix:                     Fixed-Point.        (line    6)
* 'UR' fixed-suffix:                     Fixed-Point.        (line    6)
* 'used' attribute.:                     Function Attributes.
                                                             (line 1872)
* User stack pointer in interrupts on the Blackfin: Function Attributes.
                                                             (line  851)
* 'use_debug_exception_return' attribute: Function Attributes.
                                                             (line  772)
* 'use_shadow_register_set' attribute:   Function Attributes.
                                                             (line  763)
* 'V' in constraint:                     Simple Constraints. (line   43)
* V850 Options:                          V850 Options.       (line    6)
* vague linkage:                         Vague Linkage.      (line    6)
* value after 'longjmp':                 Global Reg Vars.    (line   65)
* variable addressability on the IA-64:  Function Attributes.
                                                             (line  972)
* variable addressability on the M32R/D: Variable Attributes.
                                                             (line  403)
* variable alignment:                    Alignment.          (line    6)
* variable attributes:                   Variable Attributes.
                                                             (line    6)
* variable number of arguments:          Variadic Macros.    (line    6)
* variable-length array in a structure:  Variable Length.    (line   26)
* variable-length array scope:           Variable Length.    (line   22)
* variable-length arrays:                Variable Length.    (line    6)
* variables in specified registers:      Explicit Reg Vars.  (line    6)
* variables, local, in macros:           Typeof.             (line   46)
* variadic macros:                       Variadic Macros.    (line    6)
* VAX Options:                           VAX Options.        (line    6)
* 'vector' attribute:                    Function Attributes.
                                                             (line 1882)
* 'version_id' attribute:                Function Attributes.
                                                             (line 1889)
* vfprintf:                              Other Builtins.     (line    6)
* vfscanf:                               Other Builtins.     (line    6)
* 'visibility' attribute:                Function Attributes.
                                                             (line 1899)
* Visium Options:                        Visium Options.     (line    6)
* VLAs:                                  Variable Length.    (line    6)
* 'vliw' attribute:                      Function Attributes.
                                                             (line 1995)
* VMS Options:                           VMS Options.        (line    6)
* void:                                  Pointer Bounds Checker builtins.
                                                             (line  124)
* void <1>:                              Pointer Bounds Checker builtins.
                                                             (line  136)
* void pointers, arithmetic:             Pointer Arith.      (line    6)
* void, size of pointer to:              Pointer Arith.      (line    6)
* volatile access:                       Volatiles.          (line    6)
* volatile access <1>:                   C++ Volatiles.      (line    6)
* 'volatile' applied to function:        Function Attributes.
                                                             (line    6)
* volatile 'asm':                        Extended Asm.       (line  109)
* volatile read:                         Volatiles.          (line    6)
* volatile read <1>:                     C++ Volatiles.      (line    6)
* volatile write:                        Volatiles.          (line    6)
* volatile write <1>:                    C++ Volatiles.      (line    6)
* vprintf:                               Other Builtins.     (line    6)
* vscanf:                                Other Builtins.     (line    6)
* vsnprintf:                             Other Builtins.     (line    6)
* vsprintf:                              Other Builtins.     (line    6)
* vsscanf:                               Other Builtins.     (line    6)
* vtable:                                Vague Linkage.      (line   27)
* VxWorks Options:                       VxWorks Options.    (line    6)
* 'w' floating point suffix:             Floating Types.     (line    6)
* 'W' floating point suffix:             Floating Types.     (line    6)
* 'wakeup' attribute:                    Function Attributes.
                                                             (line  720)
* 'warm' attribute:                      Function Attributes.
                                                             (line 1366)
* warning for comparison of signed and unsigned values: Warning Options.
                                                             (line  783)
* warning for overloaded virtual function: C++ Dialect Options.
                                                             (line  352)
* warning for reordering of member initializers: C++ Dialect Options.
                                                             (line  371)
* warning for unknown pragmas:           Warning Options.    (line  967)
* 'warning' function attribute:          Function Attributes.
                                                             (line  204)
* warning GCC_COLORS capability:         Diagnostic Message Formatting Options.
                                                             (line   82)
* warnings from system headers:          Warning Options.    (line  922)
* warnings vs errors:                    Warnings and Errors.
                                                             (line    6)
* 'warn_unused' attribute:               C++ Attributes.     (line   64)
* 'warn_unused_result' attribute:        Function Attributes.
                                                             (line 2001)
* 'weak' attribute:                      Function Attributes.
                                                             (line 2018)
* 'weakref' attribute:                   Function Attributes.
                                                             (line 2027)
* whitespace:                            Incompatibilities.  (line  112)
* 'X' in constraint:                     Simple Constraints. (line  122)
* X3.159-1989:                           Standards.          (line   13)
* x86 Options:                           x86 Options.        (line    6)
* x86 Windows Options:                   x86 Windows Options.
                                                             (line    6)
* Xstormy16 Options:                     Xstormy16 Options.  (line    6)
* Xtensa Options:                        Xtensa Options.     (line    6)
* y0:                                    Other Builtins.     (line    6)
* y0f:                                   Other Builtins.     (line    6)
* y0l:                                   Other Builtins.     (line    6)
* y1:                                    Other Builtins.     (line    6)
* y1f:                                   Other Builtins.     (line    6)
* y1l:                                   Other Builtins.     (line    6)
* yn:                                    Other Builtins.     (line    6)
* ynf:                                   Other Builtins.     (line    6)
* ynl:                                   Other Builtins.     (line    6)
* zero-length arrays:                    Zero Length.        (line    6)
* zero-size structures:                  Empty Structures.   (line    6)
* zSeries Options:                       zSeries Options.    (line    6)

