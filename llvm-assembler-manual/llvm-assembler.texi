\input texinfo @c                               -*-Texinfo-*-
@c  Copyright (C) 1991-2015 Free Software Foundation, Inc.
@c  Copyright (C) 2015 Embecosm Limited
@c UPDATE!!  On future updates--
@c   (1)   check for new machine-dep cmdline options in
@c         md_parse_option definitions in config/tc-*.c
@c   (2)   for platform-specific directives, examine md_pseudo_op
@c         in config/tc-*.c
@c   (3)   for object-format specific directives, examine obj_pseudo_op
@c         in config/obj-*.c
@c   (4)   portable directives in potable[] in read.c
@c %**start of header
@setfilename llvm-assembler.info
@c version info
@include llvm-vers.texi
@c defaults, config file may override:
@c ---
@c man begin NAME
@c ---
@c ---
@c man end
@c ---
@c ------------
@settitle Using the LLVM Integrated Assembler
@setchapternewpage odd
@c %**end of header

@c @smallbook
@c @set SMALL
@c WARE! Some of the machine-dependent sections contain tables of machine
@c instructions.  Except in multi-column format, these tables look silly.
@c Unfortunately, Texinfo doesn't have a general-purpose multi-col format, so
@c the multi-col format is faked within @example sections.
@c
@c Again unfortunately, the natural size that fits on a page, for these tables,
@c is different depending on whether or not smallbook is turned on.
@c This matters, because of order: text flow switches columns at each page
@c break.
@c
@c The format faked in this source works reasonably well for smallbook,
@c not well for the default large-page format.  This manual expects that if you
@c turn on @smallbook, you will also uncomment the "@set SMALL" to enable the
@c tables in question.  You can turn on one without the other at your
@c discretion, of course.
@ifinfo
@set SMALL
@c the insn tables look just as silly in info files regardless of smallbook,
@c might as well show 'em anyways.
@end ifinfo

@ifnottex
@dircategory Software development
@direntry
* Clang: (clang).               The LLVM integrated assembler
@end direntry
@end ifnottex

@finalout
@syncodeindex ky cp

@copying
This file documents the LLVM Integrated Assembler.

@c man begin COPYRIGHT
Copyright @copyright{} 1991-2015 Free Software Foundation, Inc.
Copyright @copyright{} 2015 Embecosm Limited@*

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, with no Front-Cover Texts, and with no
Back-Cover Texts.  A copy of the license is included in the
section entitled ``GNU Free Documentation License''.

@c man end
@end copying

@titlepage
@title Using the LLVM Integrated Assembler
@subtitle Derived from ``Using the GNU Assembler''
@sp 1
@subtitle LLVM Version @value{version-LLVM}
@sp 14
The Free Software Foundation Inc.@: thanks The Nice Computer Company of
Australia for loaning Dean Elsner to write the first (Vax) version of
@command{as} for Project @sc{gnu}.  The proprietors, management and staff of
TNCCA thank FSF for distracting the boss while they got some work done.
@sp 3
@author Dean Elsner, Jay Fenlason & friends
@author LLVM version by Jeremy Bennett of Embecosm
@page
@tex
{\parskip=0pt
\hfill {\it Using the LLVM Integrated Assembler}\par
\hfill Edited by Cygnus Support\par
\hfill LLVM version edited by Jeremy Bennett\par
}
%"boxit" macro for figures:
%Modified from Knuth's ``boxit'' macro from TeXbook (answer to exercise 21.3)
\gdef\boxit#1#2{\vbox{\hrule\hbox{\vrule\kern3pt
     \vbox{\parindent=0pt\parskip=0pt\hsize=#1\kern3pt\strut\hfil
#2\hfil\strut\kern3pt}\kern3pt\vrule}\hrule}}%box with visible outline
\gdef\ibox#1#2{\hbox to #1{#2\hfil}\kern8pt}% invisible box
@end tex

@vskip 0pt plus 1filll
Copyright @copyright{} 1991-2015 Free Software Foundation, Inc.

      Permission is granted to copy, distribute and/or modify this document
      under the terms of the GNU Free Documentation License, Version 1.3
      or any later version published by the Free Software Foundation;
      with no Invariant Sections, with no Front-Cover Texts, and with no
      Back-Cover Texts.  A copy of the license is included in the
      section entitled ``GNU Free Documentation License''.

@end titlepage
@contents

@ifnottex
@node Top
@top Using the LLVM integrated assembler

This file is a user guide to the LLVM integrated assembler version
@value{version-LLVM}.

This document is distributed under the terms of the GNU Free
Documentation License.  A copy of the license is included in the
section entitled ``GNU Free Documentation License''.

@menu
* Overview::                    Overview
* Invoking::                    Command-Line Options
* Syntax::                      Syntax
* Sections::                    Sections and Relocation
* Symbols::                     Symbols
* Expressions::                 Expressions
* Pseudo Ops::                  Assembler Directives
* Object Attributes::           Object Attributes
* Machine Dependencies::        Machine Dependent Features
* Reporting Bugs::              Reporting Bugs
* Acknowledgements::            Who Did What
* GNU Free Documentation License::  GNU Free Documentation License
* AS Index::                    LLVM Integrated Assembler Index
@end menu
@end ifnottex

@node Overview
@chapter Overview
@iftex
This manual is a user guide to the LLVM integrated assembler
@end iftex

@menu
* Manual::                      Structure of this Manual
* LLVM Assembler::              The LLVM Integrated Assembler
* Object Formats::              Object File Formats
* Command Line::                Command Line
* Input Files::                 Input Files
* Object::                      Output (Object) File
* Errors::                      Error and Warning Messages
@end menu

@node Manual
@section Structure of this Manual

@cindex manual, structure and purpose
This manual is intended to describe what you need to know to use the LLVM
integrated assembler.  We cover the syntax expected in source files, including
notation for symbols, constants, and expressions; the directives that the
assembler understands; and of course how to invoke the assembler.

This manual also describes some of the machine-dependent features of
various flavors of the assembler.

@cindex machine instructions (not covered)
On the other hand, this manual is @emph{not} intended as an introduction to
programming in assembly language---let alone programming in general!  In a
similar vein, we make no attempt to introduce the machine architecture; we do
@emph{not} describe the instruction set, standard mnemonics, registers or
addressing modes that are standard to a particular architecture.  You may want
to consult the manufacturer's machine architecture manual for this information.

@c I think this is premature---doc@cygnus.com, 17jan1991
@ignore
Throughout this manual, we assume that you are running @dfn{GNU},
the portable operating system from the @dfn{Free Software
Foundation, Inc.}.  This restricts our attention to certain kinds of
computer (in particular, the kinds of computers that @sc{gnu} can run on);
once this assumption is granted examples and definitions need less
qualification.

@command{@value{AS}} is part of a team of programs that turn a high-level
human-readable series of instructions into a low-level
computer-readable series of instructions.  Different versions of
@command{@value{AS}} are used for different kinds of computer.
@end ignore

@c There used to be a section "Terminology" here, which defined
@c "contents", "byte", "word", and "long".  Defining "word" to any
@c particular size is confusing when the .word directive may generate 16
@c bits on one machine and 32 bits on another; in general, for the user
@c version of this manual, none of these terms seem essential to define.
@c They were used very little even in the former draft of the manual;
@c this draft makes an effort to avoid them (except in names of
@c directives).

@node LLVM Assembler
@section The LLVM Integrated Assembler

The LLVM integrated assembler is really a family of assemblers.
If you use (or have used) the LLVM integrated assembler on one architecture, you
should find a fairly similar environment when you use it on another
architecture.  Each version has much in common with the others,
including object file formats, most assembler directives (often called
@dfn{pseudo-ops}) and assembler syntax.@refill

@cindex purpose of the LLVM integrated assembler
The LLVM integrated assembler is primarily intended to assemble the output of
the LLVM compiler for use by the linker.  Nevertheless, the LLVM integrated
assembler should handle correctly everything that other assemblers for the same
machine would assemble.

This doesn't mean the assembler always uses the same syntax as another
assembler for the same architecture.  Unlike the @sc{gnu} assembler the LLVM
integrated assembler usually assembles directly from the internal LLVM
Intermediate Represenation (IR) for the machine instructions, rather than from
a separate textual file (although it can also do the latter).

Unlike older assemblers, the LLVM integrated is designed to assemble a source
program in one pass of the source file.  This has a subtle impact on the
@kbd{.org} directive (@pxref{Org,,@code{.org}}).

@node Object Formats
@section Object File Formats

@cindex object file format
The LLVM integrated assembler can produce the ELF, COFF and Mach-O object file
formats with DWARF or STABS debug information.  However STABS support (a much
older format) is limited, and unlike the @sc{gnu} assembler, directives for
debugging symbols are only available for the DWARF format.  @xref{Symbol
Attributes,,Symbol Attributes}.

@node Command Line
@section Command Line

@cindex command line conventions

There is no separate command for running the LLVM integrated assembler.  The
assembler is automatically invoked for any assembler source file from the Clang
front end to LLVM.
@example
clang ... @var{myfile}.s
@end example
The output of the assembly will be controlled by the usual @command{clang}
options.  So by default the assembled output will be found in @file{a.out}, or
if the @samp{-c} flag is specified in @var{myfile}.o.

@anchor{cc1as}
@kindex @option{-cc1as}
The main @command{clang} command is a driver programs for the various
sub-commands that make up the Clang/LLVM compiler system.  The LLVM integrated
assembler can be invoked directly through the Clang front end to LLVM.
@example
clang -cc1as ...
@end example
In this case only one source file is given, and any assembled output is sent to
standard output.

Unless otherwise indiated, clang will use the default architecture.  This can
be changed using the @samp{-target} option.
@example
clang -target @var{arch} ... @var{myfile}.s
@end example

It is common practice to provide a symbolic link from clang to architecture
specific command name, which then implies use of that architecture.
@example
@var{arch}-cc ... @var{myfile}.s
@end example

@cindex assembler, invoking directly
If the assembler is invoked directly, then the assembler option to specify the
target triple must be used. For example:
@example
clang -cc1as -triple i686-apple-darwin9
@end example

Note in particular that using -cc1as means any clang options are ignored, so
@example
@var{arch}-cc -cc1as ...
@end example
will invoke the assembler for the default architecture, @emph{not} the
@var{arch} architecture.

After the program name @command{clang} or @command{@var{arc}-cc}, the command
line may contain options and file names.  Options may appear in any order, and
may be before, after, or between file names.  The order of file names is not
significant.

@cindex options, command line
Any command line argument passed to the assembler that begins with a hyphen
(@samp{-}) is an option.  Each option changes the behavior of the assembler.
No option changes the way another option works.  An option is a @samp{-}
followed by one or more letters; the case of the letter is important.  All
options are optional.

Some options expect exactly one file name to follow them.  The file
name may either immediately follow the option's letter (compatible
with older assemblers) or it may be the next command argument (@sc{gnu}
standard).  These two command lines are equivalent:

@example
@var{arch}-cc -o my-object-file.o mumble.s
@var{arch}-cc -omy-object-file.o mumble.s
@end example

The details of command line options for the LLVM integrated assembler are
described in a later chapter.  @xref{Invoking}.

@node Input Files
@section Input Files

@cindex input
@cindex source program
@cindex files, input
We use the phrase @dfn{source program}, abbreviated @dfn{source}, to describe
the program input to one run of the LLVM integrated assembler.  The program may
be in one or more files; how the source is partitioned into files doesn't
change the meaning of the source.

Unlike the @sc{gnu} assembler, the LLVM integrated assembler will by default
generate a fully linked executable, created by assembling each source file in
turn and then linking them.  Supplying the @samp{-c} option will cause just the
assembly to happen, with one object file produced for each source file.  There
is no concept of concatenating the source files for a single file assembly.

A command line should have one or more input file names.  Any with the
suffix @samp{.s} or @samp{.S} will be assembled.  The difference between the
suffixes is that files ending in @samp{.S} will first be passed through the C
pre-processor.  For example
@example
@var{arch}-cc -c hello.s
@end example
will assembler the code in @file{hello.s}, while:
@example
@var{arch}-cc -c hello.S
@end example
will pass @file{hello.s} through the C pre-processor, then assemble it.

The suffix can be overridden using Clang's @samp{-x} option to specify the
language of succeeding files on the commmand line.  For the integrated
assembler, the two useful arguments to the @samp{-x} option are
@samp{assembler} and @samp{assembler-with-cpp}.  So for example, the following
would ensure @file{hello.s} is passed through the C pre-processor before
assembling:
@example
@var{arch}-cc -c -x assembler-with-cpp hello.s
@end example

When invoked directly, the integrated assembler must be given at most one
argument to assemble.  It can also be used as a pipe:
@example
@var{arch}-cc -cc1as -triple @var{arch} -filetype obj < hello.s > hello.o
@end example

@subheading Filenames and Line-numbers

@cindex input file linenumbers
@cindex line numbers, in input files
There are two ways of locating a line in the input file (or files) and
either may be used in reporting error messages.  One way refers to a line
number in a physical file; the other refers to a line number in a
``logical'' file.  @xref{Errors, ,Error and Warning Messages}.

@dfn{Physical files} are those files named in the command line given
to the LLVM integrated assembler.

@dfn{Logical files} are simply names declared explicitly by assembler
directives; they bear no relation to physical files.  Logical file names help
error messages reflect the original source file, when assembler source is
itself synthesized from other files.  The LLVM integrated assembler understands
the @samp{#} directives emitted by the LLVM C preprocessor.  See also
@ref{File,,@code{.file}}.

@node Object
@section Output (Object) File

@cindex object file
@cindex output file
@kindex a.out
@kindex .o
Every time you run the LLVM integrated assembler it produces an output file,
which is your assembly language program translated into numbers.  This file is
the object file.  Its default name is @code{a.out}.  You can give it another
name by using the @option{-o} option.  Conventionally, object file names end
with @file{.o}.  The default name is used for historical reasons: older
assemblers were capable of assembling self-contained programs directly into a
runnable program.  For some formats, this isn't currently possible, but it can
be done for the @code{a.out} format.

@cindex linker
@kindex ld
@kindex gold
@kindex mclinker
@kindex lld
The object file is meant to be input to the linker.  Clang/LLVM tool chains
have considerable choice of linker to use: GNU @command{ld}, GNU
@command{gold}, the LLVM @command{mc-linker} and the LLVM linker,
@command{lld}.  The object file contains assembled program code, information to
help the linker integrate the assembled program into a runnable file, and
(optionally) symbolic information for the debugger.

@c link above to some info file(s) like the description of a.out.
@c don't forget to describe @sc{gnu} info as well as Unix lossage.

@node Errors
@section Error and Warning Messages

@cindex error messages
@cindex warning messages
@cindex messages from assembler
The LLVM integrated assembler may write warnings and error messages to the
standard error file (usually your terminal).  This should not happen when the
Clang/LLVM compiler runs the integrated assembler automatically on assembler
generated from C and C++ programs.  Warnings report an assumption made so that
the assembler could keep assembling a flawed program; errors report a grave
problem that stops the assembly.

@cindex format of warning messages
Warning messages have the format

@example
file_name:@b{NNN}:@b{CCC}:warning:Warning Message Text
@end example

@noindent
@cindex line numbers, in warnings/errors
(where @b{NNN} is a line number and @b{CCC} is a character position within the
line).  If a logical file name has been given (@pxref{File,,@code{.file}}) it
is used for the filename, otherwise the name of the current input file is used.
If a logical line number was given (@pxref{Line,,@code{.line}}) then it is used
to calculate the number printed, otherwise the actual line in the current
source file is printed.  The message text is intended to be self explanatory
(in the grand Unix tradition).

@cindex format of error messages
Error messages have the format
@example
file_name:@b{NNN}:@b{CCC}:error:Error Message Text
@end example
The file name and line number are derived as for warning
messages.  The actual message text may be rather less explanatory
because many of them aren't supposed to happen.

@node Invoking
@chapter Command-Line Options

@cindex options, all versions of assembler
This chapter describes command-line options available in @emph{all} versions of
the @sc{gnu} assembler; see @ref{Machine Dependencies}, for options specific to
particular machine architectures.

There are three ways to pass options to the assembler.  Some options are common
to both the C compiler and assembler and can be used ``as is''.
@example
clang @var{myfile}.S -o @var{myfile}.o
@end example

If the assembler is invoked automatically by Clang, then options specific to
the assembler may be passed with either the @samp{-Wa} or
@samp{-Xassembler} option:
@example
clang -Xassembler -compress-debug-sections ... @var{myfile}.S
clang -Wa,-gdwarf-3 ... @var{myfile}.S
@end example

For @samp{-Wa}, multiple options, or arguments to options, should be separated
by commas:
@example
@var{arch}-cc -c -g -O -Wa,-I.,-compress-debug-sections file.c
@end example

If the assembler is invoked directly, then all options are automatically
interpreted as assembler options.
@example
clang -cc1as -help
@end example

@emph{Note:}  Some options to the LLVM integrated assembler are considered part
of the internal interface between the clang driver and the LLVM integratated
assembler component.  These options are not accesible via @samp{-Wa} or
@samp{-Xassembler}, and can only be used when the assembler is invoked directly
using @code{-cc1as}.  Avoid using such options--since they are part of an
internal interface they are subject to change or removal without warning.

@menu
* common-options::     Options Which are Common to the Compiler and Assembler
* assembler-options::  Options Passed by @samp{-Wa} or @samp{-Xassembler}
* internal-options::   Internal Assembler Options
@end menu

@node common-options
@section Options Which are Common to the Compiler and Assembler
@cindex options common to the compiler
These are options, which are common to the C/C++ compiler and are passed on
from Clang to the assembler when processing any assembler files.

@table @samp
@item -g
@kindex -g
Generate source-level debug information.  Whether this generates DWARF-2,
DWARF-3 or DWARF-4 is target specific.  @xref{Machine Dependencies}.

@item -gdwarf-2
@itemx -gdwarf-3
@itemx -gdwarf-4
@kindex -gdwarf-2
@kindex -gdwarf-3
@kindex -gdwarf-4
Generate source-level debug information using DWARF version 2, 3 or 4 as
indicated.  Default is DWARF version 4.

@item -I @var{path}
@kindex -I @var{path}
@cindex paths for @code{.include}
@cindex search path for @code{.include}
@cindex @code{include} directive search path
Use this option to add a @var{path} to the list of directories the LLVM
integrated assembler searches for files specified in @code{.include} directives
(@pxref{Include,,@code{.include}}).  You may use @option{-I} as many times as
necessary to include a variety of paths.  The current working directory is
always searched first; after that, the LLVM integrated assembler searches any
@samp{-I} directories in the same order as they were specified (left to right)
on the command line.

@emph{Note:} This directive is common to the C pre-processor option, so where
the C pre-processor is used, any @code{#include} directives will also use these
directories.  It is possible to pass this option using @samp{-Wa} or
@samp{-Xassembler} to give an include search directory which is used only for
assembler @code{.include} files.  For example:
@example
clang -I@var{dir1} -Wa,-I@var{dir2} @var{myfile}.S
@end example

will search for any files in @code{#include} directives in @var{dir1} and any
files in @code{.include} directives in @var{dir1} amd then @var{dir2}.

@item -llvm @var{value}
@cindex assembly, additional LLVM options
@cindex LLVM options for assembly
@kindex -mllvm @var{value}
Pass the specified @var{value} to the LLVM option processing system.  In
general this is only of value to compiler developers.

@item -mrelax-all
@kindex -mrelax-all
Relax all machine instructions.  For architectures which relax from short to
longer instructions, this option says to relax all instructions to their long
form, not just those that have to be.

@emph{Note:}  Some architectures generate long instructions and then relax to
shorter instructions.  This is simpler to implement, but suboptimal.  For these
architectures, this flag has no effect.

@item -o @var{file}
@kindex -o @var{file}
Specify @var{file} as the output file.  If not specified output will by default
go to @file{a.out} if the file type is @code{obj} and to standard output if the
file type is @code{asm}.

@end table

@node assembler-options
@section Options Passed by @samp{-Wa} or @samp{-Xassembler}
@cindex options specific to the assembler
@cindex assembler specific options
These are options which form the public (stable) interface to the LLVM
integrated assembler.  They must be passed to the assembler using either the
@samp{-Xassembler} or @samp{-Wa} options:
@example
clang -Xassembler @var{option} ...
clang -Wa,@var{option} ...
@end example

@table @samp
@item -compress-debug-sections
@kindex -compress-debug-sections
Compress DWARF debug sections using zlib.

@end table

@node internal-options
@section Internal Assembler Options
@cindex internal options
@cindex options, internal
These are options which form the internal interface to the LLVM
integrated assembler.  They can only be used if the assembler is invoked
explicitly:
@example
clang -cc1as @var{option} ...
@end example

@emph{Note:} These options are subject to change or withdrawal without warning,
so should be avoided.

@table @samp
@item -dwarf-debug-flags @var{value}
@kindex -dwarf-debug-flags @var{value}
@var{value} is a string to embed in the DWARF debug flags record.

@emph{Note:}  This option can be passed direct to Clang, but is ignored with a
warning.

@item -dwarf-debug-producer @var{value}
@kindex -dwarf-debug-producer @var{value}
@var{value} is a string to embed in the DWARF @code{AT_producer} record.

@item -fdebug-compilation-dir @var{value}
@kindex -fdebug-compilation-dir @var{value}
@var{value} is the compilation directory to embed in the debug info.

@item filetype @var{type}
@cindex assembler output type
Specify the output file type

@table @code
@item asm
@kindex -filetype asm
Generate assembly source code.  This can be used to generate assembler source
when using the assembler directly.  It is usually used when the assembler is
transliterating between one assembler flavor and another.  This is the default
when the assembler is invoked directly.

@item null
@kindex -filetype null
Do not generate any output

@item obj
@kindex -filetype obj
Generate binary object files.

@end table

@item -help
@kindex -help
Produce a summary of the options available to the assembler.  This option has
to be passed explicitly to the assembler, since otherwise the main Clang help
will be provided.

@emph{Note:} A side-effect of the clang driver is that this option cannot be
specified using @samp{-Wa} pr @samp{-Xassembler}. For example:
@example
clang -Wa,-help
@end example

will just complain about the lack of input files.  The reason is that the
driver just passes @option{-Wa} options to the assembler, without any knowledge
of what they do.  It thus thinks @command{clang} has been invoked without any
file to process, so prints out the error message.

@item -version
@kindex -version
Print out version information about the LLVM integrated assembler.

@emph{Note:}  As with the @option{-help} option, this cannot be invoked using
@option{-Wa}.

@item -main-file-name @var{value}
@kindex -main-file-name @var{value}
@var{value} is the main file name to embed in the debug info.

@item -massembler-fatal-warnings
@cindex assembly warning control
@cindex warning control, assembly
@kindex -massembler-fatal-warnings
Causes all assembly warnings to be fatal.

@item -mnoexecstack
@kindex -mnoexecstack
Mark the output file as not needing an executable stack.  On some
architectures, for example Harvard architectures like AAP, it is impossible to
execute the stack, so this option has no additional effect.

@item -msave-temp-labels
@cindex symbol table control, assembly
@cindex assembly symbol table control
@kindex -msave-temp-labels
Save temporary labels in the symbol table.

@emph{Note:} This may change @code{.s} file semantics and shouldn't generally
be used on compiler-generated code.

@item -show-encoding
@kindex -show-encoding
Show instruction encoding information in transliterate mode.

@item -n
@kindex -n
Don't automatically start assembly file with a text section.

@item -output-asm-variant @var{value}
@kindex -output-asm-variant @var{value}
@var{value} specifies a particular assembler variant for the target
architecture.  The meaning is target specific, and many targets have no
variants.  @xref{Machine Dependencies}.

@item -show-inst
@kindex -show-inst
Show internal instruction representation in transliterate mode.

@item -target-abi @var{value}
@kindex -target-abi @var{value}
Target a ABI of type @var{value}.  Not all targets may offer ABI values.

@item -target-cpu @var{value}
@kindex -target-cpu @var{value}
Target a specific CPU variant.  Not all targets may offer CPU values.

@item -target-feature @var{value}
@kindex -target-feature @var{value}
Set target specific attribute @var{value}.  Not all targets may offer feature
values.

@item -triple @var{value}
@kindex -triple @var{value}
Specify the target triple for the assembler.  For example i686-apple-darwin9.

@end table

@node Syntax
@chapter Syntax

@cindex machine-independent syntax
@cindex syntax, machine-independent
This chapter describes the machine-independent syntax allowed in a source file.
LLVM integrated assembler syntax is similar to what many other assemblers use;
it is inspired by the @sc{gnu} assembler, which in turns is inspired by the BSD
4.2 VAX assembler.

@menu
* Preprocessing::               Preprocessing
* Whitespace::                  Whitespace
* Comments::                    Comments
* Symbol Intro::                Symbols
* Statements::                  Statements
* Constants::                   Constants
@end menu

@node Preprocessing
@section Preprocessing

@cindex preprocessing
The LLVM integrated assembler internal preprocessor:
@itemize @bullet
@cindex whitespace, removed by preprocessor
@item
adjusts and removes extra whitespace.  It leaves one space or tab before
the keywords on a line, and turns any other whitespace on the line into
a single space.

@cindex comments, removed by preprocessor
@item
removes all comments, replacing them with a single space, or an
appropriate number of newlines.

@cindex constants, converted by preprocessor
@item
converts character constants into the appropriate numeric values.
@end itemize

It does not do macro processing, include file handling, or anything else you
may get from your C compiler's preprocessor.  You can do include file
processing with the @code{.include} directive
(@pxref{Include,,@code{.include}}).  You can use Clang to get other ``CPP''
style preprocessing by giving the input file a @samp{.S} suffix.  @xref{Input
Files, ,Input Files}.

Excess whitespace, comments, and character constants
cannot be used in the portions of the input text that are not
preprocessed.

@cindex turning preprocessing on and off
@cindex preprocessing, turning on and off
@kindex #NO_APP
@kindex #APP
Unlike the @sc{gnu} assembler, @code{#NO_APP} and @code{#APP} before the
text that may contain whitespace or comments, and putting a line that says
@code{#NO_APP} after this text.  This feature is mainly intend to support
@code{asm} statements in compilers whose output is otherwise free of comments
and whitespace.

@node Whitespace
@section Whitespace

@cindex whitespace
@dfn{Whitespace} is one or more blanks or tabs, in any order.
Whitespace is used to separate symbols, and to make programs neater for
people to read.  Unless within character constants
(@pxref{Characters,,Character Constants}), any whitespace means the same
as exactly one space.

@node Comments
@section Comments

@cindex comments
There are two ways of rendering comments to LLVM integrated assembler.  In both
cases the comment is equivalent to one space.

Anything from @samp{/*} through the next @samp{*/} is a comment.
This means you may not nest these comments.

@example
/*
  The only way to include a newline ('\n') in a comment
  is to use this sort of comment.
*/

/* This sort of comment does not nest. */
@end example

@cindex line comment character
Anything from a @dfn{line comment} character up to the next newline is
considered a comment and is ignored.  The line comment character is target
specific, and some targets have multiple comment characters.  Some targets also
have line comment characters that only work if they are the first character on
a line.  Some targets use a sequence of two characters to introduce a line
comment.  Some targets can also change their line comment characters depending
upon command line options that have been used.  For more details see the
@emph{Syntax} section in the documentation for individual targets.

If the line comment character is the hash sign (@samp{#}) then it still has the
special ability to enable and disable preprocessing (@pxref{Preprocessing}) and
to specify logical line numbers:

@kindex #
@cindex lines starting with @code{#}
@cindex logical line numbers
To be compatible with past assemblers, lines that begin with @samp{#} have a
special interpretation.  Following the @samp{#} should be an absolute
expression (@pxref{Expressions}): the logical line number of the @emph{next}
line.  Then a string (@pxref{Strings, ,Strings}) is allowed: if present it is a
new logical file name.  The rest of the line, if any, should be whitespace.

If the first non-whitespace characters on the line are not numeric,
the line is ignored.  (Just like a comment.)

@example
                          # This is an ordinary comment.
# 42-6 "new_file_name"    # New logical file name
                          # This is logical line # 36.
@end example
This feature is deprecated, and may disappear from future versions of the LLVM
integrated assembler.

@node Symbol Intro
@section Symbols

@cindex characters used in symbols
A @dfn{symbol} is one or more characters chosen from the set of all
letters (both upper and lower case), digits and the three characters
@samp{_.$}.
On most machines, you can also use @code{$} in symbol names; exceptions
are noted in @ref{Machine Dependencies}.
No symbol may begin with a digit.  Case is significant.
There is no length limit: all characters are significant.  Multibyte characters
are supported.  Symbols are delimited by characters not in that set, or by the
beginning of a file (since the source program must end with a newline, the end
of a file is not a possible symbol delimiter).  @xref{Symbols}.
@cindex length of symbols

@node Statements
@section Statements

@cindex statements, structure of
@cindex line separator character
@cindex statement separator character

A @dfn{statement} ends at a newline character (@samp{\n}) or a
@dfn{line separator character}.  The line separator character is target
specific and described in the @emph{Syntax} section of each
target's documentation.  Not all targets support a line separator character.
The newline or line separator character is considered to be part of the
preceding statement.  Newlines and separators within character constants are an
exception: they do not end statements.

@cindex newline, required at file end
@cindex EOF, newline must precede
It is an error to end any statement with end-of-file:  the last
character of any input file should be a newline.@refill

An empty statement is allowed, and may include whitespace.  It is ignored.

@cindex instructions and directives
@cindex directives and instructions
@c "key symbol" is not used elsewhere in the document; seems pedantic to
@c @defn{} it in that case, as was done previously...  doc@cygnus.com,
@c 13feb91.
A statement begins with zero or more labels, optionally followed by a key
symbol which determines what kind of statement it is.  The key symbol
determines the syntax of the rest of the statement.  If the symbol begins with
a dot @samp{.} then the statement is an assembler directive: typically valid
for any computer.  If the symbol begins with a letter the statement is an
assembly language @dfn{instruction}: it assembles into a machine language
instruction.  Different versions of the LLVM integrated assembler for different
computers recognize different instructions.  In fact, the same symbol may
represent a different instruction in a different computer's assembly
language.@refill

@cindex @code{:} (label)
@cindex label (@code{:})
A label is a symbol immediately followed by a colon (@code{:}).  Whitespace
before a label or after a colon is permitted, but you may not have whitespace
between a label's symbol and its colon. @xref{Labels}.

@example
label:     .directive    followed by something
another_label:           # This is an empty statement.
           instruction   operand_1, operand_2, @dots{}
@end example

@node Constants
@section Constants

@cindex constants
A constant is a number, written so that its value is known by
inspection, without knowing any context.  Like this:
@example
@group
.byte  74, 0112, 092, 0x4A, 0X4a, 'J', '\J' # All the same value.
.ascii "Ring the bell\7"                  # A string constant.
.octa  0x123456789abcdef0123456789ABCDEF0 # A bignum.
.float 0f-314159265358979323846264338327\
95028841971.693993751E-40                 # - pi, a flonum.
@end group
@end example

@menu
* Characters::                  Character Constants
* Numbers::                     Number Constants
@end menu

@node Characters
@subsection Character Constants

@cindex character constants
@cindex constants, character
There are two kinds of character constants.  A @dfn{character} stands
for one character in one byte and its value may be used in
numeric expressions.  String constants (properly called string
@emph{literals}) are potentially many bytes and their values may not be
used in arithmetic expressions.

@menu
* Strings::                     Strings
* Chars::                       Characters
@end menu

@node Strings
@subsubsection Strings

@cindex string constants
@cindex constants, string
A @dfn{string} is written between double-quotes.  It may contain double-quotes
or null characters.  The way to get special characters into a string is to
@dfn{escape} these characters: precede them with a backslash @samp{\}
character.  For example @samp{\\} represents one backslash: the first @code{\}
is an escape which tells the LLVM integrated assembler to interpret the second
character literally as a backslash (which prevents the LLVM integrated
assembler from recognizing the second @code{\} as an escape character).  The
list of escapes is target and operating system specific.  The following list of
escapes are commonly recognized.

@cindex escape codes, character
@cindex character escape codes
@table @kbd
@c      @item \a
@c      Mnemonic for ACKnowledge; for ASCII this is octal code 007.
@c
@cindex @code{\b} (backspace character)
@cindex backspace (@code{\b})
@item \b
Mnemonic for backspace; for ASCII this is octal code 010.

@c      @item \e
@c      Mnemonic for EOText; for ASCII this is octal code 004.
@c
@cindex @code{\f} (formfeed character)
@cindex formfeed (@code{\f})
@item \f
Mnemonic for FormFeed; for ASCII this is octal code 014.

@cindex @code{\n} (newline character)
@cindex newline (@code{\n})
@item \n
Mnemonic for newline; for ASCII this is octal code 012.

@c      @item \p Mnemonic for prefix; for ASCII this is octal code 033, usually
@c      known as @code{escape}.
@c
@cindex @code{\r} (carriage return character)
@cindex carriage return (@code{\r})
@item \r
Mnemonic for carriage-Return; for ASCII this is octal code 015.

@c      @item \s Mnemonic for space; for ASCII this is octal code 040.
@c      Included for compliance with other assemblers.
@c
@cindex @code{\t} (tab)
@cindex tab (@code{\t})
@item \t
Mnemonic for horizontal Tab; for ASCII this is octal code 011.

@c      @item \v
@c      Mnemonic for Vertical tab; for ASCII this is octal code 013.
@c      @item \x @var{digit} @var{digit} @var{digit}
@c      A hexadecimal character code.  The numeric code is 3 hexadecimal digits.
@c
@cindex @code{\@var{ddd}} (octal character code)
@cindex octal character code (@code{\@var{ddd}})
@item \ @var{digit} @var{digit} @var{digit}
An octal character code.  The numeric code is 3 octal digits.
For compatibility with other Unix systems, 8 and 9 are accepted as digits:
for example, @code{\008} has the value 010, and @code{\009} the value 011.

@cindex @code{\@var{xd...}} (hex character code)
@cindex hex character code (@code{\@var{xd...}})
@item \@code{x} @var{hex-digits...}
A hex character code.  All trailing hex digits are combined.  Either upper or
lower case @code{x} works.

@cindex @code{\\} (@samp{\} character)
@cindex backslash (@code{\\})
@item \\
Represents one @samp{\} character.

@c      @item \'
@c      Represents one @samp{'} (accent acute) character.
@c      This is needed in single character literals
@c      (@xref{Characters,,Character Constants}.) to represent
@c      a @samp{'}.
@c
@cindex @code{\"} (doublequote character)
@cindex doublequote (@code{\"})
@item \"
Represents one @samp{"} character.  Needed in strings to represent
this character, because an unescaped @samp{"} would end the string.

@item \ @var{anything-else}
Any other character when escaped by @kbd{\} assembles as if the @samp{\} was
not present.  This is a change in behavior from the @sc{gnu} assembler, which
assumed that if you used an escape sequence you clearly didn't want the literal
interpretation of the following character and should be warned.
@end table

Which characters are escapable, and what those escapes represent, varies widely
among assemblers.  The current set is the set provided in the user manual for
the @sc{gnu} assembler, and is a subset of what most C compilers recognize.  If
you are in doubt, do not use an escape sequence.

@node Chars
@subsubsection Characters

@cindex single character constant
@cindex character, single
@cindex constant, single character
A single character should be written as that character surrounded by single
quotes.  The same escapes apply to characters as to strings.  So if you want to
write the character backslash, you must write @kbd{'\\'} where the first
@code{\} escapes the second @code{\}.  As you can see, the quote is an acute
accent, not a grave accent.  A newline within single quotes is taken as a
literal character and does not count as the end of a statement.  The value of a
character constant in a numeric expression is the machine's byte-wide code for
that character.  The LLVM integrated assembler assumes your character code is
ASCII: @kbd{'A'} means 65, @kbd{'B'} means 66, and so on. @refill

@emph{Note:} The @sc{gnu} assembler used a single quote before a character.
There was no requirement for the closing quote afterwards.

@node Numbers
@subsection Number Constants

@cindex constants, number
@cindex number constants
The LLVM integrated assembler distinguishes three kinds of numbers according to
how they are stored in the target machine.  @emph{Integers} are numbers that
would fit into an @code{int} in the C language.  @emph{Bignums} are integers,
but they are stored in more than 32 bits.  @emph{Flonums} are floating point
numbers, described below.

@menu
* Integers::                    Integers
* Bignums::                     Bignums
* Flonums::                     Flonums
@end menu

@node Integers
@subsubsection Integers
@cindex integers
@cindex constants, integer

@cindex binary integers
@cindex integers, binary
A binary integer is @samp{0b} or @samp{0B} followed by zero or more of
the binary digits @samp{01}.

@cindex octal integers
@cindex integers, octal
An octal integer is @samp{0} followed by zero or more of the octal
digits (@samp{01234567}).

@cindex decimal integers
@cindex integers, decimal
A decimal integer starts with a non-zero digit followed by zero or
more digits (@samp{0123456789}).

@cindex hexadecimal integers
@cindex integers, hexadecimal
A hexadecimal integer is @samp{0x} or @samp{0X} followed by one or
more hexadecimal digits chosen from @samp{0123456789abcdefABCDEF}.

Integers have the usual values.  To denote a negative integer, use
the prefix operator @samp{-} discussed under expressions
(@pxref{Prefix Ops,,Prefix Operators}).

@node Bignums
@subsubsection Bignums

@cindex bignums
@cindex constants, bignum
A @dfn{bignum} has the same syntax and semantics as an integer
except that the number (or its negative) takes more than 32 bits to
represent in binary.  The distinction is made because in some places
integers are permitted while bignums are not.

@node Flonums
@subsubsection Flonums
@cindex flonums
@cindex floating point numbers
@cindex constants, floating point

@cindex precision, floating point
A @dfn{flonum} represents a floating point number.  The translation is
indirect: a decimal floating point number from the text is converted by the
LLVM integrated assembler to a generic binary floating point number of more
than sufficient precision.  This generic floating point number is converted to
a particular computer's floating point format (or formats) by a portion of the
LLVM integrated assembler specialized to that computer.

A flonum is written by writing (in order)
@itemize @bullet
@item
The digit @samp{0}.
@item
A letter, to tell the LLVM integrated assembler the rest of the number is a
flonum.  @kbd{e} is recommended.  Case is not important.  There is architecture
specificity here, with different letters having different meanings.

@item
An optional sign: either @samp{+} or @samp{-}.

@item
An optional @dfn{integer part}: zero or more decimal digits.

@item
An optional @dfn{fractional part}: @samp{.} followed by zero
or more decimal digits.

@item
An optional exponent, consisting of:

@itemize @bullet
@item
An @samp{E} or @samp{e}.
@c I can't find a config where "EXP_CHARS" is other than 'eE', but in
@c principle this can perfectly well be different on different targets.
@item
Optional sign: either @samp{+} or @samp{-}.
@item
One or more decimal digits.
@end itemize

@end itemize

At least one of the integer part or the fractional part must be
present.  The floating point number has the usual base-10 value.

The LLVM integrated assembler does all processing using integers.  Flonums are
computed independently of any floating point hardware in the computer running
the LLVM integrated assembler.

@node Sections
@chapter Sections and Relocation
@cindex sections
@cindex relocation

@menu
* Secs Background::             Background
* Ld Sections::                 Linker Sections
* As Sections::                 Assembler Internal Sections
* Sub-Sections::                Sub-Sections
* bss::                         bss Section
@end menu

@node Secs Background
@section Background

Roughly, a section is a range of addresses, with no gaps; all data
``in'' those addresses is treated the same for some particular purpose.
For example there may be a ``read only'' section.

@cindex linker, and assembler
@cindex assembler, and linker
The linker reads many object files (partial programs) and combines their
contents to form a runnable program.  When the LLVM integrated assembler emits
an object file, the partial program is assumed to start at address 0.  The
linker assigns the final addresses for the partial program, so that different
partial programs do not overlap.  This is actually an oversimplification, but
it suffices to explain how the LLVM integrated assembler uses sections.

The linker moves blocks of bytes of your program to their run-time addresses.
These blocks slide to their run-time addresses as rigid units; their length
does not change and neither does the order of bytes within them.  Such a rigid
unit is called a @emph{section}.  Assigning run-time addresses to sections is
called @dfn{relocation}.  It includes the task of adjusting mentions of
object-file addresses so they refer to the proper run-time addresses.

@cindex standard assembler sections
An object file written by the LLVM integrated assembler has at least three
sections, any of which may be empty.  These are named @dfn{text}, @dfn{data}
and @dfn{bss} sections.

The LLVM integrated assembler can also generate whatever other named sections
you specify using the @samp{.section} directive
(@pxref{SectionElf,,@code{.section}}).  If you do not use any directives that
place output in the @samp{.text} or @samp{.data} sections, these sections still
exist, but are empty.

Within the object file, the text section starts at address @code{0}, the
data section follows, and the bss section follows the data section.

To let the linker know which data changes when the sections are relocated, and
how to change that data, the LLVM integrated assembler also writes to the
object file details of the relocation needed.  To perform relocation the linker
must know, each time an address in the object file is mentioned:
@itemize @bullet
@item
Where in the object file is the beginning of this reference to
an address?
@item
How long (in bytes) is this reference?
@item
Which section does the address refer to?  What is the numeric value of
@display
(@var{address}) @minus{} (@var{start-address of section})?
@end display
@item
Is the reference to an address ``Program-Counter relative''?
@end itemize

@cindex addresses, format of
@cindex section-relative addressing
In fact, every address the LLVM integrated assembler ever uses is expressed as
@display
(@var{section}) + (@var{offset into section})
@end display
@noindent
Further, most expressions the LLVM integrated assembler computes have this
section-relative nature.

In this manual we use the notation @{@var{secname} @var{N}@} to mean ``offset
@var{N} into section @var{secname}.''

Apart from text, data and bss sections you need to know about the
@dfn{absolute} section.  When the linker mixes partial programs,
addresses in the absolute section remain unchanged.  For example, address
@code{@{absolute 0@}} is ``relocated'' to run-time address 0 by
the linker.  Although the linker never arranges two partial programs'
data sections with overlapping addresses after linking, @emph{by definition}
their absolute sections must overlap.  Address @code{@{absolute@ 239@}} in one
part of a program is always the same address when the program is running as
address @code{@{absolute@ 239@}} in any other part of the program.

The idea of sections is extended to the @dfn{undefined} section.  Any
address whose section is unknown at assembly time is by definition
rendered @{undefined @var{U}@}---where @var{U} is filled in later.
Since numbers are always defined, the only way to generate an undefined
address is to mention an undefined symbol.  A reference to a named
common block would be such a symbol: its value is unknown at assembly
time so it has section @emph{undefined}.

By analogy the word @emph{section} is used to describe groups of sections in
the linked program.  the linker puts all partial programs' text
sections in contiguous addresses in the linked program.  It is
customary to refer to the @emph{text section} of a program, meaning all
the addresses of all partial programs' text sections.  Likewise for
data and bss sections.

Some sections are manipulated by the linker; others are invented for
use of the LLVM integrated assembler and have no meaning except during assembly.

@node Ld Sections
@section Linker Sections
The linker deals with just four kinds of sections, summarized below.

@table @strong

@cindex named sections
@cindex sections, named
@item named sections
These sections hold your program.  The LLVM integrated assembler and the linker
treat them as separate but equal sections.  Anything you can say of one section
is true of another.  When the program is running, however, it is customary for
the text section to be unalterable.  The text section is often shared among
processes: it contains instructions, constants and the like.  The data section
of a running program is usually alterable: for example, C variables would be
stored in the data section.

@cindex bss section
@item bss section
This section contains zeroed bytes when your program begins running.  It is
used to hold uninitialized variables or common storage.  The length of each
partial program's bss section is important, but because it starts out
containing zeroed bytes there is no need to store explicit zero bytes in the
object file.  The bss section was invented to eliminate those explicit zeros
from object files.

@cindex absolute section
@item absolute section
Address 0 of this section is always ``relocated'' to runtime address 0.
This is useful if you want to refer to an address that the linker must
not change when relocating.  In this sense we speak of absolute
addresses being ``unrelocatable'': they do not change during relocation.

@cindex undefined section
@item undefined section
This ``section'' is a catch-all for address references to objects not in
the preceding sections.
@c FIXME: ref to some other doc on obj-file formats could go here.
@end table

@cindex relocation example
An idealized example of three relocatable sections follows.
The example uses the traditional section names @samp{.text} and @samp{.data}.
Memory addresses are on the horizontal axis.

@c TEXI2ROFF-KILL
@ifnottex
@c END TEXI2ROFF-KILL
@example
                      +-----+----+--+
partial program # 1:  |ttttt|dddd|00|
                      +-----+----+--+

                      text   data bss
                      seg.   seg. seg.

                      +---+---+---+
partial program # 2:  |TTT|DDD|000|
                      +---+---+---+

                      +--+---+-----+--+----+---+-----+~~
linked program:       |  |TTT|ttttt|  |dddd|DDD|00000|
                      +--+---+-----+--+----+---+-----+~~

    addresses:        0 @dots{}
@end example
@c TEXI2ROFF-KILL
@end ifnottex
@need 5000
@tex
\bigskip
\line{\it Partial program \#1: \hfil}
\line{\ibox{2.5cm}{\tt text}\ibox{2cm}{\tt data}\ibox{1cm}{\tt bss}\hfil}
\line{\boxit{2.5cm}{\tt ttttt}\boxit{2cm}{\tt dddd}\boxit{1cm}{\tt 00}\hfil}

\line{\it Partial program \#2: \hfil}
\line{\ibox{1cm}{\tt text}\ibox{1.5cm}{\tt data}\ibox{1cm}{\tt bss}\hfil}
\line{\boxit{1cm}{\tt TTT}\boxit{1.5cm}{\tt DDDD}\boxit{1cm}{\tt 000}\hfil}

\line{\it linked program: \hfil}
\line{\ibox{.5cm}{}\ibox{1cm}{\tt text}\ibox{2.5cm}{}\ibox{.75cm}{}\ibox{2cm}{\tt data}\ibox{1.5cm}{}\ibox{2cm}{\tt bss}\hfil}
\line{\boxit{.5cm}{}\boxit{1cm}{\tt TTT}\boxit{2.5cm}{\tt
ttttt}\boxit{.75cm}{}\boxit{2cm}{\tt dddd}\boxit{1.5cm}{\tt
DDDD}\boxit{2cm}{\tt 00000}\ \dots\hfil}

\line{\it addresses: \hfil}
\line{0\dots\hfil}

@end tex
@c END TEXI2ROFF-KILL

@node As Sections
@section Assembler Internal Sections

@cindex internal assembler sections
@cindex sections in messages, internal
These sections are meant only for the internal use of the LLVM integrated
assembler.  They have no meaning at run-time.  You do not really need to know
about these sections for most purposes; but they can be mentioned in the LLVM
integrated assembler warning messages, so it might be helpful to have an idea
of their meanings to the LLVM integrated assembler.  These sections are used to
permit the value of every expression in your assembly language program to be a
section-relative address.

@table @b
@cindex assembler internal logic error
@item ASSEMBLER-INTERNAL-LOGIC-ERROR!
An internal assembler logic error has been found.  This means there is a
bug in the assembler.

@cindex expr (internal section)
@item expr section
The assembler stores complex expression internally as combinations of
symbols.  When it needs to represent an expression as a symbol, it puts
it in the expr section.
@c FIXME item debug
@c FIXME item transfer[t] vector preload
@c FIXME item transfer[t] vector postload
@c FIXME item register
@end table

@node Sub-Sections
@section Sub-Sections

@cindex numbered subsections
@cindex grouping data
You may have separate groups of data in named sections that you want to end up
near to each other in the object file, even though they are not contiguous in
the assembler source.  The LLVM integrated assembler allows you to use
@dfn{subsections} for this purpose.  Within each section, there can be numbered
subsections with values from 0 to 8192.  Objects assembled into the same
subsection go into the object file together with other objects in the same
subsection.  For example, a compiler might want to store constants in the text
section, but might not want to have them interspersed with the program being
assembled.  In this case, the compiler could issue a @samp{.text 0} before each
section of code being output, and a @samp{.text 1} before each group of
constants being output.

Subsections are optional.  If you do not use subsections, everything
goes in subsection number zero.

Each subsection is zero-padded up to a multiple of four bytes.
(Subsections may be padded a different amount on different flavors
of the LLVM integrated assembler.)

Subsections appear in your object file in numeric order, lowest numbered
to highest.  (All this to be compatible with other people's assemblers.)
The object file contains no representation of subsections; the linker and
other programs that manipulate object files see no trace of them.
They just see all your text subsections as a text section, and all your
data subsections as a data section.

To specify which subsection you want subsequent statements assembled into, use
a numeric argument to specify it, in a @samp{.text @var{expression}} or a
@samp{.data @var{expression}} statement.  You can also use the
@code{.subsection} directive (@pxref{SubSectionElf}) to specify a subsection:
@samp{.subsection @var{expression}}.  @var{Expression} should be an absolute
expression (@pxref{Expressions}).  If you just say @samp{.text} then
@samp{.text 0} is assumed.  Likewise @samp{.data} means @samp{.data 0}.
Assembly begins in @code{text 0}.  For instance:
@example
.text 0     # The default subsection is text 0 anyway.
.ascii "This lives in the first text subsection. *"
.text 1
.ascii "But this lives in the second text subsection."
.data 0
.ascii "This lives in the data section,"
.ascii "in the first data subsection."
.text 0
.ascii "This lives in the first text section,"
.ascii "immediately following the asterisk (*)."
@end example

Each section has a @dfn{location counter} incremented by one for every byte
assembled into that section.  Because subsections are merely a convenience
restricted to the LLVM integrated assembler there is no concept of a subsection
location counter.  There is no way to directly manipulate a location
counter---but the @code{.align} directive changes it, and any label definition
captures its current value.  The location counter of the section where
statements are being assembled is said to be the @dfn{active} location counter.

@node bss
@section bss Section

@cindex bss section
@cindex common variable storage
The bss section is used for local common variable storage.
You may allocate address space in the bss section, but you may
not dictate data to load into it before your program executes.  When
your program starts running, all the contents of the bss
section are zeroed bytes.

The @code{.lcomm} pseudo-op defines a symbol in the bss section; see
@ref{Lcomm,,@code{.lcomm}}.

The @code{.comm} pseudo-op may be used to declare a common symbol, which is
another form of uninitialized symbol; see @ref{Comm,,@code{.comm}}.

When assembling you may switch into the @code{.bss} section and define symbols
as usual; see @ref{SectionElf,,@code{.section}}.  You may only assemble zero
values into the section.  Typically the section will only contain symbol
definitions and @code{.skip} directives (@pxref{Skip,,@code{.skip}}).

@node Symbols
@chapter Symbols

@cindex symbols
Symbols are a central concept: the programmer uses symbols to name
things, the linker uses symbols to link, and the debugger uses symbols
to debug.

@quotation
@cindex debuggers, and symbol order
@emph{Warning:} The LLVM integrated assembler does not place symbols in the
object file in the same order they were declared.  This may break some
debuggers.
@end quotation

@menu
* Labels::                      Labels
* Setting Symbols::             Giving Symbols Other Values
* Symbol Names::                Symbol Names
* Dot::                         The Special Dot Symbol
* Symbol Attributes::           Symbol Attributes
@end menu

@node Labels
@section Labels

@cindex labels
A @dfn{label} is written as a symbol immediately followed by a colon
@samp{:}.  The symbol then represents the current value of the
active location counter, and is, for example, a suitable instruction
operand.  You are warned if you use the same symbol to represent two
different locations: the first definition overrides any other
definitions.

@node Setting Symbols
@section Giving Symbols Other Values

@cindex assigning values to symbols
@cindex symbol values, assigning
A symbol can be given an arbitrary value by writing a symbol, followed
by an equals sign @samp{=}, followed by an expression
(@pxref{Expressions}).  This is equivalent to using the @code{.set}
directive.  @xref{Set,,@code{.set}}.  In the same way, using a double
equals sign @samp{=}@samp{=} here represents an equivalent of the
unsupported @code{.eqv} directive.  @xref{Unsupported,,@code{.eqv}}.

@node Symbol Names
@section Symbol Names

@cindex symbol names
@cindex names, symbol
Symbol names begin with a letter or with one of @samp{._}.  On most
machines, you can also use @code{$} in symbol names; exceptions are
noted in @ref{Machine Dependencies}.  That character may be followed by any
string of digits, letters, dollar signs (unless otherwise noted for a
particular target machine), and underscores.

Case of letters is significant: @code{foo} is a different symbol name
than @code{Foo}.

Multibyte characters are supported.  To generate a symbol name containing
multibyte characters enclose it within double quotes and use escape codes. cf
@xref{Strings}.  Generating a multibyte symbol name from a label is not
currently supported.

Each symbol has exactly one name.  Each name in an assembly language program
refers to exactly one symbol.  You may use that symbol name any number of times
in a program.

@subheading Local Symbol Names

@cindex local symbol names
@cindex symbol names, local
A local symbol is any symbol beginning with certain local label prefixes.  By
default, the local label prefix is @samp{.L}, but each target may have its own
set of local label prefixes.

Local symbols are defined and used within the assembler, but they are normally
not saved in object files.  Thus, they are not visible when debugging.  You may
use the @samp{-msave-temp-labels} option (@pxref{internal-options, ,Symbol Table
Control}) to retain the local symbols in the object files.

@subheading Local Labels

@cindex local labels
@cindex temporary symbol names
@cindex symbol names, temporary
Local labels help compilers and programmers use names temporarily.
They create symbols which are guaranteed to be unique over the entire scope of
the input source code and which can be referred to by a simple notation.
To define a local label, write a label of the form @samp{@b{N}:} (where @b{N}
represents any positive integer).  To refer to the most recent previous
definition of that label write @samp{@b{N}b}, using the same number as when
you defined the label.  To refer to the next definition of a local label, write
@samp{@b{N}f}---the @samp{b} stands for ``backwards'' and the @samp{f} stands
for ``forwards''.

There is no restriction on how you can use these labels, and you can reuse them
too.  So that it is possible to repeatedly define the same local label (using
the same number @samp{@b{N}}), although you can only refer to the most recently
defined local label of that number (for a backwards reference) or the next
definition of a specific local label for a forward reference.  It is also worth
noting that the first 10 local labels (@samp{@b{0:}}@dots{}@samp{@b{9:}}) are
implemented in a slightly more efficient manner than the others.

Here is an example:

@example
1:        branch 1f
2:        branch 1b
1:        branch 2f
2:        branch 1b
@end example

Which is the equivalent of:

@example
label_1:  branch label_3
label_2:  branch label_1
label_3:  branch label_4
label_4:  branch label_3
@end example

Local label names are only a notational device.  They are immediately
transformed into more conventional symbol names before the assembler uses them.
The symbol names are stored in the symbol table, appear in error messages, and
are optionally emitted to the object file.  The names are constructed using
these parts:

@table @code
@item @emph{local label prefix}
All local symbols begin with the system-specific local label prefix.
Normally both the LLVM integrated assembler and the linker forget symbols
that start with the local label prefix.  These labels are
used for symbols you are never intended to see.  If you use the
@samp{-L} option then the LLVM integrated assembler retains these symbols in the
object file. If you also instruct the linker to retain these symbols,
you may use them in debugging.

@item @var{number}
This is the number that was used in the local label definition.  So if the
label is written @samp{55:} then the number is @samp{55}.

@item @kbd{Ctrl-B}
This unusual character is included so you do not accidentally invent a symbol
of the same name.  The character has ASCII value of @samp{\002} (control-B).

@item @emph{ordinal number}
This is a serial number to keep the labels distinct.  The first definition of
@samp{0:} gets the number @samp{1}.  The 15th definition of @samp{0:} gets the
number @samp{15}, and so on.  Likewise the first definition of @samp{1:} gets
the number @samp{1} and its 15th definition gets @samp{15} as well.
@end table

So for example, the first @code{1:} may be named @code{.L1@kbd{C-B}1}, and
the 44th @code{3:} may be named @code{.L3@kbd{C-B}44}.

@subheading Dollar Local Labels
@cindex dollar local symbols

Unlike the @sc{gnu} assembler, the LLVM integrated assembler does not support
dollar local labels.  These are even more local labels which go out of scope
(i.e., they become undefined) as soon as a non-local label is defined.  They
take the same format as ordinary local labels, except that they have a dollar
sign suffix to their numeric value, e.g., @samp{@b{55$:}}.

Assembler source code intended for the @sc{gnu} assembler will need
modification if it contains such labels.

@node Dot
@section The Special Dot Symbol

@cindex dot (symbol)
@cindex @code{.} (symbol)
@cindex current address
@cindex location counter
The special symbol @samp{.} refers to the current address that the LLVM
integrated assembler is assembling into.  Thus, the expression @samp{melvin:
.long .} defines @code{melvin} to contain its own address.  Assigning a value
to @code{.} is treated the same as a @code{.org} directive.  Thus, the
expression @samp{.=.+4} is the same as saying @samp{.space 4}.

@node Symbol Attributes
@section Symbol Attributes

@cindex symbol attributes
@cindex attributes, symbol
Every symbol has, as well as its name, the attributes ``Value'' and
``Type''.  Depending on output format, symbols can also have auxiliary
attributes.

If you use a symbol without defining it, the LLVM integrated assembler assumes
zero for all these attributes, and probably won't warn you.  This makes the
symbol an externally defined symbol, which is generally what you would want.

@menu
* Symbol Value::                Value
* Symbol Type::                 Type
@end menu

@node Symbol Value
@subsection Value

@cindex value of a symbol
@cindex symbol value
The value of a symbol is (usually) 32 bits.  For a symbol which labels a
location in the text, data, bss or absolute sections the value is the
number of addresses from the start of that section to the label.
Naturally for text, data and bss sections the value of a symbol changes
as the linker changes section base addresses during linking.  Absolute
symbols' values do not change during linking: that is why they are
called absolute.

The value of an undefined symbol is treated in a special way.  If it is
0 then the symbol is not defined in this assembler source file, and
the linker tries to determine its value from other files linked into the
same program.  You make this kind of symbol simply by mentioning a symbol
name without defining it.  A non-zero value represents a @code{.comm}
common declaration.  The value is how much common storage to reserve, in
bytes (addresses).  The symbol refers to the first address of the
allocated storage.

@node Symbol Type
@subsection Type

@cindex type of a symbol
@cindex symbol type
The type attribute of a symbol contains relocation (section)
information, any flag settings indicating that a symbol is external, and
(optionally), other information for linkers and debuggers.  The exact
format depends on the object-code output format in use.

@node Expressions
@chapter Expressions

@cindex expressions
@cindex addresses
@cindex numeric values
An @dfn{expression} specifies an address or numeric value.
Whitespace may precede and/or follow an expression.

The result of an expression must be an absolute number, or else an offset into
a particular section.  If an expression is not absolute, and there is not
enough information when the LLVM integrated assembler sees the expression to
know its section, a second pass over the source program would be necessary to
interpret the expression---but no second pass is implemented, so the assembler
aborts with an error message in this situation.

@menu
* Empty Exprs::                 Empty Expressions
* Integer Exprs::               Integer Expressions
@end menu

@node Empty Exprs
@section Empty Expressions

@cindex empty expressions
@cindex expressions, empty
An empty expression has no value: it is just whitespace or null.  Wherever an
absolute expression is required, you may omit the expression, and the LLVM
integrated assembler assumes a value of (absolute) 0.  This is compatible with
other assemblers.

@node Integer Exprs
@section Integer Expressions

@cindex integer expressions
@cindex expressions, integer
An @dfn{integer expression} is one or more @emph{arguments} delimited
by @emph{operators}.

@menu
* Arguments::                   Arguments
* Operators::                   Operators
* Prefix Ops::                  Prefix Operators
* Infix Ops::                   Infix Operators
@end menu

@node Arguments
@subsection Arguments

@cindex expression arguments
@cindex arguments in expressions
@cindex operands in expressions
@cindex arithmetic operands
@dfn{Arguments} are symbols, numbers or subexpressions.  In other
contexts arguments are sometimes called ``arithmetic operands''.  In
this manual, to avoid confusing them with the ``instruction operands'' of
the machine language, we use the term ``argument'' to refer to parts of
expressions only, reserving the word ``operand'' to refer only to machine
instruction operands.

Symbols are evaluated to yield @{@var{section} @var{NNN}@} where
@var{section} is one of text, data, bss, absolute,
or undefined.  @var{NNN} is a signed, 2's complement 32 bit
integer.

Numbers are usually integers.

A number can be a flonum or bignum.  In this case, you are warned that only the
low order 32 bits are used, and the LLVM integrated assembler pretends these 32
bits are an integer.  You may write integer-manipulating instructions that act
on exotic constants, compatible with other assemblers.

@cindex subexpressions
Subexpressions are a left parenthesis @samp{(} followed by an integer
expression, followed by a right parenthesis @samp{)}; or a prefix
operator followed by an argument.

@node Operators
@subsection Operators

@cindex operators, in expressions
@cindex arithmetic functions
@cindex functions, in expressions
@dfn{Operators} are arithmetic functions, like @code{+} or @code{%}.  Prefix
operators are followed by an argument.  Infix operators appear
between their arguments.  Operators may be preceded and/or followed by
whitespace.

@node Prefix Ops
@subsection Prefix Operator

@cindex prefix operators
the LLVM integrated assembler has the following @dfn{prefix operators}.  They
each take one argument, which must be absolute.

@c the tex/end tex stuff surrounding this small table is meant to make
@c it align, on the printed page, with the similar table in the next
@c section (which is inside an enumerate).
@tex
\global\advance\leftskip by \itemindent
@end tex

@table @code
@item -
@dfn{Negation}.  Two's complement negation.
@item ~
@dfn{Complementation}.  Bitwise not.
@end table

@tex
\global\advance\leftskip by -\itemindent
@end tex

@node Infix Ops
@subsection Infix Operators

@cindex infix operators
@cindex operators, permitted arguments
@dfn{Infix operators} take two arguments, one on either side.  Operators
have precedence, but operations with equal precedence are performed left
to right.  Apart from @code{+} or @option{-}, both arguments must be
absolute, and the result is absolute.

@enumerate
@cindex operator precedence
@cindex precedence of operators

@item
Highest Precedence

@table @code
@item *
@dfn{Multiplication}.

@item /
@dfn{Division}.  Truncation is the same as the C operator @samp{/}

@item %
@dfn{Remainder}.

@item <<
@dfn{Shift Left}.  Same as the C operator @samp{<<}.

@item >>
@dfn{Shift Right}.  Same as the C operator @samp{>>}.
@end table

@item
Intermediate precedence

@table @code
@item |

@dfn{Bitwise Inclusive Or}.

@item &
@dfn{Bitwise And}.

@item ^
@dfn{Bitwise Exclusive Or}.

@item !
@dfn{Bitwise Or Not}.
@end table

@item
Low Precedence

@table @code
@cindex addition, permitted arguments
@cindex plus, permitted arguments
@cindex arguments for addition
@item +
@dfn{Addition}.  If either argument is absolute, the result has the section of
the other argument.  You may not add together arguments from different
sections.

@cindex subtraction, permitted arguments
@cindex minus, permitted arguments
@cindex arguments for subtraction
@item -
@dfn{Subtraction}.  If the right argument is absolute, the
result has the section of the left argument.
If both arguments are in the same section, the result is absolute.
You may not subtract arguments from different sections.
@c FIXME is there still something useful to say about undefined - undefined ?

@cindex comparison expressions
@cindex expressions, comparison
@item  ==
@dfn{Is Equal To}
@item <>
@itemx !=
@dfn{Is Not Equal To}
@item <
@dfn{Is Less Than}
@item >
@dfn{Is Greater Than}
@item >=
@dfn{Is Greater Than Or Equal To}
@item <=
@dfn{Is Less Than Or Equal To}

The comparison operators can be used as infix operators.  A true results has a
value of -1 whereas a false result has a value of 0.   Note, these operators
perform signed comparisons.
@end table

@item Lowest Precedence

@table @code
@item &&
@dfn{Logical And}.

@item ||
@dfn{Logical Or}.

These two logical operations can be used to combine the results of sub
expressions.  Note, unlike the comparison operators a true result returns a
value of 1 but a false results does still return 0.  Also note that the logical
or operator has a slightly lower precedence than logical and.

@end table
@end enumerate

In short, it's only meaningful to add or subtract the @emph{offsets} in an
address; you can only have a defined section in one of the two arguments.

@node Pseudo Ops
@chapter Assembler Directives

@cindex directives, machine independent
@cindex pseudo-ops, machine independent
@cindex machine independent directives
All assembler directives have names that begin with a period (@samp{.}).
The rest of the name is letters, usually in lower case.

This chapter discusses directives that are available regardless of the target
machine configuration for the LLVM integrated assembler.  Some machine
configurations provide additional directives.  @xref{Machine Dependencies}.

Not all directives are supported for all object file formats.  This chapter is
divided into sections for directives common to all formats and directives
specific to ELF, COFF (including the Win64 event handling directives) and
Mach-O.  Some directives (such as @code{.section}) are supported by each
format, but with different semantics, so appear multiple times.

@emph{Note:} While the LLVM integrated assembler strives for compatibility with
@sc{gnu} assembler, not all @sc{gnu} directives are supported.  Those which are
unsupported are listed at the end of this chapter. @xref{Unsupported}.

Conversely, there are also a number of directives supported by the LLVM
integrated assembler, which are not supported (or at least not documented as
being supported) by the @sc{gnu} assembler.  These are: @code{.2byte},
@code{.4bytes}, @code{.8byte}, @code{.align32}, @code{.cfi_escape},
@code{.cfi_sections}, @code{.code16}, @code{.code16gcc}, @code{.common},
@code{.endmacro}, @code{.lazy_reference}, @code{.macros_off},
@code{.macros_on}, @code{.no_dead_strip}, @code{.private_extern},
@code{.reference}, @code{.stabs}, @code{.string}, @code{.symbol_resolver},
@code{.value}, @code{.weak_definition}, @code{.weak_def_can_be_hidden},
@code{.weak_ref}, @code{.zero}.

@menu
* Common Directives::  Directives Common to All Object Formats
* ELF Directives::     ELF Specific Directives
* COFF Directives::    COFF Specific Directives
* Mach-O Directives::  Mach-O Specific Directives
* Deprecated::         Deprecated Directives
* Unsupported::        Unsupported GNU Assembler Directives
@end menu

@node Common Directives
@section Directives Common to All Object Formats

These directives have the same form and semantics for all object formats

@menu
* 2byte::                       @code{.2byte @var{expressions}}
* 4byte::                       @code{.4byte @var{expressions}}
* 8byte::                       @code{.8byte @var{expressions}}
* Abort::                       @code{.abort}
* Align::                       @code{.align @var{abs-expr} , @var{abs-expr}}
* Align32::                     @code{.align32 @var{abs-expr} , @var{abs-expr}}
* Ascii::                       @code{.ascii "@var{string}"}@dots{}
* Asciz::                       @code{.asciz "@var{string}"}@dots{}
* Balign::                      @code{.balign @var{abs-expr} , @var{abs-expr}}
* BundleAlign::                 @code{.bundle_align_mode @var{abs-expr}}
* BundleLock::                  @code{.bundle_lock}, @code{.bundle_unlock}
* Byte::                        @code{.byte @var{expressions}}
* CFIDirectives::		CFI Directives
* Code16::                      @code{.code16}, @code{.code16gcc}
* Comm::                        @code{.comm @var{symbol} , @var{length} [, @var{alignment}]}
* Common::                      @code{.common @var{symbol} , @var{length} [, @var{alignment}]}
* Double::                      @code{.double @var{flonums}}
* Else::                        @code{.else}
* Elseif::                      @code{.elseif}
* End::				@code{.end}
* Endif::                       @code{.endif}
* Endm::                        @code{.endm}, @code{.endmacro}
* Endr::                        @code{.endr}
* Equ::                         @code{.equ @var{symbol}, @var{expression}}
* Equiv::                       @code{.equiv @var{symbol}, @var{expression}}
* Err::				@code{.err}
* Error::			@code{.error @var{string}}
* Exitm::			@code{.exitm}
* Extern::                      @code{.extern}
* File::                        @code{.file}
* Fill::                        @code{.fill @var{repeat} , @var{size} , @var{value}}
* Float::                       @code{.float @var{flonums}}
* Global::                      @code{.global @var{symbol}}, @code{.globl @var{symbol}}
* Ident::                       @code{.ident}
* If::                          @code{.if @var{absolute expression}}
* Incbin::                      @code{.incbin "@var{file}"[,@var{skip}[,@var{count}]]}
* Include::                     @code{.include "@var{file}"}
* Int::                         @code{.int @var{expressions}}
* Irp::				@code{.irp @var{symbol},@var{values}}@dots{}
* Irpc::			@code{.irpc @var{symbol},@var{values}}@dots{}
* LazyReference::               @code{.lazy_reference @var{symbol}}
* Lcomm::                       @code{.lcomm @var{symbol} , @var{length}}
* Line::                        @code{.line @var{line-number}}
* Loc::                         @code{.loc @var{fileno} @var{lineno}}
* Long::                        @code{.long @var{expressions}}
* Macro::			@code{.macro @var{name} @var{args}}@dots{}
* NoDeadStrip::                 @code{.no_dead_strip}
* Octa::                        @code{.octa @var{bignums}}
* Org::                         @code{.org @var{new-lc}, @var{fill}}
* P2align::                     @code{.p2align @var{abs-expr}, @var{abs-expr}, @var{abs-expr}}
* PrivateExtern::               @code{.private_extern @var{name}}
* Purgem::			@code{.purgem @var{name}}
* Quad::                        @code{.quad @var{bignums}}
* Reference::                   @code{.reference @var{symbol}}
* Rept::			@code{.rept @var{count}}
* Set::                         @code{.set @var{symbol}, @var{expression}}
* Short::                       @code{.short @var{expressions}}
* Single::                      @code{.single @var{flonums}}
* Skip::                        @code{.skip @var{size} , @var{fill}}
* Sleb128::			@code{.sleb128 @var{expressions}}
* Space::                       @code{.space @var{size} , @var{fill}}
* Stabs::                       @code{.stabs}
* String::                      @code{.string "@var{str}"}
* SymbolResolver::              @code{.symbol_resolver @var{name}}
* Uleb128::                     @code{.uleb128 @var{expressions}}
* Value::                       @code{.value}
* Warning::			@code{.warning @var{string}}
* WeakDefCanBeHidden::          @code{.weak_def_can_be_hidden @var{name}}
* WeakDefinition::              @code{.weak_definition @var{name}}
* WeakReference::               @code{.weak_reference @var{name}}
* Zero::                        @code{.zero @var{size}}
@end menu

@node 2byte
@subsection @code{.2byte}
@cindex @code{2byte} directive
@cindex @code{.2byte}
@code{.2byte} expects zero or more expressions, separated by commas.
Each expression is assembled into the next two bytes.  The endianness of the
insertion is target specific.  @xref{Machine Dependencies}.

@node 4byte
@subsection @code{.4byte}
@cindex @code{4byte} directive
@cindex @code{.4byte}
@code{.4byte} expects zero or more expressions, separated by commas.
Each expression is assembled into the next four bytes.  The endianness of the
insertion is target specific.  @xref{Machine Dependencies}.

@node 8byte
@subsection @code{.8byte}
@cindex @code{8byte} directive
@cindex @code{.8byte}
@code{.8byte} expects zero or more expressions, separated by commas.  Each
expression is assembled into the next eight bytes.  It is a synonym for
@code{.quad} (@pxref{Quad}.  The endianness of the insertion is target
specific.  @xref{Machine Dependencies}.

@node Abort
@subsection @code{.abort}
@cindex @code{abort} directive (deprecated)
@cindex @code{.abort} (deprecated)
@cindex stopping the assembly
This directive stops the assembly immediately.  It is for compatibility with
other assemblers.  The original idea was that the assembly language source
would be piped into the assembler.  If the sender of the source quit, it could
use this directive to tell the LLVM integrated assembler to quit also.

@emph{Note:} This directive is deprecated.  One day @code{.abort} will not be
supported.

@node Align
@subsection @code{.align @var{abs-expr}, @var{abs-expr}, @var{abs-expr}}
@cindex padding the location counter
@cindex @code{align} directive
@cindex @code{.align}
Pad the location counter (in the current subsection) to a particular storage
boundary.  The first expression (which must be absolute) is the alignment
required, as described below.

The second expression (also absolute) gives the fill value to be stored in the
padding bytes.  It (and the comma) may be omitted.  If it is omitted, the
padding bytes are normally zero.  However, on some systems, if the section is
marked as containing code and the fill value is omitted, the space is filled
with no-op instructions.

The third expression is also absolute, and is also optional.  If it is present,
it is the maximum number of bytes that should be skipped by this alignment
directive.  If doing the alignment would require skipping more bytes than the
specified maximum, then the alignment is not done at all.  You can omit the
fill value (the second argument) entirely by simply using two commas after the
required alignment; this can be useful if you want the alignment to be filled
with no-op instructions when appropriate.

The way the required alignment is specified is target specific.  Commonly it is
the byte boundary on which to align. Very occasionaly the word boundary on
which to align. On other systems, it is the number of low-order zero bits the
location counter must have after advancement.  So for example @samp{.align 3}
advances the location counter until it a multiple of 8.  If the location
counter is already a multiple of 8, no change is needed.

This inconsistency is due to the different behaviors of the various native
assemblers for these systems which the LLVM integrated assembler aims to
emulate. The LLVM integrated assembler also provides @code{.balign} and
@code{.p2align} directives, described later, which have a consistent behavior
across all architectures (but are specific to the LLVM integrated assembler and
@sc{gnu} assembler).

@node Align32
@subsection @code{.align32 @var{abs-expr}, @var{abs-expr}, @var{abs-expr}}
@cindex padding the location counter
@cindex @code{align32} directive
@cindex @code{.align32}
This directive is almost identical to @code{.align} (@pxref{Align}), but allows
specification of a 32-bit fill value as the second argument, and may have
different default behavior for the fill value.

If no value is omitted, the padding bytes are normally zero.  However, on some
systems, if the section is marked as containing code and the fill value is
omitted, the space is filled with no-op instructions.  This behavior may also
differ between @code{.align} and @code{.align32} directives---for example
@code{.align} may fill with no-op insturctions, while @code{.align32} fills
with zero.

The interpretation of the fill value when less than 32-bits need to be filled
is target specific.  @xref{Machine Dependencies}.

@node Ascii
@subsection @code{.ascii "@var{string}"}@dots{}

@cindex @code{ascii} directive
@cindex @code{.ascii}
@cindex string literals
@code{.ascii} expects zero or more string literals (@pxref{Strings})
separated by commas.  It assembles each string (with no automatic
trailing zero byte) into consecutive addresses.

@node Asciz
@subsection @code{.asciz "@var{string}"}@dots{}

@cindex @code{asciz} directive
@cindex zero-terminated strings
@cindex null-terminated strings
@code{.asciz} is just like @code{.ascii}, but each string is followed by
a zero byte.  The ``z'' in @samp{.asciz} stands for ``zero''.

@node Balign
@subsection @code{.balign[wl] @var{abs-expr}, @var{abs-expr}, @var{abs-expr}}

@cindex padding the location counter given number of bytes
@cindex @code{balign} directive
@cindex @code{.balign}
@cindex @code{balignw} directive
@cindex @code{.balignw}
@cindex @code{balignl} directive
@cindex @code{.balignl}
Pad the location counter (in the current subsection) to a particular storage
boundary.  The first expression (which must be absolute) is the alignment
request in bytes and must be a power of 2.  For example @samp{.balign 8}
advances the location counter until it is a multiple of 8.  If the location
counter is already a multiple of 8, no change is needed.

The second expression (also absolute) gives the fill value to be stored in the
padding bytes.  It (and the comma) may be omitted.  If it is omitted, the
padding bytes are normally zero.  However, on some systems, if the section is
marked as containing code and the fill value is omitted, the space is filled
with no-op instructions.

The third expression is also absolute, and is also optional.  If it is present,
it is the maximum number of bytes that should be skipped by this alignment
directive.  If doing the alignment would require skipping more bytes than the
specified maximum, then the alignment is not done at all.  You can omit the
fill value (the second argument) entirely by simply using two commas after the
required alignment; this can be useful if you want the alignment to be filled
with no-op instructions when appropriate.

@cindex @code{balignw} directive
@cindex @code{balignl} directive
The @code{.balignw} and @code{.balignl} directives are variants of the
@code{.balign} directive.  The @code{.balignw} directive treats the fill
pattern as a two byte word value.  The @code{.balignl} directives treats the
fill pattern as a four byte longword value.  For example, @code{.balignw
4,0x368d} will align to a multiple of 4.  If it skips two bytes, they will be
filled in with the value 0x368d (the exact placement of the bytes depends upon
the endianness of the processor).  If it skips 1 or 3 bytes, the fill value is
undefined.

@node BundleAlign
@subsection @code{.bundle_align_mode @var{abs-expr}}
@cindex @code{bundle_align_mode} directive
@cindex @code{.bundle_align_mode}
@cindex bundle
@cindex instruction bundle
@cindex aligned instruction bundle
@code{.bundle_align_mode} enables or disables @dfn{aligned instruction
bundle} mode.  In this mode, sequences of adjacent instructions are grouped
into fixed-sized @dfn{bundles}.  If the argument is zero, this mode is
disabled (which is the default state).  If the argument it not zero, it
gives the size of an instruction bundle as a power of two (as for the
@code{.p2align} directive, @pxref{P2align}).

For some targets, it's an ABI requirement that no instruction may span a
certain aligned boundary.  A @dfn{bundle} is simply a sequence of
instructions that starts on an aligned boundary.  For example, if
@var{abs-expr} is @code{5} then the bundle size is 32, so each aligned
chunk of 32 bytes is a bundle.  When aligned instruction bundle mode is in
effect, no single instruction may span a boundary between bundles.  If an
instruction would start too close to the end of a bundle for the length of
that particular instruction to fit within the bundle, then the space at the
end of that bundle is filled with no-op instructions so the instruction
starts in the next bundle.  As a corollary, it's an error if any single
instruction's encoding is longer than the bundle size.

@node BundleLock
@subsection @code{.bundle_lock} and @code{.bundle_unlock}
@cindex @code{bundle_lock} directive
@cindex @code{bundle_unlock} directive
The @code{.bundle_lock} and directive @code{.bundle_unlock} directives
allow explicit control over instruction bundle padding.  These directives
are only valid when @code{.bundle_align_mode} has been used to enable
aligned instruction bundle mode.  It's an error if they appear when
@code{.bundle_align_mode} has not been used at all, or when the last
directive was @w{@code{.bundle_align_mode 0}}.

@cindex bundle-locked
For some targets, it's an ABI requirement that certain instructions may
appear only as part of specified permissible sequences of multiple
instructions, all within the same bundle.  A pair of @code{.bundle_lock}
and @code{.bundle_unlock} directives define a @dfn{bundle-locked}
instruction sequence.  For purposes of aligned instruction bundle mode, a
sequence starting with @code{.bundle_lock} and ending with
@code{.bundle_unlock} is treated as a single instruction.  That is, the
entire sequence must fit into a single bundle and may not span a bundle
boundary.  If necessary, no-op instructions will be inserted before the
first instruction of the sequence so that the whole sequence starts on an
aligned bundle boundary.  It's an error if the sequence is longer than the
bundle size.

For convenience when using @code{.bundle_lock} and @code{.bundle_unlock}
inside assembler macros (@pxref{Macro}), bundle-locked sequences may be
nested.  That is, a second @code{.bundle_lock} directive before the next
@code{.bundle_unlock} directive has no effect except that it must be
matched by another closing @code{.bundle_unlock} so that there is the
same number of @code{.bundle_lock} and @code{.bundle_unlock} directives.

@node Byte
@subsection @code{.byte @var{expressions}}

@cindex @code{byte} directive
@cindex @code{.byte}
@cindex integers, one byte
@code{.byte} expects zero or more expressions, separated by commas.
Each expression is assembled into the next byte.

@node CFIDirectives
@subsection CFI Directives
@cindex CFI assembler directives
@cindex assembler directives for CFI

@menu
* CfiSections::          @code{.cfi_sections @var{section_list}}
* CfiStartproc::         @code{.cfi_startproc [simple]}
* CfiEndproc::           @code{.cfi_endproc}
* CfiPersonality::       @code{.cfi_personality @var{encoding} [, @var{exp}]}
* CfiLsda::              @code{.cfi_lsda @var{encoding} [, @var{exp}]}
* CfiDefCfa::            @code{.cfi_def_cfa @var{register}, @var{offset}}
* CfiDefCfaRegister::    @code{.cfi_def_cfa_register @var{register}}
* CfiDefCfaOffset::      @code{.cfi_def_cfa_offset @var{offset}}
* CfiAdjustCfaOffset::   @code{.cfi_adjust_cfa_offset @var{offset}}
* CfiOffset::            @code{.cfi_offset @var{register}, @var{offset}}
* CfiRelOffset::         @code{.cfi_rel_offset @var{register}, @var{offset}}
* CfiRegister::          @code{.cfi_register @var{register1}, @var{register2}}
* CfiRestore::           @code{.cfi_restore @var{register}}
* CfiUndefined::         @code{.cfi_undefined @var{register}}
* CfiSameValue::         @code{.cfi_same_value @var{register}}
* CfiRememberState::     @code{.cfi_remember_state} and @code{.cfi_restore_state},
* CfiSignalFrame::       @code{.cfi_signal_frame}
* CfiWindowSave::        @code{.cfi_window_save}
* CfiEscape::            @code{.cfi_escape} @var{expression}[, @dots{}]
@end menu

@node CfiSections
@subsubsection @code{.cfi_sections @var{section_list}}
@cindex @code{cfi_sections} directive
@cindex @code{.cfi_sections}
@code{.cfi_sections} may be used to specify whether CFI directives
should emit @code{.eh_frame} section and/or @code{.debug_frame} section.
If @var{section_list} is @code{.eh_frame}, @code{.eh_frame} is emitted,
if @var{section_list} is @code{.debug_frame}, @code{.debug_frame} is emitted.
To emit both use @code{.eh_frame, .debug_frame}.  The default if this
directive is not used is @code{.cfi_sections .eh_frame}.

@node CfiStartproc
@subsubsection @code{.cfi_startproc [simple]}
@cindex @code{cfi_startproc} directive
@cindex @code{.cfi_startproc}
@code{.cfi_startproc} is used at the beginning of each function that
should have an entry in @code{.eh_frame}. It initializes some internal
data structures. Don't forget to close the function by
@code{.cfi_endproc}.

Unless @code{.cfi_startproc} is used along with parameter @code{simple}
it also emits some architecture dependent initial CFI instructions.

@node CfiEndproc
@subsubsection @code{.cfi_endproc}
@cindex @code{cfi_endproc} directive
@cindex @code{.cfi_endproc}
@code{.cfi_endproc} is used at the end of a function where it closes its
unwind entry previously opened by
@code{.cfi_startproc}, and emits it to @code{.eh_frame}.

@node CfiPersonality
@subsubsection @code{.cfi_personality @var{encoding} [, @var{exp}]}
@cindex @code{cfi_personality} directive
@cindex @code{.cfi_personality}
@code{.cfi_personality} defines personality routine and its encoding.
@var{encoding} must be a constant determining how the personality should be
encoded.  If it is 255 (@code{DW_EH_PE_omit}), the second argument should not
be present, otherwise the second argument should be a symbol name (unlike the
@sc{gnu} assembler, a constant is not permitted).  When using indirect
encodings, the symbol provided should be the location where personality can be
loaded from, not the personality routine itself.  The default after
@code{.cfi_startproc} is @code{.cfi_personality 0xff}, no personality routine.

@node CfiLsda
@subsubsection @code{.cfi_lsda @var{encoding} [, @var{exp}]}
@cindex @code{cfi_lsda} directive
@cindex @code{.cfi_lsda}
@code{.cfi_lsda} defines LSDA and its encoding.  @var{encoding} must be a
constant determining how the LSDA should be encoded.  If it is 255
(@code{DW_EH_PE_omit}), the second argument should not be present, otherwise
the second argument should be a symbol name (unlike the @sc{gnu} assembler, a
constant is not permitted).  The default after @code{.cfi_startproc} is
@code{.cfi_lsda 0xff}, no LSDA.

@node CfiDefCfa
@subsubsection @code{.cfi_def_cfa @var{register}, @var{offset}}
@cindex @code{cfi_def_cfa} directive
@cindex @code{.cfi_def_cfa}
@code{.cfi_def_cfa} defines a rule for computing CFA as: @emph{take address
from @var{register} and add @var{offset} to it}.

@node CfiDefCfaRegister
@subsubsection @code{.cfi_def_cfa_register @var{register}}
@cindex @code{cfi_def_cfa_register} directive
@cindex @code{.cfi_def_cfa_register}
@code{.cfi_def_cfa_register} modifies a rule for computing CFA. From
now on @var{register} will be used instead of the old one. Offset
remains the same.

@node CfiDefCfaOffset
@subsubsection @code{.cfi_def_cfa_offset @var{offset}}
@cindex @code{cfi_def_cfa_offset} directive
@cindex @code{.cfi_def_cfa_offset}
@code{.cfi_def_cfa_offset} modifies a rule for computing CFA. Register
remains the same, but @var{offset} is new. Note that it is the
absolute offset that will be added to a defined register to compute
CFA address.

@node CfiAdjustCfaOffset
@subsubsection @code{.cfi_adjust_cfa_offset @var{offset}}
@cindex @code{cfi_adjust_cfa_offset} directive
@cindex @code{.cfi_adjust_cfa_offset}
Same as @code{.cfi_def_cfa_offset} but @var{offset} is a relative
value that is added/substracted from the previous offset.

@node CfiOffset
@subsubsection @code{.cfi_offset @var{register}, @var{offset}}
@cindex @code{cfi_offset} directive
@cindex @code{.cfi_offset}
Previous value of @var{register} is saved at offset @var{offset} from
CFA.

@node CfiRelOffset
@subsubsection @code{.cfi_rel_offset @var{register}, @var{offset}}
@cindex @code{cfi_rel_offset} directive
@cindex @code{.cfi_rel_offset}
Previous value of @var{register} is saved at offset @var{offset} from
the current CFA register.  This is transformed to @code{.cfi_offset}
using the known displacement of the CFA register from the CFA.
This is often easier to use, because the number will match the
code it's annotating.

@node CfiRegister
@subsubsection @code{.cfi_register @var{register1}, @var{register2}}
@cindex @code{cfi_register} directive
@cindex @code{.cfi_register}
Previous value of @var{register1} is saved in register @var{register2}.

@node CfiRestore
@subsubsection @code{.cfi_restore @var{register}}
@cindex @code{cfi_restore} directive
@cindex @code{.cfi_restore}
@code{.cfi_restore} says that the rule for @var{register} is now the
same as it was at the beginning of the function, after all initial
instruction added by @code{.cfi_startproc} were executed.

@node CfiUndefined
@subsubsection @code{.cfi_undefined @var{register}}
@cindex @code{cfi_undefined} directive
@cindex @code{.cfi_undefined}
From now on the previous value of @var{register} can't be restored anymore.

@node CfiSameValue
@subsubsection @code{.cfi_same_value @var{register}}
@cindex @code{cfi_same_value} directive
@cindex @code{.cfi_same_value}
Current value of @var{register} is the same as in the previous frame, i.e. no
restoration needed.

@node CfiRememberState
@subsubsection @code{.cfi_remember_state} and @code{.cfi_restore_state},
@cindex @code{cfi_remember_state} directive
@cindex @code{.cfi_remember_state}
@cindex @code{cfi_restore_state} directive
@cindex @code{.cfi_restore_state}
Use @code{.cfi_remember_state} to save all current rules for all registers.  If
you then totally screw them up by subsequent @code{.cfi_*} directives you can
use @code{.cfi_restore_state} to restore the previous saved state.

@node CfiSignalFrame
@subsubsection @code{.cfi_signal_frame}
@cindex @code{cfi_signal_frame} directive
@cindex @code{.cfi_signal_frame}
Mark current function as signal handler.

@node CfiWindowSave
@subsubsection @code{.cfi_window_save}
@cindex @code{cfi_window_save} directive
@cindex @code{.cfi_window_save}
@cindex debug for register windws
Save a complete register window.  This directive is generically recognized, but
its function, if any, is unclear, since few architectures now support register
windows.  SPARC is an example of such an architecture.

@node CfiEscape
@subsubsection @code{.cfi_escape} @var{expression}[, @dots{}]
@cindex @code{cfi_escape} directive
@cindex @code{.cfi_escape}
Allows the user to add arbitrary bytes to the unwind info.  One
might use this to add OS-specific CFI opcodes, or generic CFI
opcodes that the LLVM integrated assembler does not yet support.

@node Code16
@subsection @code{.code16}, @code{.code16gcc}
@cindex @code{code16} directive
@cindex @code{.code16}
@cindex @code{code16gcc} directive
@cindex @code{.code16gcc}

These are target dependent assembler directives for architectures such as Intel
x86 and ARM to control generation of 16-bit code (@pxref{Machine Dependencies}.
For historical reasons they are included in the standard assembler directives,
so all architectures must support them.  Most architectures will support them
by reporting an error that along the lines of ``code16 not supported yet''.

@node Comm
@subsection @code{.comm @var{symbol}, @var{length} [, @var{alignment}]}
@cindex @code{comm} directive
@cindex @code{.comm}
@cindex symbol, common
@code{.comm} declares a common symbol named @var{symbol}.  When linking, a
common symbol in one object file may be merged with a defined or common symbol
of the same name in another object file.  If the linker does not see a
definition for the symbol--just one or more common symbols--then it will
allocate @var{length} bytes of uninitialized memory.  @var{length} must be an
absolute expression.  If the linker sees multiple common symbols with
the same name, and they do not all have the same size, it will allocate space
using the largest size.

The @code{.comm} directive takes an optional third argument.  This is the
desired alignment of the symbol, specified as a byte boundary (for example, an
alignment of 16 means that the least significant 4 bits of the address should
be zero).  The alignment must be an absolute expression, and it must be a power
of two.  If the linker allocates uninitialized memory for the common symbol, it
will use the alignment when placing the symbol.  If no alignment is specified,
the LLVM integrated assembler will set the alignment to the largest power of
two less than or equal to the size of the symbol, up to a maximum of 16.

@node Common
@subsection @code{.common @var{symbol}, @var{length} [, @var{alignment}]}
@cindex @code{common} directive
@cindex @code{.common}

This is a synonym for @code{.comm}.

@emph{Caution:} @code{.common} is not supported by the @sc{gnu} assembler, so
should be avoided in portable code.

@node Double
@subsection @code{.double @var{flonums}}
@cindex @code{double} directive
@cindex @code{.double}
@cindex floating point numbers (double)
@code{.double} expects zero or more flonums, separated by commas.  It assembles
floating point numbers.  The exact kind of floating point numbers emitted
depends on how the LLVM integrated assembler is configured.  @xref{Machine
Dependencies}.

@node Else
@subsection @code{.else}
@cindex @code{else} directive
@cindex @code{.else}
@code{.else} is part of the the LLVM integrated assembler support for
conditional assembly; see @ref{If,,@code{.if}}.  It marks the beginning of a
section of code to be assembled if the condition for the preceding @code{.if}
was false.

@node Elseif
@subsection @code{.elseif}
@cindex @code{elseif} directive
@cindex @code{.elseif}
@code{.elseif} is part of the the LLVM integrated assembler support for
conditional assembly; see @ref{If,,@code{.if}}.  It is shorthand for beginning
a new @code{.if} block that would otherwise fill the entire @code{.else}
section.

@node End
@subsection @code{.end}
@cindex @code{end} directive
@cindex @code{.end}
@code{.end} marks the end of the assembly file.  The LLVM integrated assembler
does not process anything in the file past the @code{.end} directive.

@node Endif
@subsection @code{.endif}
@cindex @code{endif} directive
@cindex @code{.endif}
@code{.endif} is part of the the LLVM integrated assembler support for
conditional assembly; it marks the end of a block of code that is only
assembled conditionally.  @xref{If,,@code{.if}}.

@node Endm
@subsection @code{.endm}
@cindex @code{endm} directive
@cindex @code{.endm}
End the current macro definition.  @xref{Macro}.

@node Endr
@subsection @code{.endr}
@cindex @code{endr} directive
@cindex @code{.endr}
End the current @code{.irp}, @code{.irpc} or @code{.rept} definition.
@xref{Irp}.  @xref{Irpc}.  @xref{Rept}.

@node Equ
@subsection @code{.equ @var{symbol}, @var{expression}}
@cindex @code{equ} directive
@cindex @code{.equ}
@cindex assigning values to symbols
@cindex symbols, assigning values to
This directive sets the value of @var{symbol} to @var{expression}.  It is
synonymous with @samp{.set}. @xref{Set,,@code{.set}}.

@node Equiv
@subsection @code{.equiv @var{symbol}, @var{expression}}
@cindex @code{equiv} directive
@cindex @code{.equiv}
The @code{.equiv} directive is like @code{.equ} and @code{.set}, except that
the assembler will signal an error if @var{symbol} is already defined.  Note a
symbol which has been referenced but not actually defined is considered to be
undefined.

Except for the contents of the error message, this is roughly equivalent to
@example
.ifdef SYM
.err
.endif
.equ SYM,VAL
@end example
plus it protects the symbol from later redefinition.

@node Err
@subsection @code{.err}
@cindex @code{err} directive
@cindex @code{.err}
If the LLVM integrated assembler assembles a @code{.err} directive, it will
print an error message and, unless the @option{-Z} option was used, it will not
generate an object file.  This can be used to signal an error in conditionally
compiled code.

@node Error
@subsection @code{.error "@var{string}"}
@cindex @code{error} directive
@cindex @code{.error}
Similarly to @code{.err}, this directive emits an error, but you can specify a
string that will be emitted as the error message.  If you don't specify the
message, it defaults to @code{".error directive invoked in source file"}.
@xref{Errors, ,Error and Warning Messages}.

@example
 .error "This code has not been assembled and tested."
@end example

@node Exitm
@subsection @code{.exitm}
@cindex @code{exitm} directive
@cindex @code{.exitm}
Exit early from the current macro definition.  @xref{Macro}.

@node Extern
@subsection @code{.extern}
@cindex @code{extern} directive
@cindex @code{.extern}
@code{.extern} is accepted in the source program---for compatibility with other
assemblers---but it is ignored.  The LLVM integrated assembler treats all
undefined symbols as external.

@node File
@subsection @code{.file}
@cindex @code{file} directive
@cindex @code{.file}

When emitting DWARF2 line number information, @code{.file} assigns filenames
to the @code{.debug_line} file name table.  The syntax is:

@example
.file @var{fileno} @var{filename}
@end example

The @var{fileno} operand should be a unique positive integer to use as the
index of the entry in the table.  The @var{filename} operand is a C string
literal.

The detail of filename indices is exposed to the user because the filename
table is shared with the @code{.debug_info} section of the DWARF2 debugging
information, and thus the user must know the exact indices that table entries
will have.

@node Fill
@subsection @code{.fill @var{repeat} , @var{size} , @var{value}}
@cindex @code{fill} directive
@cindex @code{.fill}
@cindex writing patterns in memory
@cindex patterns, writing in memory
@var{repeat}, @var{size} and @var{value} are absolute expressions.  This emits
@var{repeat} copies of @var{size} bytes.  @var{Repeat} may be zero or more.
@var{Size} may be zero or more, but if it is more than 8, then it is deemed to
have the value 8, compatible with other people's assemblers.  The contents of
each @var{repeat} bytes is taken from an 8-byte number.  The highest order 4
bytes are zero.  The lowest order 4 bytes are @var{value} rendered in the
byte-order of an integer on the computer the LLVM integrated assembler is
assembling for.  Each @var{size} bytes in a repetition is taken from the lowest
order @var{size} bytes of this number.  Again, this bizarre behavior is
compatible with other people's assemblers.

@var{size} and @var{value} are optional.
If the second comma and @var{value} are absent, @var{value} is
assumed zero.  If the first comma and following tokens are absent,
@var{size} is assumed to be 1.

@node Float
@subsection @code{.float @var{flonums}}
@cindex @code{float} directive
@cindex @code{.float}
@cindex floating point numbers (single)
This directive assembles zero or more flonums, separated by commas.  It has the
same effect as @code{.single}.  The exact kind of floating point numbers
emitted depends on how the LLVM integrated assembler is configured.
@xref{Machine Dependencies}.

@node Global
@subsection @code{.global @var{symbol}}, @code{.globl @var{symbol}}
@cindex @code{global} directive
@cindex @code{.global}
@cindex symbol, making visible to linker
@code{.global} makes the symbol visible to the linker.  If you define
@var{symbol} in your partial program, its value is made available to
other partial programs that are linked with it.  Otherwise,
@var{symbol} takes its attributes from a symbol of the same name
from another file linked into the same program.

Both spellings (@samp{.globl} and @samp{.global}) are accepted, for
compatibility with other assemblers.

@node Ident
@subsection @code{.ident} @var{string}
@cindex @code{ident} directive
@cindex @code{.ident}
The @var{string} argument is treated as a comment and emitted to the
@code{.comment} section.

@node If
@subsection @code{.if @var{absolute expression}} and Variants

@cindex conditional assembly
@cindex @code{if} directive
@cindex @code{.if}
@code{.if} marks the beginning of a section of code which is only
considered part of the source program being assembled if the argument
(which must be an @var{absolute expression}) is non-zero.  The end of
the conditional section of code must be marked by @code{.endif}
(@pxref{Endif,,@code{.endif}}); optionally, you may include code for the
alternative condition, flagged by @code{.else} (@pxref{Else,,@code{.else}}).
If you have several conditions to check, @code{.elseif} may be used to avoid
nesting blocks if/else within each subsequent @code{.else} block.

The following variants of @code{.if} are also supported:
@table @code
@item .ifdef @var{symbol}
@cindex @code{ifdef} directive
@cindex @code{.ifdef}
Assembles the following section of code if the specified @var{symbol}
has been defined.  Note a symbol which has been referenced but not yet defined
is considered to be undefined.

@item .ifb @var{text}
@cindex @code{ifb} directive
@cindex @code{.ifb}
Assembles the following section of code if the operand is blank (empty).

@item .ifc @var{string1},@var{string2}
@cindex @code{ifc} directive
@cindex @code{.ifc}
Assembles the following section of code if the two strings are the same.  The
strings may be optionally @emph{both} quoted with double quotes.  If they are
not quoted, the first string stops at the first comma, and the second string
stops at the end of the line.  Strings which contain whitespace should be
quoted.  The string comparison is case sensitive.

@emph{Note:} Unlike the @sc{gnu} assembler, which uses single quotes, the LLVM
integrated assembler requires double quotes.

@item .ifeq @var{absolute expression}
@cindex @code{ifeq} directive
@cindex @code{.ifeq}
Assembles the following section of code if the argument is zero.

@item .ifeqs @var{string1},@var{string2}
@cindex @code{ifeqs} directive
@cindex @code{.ifeqs}
Another form of @code{.ifc}.  The strings must be quoted using double quotes.

@item .ifge @var{absolute expression}
@cindex @code{ifge} directive
@cindex @code{.ifge}
Assembles the following section of code if the argument is greater than or
equal to zero.

@item .ifgt @var{absolute expression}
@cindex @code{ifgt} directive
@cindex @code{.ifgt}
Assembles the following section of code if the argument is greater than zero.

@item .ifle @var{absolute expression}
@cindex @code{ifle} directive
@cindex @code{.ifle}
Assembles the following section of code if the argument is less than or equal
to zero.

@item .iflt @var{absolute expression}
@cindex @code{iflt} directive
@cindex @code{.iflt}
Assembles the following section of code if the argument is less than zero.

@item .ifnb @var{text}
@cindex @code{ifnb} directive
@cindex @code{.ifnb}
Like @code{.ifb}, but the sense of the test is reversed: this assembles the
following section of code if the operand is non-blank (non-empty).

@cindex @code{ifnc} directive
@cindex @code{.ifnc}
@item .ifnc @var{string1},@var{string2}.
Like @code{.ifc}, but the sense of the test is reversed: this assembles the
following section of code if the two strings are not the same.

@item .ifndef @var{symbol}
@itemx .ifnotdef @var{symbol}
@cindex @code{ifndef} directive
@cindex @code{.ifndef}
@cindex @code{ifnotdef} directive
@cindex @code{.ifnotdef}
Assembles the following section of code if the specified @var{symbol}
has not been defined.  Both spelling variants are equivalent.  Note a symbol
which has been referenced but not yet defined is considered to be undefined.

@item .ifne @var{absolute expression}
@cindex @code{ifne} directive
@cindex @code{.ifne}
Assembles the following section of code if the argument is not equal to zero
(in other words, this is equivalent to @code{.if}).

@item .ifnes @var{string1},@var{string2}
@cindex @code{ifnes} directive
@cindex @code{.ifnes}
Like @code{.ifeqs}, but the sense of the test is reversed: this assembles the
following section of code if the two strings are not the same.
@end table

@node Incbin
@subsection @code{.incbin "@var{file}"}
@cindex @code{incbin} directive
@cindex @code{.incbin}
@cindex binary files, including
The @code{incbin} directive includes @var{file} verbatim at the current
location. You can control the search paths used with the @samp{-I} command-line
option (@pxref{Invoking,,Command-Line Options}).  Quotation marks are required
around @var{file}.

@emph{Note:} Unlike the @sc{gnu} assember, the LLVM integrated assembler does
not have optional second and third arguments to skip bytes from the start of
the file, or to specify a maximum number of bytes.

@node Include
@subsection @code{.include "@var{file}"}
@cindex @code{include} directive
@cindex @code{.include}
@cindex supporting files, including
@cindex files, including
This directive provides a way to include supporting files at specified
points in your source program.  The code from @var{file} is assembled as
if it followed the point of the @code{.include}; when the end of the
included file is reached, assembly of the original file continues.  You
can control the search paths used with the @samp{-I} command-line option
(@pxref{Invoking,,Command-Line Options}).  Quotation marks are required
around @var{file}.

@node Int
@subsection @code{.int @var{expressions}}
@cindex @code{int} directive
@cindex @code{.int}
@cindex integers, 32-bit
Expect zero or more @var{expressions}, of any section, separated by commas.
For each expression, emit a number that, at run time, is the value of that
expression.  The byte order and bit size of the number is target dependent.
@xref{Machine Dependencies}.

@node Irp
@subsection @code{.irp @var{symbol},@var{values}}@dots{}
@cindex @code{irp} directive
@cindex @code{.irp}
Evaluate a sequence of statements assigning different values to @var{symbol}.
The sequence of statements starts at the @code{.irp} directive, and is
terminated by an @code{.endr} directive.  For each @var{value}, @var{symbol} is
set to @var{value}, and the sequence of statements is assembled.  If no
@var{value} is listed, the sequence of statements is assembled once, with
@var{symbol} set to the null string.  To refer to @var{symbol} within the
sequence of statements, use @var{\symbol}.

For example, assembling

@example
        .irp    param,1,2,3
        move    d\param,sp@@-
        .endr
@end example

is equivalent to assembling

@example
        move    d1,sp@@-
        move    d2,sp@@-
        move    d3,sp@@-
@end example

For some caveats with the spelling of @var{symbol}, see also @ref{Macro}.

@node Irpc
@subsection @code{.irpc @var{symbol},@var{values}}@dots{}
@cindex @code{irpc} directive
@cindex @code{.irpc}
Evaluate a sequence of statements assigning different values to @var{symbol}.
The sequence of statements starts at the @code{.irpc} directive, and is
terminated by an @code{.endr} directive.  For each character in @var{value},
@var{symbol} is set to the character, and the sequence of statements is
assembled.  If no @var{value} is listed, the sequence of statements is
assembled once, with @var{symbol} set to the null string.  To refer to
@var{symbol} within the sequence of statements, use @var{\symbol}.

For example, assembling

@example
        .irpc    param,123
        move    d\param,sp@@-
        .endr
@end example

is equivalent to assembling

@example
        move    d1,sp@@-
        move    d2,sp@@-
        move    d3,sp@@-
@end example

For some caveats with the spelling of @var{symbol}, see also the discussion
at @xref{Macro}.

@node LazyReference
@subsection @code{.lazy_reference @var{symbol}}
@cindex @code{lazy_reference} directive
@cindex @code{.lazy_reference}

This is a Mach-O specific assembler directive (@pxref{LazyReferenceMachO}).
For historical reasons it is included in the standard assembler directives, so
all architectures must support them.  Assemblers generating other object formats
will support this directive by reporting an error ``unable to emit symbol
attribute''.

@node Lcomm
@subsection @code{.lcomm @var{symbol} , @var{length}}
@cindex @code{lcomm} directive
@cindex @code{.lcomm}
@cindex local common symbols
@cindex symbols, local common
Reserve @var{length} (an absolute expression) bytes for a local common
denoted by @var{symbol}.  The section and value of @var{symbol} are
those of the new local common.  The addresses are allocated in the bss
section, so that at run-time the bytes start off zeroed.  @var{Symbol}
is not declared global (@pxref{Global,,@code{.global}}), so is normally
not visible to the linker.

Some targets permit a third argument to be used with @code{.lcomm}.  This
argument specifies the desired alignment of the symbol in the bss section.

@node Line
@subsection @code{.line @var{line-number}}
@cindex @code{line} directive (deprecated)
@cindex @code{.line} (deprecated)
@cindex logical line number
Even though this is a directive associated with the @code{a.out} or
@code{b.out} object-code formats, the LLVM integrated assembler still
recognizes it when producing ELF output.

@emph{Note:} This directive is deprecated.  One day @code{.line} will not be
supported.

@node Loc
@subsection @code{.loc @var{fileno} @var{lineno} [@var{column}] [@var{options}]}
@cindex @code{loc} directive
When emitting DWARF2 line number information,
the @code{.loc} directive will add a row to the @code{.debug_line} line
number matrix corresponding to the immediately following assembly
instruction.  The @var{fileno}, @var{lineno}, and optional @var{column}
arguments will be applied to the @code{.debug_line} state machine before
the row is added.

The @var{options} are a sequence of the following tokens in any order:

@table @code
@item basic_block
This option will set the @code{basic_block} register in the
@code{.debug_line} state machine to @code{true}.

@item prologue_end
This option will set the @code{prologue_end} register in the
@code{.debug_line} state machine to @code{true}.

@item epilogue_begin
This option will set the @code{epilogue_begin} register in the
@code{.debug_line} state machine to @code{true}.

@item is_stmt @var{value}
This option will set the @code{is_stmt} register in the
@code{.debug_line} state machine to @code{value}, which must be
either 0 or 1.

@item isa @var{value}
This directive will set the @code{isa} register in the @code{.debug_line}
state machine to @var{value}, which must be an unsigned integer.

@item discriminator @var{value}
This directive will set the @code{discriminator} register in the
@code{.debug_line} state machine to @var{value}, which must be an unsigned
integer.

@end table

@node Long
@subsection @code{.long @var{expressions}}
@cindex @code{long} directive
@cindex @code{.long}
@code{.long} is the same as @samp{.int}.  @xref{Int,,@code{.int}}.

@node Macro
@subsection @code{.macro} and associated directives
@cindex macros
The commands @code{.macro} and @code{.endm} allow you to define macros that
generate assembly output.  For example, this definition specifies a macro
@code{sum} that puts a sequence of numbers into memory:

@example
        .macro  sum from=0, to=5
        .long   \from
        .if     \to-\from
        sum     "(\from+1)",\to
        .endif
        .endm
@end example

@noindent
With that definition, @samp{SUM 0,5} is equivalent to this assembly input:

@example
        .long   0
        .long   1
        .long   2
        .long   3
        .long   4
        .long   5
@end example

@ftable @code
@item .macro @var{macname}
@itemx .macro @var{macname} @var{macargs} @dots{}
@cindex @code{macro} directive
@cindex @code{.macro}
Begin the definition of a macro called @var{macname}.  If your macro
definition requires arguments, specify their names after the macro name,
separated by commas or spaces.  You can qualify the macro argument to
indicate whether all invocations must specify a non-blank value (through
@samp{:@code{req}}), or whether it takes all of the remaining arguments
(through @samp{:@code{vararg}}).  You can supply a default value for any
macro argument by following the name with @samp{=@var{deflt}}.  You
cannot define two macros with the same @var{macname} unless it has been
subject to the @code{.purgem} directive (@pxref{Purgem}) between the two
definitions.  For example, these are all valid @code{.macro} statements:

@table @code
@item .macro comm
Begin the definition of a macro called @code{comm}, which takes no
arguments.

@item  .macro plus1 p, p1
@itemx .macro plus1 p p1
Either statement begins the definition of a macro called @code{plus1},
which takes two arguments; within the macro definition, write
@samp{\p} or @samp{\p1} to evaluate the arguments.

@item .macro reserve_str p1=0 p2
Begin the definition of a macro called @code{reserve_str}, with two
arguments.  The first argument has a default value, but not the second.
After the definition is complete, you can call the macro either as
@samp{reserve_str @var{a},@var{b}} (with @samp{\p1} evaluating to
@var{a} and @samp{\p2} evaluating to @var{b}), or as @samp{reserve_str
,@var{b}} (with @samp{\p1} evaluating as the default, in this case
@samp{0}, and @samp{\p2} evaluating to @var{b}).

@item .macro m p1:req, p2=0, p3:vararg
Begin the definition of a macro called @code{m}, with at least three
arguments.  The first argument must always have a value specified, but
not the second, which instead has a default value. The third formal
will get assigned all remaining arguments specified at invocation time.

When you call a macro, you can specify the argument values either by
position, or by keyword.  For example, @samp{sum 9,17} is equivalent to
@samp{sum to=17, from=9}.

@end table

Note that since each of the @var{macargs} can be an identifier exactly
as any other one permitted by the target architecture, there may be
occasional problems if the target hand-crafts special meanings to certain
characters when they occur in a special position.  For example, if the colon
(@code{:}) is generally permitted to be part of a symbol name, but the
architecture specific code special-cases it when occurring as the final
character of a symbol (to denote a label), then the macro parameter
replacement code will have no way of knowing that and consider the whole
construct (including the colon) an identifier, and check only this
identifier for being the subject to parameter substitution.  So for example
this macro definition:

@example
	.macro label l
\l:
	.endm
@end example

might not work as expected.  Invoking @samp{label foo} might not create a label
called @samp{foo} but instead just insert the text @samp{\l:} into the
assembler source, probably generating an error about an unrecognised
identifier.

Similarly problems might occur with the period character (@samp{.})
which is often allowed inside opcode names (and hence identifier names).  So
for example constructing a macro to build an opcode from a base name and a
length specifier like this:

@example
	.macro opcode base length
        \base.\length
	.endm
@end example

and invoking it as @samp{opcode store l} will not create a @samp{store.l}
instruction but instead generate some kind of error as the assembler tries to
interpret the text @samp{\base.\length}.

There are several possible ways around this problem:

@table @code
@item Insert white space
If it is possible to use white space characters then this is the simplest
solution.  eg:

@example
	.macro label l
\l :
	.endm
@end example

@item Use @samp{\()}
The string @samp{\()} can be used to separate the end of a macro argument from
the following text.  eg:

@example
	.macro opcode base length
        \base\().\length
	.endm
@end example

@item Use the alternate macro syntax mode
In the alternative macro syntax mode the ampersand character (@samp{&}) can be
used as a separator.  eg:

@example
	.altmacro
	.macro label l
l&:
	.endm
@end example
@end table

Note: this problem of correctly identifying string parameters to pseudo ops
also applies to the identifiers used in @code{.irp} (@pxref{Irp})
and @code{.irpc} (@pxref{Irpc}) as well.

@item .endm
@cindex @code{endm} directive
@cindex @code{.endm}
Mark the end of a macro definition.

@item .exitm
@cindex @code{exitm} directive
@cindex @code{.exitm}
Exit early from the current macro definition.

@cindex number of macros executed
@cindex macros, count executed
@item \@@
the LLVM integrated assembler maintains a counter of how many macros it has
executed in this pseudo-variable; you can copy that number to your
output with @samp{\@@}, but @emph{only within a macro definition}.

@item .macros_on
@itemx .macros_off
@cindex @code{macros_on} directive
@cindex @code{.macros_on}
@cindex @code{macros_off} directive
@cindex @code{.macros_off}
Enable (@code{macros_on} and disable (@code{macros_off}) recognition of macros
in the code.
@end ftable

@node NoDeadStrip
@subsection @code{.no_dead_strip}
@cindex @code{no_dead_strip} directive
@cindex @code{.no_dead_strip}

This is a Mach-O specific assembler directive (@pxref{NoDeadStripMachO}).  For
historical reasons it is included in the standard assembler directives, so all
architectures must support them.  Assemblers generaring code for other object
file formats will silently ignore this directive.

@node Octa
@subsection @code{.octa @var{bignums}}
@cindex @code{octa} directive
@cindex @code{.octa}
@cindex integer, 16-byte
@cindex sixteen byte integer
This directive expects zero or more bignums, separated by commas.  For each
bignum, it emits a 16-byte integer.

The term ``octa'' comes from contexts in which a ``word'' is two bytes;
hence @emph{octa}-word for 16 bytes.

@node Org
@subsection @code{.org @var{new-lc} , @var{fill}}
@cindex @code{org} directive
@cindex @code{.org}
@cindex location counter, advancing
@cindex advancing location counter
@cindex current address, advancing
Advance the location counter of the current section to @var{new-lc}.
@var{new-lc} is either an absolute expression or an expression with the same
section as the current subsection.  That is, you can't use @code{.org} to cross
sections: if @var{new-lc} has the wrong section, the @code{.org} directive is
ignored.  To be compatible with former assemblers, if the section of
@var{new-lc} is absolute, the LLVM integrated assembler issues a warning, then
pretends the section of @var{new-lc} is the same as the current subsection.

@code{.org} may only increase the location counter, or leave it
unchanged; you cannot use @code{.org} to move the location counter
backwards.

@c double negative used below "not undefined" because this is a specific
@c reference to "undefined" (as SEG_UNKNOWN is called in this manual)
@c section. doc@cygnus.com 18feb91
Because the LLVM integrated assembler tries to assemble programs in one pass,
@var{new-lc} may not be undefined.  If you really detest this restriction we
eagerly await a chance to share your improved assembler.

Beware that the origin is relative to the start of the section, not
to the start of the subsection.  This is compatible with other
people's assemblers.

When the location counter (of the current subsection) is advanced, the
intervening bytes are filled with @var{fill} which should be an
absolute expression.  If the comma and @var{fill} are omitted,
@var{fill} defaults to zero.

@node P2align
@subsection @code{.p2align[wl] @var{abs-expr}, @var{abs-expr}, @var{abs-expr}}

@cindex padding the location counter given a power of two
@cindex @code{p2align} directive
@cindex @code{.p2align}
Pad the location counter (in the current subsection) to a particular
storage boundary.  The first expression (which must be absolute) is the
number of low-order zero bits the location counter must have after
advancement.  For example @samp{.p2align 3} advances the location
counter until it a multiple of 8.  If the location counter is already a
multiple of 8, no change is needed.

The second expression (also absolute) gives the fill value to be stored in the
padding bytes.  It (and the comma) may be omitted.  If it is omitted, the
padding bytes are normally zero.  However, on some systems, if the section is
marked as containing code and the fill value is omitted, the space is filled
with no-op instructions.

The third expression is also absolute, and is also optional.  If it is present,
it is the maximum number of bytes that should be skipped by this alignment
directive.  If doing the alignment would require skipping more bytes than the
specified maximum, then the alignment is not done at all.  You can omit the
fill value (the second argument) entirely by simply using two commas after the
required alignment; this can be useful if you want the alignment to be filled
with no-op instructions when appropriate.

@cindex @code{p2alignw} directive
@cindex @code{.p2alignw}
@cindex @code{p2alignl} directive
@cindex @code{.p2alignl}
The @code{.p2alignw} and @code{.p2alignl} directives are variants of the
@code{.p2align} directive.  The @code{.p2alignw} directive treats the fill
pattern as a two byte word value.  The @code{.p2alignl} directives treats the
fill pattern as a four byte longword value.  For example, @code{.p2alignw
2,0x368d} will align to a multiple of 4.  If it skips two bytes, they will be
filled in with the value 0x368d (the exact placement of the bytes depends upon
the endianness of the processor).  If it skips 1 or 3 bytes, the fill value is
undefined.

@node PrivateExtern
@subsection @code{.private_extern @var{name}}
@cindex @code{private_extern} directive
@cindex @code{.private_extern}

This is a Mach-O specific assembler directive (@pxref{PrivateExternMachO}).
For historical reasons it is included in the standard assembler directives, so
all architectures must support them.  Assemblers generating other object formats
will support this directive by reporting an error ``unable to emit symbol
attribute''.

@node Purgem
@subsection @code{.purgem @var{name}}
@cindex @code{purgem} directive
@cindex @code{.purgem}
Undefine the macro @var{name}, so that later uses of the string will not be
expanded.  @xref{Macro}.

@node Quad
@subsection @code{.quad @var{bignums}}
@cindex @code{quad} directive
@cindex @code{.quad}
@code{.quad} expects zero or more bignums, separated by commas.  For each
bignum, it emits an 8-byte integer.  If the bignum won't fit in 8 bytes, it
prints a warning message; and just takes the lowest order 8 bytes of the
bignum.
@cindex eight-byte integer
@cindex integer, 8-byte

The term ``quad'' comes from contexts in which a ``word'' is two bytes;
hence @emph{quad}-word for 8 bytes.

@node Reference
@subsection @code{.reference @var{symbol}}
@cindex @code{reference} directive
@cindex @code{.reference}
This is a Mach-O specific assembler directive (@pxref{ReferenceMachO}).  For
historical reasons it is included in the standard assembler directives, so all
architectures must support them.  Assemblers generating other object formats
will support this directive by reporting an error ``unable to emit symbol
attribute''.

@node Rept
@subsection @code{.rept @var{count}}
@cindex @code{rept} directive
@cindex @code{.rept}
Repeat the sequence of lines between the @code{.rept} directive and the next
@code{.endr} directive @var{count} times.

For example, assembling

@example
        .rept   3
        .long   0
        .endr
@end example

is equivalent to assembling

@example
        .long   0
        .long   0
        .long   0
@end example

@node Set
@subsection @code{.set @var{symbol}, @var{expression}}

@cindex @code{set} directive
@cindex symbol value, setting
Set the value of @var{symbol} to @var{expression}.  This
changes @var{symbol}'s value and type to conform to
@var{expression}.  If @var{symbol} was flagged as external, it remains
flagged (@pxref{Symbol Attributes}).

You may @code{.set} a symbol many times in the same assembly.

If you @code{.set} a global symbol, the value stored in the object
file is the last value stored into it.

@node Short
@subsection @code{.short @var{expressions}}
@cindex @code{short} directive
@cindex @code{.short}
Insert arguments into the output.  The meaning is target specific.  In
particular there may be unusual behavior if the target has a 32-bit address
space, but less than 32-bit addressing.  @xref{Machine Dependencies}.

@node Single
@subsection @code{.single @var{flonums}}
@cindex @code{single} directive
@cindex @code{.single}
@cindex floating point numbers (single)
This directive assembles zero or more flonums, separated by commas.  It
has the same effect as @code{.float}.
The exact kind of floating point numbers emitted depends on how
the LLVM integrated assembler is configured.  @xref{Machine Dependencies}.

@node Skip
@subsection @code{.skip @var{size} , @var{fill}}
@cindex @code{skip} directive
@cindex @code{.skip}
@cindex filling memory
This directive emits @var{size} bytes, each of value @var{fill}.  Both
@var{size} and @var{fill} are absolute expressions.  If the comma and
@var{fill} are omitted, @var{fill} is assumed to be zero.  This is the same as
@samp{.space}.

@node Sleb128
@subsection @code{.sleb128 @var{expressions}}
@cindex @code{sleb128} directive
@cindex @code{.sleb128}
@var{sleb128} stands for ``signed little endian base 128.''  This is a
compact, variable length representation of numbers used by the DWARF
symbolic debugging format.  @xref{Uleb128, ,@code{.uleb128}}.

@node Space
@subsection @code{.space @var{size} , @var{fill}}
@cindex @code{space} directive
@cindex @code{.space}
@cindex filling memory
This directive emits @var{size} bytes, each of value @var{fill}.  Both
@var{size} and @var{fill} are absolute expressions.  If the comma
and @var{fill} are omitted, @var{fill} is assumed to be zero.  This is the same
as @samp{.skip}.

@node Stabs
@subsection @code{.stabs @var{string} @var{type} @var{other} @var{desc} @var{value}}
@cindex @code{stabs} directive
@cindex @code{.stabs}
@cindex symbolic debuggers, information for
@emph{Note:} Support for STABS is still incomplete in the LLVM Integrated
Assembler.  This directive should be used with caution.  Most architectures
will report that this is an ``unsupported directive''.

Where it is supported, this directive emits symbols (@pxref{Symbols}), for use
by symbolic debuggers.  The five fields are:

@table @var
@item string
This is the symbol's name.  It may contain any character except
@samp{\000}, so is more general than ordinary symbol names.  Some
debuggers used to code arbitrarily complex structures into symbol names
using this field.

@item type
An absolute expression.  The symbol's type is set to the low 8 bits of this
expression.  Any bit pattern is permitted, but linkers and debuggers choke on
silly bit patterns.

@item other
An absolute expression.  The symbol's ``other'' attribute is set to the
low 8 bits of this expression.

@item desc
An absolute expression.  The symbol's descriptor is set to the low 16
bits of this expression.

@item value
An absolute expression which becomes the symbol's value.
@end table

If a warning is detected while reading a @code{.stabs} statement, the symbol
has probably already been created; you get a half-formed symbol in your object
file.  This is compatible with earlier assemblers!

@cindex @code{stabd} directive (Unsupported)
@cindex @code{.stabd} (Unsupported)
@cindex @code{stabn} directive (Unsupported)
@cindex @code{.stabn} (Unsupported)
@emph{Note:} The @sc{GNU} assembler also supports the variant directives
@code{.stabd} and @code{.stabn}. @code{.stabd} omits the @var{string} and
@var{value} fields, setting them respectivel to the null pointer and the
current location.  @code{stabn} omits the @var{string} field, setting it to eht
empty string @code{""}.  Neither of these directives is supported by the LLVM
integrated assembler.

@node String
@subsection @code{.string} "@var{str}"
@cindex string, copying to object file
@cindex @code{string} directive
@cindex @code{.string}
Copy the characters in @var{str} to the object file.  You may specify more than
one string to copy, separated by commas.  Unless otherwise specified for a
particular machine, the assembler marks the end of each string with a 0 byte.
You can use any of the escape sequences described in @ref{Strings,,Strings}.

The @sc{gnu} assembler variants @code{.string8}, @code{.string16},
@code{.string32} and @code{.string64} are not supported by the LLVM integrated
assembler.  @xref{Unsupported}.

@node SymbolResolver
@subsection @code{.symbol_resolver @var{name}}
@cindex @code{symbol_resolver} directive
@cindex @code{.symbol_resolver}
This is an undocumented Mach-O specific assembler directive
(@pxref{SymbolResolverMachO}).  For historical reasons it is included in the
standard assembler directives, so all architectures must support them.
Assemblers generating other object formats will support this directive by
reporting an error ``unable to emit symbol attribute''.

@node Uleb128
@subsection @code{.uleb128 @var{expressions}}
@cindex @code{uleb128} directive
@cindex @code{.uleb128}
@var{uleb128} stands for ``unsigned little endian base 128.''  This is a
compact, variable length representation of numbers used by the DWARF
symbolic debugging format.  @xref{Sleb128, ,@code{.sleb128}}.

@node Value
@subsection @code{.value}
@cindex @code{value} directive
@cindex @code{.value}
This is a target dependent assembler directives for Intel i386 target, and is
equivalent to the @code{.short} directive (@pxref{Short}.  For historical
reasons it is included in the standard assembler directives, so all
architectures must support it.  Most architectures will either silently ignore
this directive, or report an error along the lines of ``value directive not
supported yet''.

@node Warning
@subsection @code{.warning "@var{string}"}
@cindex @code{warning} directive
@cindex @code{.warning}
Similar to the directive @code{.error}
(@pxref{Error,,@code{.error "@var{string}"}}), but just emits a warning.

@node WeakDefCanBeHidden
@subsection @code{.weak_def_can_be_hidden}
@cindex @code{weak_def_can_be_hidden} directive
@cindex @code{.weak_def_can_be_hidden}
This is an undocumented Mach-O specific assembler directive
(@pxref{WeakDefCanBeHiddenMachO}).  For historical reasons it is included in
the standard assembler directives, so all architectures must support them.
Assemblers generating other object formats will support this directive by
reporting an error ``unable to emit symbol attribute''.

@node WeakDefinition
@subsection @code{.weak_definition @var{name}}
@cindex @code{weak_definition} directive
@cindex @code{.weak_definition}
This is a Mach-O specific assembler directive (@pxref{WeakDefinitionMachO}).
For historical reasons it is included in the standard assembler directives, so
all architectures must support them.  Assemblers generating other object
formats will support this directive by reporting an error ``unable to emit
symbol attribute''.

@node WeakReference
@subsection @code{.weak_reference @var{name}}
@cindex @code{weak_reference} directive
@cindex @code{.weak_reference}
This is a Mach-O specific assembler directive (@pxref{WeakReferenceMachO}).
For historical reasons it is included in the standard assembler directives, so
all architectures must support them.  Assemblers generating ELF or COFF will
implement this as equivalent to the @code{.weak} directive (@pxref{WeakElf},
@pxref{WeakCoff}).

@node Zero
@subsection @code{.zero @var{size}}
@cindex @code{zero} directive
@cindex @code{.zero}
This directive emits @var{size} zero-valued bytes.  @var{size} must be an
absolute expression.  This directive is actually an alias for the @code{.skip}
directive (@pxref{Skip}), so it can take an optional second argument of the
value to store in the bytes instead of zero.  Using @code{.zero} in this way
would be confusing however.

@node ELF Directives
@section ELF Specific Directives
@cindex ELF specific assembler directives
@cindex assembler directives (ELF)

@menu
* BssElf::                         @code{.bss [ @var{subsection} ]}
* DataElf::                        @code{.data [ @var{subsection} ]}
* HiddenElf::                      @code{.hidden @var{names}}
* IdentElf::                       @code{.ident}
* InternalElf::                    @code{.internal @var{names}}
* LocalElf::                       @code{.local @var{names}}
* PopSectionElf::                  @code{.popsection}
* PreviousElf::                    @code{.previous}
* ProtectedElf::                   @code{.protected @var{names}}
* PushSectionElf::                 @code{.pushsection @var{name}}
* RodataElf::                      @code{.rodata [ @var{subsection} ]}
* SectionElf::                     @code{.section @var{name}[, @var{flags}]}
* SizeElf::                        @code{.size [@var{name} , @var{expression}]}
* SubSectionElf::                  @code{.subsection}
* SymverElf::                      @code{.symver @var{name},@var{name2@@nodename}}
* TbssElf::                        @code{.tbss [ @var{subsection} ]}
* TdataElf::                       @code{.tdata [ @var{subsection} ]}
* TextElf::                        @code{.text [ @var{subsection} ]}
* TypeElf::                        @code{.type <@var{int} | @var{name} , @var{type description}>}
* VersionElf::                     @code{.version "@var{string}"}
* WeakElf::                        @code{.weak @var{names}}
* WeakrefElf::                     @code{.weakref @var{alias}, @var{symbol}}
@end menu

@node BssElf
@subsection @code{.bss [ @var{subsection} ]}
@cindex @code{bss} directive (ELF only)
@cindex @code{.bss} (ELF only)
@code{.bss} tells the LLVM integrated assembler to assemble the following
statements onto the end of the BSS subsection numbered @var{subsection} (which
is an absolute expression).  If @var{subsection} is omitted, it defaults to
zero.

@node DataElf
@subsection @code{.data [ @var{subsection} ]}
@cindex @code{data} directive (ELF only)
@cindex @code{.data} (ELF only)
@code{.data} tells the LLVM integrated assembler to assemble the following
statements onto the end of the data subsection numbered @var{subsection} (which
is an absolute expression).  If @var{subsection} is omitted, it defaults to
zero.

@node HiddenElf
@subsection @code{.hidden @var{names}}
@cindex @code{hidden} directive (ELF only)
@cindex @code{.hidden} (ELF only)
@cindex visibility (ELF only)
This is one of the ELF visibility directives.  The other two are
@code{.internal} (@pxref{InternalElf,,@code{.internal}}) and
@code{.protected} (@pxref{ProtectedElf,,@code{.protected}}).
This directive overrides the named symbols default visibility (which is set by
their binding: local, global or weak).  The directive sets the visibility to
@code{hidden} which means that the symbols are not visible to other components.
Such symbols are always considered to be @code{protected} as well.

@node IdentElf
@subsection @code{.ident}
@cindex @code{ident} directive (ELF only)
@cindex @code{.ident} (ELF only)
This directive is used by some assemblers to place tags in object files. The
behavior of this directive varies depending on the target.  When using ELF,
comments are emitted to the @code{.comment} section.

@node InternalElf
@subsection @code{.internal @var{names}}
@cindex @code{internal} directive (ELF only)
@cindex @code{.internal} (ELF only)
@cindex visibility (ELF only)
This is one of the ELF visibility directives.  The other two are @code{.hidden}
(@pxref{HiddenElf,,@code{.hidden}}) and @code{.protected}
(@pxref{ProtectedElf,,@code{.protected}}).

This directive overrides the named symbols default visibility (which is set by
their binding: local, global or weak).  The directive sets the visibility to
@code{internal} which means that the symbols are considered to be @code{hidden}
(i.e., not visible to other components), and that some extra, processor
specific processing must also be performed upon the symbols as well.

@node LocalElf
@subsection @code{.local @var{names}}
@cindex @code{local} directive (ELF only)
@cindex @code{.local} (ELF only)
This ELF specific directive marks each symbol in
the comma-separated list of @code{names} as a local symbol so that it
will not be externally visible.  If the symbols do not already exist,
they will be created.

For targets where the @code{.lcomm} directive (@pxref{Lcomm}) does not
accept an alignment argument, which is the case for most ELF targets,
the @code{.local} directive can be used in combination with @code{.comm}
(@pxref{Comm}) to define aligned local common data.

@node PopSectionElf
@subsection @code{.popsection}
@cindex @code{popsection} directive (ELF only)
@cindex @code{.popsection} (ELF only)
@cindex Section Stack (ELF only)
This is one of the ELF section stack manipulation directives.  The others are
@code{.section} (@pxref{SectionElf}), @code{.subsection}
(@pxref{SubSectionElf}), @code{.pushsection} (@pxref{PushSectionElf}), and
@code{.previous} (@pxref{PreviousElf}).

This directive replaces the current section (and subsection) with the top
section (and subsection) on the section stack.  This section is popped off the
stack.

@node PreviousElf
@subsection @code{.previous}
@cindex @code{previous} directive (ELF only)
@cindex @code{.previous} (ELF only)
@cindex Section Stack (ELF only)
This is one of the ELF section stack manipulation directives.  The others are
@code{.section} (@pxref{SectionElf}), @code{.subsection}
(@pxref{SubSectionElf}), @code{.pushsection} (@pxref{PushSectionElf}), and
@code{.popsection} (@pxref{PopSectionElf}).

This directive swaps the current section (and subsection) with most recently
referenced section/subsection pair prior to this one.  Multiple
@code{.previous} directives in a row will flip between two sections (and their
subsections).  For example:

@example
.section A
 .subsection 1
  .word 0x1234
 .subsection 2
  .word 0x5678
.previous
 .word 0x9abc
@end example

Will place 0x1234 and 0x9abc into subsection 1 and 0x5678 into subsection 2 of
section A.  Whilst:

@example
.section A
.subsection 1
  # Now in section A subsection 1
  .word 0x1234
.section B
.subsection 0
  # Now in section B subsection 0
  .word 0x5678
.subsection 1
  # Now in section B subsection 1
  .word 0x9abc
.previous
  # Now in section B subsection 0
  .word 0xdef0
@end example

Will place 0x1234 into section A, 0x5678 and 0xdef0 into subsection 0 of
section B and 0x9abc into subsection 1 of section B.

In terms of the section stack, this directive swaps the current section with
the top section on the section stack.

@node ProtectedElf
@subsection @code{.protected @var{names}}
@cindex @code{protected} directive (ELF only)
@cindex @code{.protected} (ELF only)
@cindex visibility (ELF only)
This is one of the ELF visibility directives.  The other two are
@code{.hidden} (@pxref{HiddenElf}) and @code{.internal} (@pxref{InternalElf}).

This directive overrides the named symbols default visibility (which is set by
their binding: local, global or weak).  The directive sets the visibility to
@code{protected} which means that any references to the symbols from within the
components that defines them must be resolved to the definition in that
component, even if a definition in another component would normally preempt
this.

@node PushSectionElf
@subsection @code{.pushsection @var{name} [, @var{subsection}] [, "@var{flags}"[, @@@var{type}[,@var{arguments}]]]}
@cindex @code{pushsection} directive (ELF only)
@cindex @code{.pushsection} (ELF only)
@cindex Section Stack (ELF only)
This is one of the ELF section stack manipulation directives.  The others are
@code{.section} (@pxref{SectionElf}), @code{.subsection}
(@pxref{SubSectionElf}), @code{.popsection} (@pxref{PopSectionElf}), and
@code{.previous} (@pxref{PreviousElf}).

This directive pushes the current section (and subsection) onto the
top of the section stack, and then replaces the current section and
subsection with @code{name} and @code{subsection}. The optional
@code{flags}, @code{type} and @code{arguments} are treated the same
as in the @code{.section} (@pxref{SectionElf}) directive.

@node RodataElf
@subsection @code{.rodata [ @var{subsection} ]}
@cindex @code{rodata} directive (ELF only)
@cindex @code{.rodata} (ELF only)
@code{.rodata} tells the LLVM integrated assembler to assemble the following
statements onto the end of the read-only data subsection numbered
@var{subsection} (which is an absolute expression).  If @var{subsection} is
omitted, it defaults to zero.

@node SectionElf
@subsection @code{.section @var{name}}
@cindex @code{section} directive (ELF only)
@cindex @code{.section} (ELF only)
@cindex named section (ELF only)
Use the @code{.section} directive to assemble the following code into a section
named @var{name}.

This directive is only supported for targets that actually support arbitrarily
named sections; on @code{a.out} targets, for example, it is not accepted, even
with a standard @code{a.out} section name.

@cindex Section Stack (ELF only)
This is one of the ELF section stack manipulation directives.  The others are
@code{.subsection} (@pxref{SubSectionElf}), @code{.pushsection}
(@pxref{PushSectionElf}), @code{.popsection} (@pxref{PopSectionElf}), and
@code{.previous} (@pxref{PreviousElf}).

@cindex @code{section} directive (ELF only)
@cindex @code{.section} (ELF only)
The @code{.section} directive is used like this:

@example
.section @var{name} [, "@var{flags}"[, @@@var{type}[,@var{flag_specific_arguments}]]]
@end example

The optional @var{flags} argument is a quoted string which may contain any
combination of the following characters:
@table @code
@item a
section is allocatable
@item e
section is excluded from executable and shared library.
@item w
section is writable
@item x
section is executable
@item M
section is mergeable
@item S
section contains zero terminated strings
@item G
section is a member of a section group
@item T
section is used for thread-local-storage
@item ?
section is a member of the previously-current section's group, if any
@end table
There may be further target dependent flags.  For example AAP supports the
@samp{R} flag to indicate a section should not be relaxed when linking.
@xref{Machine Dependencies}.

The optional @var{type} argument may contain one of the following constants:
@table @code
@item @@progbits
section contains data
@item @@nobits
section does not contain data (i.e., section only occupies space)
@item @@note
section contains data which is used by things other than the program
@item @@init_array
section contains an array of pointers to init functions
@item @@fini_array
section contains an array of pointers to finish functions
@item @@preinit_array
section contains an array of pointers to pre-init functions
@end table

Many targets only support the first three section types.

@emph{Note:} On targets where the @code{@@} character is the start of a comment
(eg ARM) then another character is used instead.  For example the ARM port uses
the @code{%} character.

If @var{flags} contains the @code{M} symbol then the @var{type} argument must
be specified as well as an extra argument---@var{entsize}---like this:

@example
.section @var{name} , "@var{flags}"M, @@@var{type}, @var{entsize}
@end example

Sections with the @code{M} flag but not @code{S} flag must contain fixed size
constants, each @var{entsize} octets long. Sections with both @code{M} and
@code{S} must contain zero terminated strings where each character is
@var{entsize} bytes long. The linker may remove duplicates within sections with
the same name, same entity size and same flags.  @var{entsize} must be an
absolute expression.  For sections with both @code{M} and @code{S}, a string
which is a suffix of a larger string is considered a duplicate.  Thus
@code{"def"} will be merged with @code{"abcdef"};  A reference to the first
@code{"def"} will be changed to a reference to @code{"abcdef"+3}.

If @var{flags} contains the @code{G} symbol then the @var{type} argument must
be present along with an additional field like this:

@example
.section @var{name} , "@var{flags}"G, @@@var{type}, @var{GroupName}[, @var{linkage}]
@end example

The @var{GroupName} field specifies the name of the section group to which this
particular section belongs.  The optional linkage field can contain:
@table @code
@item comdat
indicates that only one copy of this section should be retained
@item .gnu.linkonce
an alias for comdat
@end table

@emph{Note:} If both the @var{M} and @var{G} flags are present then the fields
for the Merge flag should come first, like this:

@example
.section @var{name} , "@var{flags}"MG, @@@var{type}, @var{entsize}, @var{GroupName}[, @var{linkage}]
@end example

If @var{flags} contains the @code{?} symbol then it may not also contain the
@code{G} symbol and the @var{GroupName} or @var{linkage} fields should not be
present.  Instead, @code{?} says to consider the section that's current before
this directive.  If that section used @code{G}, then the new section will use
@code{G} with those same @var{GroupName} and @var{linkage} fields implicitly.
If not, then the @code{?} symbol has no effect.

If no flags are specified, the default flags depend upon the section name.  If
the section name is not recognized, the default will be for the section to have
none of the above flags: it will not be allocated in memory, nor writable, nor
executable.  The section will contain data.

The assembler supports another type of @code{.section} directive for
compatibility with the Solaris assembler:

@example
.section "@var{name}"[, @var{flags}...]
@end example

@emph{Note:} The section name is quoted.  There may be a sequence of comma
separated flags:
@table @code
@item #alloc
section is allocatable
@item #write
section is writable
@item #execinstr
section is executable
@item #exclude
section is excluded from executable and shared library.
@item #tls
section is used for thread local storage
@end table

This directive replaces the current section and subsection.  The @sc{gnu}
assembler testsuite directory @code{gas/testsuite/gas/elf} contains some
examples of how this directive and the other section stack directives.

@node SizeElf
@subsection @code{.size @var{expression}}
@cindex @code{size} directive (ELF only)
@cindex @code{.size} (ELF only)
This directive sets the size associated with a symbol @var{name}.
The size in bytes is computed from @var{expression} which can make use of label
arithmetic.  This directive is typically used to set the size of function
symbols.

@node SubSectionElf
@subsection @code{.subsection @var{expression}}
@cindex @code{subsection} directive (ELF only)
@cindex @code{.subsection} (ELF only)
@cindex Section Stack (ELF only)
This is one of the ELF section stack manipulation directives.  The others are
@code{.section} (@pxref{SectionElf}), @code{.pushsection}
(@pxref{PushSectionElf}), @code{.popsection} (@pxref{PopSectionElf}), and
@code{.previous} (@pxref{PreviousElf}).

This directive replaces the current subsection with @var{expression}.  The
current section is not changed.  The replaced subsection is put onto the
section stack in place of the then current top of stack subsection.

@node SymverElf
@subsection @code{.symver}
@cindex @code{symver} directive (ELF only)
@cindex symbol versioning (ELF only)
@cindex versions of symbols (ELF only)
Use the @code{.symver} directive to bind symbols to specific version nodes
within a source file.  This is only supported on ELF platforms, and is
typically used when assembling files to be linked into a shared library.
There are cases where it may make sense to use this in objects to be bound
into an application itself so as to override a versioned symbol from a
shared library.

The @code{.symver} directive can be used like this:
@example
.symver @var{name}, @var{name2@@nodename}
@end example
If the symbol @var{name} is defined within the file
being assembled, the @code{.symver} directive effectively creates a symbol
alias with the name @var{name2@@nodename}, and in fact the main reason that we
just don't try and create a regular alias is that the @var{@@} character isn't
permitted in symbol names.  The @var{name2} part of the name is the actual name
of the symbol by which it will be externally referenced.  The name @var{name}
itself is merely a name of convenience that is used so that it is possible to
have definitions for multiple versions of a function within a single source
file, and so that the compiler can unambiguously know which version of a
function is being mentioned.  The @var{nodename} portion of the alias should be
the name of a node specified in the version script supplied to the linker when
building a shared library.  If you are attempting to override a versioned
symbol from a shared library, then @var{nodename} should correspond to the
nodename of the symbol you are trying to override.

If the symbol @var{name} is not defined within the file being assembled, all
references to @var{name} will be changed to @var{name2@@nodename}.  If no
reference to @var{name} is made, @var{name2@@nodename} will be removed from the
symbol table.

Another usage of the @code{.symver} directive is:
@example
.symver @var{name}, @var{name2@@@@nodename}
@end example
In this case, the symbol @var{name} must exist and be defined within
the file being assembled. It is similar to @var{name2@@nodename}. The
difference is @var{name2@@@@nodename} will also be used to resolve
references to @var{name2} by the linker.

The third usage of the @code{.symver} directive is:
@example
.symver @var{name}, @var{name2@@@@@@nodename}
@end example
When @var{name} is not defined within the
file being assembled, it is treated as @var{name2@@nodename}. When
@var{name} is defined within the file being assembled, the symbol
name, @var{name}, will be changed to @var{name2@@@@nodename}.

@node TbssElf
@subsection @code{.tbss [ @var{subsection} ]}
@cindex @code{tbss} directive (ELF only)
@cindex @code{.tbss} (ELF only)
@code{.tbss} tells the LLVM integrated assembler to assemble the following
statements onto the end of the TBSS subsection numbered @var{subsection} (which
is an absolute expression).  If @var{subsection} is omitted, it defaults to
zero.  This section is used for unitialized thread local storage (TLS) objects.

@node TdataElf
@subsection @code{.tdata [ @var{subsection} ]}
@cindex @code{tdata} directive (ELF only)
@cindex @code{.tdata} (ELF only)
@code{.tdata} tells the LLVM integrated assembler to assemble the following
statements onto the end of the tdata subsection numbered @var{subsection} (which
is an absolute expression).  If @var{subsection} is omitted, it defaults to
zero.  This section is used for itialized thread local storage (TLS) objects.

@node TextElf
@subsection @code{.text [ @var{subsection} ]}
@cindex @code{text} directive (ELF only)
@cindex @code{.text} (ELF only)
Tells the LLVM integrated assembler to assemble the following statements onto
the end of the text subsection numbered @var{subsection}, which is an absolute
expression.  If @var{subsection} is omitted, subsection number zero is used.

@node TypeElf
@subsection @code{.type @var{name} , @var{type description}}
@cindex symbol type (ELF only)
@cindex @code{type} directive (ELF only)
@cindex @code{.type} (ELF only)
This sets the type of symbol @var{name} to be either a
function symbol or an object symbol.  There are five different syntaxes
supported for the @var{type description} field, in order to provide
compatibility with various other assemblers.

Because some of the characters used in these syntaxes (such as @samp{@@} and
@samp{#}) are comment characters for some architectures, some of the syntaxes
below do not work on all architectures.  The first variant will be accepted by
the LLVM integrated assembler on all architectures so that variant should be
used for maximum portability, if you do not need to assemble your code with
other assemblers.

The syntaxes supported are:

@example
  .type <name> STT_<TYPE_IN_UPPER_CASE>
  .type <name>,#<type>
  .type <name>,@@<type>
  .type <name>,%<type>
  .type <name>,"<type>"
@end example

The types supported are:

@table @code
@item STT_FUNC
@itemx function
Mark the symbol as being a function name.

@item STT_GNU_IFUNC
@itemx gnu_indirect_function
Mark the symbol as an indirect function when evaluated during reloc
processing.  (This is only supported on assemblers targeting GNU systems).

@item STT_OBJECT
@itemx object
Mark the symbol as being a data object.

@item STT_TLS
@itemx tls_object
Mark the symbol as being a thead-local data object.

@item STT_COMMON
@itemx common
Mark the symbol as being a common data object.

@item STT_NOTYPE
@itemx notype
Does not mark the symbol in any way.  It is supported just for completeness.

@item gnu_unique_object
Marks the symbol as being a globally unique data object.  The dynamic linker
will make sure that in the entire process there is just one symbol with this
name and type in use.  (This is only supported on assemblers targeting @sc{gnu}
systems).

@end table

@emph{Note:} Some targets support extra types in addition to those listed
above.  @xref{Machine Dependencies}.

@node VersionElf
@subsection @code{.version "@var{string}"}
@cindex @code{version} directive (ELF only)
@cindex @code{.version} (ELF only)
This directive creates a @code{.note} section and places into it an ELF
formatted note of type NT_VERSION.  The note's name is set to @code{string}.

@node WeakElf
@subsection @code{.weak @var{names}}
@cindex @code{weak} directive (ELF only)
@cindex @code{.weak} (ELF only)
This directive sets the weak attribute on the comma separated list of symbol
@code{names}.  If the symbols do not already exist, they will be created.

@node WeakrefElf
@subsection @code{.weakref @var{alias}, @var{target}}
@cindex @code{weakref} directive (ELF only)
@cindex @code{.weakref} (ELF only)
This directive creates an alias to the target symbol that enables the symbol to
be referenced with weak-symbol semantics, but without actually making it weak.
If direct references or definitions of the symbol are present, then the symbol
will not be weak, but if all references to it are through weak references, the
symbol will be marked as weak in the symbol table.

The effect is equivalent to moving all references to the alias to a separate
assembly source file, renaming the alias to the symbol in it, declaring the
symbol as weak there, and running a reloadable link to merge the object files
resulting from the assembly of the new source file and the old source file that
had the references to the alias removed.

The alias itself never makes to the symbol table, and is entirely handled
within the assembler.

@node COFF Directives
@section COFF Specific Directives

@menu
* BssCoff::             @code{.bss [ @var{subsection} ]}
* DataCoff::            @code{.data [ @var{subsection} ]}
* DefCoff::             @code{.def @var{name}}, @code{.endef}
* LinkonceCoff::        @code{.linkonce @var{type}}
* SclCoff::             @code{.scl}
* SecidxCoff::          @code{.secidx @var{funcname}}, @code{.secrel32 @var{funcname}}
* SectionCoff::         @code{.section @var{name} [, "@var{flags}" | , @var{subsection} ]}
* TextCoff::            @code{.text [ @var{subsection} ]}
* TypeCoff::            @code{.type}
* Win64Coff::           Directives for Win64 Structured Event Handling
* WeakCoff::            @code{.weak @var{names}}
@end menu

@node BssCoff
@subsection @code{.bss [ @var{subsection} ]}
@cindex @code{bss} directive (COFF only)
@cindex @code{.bss} (COFF only)
@code{.bss} tells the LLVM integrated assembler to assemble the following
statements onto the end of the BSS subsection numbered @var{subsection} (which
is an absolute expression).  If @var{subsection} is omitted, it defaults to
zero.

@node DataCoff
@subsection @code{.data [ @var{subsection} ]}
@cindex @code{data} directive (COFF only)
@cindex @code{.data} (COFF only)
@code{.data} tells the LLVM integrated assembler to assemble the following
statements onto the end of the data subsection numbered @var{subsection} (which
is an absolute expression).  If @var{subsection} is omitted, it defaults to
zero.

@node DefCoff
@subsection @code{.def @var{name}}, @code{.endef}
@cindex @code{def} directive (COFF only)
@cindex @code{.def} (COFF only)
@cindex @code{endef} directive (COFF only)
@cindex @code{.endef} (COFF only)
Begin defining debugging information for a symbol @var{name}; the definition
extends until the @code{.endef} directive is encountered.

@node LinkonceCoff
@subsection @code{.linkonce @var{type}}
@cindex COMDAT
@cindex @code{linkonce} directive
@cindex @code{.linkonce}
@cindex common sections
Mark the current section so that the linker only includes a single copy of it.
This may be used to include the same section in several different object files,
but ensure that the linker will only include it once in the final output file.
The @code{.linkonce} pseudo-op must be used for each instance of the section.
Duplicate sections are detected based on the section name, so it should be
unique.

This directive is only supported by a few object file formats.  COFF support,
other than as Windows Portable Executable format is a LLVM integrated assembler
extension.

The @var{type} argument is optional.  For example:
@smallexample
.linkonce same_size
@end smallexample

If specified, it must be one of the following strings.  Not all types may be
supported on all object file formats.

@table @code
@item discard
Silently discard duplicate sections.  This is the default.

@item one_only
Warn if there are duplicate sections, but still keep only one copy.

@item same_size
Warn if any of the duplicates have different sizes.

@item same_contents
Warn if any of the duplicates do not have exactly the same contents.

@item largest
Links the largest section from among the duplicates.

@item newest
Links the newest section from among the duplicates.
@end table

@node SclCoff
@subsection @code{.scl}
@cindex @code{scl} directive (COFF only)
@cindex @code{.scl} (COFF only)
@cindex COFF symbol storage class
Set the storage-class value for a symbol.  This directive may only be used
inside a @code{.def}/@code{.endef} pair (@pxref{DefCoff}.  Storage class may
flag whether a symbol is static or external, or it may record further symbolic
debugging information.

@node SecidxCoff
@subsection @code{.secidx @var{funcname}}, @code{.secrel32}
@cindex @code{secidx} directive (COFF only)
@cindex @code{.secidx} (COFF only)
@cindex @code{secrel32} directive (COFF only)
@cindex @code{.secrel32} (COFF only)
These are target dependent assembler directives for the Intel x86 family of
architectures (@pxref{Machine Dependencies}.  For historical reason they are
generic COFF directives, so must be implemented by any target that
supports COFF.

@code{.secrel32} generates a relocation that corresponds to the COFF relocation
types @code{IMAGE_REL_I386_SECREL} (32-bit) or @code{IMAGE_REL_AMD64_SECREL}
(64-bit).

The @code{.secidx} relocation generates an index of the section that contains
the target. It corresponds to the COFF relocation types
@code{IMAGE_REL_I386_SECTION} (32-bit) or @code{IMAGE_REL_AMD64_SECTION}
(64-bit).

The following example is taken from the LLVM 3.6 documentation.

@example
.section .debug$S,"rn"
       .long 4
       .long 242
       .long 40
       .secrel32  _function_name
       .secidx    _function_name
       ...
@end example

@node SectionCoff
@subsection @code{.section @var{name} [, "@var{flags}" | , @var{subsection} ]}
@cindex @code{section} directive (COFF only)
@cindex @code{.section} (COFF only)
If the optional argument is quoted, it is taken as flags to use for the
section.  Each flag is a single character.  The following flags are recognized:
@table @code
@item b
bss section (uninitialized data)
@item n
section is not loaded
@item w
writable section
@item d
data section
@item e
exclude section from linking
@item r
read-only section
@item x
executable section
@item s
shared section (meaningful for PE targets)
@item a
ignored.  (For compatibility with the ELF version)
@item y
section is not readable (meaningful for PE targets)
@item 0-9
single-digit power-of-two section alignment (GNU extension)
@end table

If no flags are specified, the default flags depend upon the section name.  If
the section name is not recognized, the default will be for the section to be
loaded and writable.  Note the @code{n} and @code{w} flags remove attributes
from the section, rather than adding them, so if they are used on their own it
will be as if no flags had been specified at all.

If the optional argument to the @code{.section} directive is not quoted, it is
taken as a subsection number (@pxref{Sub-Sections}).

@node TextCoff
@subsection @code{.text [ @var{subsection} ]}
@cindex @code{text} directive (COFF only)
@cindex @code{.text} (COFF only)
Tells the LLVM integrated assembler to assemble the following statements onto
the end of the text subsection numbered @var{subsection}, which is an absolute
expression.  If @var{subsection} is omitted, subsection number zero is used.

@node TypeCoff
@subsection @code{.type}
@cindex @code{type} directive (COFF only)
@cindex @code{.type} (COFF only)
This directive is used to set the type of a symbol.  For COFF targets, this
directive is permitted only within @code{.def}/@code{.endef} pairs.  It is used
like this:

@example
.type @var{int}
@end example

This records the integer @var{int} as the type attribute of a symbol table
entry.

@node Win64Coff
@subsection COFF Specific Directives for Win64 Stuctured Event Handling

The windows structure event handling (SEH) directives are implemented, but
there seems to be no documentation for these directives.  The information in
this section has been gleaned from looking at the source code, so should be
treated with caution.

@menu
* SehProc::                  @code{.seh_proc @var{name}}, @code{.seh_endproc}
* SehEndprologue::           @code{.seh_endprologue}
* SehHandler::               @code{.seh_handler @var{funcname} [ @var{eventtype}, @var{eventtype},... ]}
* SehHandlerdata::           @code{.seh_handlerdata}
* SehPushframe::             @code{.seh_pushframe @var{size}}
* SehPushreg::               @code{.seh_pushreg @var{reg}}
* SehSavereg::               @code{.seh_savereg @var{reg} @var{offset}}
* SehSavexmn::               @code{.seh_savexmm @var{reg} @var{offset}}
* SehSetframe::              @code{.seh_setframe @var{reg} @var{offset}}
* SehStackalloc::            @code{.seh_stackalloc @var{size}}
* SehChained::               @code{.seh_startchained}, @code{.seh_endchained}
@end menu

@node SehProc
@subsubsection @code{.seh_proc @var{name}}, @code{.seh_endproc}
@cindex @code{seh_proc} directive (COFF Win64 event handling only)
@cindex @code{.seh_proc} (COFF Win64 event handling only)
@cindex @code{seh_endproc} directive (COFF Win64 event handling only)
@cindex @code{.seh_endproc} (COFF Win64 event handling only)
These directives mark the start and end of any function in a SEH environment.

@node SehEndprologue
@subsubsection @code{.seh_endprologue}
@cindex @code{seh_end_prologue} directive (COFF Win64 event handling only)
@cindex @code{.seh_end_prologue} (COFF Win64 event handling only)
This directive marks the end of a function prologue in a SEH environment and
should precede the @code{seh_proc} (@pxref{SehProc}) directive of the function.
All code from the previous @code{.seh_endproc} to @code{.seh_endprologue} is
considered part of the function prologue.

@node SehHandler
@subsubsection @code{.seh_handler @var{funcname} [ @var{eventtype}, @var{eventtype},... ]}
@cindex @code{seh_handler} directive (COFF Win64 event handling only)
@cindex @code{.seh_handler} (COFF Win64 event handling only)
@var{funcname} is marked as an event handler for events of type @var{eventtype}
for the next function to be specified by @var{proc} (@pxref{SehProc}).  If
@var{eventtype} is omitted, the handler will be for any events other than those
for which a separate @code{.seh_handler} directive with @var{eventtype} has
been specified.

These directives should follow @code{.seh_endprologue}
(@pxref{SehEndprologue}).
@node SehHandlerdata
@subsubsection @code{.seh_handlerdata}
@cindex @code{seh_handlerdata} directive (COFF Win64 event handling only)
@cindex @code{.seh_handlerdata} (COFF Win64 event handling only)
This indicates that subsequent data should be written into a separate section
for SEH handler data.
@example
        .seh_handler    dummy_handler, @@unwind,@@except
        .seh_handlerdata
        .long 0
        .text
        .seh_proc
@end example

@node SehPushframe
@subsubsection @code{.seh_pushframe @var{size}}
@cindex @code{seh_pushframe} directive (COFF Win64 event handling only)
@cindex @code{.seh_pushframe} (COFF Win64 event handling only)
Indicate that a frame of @var{size} bytes is used.  This directive should
appear after the @code{.seh_endprologue} directive (@pxref{SehEndprologue}) and
before the @code{.seh_proc} directive (@pxref{SehProc}) for the function to
which it refers.

@node SehPushreg
@subsubsection @code{.seh_pushreg @var{reg}}
@cindex @code{seh_pushreg} directive (COFF Win64 event handling only)
@cindex @code{.seh_pushreg} (COFF Win64 event handling only)
Indicate that register @var{reg} is pushed to the stack.  This directive
should appear after the @code{.seh_endprologue} directive
(@pxref{SehEndprologue}) and before the @code{.seh_proc} directive
(@pxref{SehProc}) for the function to which it refers.

@node SehSavereg
@subsubsection @code{.seh_savereg @var{reg} @var{offset}}
@cindex @code{seh_savereg} directive (COFF Win64 event handling only)
@cindex @code{.seh_savereg} (COFF Win64 event handling only)
Indicate that general purpose register @var{reg} is save at @var{offset} on the
stack.  This directive should appear after the @code{.seh_endprologue}
directive (@pxref{SehEndprologue}) and before the @code{.seh_proc} directive
(@pxref{SehProc}) for the function to which it refers.

@node SehSavexmn
@subsubsection @code{.seh_savexmn @var{reg} @var{offset}}
@cindex @code{seh_savexmn} directive (COFF Win64 event handling only)
@cindex @code{.seh_savexmn} (COFF Win64 event handling only)
Indicate that XMM register @var{reg} is save at @var{offset} on the stack.
This directive should appear after the @code{.seh_endprologue} directive
(@pxref{SehEndprologue}) and before the @code{.seh_proc} directive
(@pxref{SehProc}) for the function to which it refers.

@node SehSetframe
@subsubsection @code{.seh_setframe @var{reg} @var{offset}}
@cindex @code{seh_setframe} directive (COFF Win64 event handling only)
@cindex @code{.seh_setframe} (COFF Win64 event handling only)
Indicate that the frame pointer is in @var{reg} and initially points to
@var{offset} on the stack.  This directive should appear after the
@code{.seh_endprologue} directive (@pxref{SehEndprologue}) and before the
@code{.seh_proc} directive (@pxref{SehProc}) for the function to which it
refers.

@node SehStackalloc
@subsubsection @code{.seh_stackalloc @var{size}}
@cindex @code{seh_stackalloc} directive (COFF Win64 event handling only)
@cindex @code{.seh_stackalloc} (COFF Win64 event handling only)
Indicate further allocation of @var{size} bytes of stack has been made.  This
directive should appear after the @code{.seh_endprologue} directive
(@pxref{SehEndprologue}) and before the @code{.seh_proc} directive
(@pxref{SehProc}) for the function to which it refers.

@node SehChained
@subsubsection @code{.seh_startchained}, @code{.seh_endchained}
@cindex @code{seh_startchained} directive (COFF Win64 event handling only)
@cindex @code{.seh_startchained} (COFF Win64 event handling only)
@cindex @code{seh_endchained} directive (COFF Win64 event handling only)
@cindex @code{.seh_endchained} (COFF Win64 event handling only)
Indicate the start and end of a chained event handler.

@node WeakCoff
@subsection @code{.weak @var{names}}
@cindex @code{weak} directive (COFF only)
@cindex @code{.weak} (COFF only)
@cindex @code{weak} directive
This directive sets the weak attribute on the comma separated list of symbol
@code{names}.  If the symbols do not already exist, they will be created.

On a Windows Portable Executable (PE) target, weak symbols are supported
natively as weak aliases.  When a weak symbol is created that is not an alias,
the LLVM integrated assembler creates an alternate symbol to hold the default
value.

On COFF targets other than PE, weak symbols are a GNU extension also supported
by the LLVM integrated assembler.  This directive sets the weak attribute on
the comma separated list of symbol @code{names}.  If the symbols do not already
exist, they will be created.

@node Mach-O Directives
@section Mach-O Specific Directives

LLVM implements all the assembler directives described by the OS X Assembler
Reference manual.  This document only provides a summary, together with any
LLVM specific extensions.

@menu
* BssMachO::                        @code{.bss}
* ConstMachO::                      @code{.const}
* ConstDataMachO::                  @code{.const_data}
* ConstructorMachO::                @code{.constructor}, @code{.destructor}
* CstringMachO::                    @code{.cstring}
* DataMachO::                       @code{.data}
* DescMachO::                       @code{.desc @var{symbol}, @var{expr}}
* DumpMachO::                       @code{.dump @var{filename}}, @code{.load @var{filename}}
* DyldMachO::                       @code{.dyld}
* FvmlibInitMachO::                 @code{.fvmlib_init0}, @code{.fvmlib_init1}
* IdentMachO::                      @code{.ident}
* IosVersionMinMachO::              @code{.ios_version_min @var{major}, @var{minor}, @var{patch}}
* LazySymbolPointerMachO::          @code{.lazy_symbol_pointer}, @code{.non_lazy_symbol_pointer}
* LazyReferenceMachO::              @code{.lazy_reference @var{symbol}}
* LinkerOptionMachO::               @code{.linker_option "@var{string}"}
* LiteralMachO::                    @code{.literal4}, @code{.literal8}, @code{.literal16}
* LsymMachO::                       @code{.lsym @var{symbo}, @var{expression}}
* MacosxVersionMinMachO::           @code{.macosx_version_min @var{major}, @var{minor}, @var{patch}}
* ModInitFuncMachO::                @code{.mod_init_func}, @code{.mod_term_func}
* NoDeadStripMachO::                @code{.no_dead_strip @var{symbol}}
* ObjC::                            Mach-O Objective C Specific Directives
* PicsymbolStubMachO::              @code{.picsymbol_stub}
* PreviousMachO::                   @code{.previous}
* PrivateExternMachO::              @code{.private_extern @var{name}}
* ReferenceMachO::                  @code{.reference @var{symbol}}
* SectionMachO::                    @code{.section @var{segname}, @var{sectname} [[[, @var{type} ], @var{attribute} ], @var{sizeof_stub} ] }
* StaticConstMachO::                @code{.static_const}
* StaticDataMachO::                 @code{.static_data}
* SymbolResolverMachO::             @code{.symbol_resolver @var{resolver}}
* SymbolStubMachO::                 @code{.symbol_stub}
* TbssMachO::                       @code{.tbss @var{symbol} @var{size} @var{align}}
* TdataMachO::                      @code{.tdata}
* TextMachO::                       @code{.text}
* ThreadInitFuncMachO::             @code{.thread_init_func}
* TlvMachO::                        @code{.tlv}
* WeakDefCanBeHiddenMachO::         @code{.weak_def_can_be_hidden @var{name}}
* WeakDefinitionMachO::             @code{.weak_definition @var{name}}
* WeakReferenceMachO::              @code{.weak_reference @var{name}}
* ZerofillMachO::                   @code{.zerofill @var{segname}, @var{sectname} [, @var{symbol}, @var{size} [, @var{align} ]]}
@end menu

@node BssMachO
@subsection @code{.bss}
@cindex @code{bss} directive (Mach-O only)
@cindex @code{.bss} (Mach-O only)
This is a synonymn for:
@example
        .section  "__DATA", "__bss"
@end example

@xref{SectionMachO}.

@node ConstMachO
@subsection @code{.const}
@cindex @code{const} directive (Mach-O only)
@cindex @code{.const} (Mach-O only)
This is a synonymn for:
@example
        .section  "__TEXT", "__const"
@end example

@xref{SectionMachO}.

@node ConstDataMachO
@subsection @code{.const_data}
@cindex @code{const_data} directive (Mach-O only)
@cindex @code{.const_data} (Mach-O only)
This is a synonymn for:
@example
        .section  "__DATA", "__const_data"
@end example

@xref{SectionMachO}.

@node ConstructorMachO
@subsection @code{.constructor}, @code{.destructor}
@cindex @code{constructor} directive (Mach-O only)
@cindex @code{.constructor} (Mach-O only)
@cindex @code{destructor} directive (Mach-O only)
@cindex @code{.destructor} (Mach-O only)
These are synonymns respectively for:
@example
        .section  "__TEXT", "__constructor"
        .section  "__TEXT", "__destructor"
@end example

@xref{SectionMachO}.

@node CstringMachO
@subsection @code{.cstring}
@cindex @code{cstring} directive (Mach-O only)
@cindex @code{.cstring} (Mach-O only)
This is a synonymn for:
@example
        .section  "__TEXT", "__cstring"
@end example

@xref{SectionMachO}.

@node DataMachO
@subsection @code{.data}
@cindex @code{data} directive (Mach-O only)
@cindex @code{.data} (Mach-O only)
This is a synonymn for:
@example
        .section  "__DATA", "__data"
@end example

@xref{SectionMachO}.

@node DescMachO
@subsection @code{.desc @var{symbol}, @var{expr}}
@cindex @code{desc} directive (Mach-O only)
@cindex @code{.desc} (Mach-O only)
Set the @code{n_desc} field for the specified @var{symbo} to the specified
absolute expression.

@node DumpMachO
@subsection @code{.dump @var{filename}},  @code{.load @var{filename}}
@cindex @code{dump} directive (Mach-O only)
@cindex @code{.dump} (Mach-O only)
@cindex @code{load} directive (Mach-O only)
@cindex @code{.load} (Mach-O only)
These directives dump and load aboslute symbols and macro definitions to and
from a file.

@node DyldMachO
@subsection @code{.dyld}
@cindex @code{dyld} directive (Mach-O only)
@cindex @code{.dyld} (Mach-O only)
This is a synonymn for:
@example
        .section  "__DATA", "__dyld"
@end example

@xref{SectionMachO}.

@node FvmlibInitMachO
@subsection @code{.fvmlib_init0}, @code{.fvmlib_init0}
@cindex @code{fvmlib_init0} directive (Mach-O only)
@cindex @code{.fvmlib_init0} (Mach-O only)
@cindex @code{fvmlib_init1} directive (Mach-O only)
@cindex @code{.fvmlib_init1} (Mach-O only)
These are synonymns respectively for:
@example
        .section  "__TEXT", "__fvmlib_init0"
        .section  "__TEXT", "__fvmlib_init1"
@end example

@xref{SectionMachO}.

@node IdentMachO
@subsection @code{.ident}
@cindex @code{ident} directive (Mach-O only)
@cindex @code{.ident} (Mach-O only)
This directive is ignored.

@node IosVersionMinMachO
@subsection @code{.ios_version_min @var{major}, @var{minor}, @var{patch}}
@cindex @code{ios_version_min} directive (Mach-O only)
@cindex @code{.ios_version_min} (Mach-O only)
Verify that the version of IOS for which the code is being assembled has at
least the specified @var{major}, @var{minor} and @var{patch} versions.

@node LazySymbolPointerMachO
@subsection @code{.lazy_symbol_pointer}, @code{.non_lazy_symbol_pointer}
@cindex @code{lazy_symbol_pointer} directive (Mach-O only)
@cindex @code{.lazy_symbol_pointer} (Mach-O only)
@cindex @code{non_lazy_symbol_pointer} directive (Mach-O only)
@cindex @code{.non_lazy_symbol_pointer} (Mach-O only)
This is a synonymn for:
@example
        .section  "__DATA", "__ni_symbol_pointer"
@end example

@xref{SectionMachO}.

@node LazyReferenceMachO
@subsection @code{.lazy_reference @var{symbol}}
@cindex @code{lazy_reference} directive (Mach-O only)
@cindex @code{.lazy_reference} (Mach-O only)
This is a Generic option that is Mach-O specific.  The specified @var{symbol}
is marked to be a lazy undefined symbol.

@node LinkerOptionMachO
@subsection @code{.linker_option "@var{string}"}
@cindex @code{linker_option} directive (Mach-O only)
@cindex @code{.linker_option} (Mach-O only)
Pass the specified string as an option to any subsequent linking step.

@node LiteralMachO
@subsection @code{.literal4}, @code{.literal8}, @code{.literal16}
@cindex @code{literal4} directive (Mach-O only)
@cindex @code{.literal4} (Mach-O only)
@cindex @code{literal8} directive (Mach-O only)
@cindex @code{.literal8} (Mach-O only)
@cindex @code{literal16} directive (Mach-O only)
@cindex @code{.literal16} (Mach-O only)
These are synonyms for respectively:
@example
        .section  "__TEXT", "__literal4"
        .section  "__TEXT", "__literal8"
        .section  "__TEXT", "__literal16"
@end example

@xref{SectionMachO}.

@node LsymMachO
@subsection @code{.lsym @var{symbo}, @var{expression}}
@cindex @code{lsym} directive (Mach-O only)
@cindex @code{.lsym} (Mach-O only)
Create a unique and othersize unreferenceable symbol with the name @var{symbol}
and value @var{expression}.  The symbol is a static symbol of type
@code{N_ABS}.

@node MacosxVersionMinMachO
@subsection @code{.macosx_version_min @var{major}, @var{minor}, @var{patch}}
@cindex @code{macosx_version_min} directive (Mach-O only)
@cindex @code{.macosx_version_min} (Mach-O only)
Verify that the version of MacOS for which the code is being assembled has at
least the specified @var{major}, @var{minor} and @var{patch} versions.

@node ModInitFuncMachO
@subsection @code{.mod_init_func}, @code{.mod_term_func}
@cindex @code{mod_init_func} directive (Mach-O only)
@cindex @code{.mod_init_func} (Mach-O only)
@cindex @code{mod_term_func} directive (Mach-O only)
@cindex @code{.mod_term_func} (Mach-O only)
These are synonymns for respectively:
@example
        .section  "__DATA", "__mod_init_func"
        .section  "__DATA", "__mod_term_func"
@end example

@xref{SectionMachO}.

@node NoDeadStripMachO
@subsection @code{.no_dead_strip @var{symbol}}
@cindex @code{no_dead_strip} directive (Mach-O only)
@cindex @code{.no_dead_strip} (Mach-O only)
Generic option that is Mach-O specific.  Indicate that the specified symbol is
not to be dead stripped.

@node ObjC
@subsection Mach-O Objective C Specific Directives
@cindex assembler directives (Mach-O Objective C)
@cindex Mach-O Objective C assembler directives

@menu
* ObjcCatClsMeth::         @code{.objc_cat_cls_meth}
* ObjcCatInstMeth::        @code{.objc_cat_inst_meth}
* ObjcCategory::           @code{.objc_category}
* ObjcClass::              @code{.objc_class}
* ObjcClassNames::         @code{.objc_class_names}
* ObjcClassVars::          @code{.objc_class_vars}
* ObjcClsMeth::            @code{.objc_cls_meth}
* ObjcClsRefs::            @code{.objc_cls_refs}
* ObjcInstMeth::           @code{.objc_inst_meth}
* ObjcInstanceVars::       @code{.objc_instance_vars}
* ObjcMessageRefs::        @code{.objc_message_refs}
* ObjcMetaClass::          @code{.objc_meta_class}
* ObjcMethVarNames::       @code{.objc_meth_var_names}
* ObjcMethVarTypes::       @code{.objc_meth_var_types}
* ObjcModuleInfo::         @code{.objc_module_info}
* ObjcProtocol::           @code{.objc_protocol}
* ObjcSelectorStrs::       @code{.objc_selector_strs}
* ObjcStringObject::       @code{.objc_string_object}
* ObjcSymbols::            @code{.objc_symbols}
@end menu

@node ObjcCatClsMeth
@subsubsection @code{.objc_cat_cls_meth}
@cindex @code{objc_cat_cls_meth} directive (Mach-O Objective C Only)
@cindex @code{.objc_cat_cls_meth} (Mach-O Objective C Only)
This is a synonymn for:
@example
        .section  __OBJC, __cat_cls_meth
@end example

@xref{SectionMachO}.

@node ObjcCatInstMeth
@subsubsection @code{.objc_cat_inst_meth}
@cindex @code{objc_cat_inst_meth} directive (Mach-O Objective C Only)
@cindex @code{.objc_cat_inst_meth} (Mach-O Objective C Only)
This is a synonymn for:
@example
        .section  __OBJC, __cat_inst_meth
@end example

@xref{SectionMachO}.

@node ObjcCategory
@subsubsection @code{.objc_category}
@cindex @code{objc_category} directive (Mach-O Objective C Only)
@cindex @code{.objc_category} (Mach-O Objective C Only)
This is a synonymn for:
@example
        .section  __OBJC, __category
@end example

@xref{SectionMachO}.

@node ObjcClass
@subsubsection @code{.objc_class}
@cindex @code{objc_class} directive (Mach-O Objective C Only)
@cindex @code{.objc_class} (Mach-O Objective C Only)
This is a synonymn for:
@example
        .section  __OBJC, __class
@end example

@xref{SectionMachO}.

@node ObjcClassNames
@subsubsection @code{.objc_class_names}
@cindex @code{objc_class_names} directive (Mach-O Objective C Only)
@cindex @code{.objc_class_names} (Mach-O Objective C Only)
This is a synonymn for:
@example
        .section  __OBJC, __class_names
@end example

@xref{SectionMachO}.

@node ObjcClassVars
@subsubsection @code{.objc_class_vars}
@cindex @code{objc_class_vars} directive (Mach-O Objective C Only)
@cindex @code{.objc_class_vars} (Mach-O Objective C Only)
This is a synonymn for:
@example
        .section  __OBJC, __class_vars
@end example

@xref{SectionMachO}.

@node ObjcClsMeth
@subsubsection @code{.objc_cls_meth}
@cindex @code{objc_cls_meth} directive (Mach-O Objective C Only)
@cindex @code{.objc_cls_meth} (Mach-O Objective C Only)
This is a synonymn for:
@example
        .section  __OBJC, __cls_meth
@end example

@xref{SectionMachO}.

@node ObjcClsRefs
@subsubsection @code{.objc_cls_refs}
@cindex @code{objc_cls_refs} directive (Mach-O Objective C Only)
@cindex @code{.objc_cls_refs} (Mach-O Objective C Only)
This is a synonymn for:
@example
        .section  __OBJC, __cls_refs
@end example

@xref{SectionMachO}.

@node ObjcInstMeth
@subsubsection @code{.objc_inst_meth}
@cindex @code{objc_inst_meth} directive (Mach-O Objective C Only)
@cindex @code{.objc_inst_meth} (Mach-O Objective C Only)
This is a synonymn for:
@example
        .section  __OBJC, __inst_meth
@end example

@xref{SectionMachO}.

@node ObjcInstanceVars
@subsubsection @code{.objc_instance_vars}
@cindex @code{objc_instance_vars} directive (Mach-O Objective C Only)
@cindex @code{.objc_instance_vars} (Mach-O Objective C Only)
This is a synonymn for:
@example
        .section  __OBJC, __instance_vars
@end example

@xref{SectionMachO}.

@node ObjcMessageRefs
@subsubsection @code{.objc_message_refs}
@cindex @code{objc_message_refs} directive (Mach-O Objective C Only)
@cindex @code{.objc_message_refs} (Mach-O Objective C Only)
This is a synonymn for:
@example
        .section  __OBJC, __message_refs
@end example

@xref{SectionMachO}.

@node ObjcMetaClass
@subsubsection @code{.objc_meta_class}
@cindex @code{objc_meta_class} directive (Mach-O Objective C Only)
@cindex @code{.objc_meta_class} (Mach-O Objective C Only)
This is a synonymn for:
@example
        .section  __OBJC, __meta_class
@end example

@xref{SectionMachO}.

@node ObjcMethVarNames
@subsubsection @code{.objc_meth_var_names}
@cindex @code{objc_meth_var_names} directive (Mach-O Objective C Only)
@cindex @code{.objc_meth_var_names} (Mach-O Objective C Only)
This is a synonymn for:
@example
        .section  __OBJC, __meth_var_names
@end example

@xref{SectionMachO}.

@node ObjcMethVarTypes
@subsubsection @code{.objc_meth_var_types}
@cindex @code{objc_meth_var_types} directive (Mach-O Objective C Only)
@cindex @code{.objc_meth_var_types} (Mach-O Objective C Only)
This is a synonymn for:
@example
        .section  __OBJC, __meth_var_types
@end example

@xref{SectionMachO}.

@node ObjcModuleInfo
@subsubsection @code{.objc_module_info}
@cindex @code{objc_module_info} directive (Mach-O Objective C Only)
@cindex @code{.objc_module_info} (Mach-O Objective C Only)
This is a synonymn for:
@example
        .section  __OBJC, __module_info
@end example

@xref{SectionMachO}.

@node ObjcProtocol
@subsubsection @code{.objc_protocol}
@cindex @code{objc_protocol} directive (Mach-O Objective C Only)
@cindex @code{.objc_protocol} (Mach-O Objective C Only)
This is a synonymn for:
@example
        .section  __OBJC, __protocol
@end example

@xref{SectionMachO}.

@node ObjcSelectorStrs
@subsubsection @code{.objc_selector_strs}
@cindex @code{objc_selector_strs} directive (Mach-O Objective C Only)
@cindex @code{.objc_selector_strs} (Mach-O Objective C Only)
This is a synonymn for:
@example
        .section  __OBJC, __selector_strs
@end example

@xref{SectionMachO}.

@node ObjcStringObject
@subsubsection @code{.objc_string_object}
@cindex @code{objc_string_object} directive (Mach-O Objective C Only)
@cindex @code{.objc_string_object} (Mach-O Objective C Only)
This is a synonymn for:
@example
        .section  __OBJC, __string_object
@end example

@xref{SectionMachO}.

@node ObjcSymbols
@subsubsection @code{.objc_symbols}
@cindex @code{objc_symbols} directive (Mach-O Objective C Only)
@cindex @code{.objc_symbols} (Mach-O Objective C Only)
This is a synonymn for:
@example
        .section  __OBJC, __symbols
@end example

@xref{SectionMachO}.

@node PicsymbolStubMachO
@subsection @code{.picsymbol_stub}
@cindex @code{picsymbol_stub} directive (Mach-O only)
@cindex @code{.picsymbol_stub} (Mach-O only)
This is a synonymn for one of:
@example
        .section  "__TEXT", "__picsymbolstub1"
        .section  "__TEXT", "__picsymbol_stub"
@end example

@xref{SectionMachO}.

@node PreviousMachO
@subsection @code{.previous}
@cindex @code{previous} directive (Mach-O only)
@cindex @code{.previous} (Mach-O only)
This directive swaps the current section with the most recently referenced
section prior to this one.  Multiple @code{.previous} directives in a row will
flip between two sections.

@node PrivateExternMachO
@subsection @code{.private_extern @var{name}}
@cindex @code{private_extern} directive (Mach-O only)
@cindex @code{.private_extern} (Mach-O only)
Generic option that is Mach-O specific.  Mark @var{symbol} as a private
external symbol.

@node ReferenceMachO
@subsection @code{.reference @var{symbol}}
@cindex @code{reference} directive (Mach-O only)
@cindex @code{.reference} (Mach-O only)
Generic option that is Mach-O specific.  Mark @var{symbol} as an undefined
symbol in the output symbol table.

@node SectionMachO
@subsection @code{.section @var{segname}, @var{sectname} [[[, @var{type} ], @var{attribute} ], @var{sizeof_stub} ] }
@cindex @code{section} directive (Mach-O only)
@cindex @code{.section} (Mach-O only)
Start assembling in the section specified by @var{segname} and @var{sectname}
with the optional @var{type} and @var{attribute}. If given @var{sizeof_stub} is
the size in bytes of symbol stubs in the section.

@node StaticConstMachO
@subsection @code{.static_const}
@cindex @code{static_const} directive (Mach-O only)
@cindex @code{.static_const} (Mach-O only)
This is a synonymn for:
@example
        .section  "__TEXT", "__static_const"
@end example

@xref{SectionMachO}.

@node StaticDataMachO
@subsection @code{.static_data}
@cindex @code{static_data} directive (Mach-O only)
@cindex @code{.static_data} (Mach-O only)
This is a synonymn for:
@example
        .section  "__DATA", "__static_data"
@end example

@xref{SectionMachO}.

@node SymbolResolverMachO
@subsection @code{.symbol_resolver @var{resolver}}
@cindex @code{symbol_resolver} directive (Mach-O only)
@cindex @code{.symbol_resolver} (Mach-O only)
Specify a symbol resolver to be used by the LLVM linker, @command{lld}.

@node SymbolStubMachO
@subsection @code{.symbol_stub}
@cindex @code{symbol_stub} directive (Mach-O only)
@cindex @code{.symbol_stub} (Mach-O only)
This is a synonymn for one of:
@example
        .section  "__TEXT", "__symbol_stub"
        .section  "__TEXT", "__jump_table"
@end example

@xref{SectionMachO}.

@node TbssMachO
@subsection @code{.tbss @var{symbol} @var{size} @var{align}}
@cindex @code{tbss} directive (Mach-O only)
@cindex @code{.tbss} (Mach-O only)
Create @var{symbol} as an entry of @var{size} bytes with alignment @var{align}
in the Thread Local Storage BSS section.

@node TdataMachO
@subsection @code{.tdata}
@cindex @code{tdata} directive (Mach-O only)
@cindex @code{.tdata} (Mach-O only)
This is a synonymn for:
@example
        .section  "__DATA", "__thread_data"
@end example

@xref{SectionMachO}.

@node TextMachO
@subsection @code{.text}
@cindex @code{text} directive (Mach-O only)
@cindex @code{.text} (Mach-O only)
For static code this is a synonym for:
@example
        .section  __TEXT, __text, regular
@end example

For dynamic code it is a synonymn for:
@example
        .section  __TEXT, __text, regular, pure_instructions
@end example

@xref{SectionMachO}.

@node ThreadInitFuncMachO
@subsection @code{.thread_init_func}
@cindex @code{thread_init_func} directive (Mach-O only)
@cindex @code{.thread_init_func} (Mach-O only)
This is a synonymn for:
@example
        .section  "__DATA", "__thread_init"
@end example

@xref{SectionMachO}.

@node TlvMachO
@subsection @code{.tlv}
@cindex @code{tlv} directive (Mach-O only)
@cindex @code{.tlv} (Mach-O only)
This is a synonymn for:
@example
        .section  "__DATA", "__thread_vars"
@end example

@xref{SectionMachO}.

@node WeakDefCanBeHiddenMachO
@subsection @code{.weak_def_can_be_hidden @var{name}}
@cindex @code{weak_def_can_be_hidden} directive (Mach-O only)
@cindex @code{.weak_def_can_be_hidden} (Mach-O only)
Undocumented generic option that is Mach-O specific.  This is a variant of
@code{.weak_definition} to define symbols which can be hidden under some
circumstances.  @xref{WeakDefinitionMachO}.

@node WeakDefinitionMachO
@subsection @code{.weak_definition @var{name}}
@cindex @code{weak_definition} directive
@cindex @code{.weak_definition}
Generic option that is Mach-O specific.  Mark symbol @var{name} as a weak
definition.

@node WeakReferenceMachO
@subsection @code{.weak_reference @var{name}}
@cindex @code{weak_reference} directive (Mach-O only)
@cindex @code{.weak_reference} (Mach-O only)
Generic option that is Mach-O specific.  Mark symbol @var{name} as a weak
undefined symbol in the output symbol table.

@node ZerofillMachO
@subsection @code{.zerofill @var{segname}, @var{sectname} [, @var{symbol}, @var{size} [, @var{align} ]]}
@cindex @code{zerofill} directive (Mach-O only) (Mach-O only)
@cindex @code{.zerofill} (Mach-O only) (Mach-O only)
Create @var{symbol} as uninitialized data in the section given by @var{segname}
and @var{sectname} with a size of @var{size} bytes.  If given @var{align} is a
power of 2 indicating byte alignment.

@node Deprecated
@section Deprecated Directives

@cindex deprecated directives
@cindex obsolescent directives
One day these directives won't work.
They are included for compatibility with older assemblers.
@table @code
@item .abort
@cindex @code{abort} directive (deprecated)
@cindex @code{.abort} (deprecated)
Abort assembly.

@item .line
@cindex @code{linet} directive (deprecated)
@cindex @code{.linet} (deprecated)
Set line number.
@end table

@node Unsupported
@section Unsupported GNU Assembler Directives

@cindex @sc{gnu} assembler directives, unsupported
@cindex unsupported @sc{gnu} assembler directives

These directives are supported by the @sc{gnu} assembler, but not the LLVM
integrated assembler.  Code originally intended for the @sc{gnu} assembler will
need modifying to eliminate the need for these directives.

@table @code
@item .altmacro
@cindex @code{altmacro} directive (unsupported)
@cindex @code{.altmacro} (unsupported)
Enable alternate macro mode.

@item .cfi_return_column
@cindex @code{cfi_return_column} directive (unsupported)
@cindex @code{.cfi_return_column} (unsupported)
Change return column register.

@item .cfi_val_encoded_addr
@cindex @code{cfi_val_encoded_addr} directive (unsupported)
@cindex @code{.cfi_val_encoded_addr} (unsupported)
Encode value of label in output.

@item .eject
@cindex @code{eject} directive (unsupported)
@cindex @code{.eject} (unsupported)
@cindex new page, in listings (unsupported)
@cindex page, in listings (unsupported)
@cindex listing control: new page (unsupported)
Force a page break when generating listings.

@item .endfunc
@cindex @code{endfunc} directive (unsupported)
@cindex @code{.endfunc} (unsupported)
Marks the end of a function specified with @code{.func}.

@item .eqv
@cindex @code{eqv} directive (unsupported)
@cindex @code{.eqv} (unsupported)
Lazily evaluated version of @code{.equiv}.

@item .fail
@cindex @code{fail} directive (unsupported)
@cindex @code{.fail} (unsupported)
Generates an error or a warning depending on its argument.

@item .func
@cindex @code{func} directive (unsupported)
@cindex @code{.func} (unsupported)
Emit debugging information to denote a function.

@item .gnu_attribute
@cindex @code{gnu_attribute} directive (unsupported)
@cindex @code{.gnu_attribute} (unsupported)
Record a @sc{gnu} object attribute for this file.

@item .hword
@cindex @code{hword} directive (unsupported)
@cindex @code{.hword} (unsupported)
@cindex integers, 16-bit (unsupported)
@cindex numbers, 16-bit (unsupported)
@cindex sixteen bit integers (unsupported)
Emit 16-bit numbers. A synonym for @samp{.short}; depending on the target
architecture, it may also be a synonym for @samp{.word}.

@item .ident
@cindex @code{ident} directive (unsupported for COFF only)
@cindex @code{.ident} (unsupported for COFF only)
Place tags in object files.  Not supported for COFF in LLVM, unlike the
@sc{gnu} assembler.

@item .lflags
@cindex @code{lflags} directive (unsupported)
@cindex @code{lflags} (unsupported)
This option was ignored by the @sc{gnu} assembler anyway.

@item .linkonce
@cindex COMDAT
@cindex @code{linkonce} directive (unsupported)
@cindex @code{.linkonce} (unsupported)
@cindex common sections
Mark the current section so that the linker only includes a single copy of it.
Incompatible with ELF output files.

@item .list
@cindex @code{list} directive (unsupported)
@cindex @code{.list} (unsupported)
@cindex listing control, turning on
Control whether or not assembly listings are generated.

@item .ln
@cindex @code{ln} directive (unsupported)
@cindex @code{.ln} (unsupported)
Specify source line number.

@item .loc_mark_labels
@cindex @code{loc_mark_labels} directive (unsupported)
@cindex @code{.loc_mark_labels} (unsupported)
Control emission of basic block debug info.

@item LOCAL @var{name} [ , @dots{} ]
@cindex @code{LOCAL} within macros (unsupported)
@cindex macros, @code{LOCAL} (unsupported)
Part of the unsupported ``alternate macro syntax''.

@item .noaltmacro
@cindex @code{noaltmacro} directive (unsupported)
@cindex @code{.noaltmacro} (unsupported)
Disable alternate macro mode, which is no longer supported.

@item .nolist
@cindex @code{nolist} directive (unsupported)
@cindex @code{.nolist} (unsupported)
@cindex listing control, turning off
Control whether or not assembly listings are generated.

@item .offset
@cindex @code{offset} directive (unsupported)
@cindex @code{.offset} (unsupported)
Set the location counter in the absolute section.

@item .print
@cindex @code{print} directive (unsupported)
@cindex @code{.print} (unsupported)
Print string on standard output.

@item .psize
@cindex @code{psize} directive (unsupported)
@cindex @code{.psize} (unsupported)
@cindex listing control: paper size (unsupported)
@cindex paper size, for listings (unsupported)
Declare the number of lines and columns to use for each listing page

@item .reloc
@cindex @code{reloc} directive (unsupported)
@cindex @code{.reloc} (unsupported)
Generate a relocation.

@item .sbttl
@cindex @code{sbttl} directive (unsupported)
@cindex @code{.sbttl} (unsupported)
@cindex subtitles for listings (unsupported)
@cindex listing control: subtitle (unsupported)
Generate a subheadng in a listing.

@item .string8
@itemx .string16
@itemx .string32
@itemx .string64
@cindex string8, copying to object file (unsupported)
@cindex string16, copying to object file (unsupported)
@cindex string32, copying to object file (unsupported)
@cindex string64, copying to object file (unsupported)
@cindex @code{string8} directive (unsupported)
@cindex @code{.string8} (unsupported)
@cindex @code{string16} directive (unsupported)
@cindex @code{.string16} (unsupported)
@cindex @code{string32} directive (unsupported)
@cindex @code{.string32} (unsupported)
@cindex @code{string64} directive (unsupported)
@cindex @code{.string64} (unsupported)
Directives to copy expanded string characters into the object file.

@item .struct
@cindex @code{struct} directive (unsupported)
@cindex @code{.struct} (unsupported)
Set offset symbol values.

@item .title
@cindex @code{title} directive (unsupported)
@cindex @code{.title} (unsupported)
@cindex listing control: title line (unsupported)
Set a title for listing files.

@item .vtableentry
@cindex @code{vtable_entry} directive (unsupported)
@cindex @code{.vtable_entry} (unsupported)
Create VTABLE_ENTRY relocation.

@item .vtableinherit
@cindex @code{vtable_inherit} directive (unsupported)
@cindex @code{.vtable_inherit} (unsupported)
Create VTABLE_INHERIT relocation.

@@item .word
@cindex @code{word} directive (unsupported)
@cindex @code{.word} (unsupported)
Emit words in a machine dependent way.

@end table


@node Object Attributes
@chapter Object Attributes
@cindex object attributes

@cindex @sc{gnu} object attributes
Object attributes are a concept introduced by the @sc{gnu} assembler, to
provide information about architecture variations and compatibility that could
be of use to the linker.

@sc{gnu} object attributes are not supported by the LLVM integrated assembler.

@node Machine Dependencies
@chapter Machine Dependent Features

@cindex machine dependencies
The machine instruction sets are (almost by definition) different on each
machine where the LLVM integrated assembler runs.  Floating point
representations vary as well, and the LLVM integrated assembler often supports
a few additional directives or command-line options for compatibility with
other assemblers on a particular platform.  Finally, some versions of the LLVM
integrated assembler support special pseudo-instructions for branch
optimization.

This chapter discusses most of these differences, though it does not
include details on any machine's instruction set.  For details on that
subject, see the hardware manufacturer's manual.

@menu
* AAP-dependent::              AAP Dependent Features
@end menu

@c Each of the following include files defines a node with a top level node
@c with the name <arch>-dependent, which is a section.

@include c-aap.texi

@node Reporting Bugs
@chapter Reporting Bugs
@cindex bugs in assembler
@cindex reporting bugs in assembler

Your bug reports play an essential role in making the LLVM integrated assembler
reliable.

Reporting a bug may help you by bringing a solution to your problem, or it may
not.  But in any case the principal function of a bug report is to help the
entire community by making the next version of the LLVM integrated assembler
work better.  Bug reports are your contribution to the maintenance of the LLVM
integrated assembler.

In order for a bug report to serve its purpose, you must include the
information that enables us to fix the bug.

@menu
* Bug Criteria::                Have you found a bug?
* Bug Reporting::               How to report bugs
@end menu

@node Bug Criteria
@section Have You Found a Bug?
@cindex bug criteria

If you are not sure whether you have found a bug, here are some guidelines:

@itemize @bullet
@cindex fatal signal
@cindex assembler crash
@cindex crash of assembler
@item
If the assembler gets a fatal signal, for any input whatever, that is a
the LLVM integrated assembler bug.  Reliable assemblers never crash.

@cindex error on valid input
@item
If the LLVM integrated assembler produces an error message for valid input,
that is a bug.

@cindex invalid input
@item
If the LLVM integrated assembler does not produce an error message for invalid
input, that is a bug.  However, you should note that your idea of ``invalid
input'' might be our idea of ``an extension'' or ``support for traditional
practice''.

@item
If you are an experienced user of assemblers, your suggestions for improvement
of the LLVM integrated assembler are welcome in any case.
@end itemize

@node Bug Reporting
@section How to Report Bugs
@cindex bug reports
@cindex assembler bugs, reporting

A number of companies and individuals offer support for @sc{gnu} products.  If
you obtained the LLVM integrated assembler from a support organization, we
recommend you contact that organization first.

You can find contact information for many support companies and
individuals in the file @file{etc/SERVICE} in the @sc{gnu} Emacs
distribution.

@ifset BUGURL
In any event, we also recommend that you send bug reports for the LLVM
integrated assembler to @value{BUGURL}.
@end ifset

The fundamental principle of reporting bugs usefully is this:
@strong{report all the facts}.  If you are not sure whether to state a
fact or leave it out, state it!

Often people omit facts because they think they know what causes the problem
and assume that some details do not matter.  Thus, you might assume that the
name of a symbol you use in an example does not matter.  Well, probably it does
not, but one cannot be sure.  Perhaps the bug is a stray memory reference which
happens to fetch from the location where that name is stored in memory;
perhaps, if the name were different, the contents of that location would fool
the assembler into doing the right thing despite the bug.  Play it safe and
give a specific, complete example.  That is the easiest thing for you to do,
and the most helpful.

Keep in mind that the purpose of a bug report is to enable us to fix the bug if
it is new to us.  Therefore, always write your bug reports on the assumption
that the bug has not been reported previously.

Sometimes people give a few sketchy facts and ask, ``Does this ring a
bell?''  This cannot help us fix a bug, so it is basically useless.  We
respond by asking for enough details to enable us to investigate.
You might as well expedite matters by sending them to begin with.

To enable us to fix the bug, you should include all these things:

@itemize @bullet
@item
The version of the LLVM integrated assembler.  The LLVM integrated assembler
announces it if you start it with the @samp{--version} argument.

Without this, we will not know whether there is any point in looking for
the bug in the current version of the LLVM integrated assembler.

@item
Any patches you may have applied to the the LLVM integrated assembler source.

@item
The type of machine you are using, and the operating system name and
version number.

@item
What compiler (and its version) was used to compile the LLVM integrated
assembler---e.g.  ``@code{llvm-3.7}''.

@item
The command arguments you gave the assembler to assemble your example and
observe the bug.  To guarantee you will not omit something important, list them
all.  A copy of the Makefile (or the output from make) is sufficient.

If we were to try to guess the arguments, we would probably guess wrong
and then we might not encounter the bug.

@item
A complete input file that will reproduce the bug.  If the bug is observed when
the assembler is invoked via a compiler, send the assembler source, not the
high level language source.  Clang/LLVM will produce the assembler source when
run with the @samp{-S} option.  With Clang/LLVM you can also use the options
@samp{-v --save-temps}; this will save the assembler source in a file with an
extension of @file{.s}, and also show you exactly how the LLVM integrated
assembler is being run.

@item
A description of what behavior you observe that you believe is
incorrect.  For example, ``It gets a fatal signal.''

Of course, if the bug is that the LLVM integrated assembler gets a fatal
signal, then we will certainly notice it.  But if the bug is incorrect output,
we might not notice unless it is glaringly wrong.  You might as well not give
us a chance to make a mistake.

Even if the problem you experience is a fatal signal, you should still say so
explicitly.  Suppose something strange is going on, such as, your copy of the
LLVM integrated assembler is out of sync, or you have encountered a bug in the
C library on your system.  (This has happened!)  Your copy might crash and ours
would not.  If you told us to expect a crash, then when ours fails to crash, we
would know that the bug was not happening for us.  If you had not told us to
expect a crash, then we would not be able to draw any conclusion from our
observations.

@item
If you wish to suggest changes to the the LLVM integrated assembler source,
send us context diffs, as generated by @code{diff} with the @samp{-u},
@samp{-c}, or @samp{-p} option.  Always send diffs from the old file to the new
file.  If you even discuss something in the the LLVM integrated assembler
source, refer to it by context, not by line number.

The line numbers in our development sources will not match those in your
sources.  Your line numbers would convey no useful information to us.
@end itemize

Here are some things that are not necessary:

@itemize @bullet
@item
A description of the envelope of the bug.

Often people who encounter a bug spend a lot of time investigating
which changes to the input file will make the bug go away and which
changes will not affect it.

This is often time consuming and not very useful, because the way we
will find the bug is by running a single example under the debugger
with breakpoints, not by pure deduction from a series of examples.
We recommend that you save your time for something else.

Of course, if you can find a simpler example to report @emph{instead}
of the original one, that is a convenience for us.  Errors in the
output will be easier to spot, running under the debugger will take
less time, and so on.

However, simplification is not vital; if you do not want to do this,
report the bug anyway and send us the entire test case you used.

@item
A patch for the bug.

A patch for the bug does help us if it is a good one.  But do not omit
the necessary information, such as the test case, on the assumption that
a patch is all we need.  We might see problems with your patch and decide
to fix the problem another way, or we might not understand it at all.

Sometimes with a program as complicated as the LLVM integrated assembler it is
very hard to construct an example that will make the program follow a certain
path through the code.  If you do not send us the example, we will not be able
to construct one, so we will not be able to verify that the bug is fixed.

And if we cannot understand what bug you are trying to fix, or why your
patch should be an improvement, we will not install it.  A test case will
help us to understand.

@item
A guess about what the bug is or what it depends on.

Such guesses are usually wrong.  Even we cannot guess right about such
things without first using the debugger to find the facts.
@end itemize

@node Acknowledgements
@chapter Acknowledgements

If you have contributed to GAS and your name isn't listed here,
it is not meant as a slight.  We just don't know about it.  Send mail to the
maintainer, and we'll correct the situation.  Currently
@c (October 2012),
the maintainer is Nick Clifton (email address @code{nickc@@redhat.com}).

Dean Elsner wrote the original @sc{gnu} assembler for the VAX.@footnote{Any
more details?}

Jay Fenlason maintained GAS for a while, adding support for GDB-specific debug
information and the 68k series machines, most of the preprocessing pass, and
extensive changes in @file{messages.c}, @file{input-file.c}, @file{write.c}.

K. Richard Pixley maintained GAS for a while, adding various enhancements and
many bug fixes, including merging support for several processors, breaking GAS
up to handle multiple object file format back ends (including heavy rewrite,
testing, an integration of the coff and b.out back ends), adding configuration
including heavy testing and verification of cross assemblers and file splits
and renaming, converted GAS to strictly ANSI C including full prototypes, added
support for m680[34]0 and cpu32, did considerable work on i960 including a COFF
port (including considerable amounts of reverse engineering), a SPARC opcode
file rewrite, DECstation, rs6000, and hp300hpux host ports, updated ``know''
assertions and made them work, much other reorganization, cleanup, and lint.

Ken Raeburn wrote the high-level BFD interface code to replace most of the code
in format-specific I/O modules.

The original VMS support was contributed by David L. Kashtan.  Eric Youngdale
has done much work with it since.

The Intel 80386 machine description was written by Eliot Dresselhaus.

Minh Tran-Le at IntelliCorp contributed some AIX 386 support.

The Motorola 88k machine description was contributed by Devon Bowen of Buffalo
University and Torbjorn Granlund of the Swedish Institute of Computer Science.

Keith Knowles at the Open Software Foundation wrote the original MIPS back end
(@file{tc-mips.c}, @file{tc-mips.h}), and contributed Rose format support
(which hasn't been merged in yet).  Ralph Campbell worked with the MIPS code to
support a.out format.

Support for the Zilog Z8k and Renesas H8/300 processors (tc-z8k,
tc-h8300), and IEEE 695 object file format (obj-ieee), was written by
Steve Chamberlain of Cygnus Support.  Steve also modified the COFF back end to
use BFD for some low-level operations, for use with the H8/300 and AMD 29k
targets.

John Gilmore built the AMD 29000 support, added @code{.include} support, and
simplified the configuration of which versions accept which directives.  He
updated the 68k machine description so that Motorola's opcodes always produced
fixed-size instructions (e.g., @code{jsr}), while synthetic instructions
remained shrinkable (@code{jbsr}).  John fixed many bugs, including true tested
cross-compilation support, and one bug in relaxation that took a week and
required the proverbial one-bit fix.

Ian Lance Taylor of Cygnus Support merged the Motorola and MIT syntax for the
68k, completed support for some COFF targets (68k, i386 SVR3, and SCO Unix),
added support for MIPS ECOFF and ELF targets, wrote the initial RS/6000 and
PowerPC assembler, and made a few other minor patches.

Steve Chamberlain made GAS able to generate listings.

Hewlett-Packard contributed support for the HP9000/300.

Jeff Law wrote GAS and BFD support for the native HPPA object format (SOM)
along with a fairly extensive HPPA testsuite (for both SOM and ELF object
formats).  This work was supported by both the Center for Software Science at
the University of Utah and Cygnus Support.

Support for ELF format files has been worked on by Mark Eichin of Cygnus
Support (original, incomplete implementation for SPARC), Pete Hoogenboom and
Jeff Law at the University of Utah (HPPA mainly), Michael Meissner of the Open
Software Foundation (i386 mainly), and Ken Raeburn of Cygnus Support (sparc,
and some initial 64-bit support).

Linas Vepstas added GAS support for the ESA/390 ``IBM 370'' architecture.

Richard Henderson rewrote the Alpha assembler. Klaus Kaempf wrote GAS and BFD
support for openVMS/Alpha.

Timothy Wall, Michael Hayes, and Greg Smart contributed to the various tic*
flavors.

David Heine, Sterling Augustine, Bob Wilson and John Ruttenberg from Tensilica,
Inc.@: added support for Xtensa processors.

Several engineers at Cygnus Support have also provided many small bug fixes and
configuration enhancements.

Jon Beniston added support for the Lattice Mico32 architecture.

Jeremy Bennett of Embecosm created the version for the LLVM Integrated
Assembler as a derived document of the @sc{gnu} Assembler Manual.

Many others have contributed large or small bugfixes and enhancements.  If
you have contributed significant work and are not mentioned on this list, and
want to be, let us know.  Some of the history has been lost; we are not
intentionally leaving anyone out.

@node GNU Free Documentation License
@appendix GNU Free Documentation License
@include fdl.texi

@node AS Index
@unnumbered LLVM Integrated Assembler Index

@printindex cp

@bye
@c Local Variables:
@c fill-column: 79
@c End:
