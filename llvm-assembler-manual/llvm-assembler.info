This is ../../llvm-assembler-manual/llvm-assembler.info, produced by
makeinfo version 4.13 from
../../llvm-assembler-manual/llvm-assembler.texi.

INFO-DIR-SECTION Software development
START-INFO-DIR-ENTRY
* Clang: (clang).               The LLVM integrated assembler
END-INFO-DIR-ENTRY

   This file documents the LLVM Integrated Assembler.

   Copyright (C) 1991-2015 Free Software Foundation, Inc.  Copyright
(C) 2015 Embecosm Limited
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled "GNU
Free Documentation License".


File: llvm-assembler.info,  Node: Top,  Next: Overview,  Up: (dir)

Using the LLVM integrated assembler
***********************************

This file is a user guide to the LLVM integrated assembler version
3.7.

   This document is distributed under the terms of the GNU Free
Documentation License.  A copy of the license is included in the
section entitled "GNU Free Documentation License".

* Menu:

* Overview::                    Overview
* Invoking::                    Command-Line Options
* Syntax::                      Syntax
* Sections::                    Sections and Relocation
* Symbols::                     Symbols
* Expressions::                 Expressions
* Pseudo Ops::                  Assembler Directives
* Object Attributes::           Object Attributes
* Machine Dependencies::        Machine Dependent Features
* Reporting Bugs::              Reporting Bugs
* Acknowledgements::            Who Did What
* GNU Free Documentation License::  GNU Free Documentation License
* AS Index::                    LLVM Integrated Assembler Index


File: llvm-assembler.info,  Node: Overview,  Next: Invoking,  Prev: Top,  Up: Top

1 Overview
**********

Here is a brief summary of how to invoke the LLVM integrated assembler.
For details, see *note Command-Line Options: Invoking.

     clang -cc1as [OPTIONS] INPUTS

* Menu:

* Manual::                      Structure of this Manual
* LLVM Assembler::              The LLVM Integrated Assembler
* Object Formats::              Object File Formats
* Command Line::                Command Line
* Input Files::                 Input Files
* Object::                      Output (Object) File
* Errors::                      Error and Warning Messages


File: llvm-assembler.info,  Node: Manual,  Next: LLVM Assembler,  Up: Overview

1.1 Structure of this Manual
============================

This manual is intended to describe what you need to know to use the
LLVM integrated assembler.  We cover the syntax expected in source
files, including notation for symbols, constants, and expressions; the
directives that the assembler understands; and of course how to invoke
the assembler.

   This manual also describes some of the machine-dependent features of
various flavors of the assembler.

   On the other hand, this manual is _not_ intended as an introduction
to programming in assembly language--let alone programming in general!
In a similar vein, we make no attempt to introduce the machine
architecture; we do _not_ describe the instruction set, standard
mnemonics, registers or addressing modes that are standard to a
particular architecture.  You may want to consult the manufacturer's
machine architecture manual for this information.


File: llvm-assembler.info,  Node: LLVM Assembler,  Next: Object Formats,  Prev: Manual,  Up: Overview

1.2 The LLVM Integrated Assembler
=================================

The LLVM integrated assembler is really a family of assemblers.  If you
use (or have used) the LLVM integrated assembler on one architecture,
you should find a fairly similar environment when you use it on another
architecture.  Each version has much in common with the others,
including object file formats, most assembler directives (often called
"pseudo-ops") and assembler syntax.

   The LLVM integrated assembler is primarily intended to assemble the
output of the LLVM compiler for use by the linker.  Nevertheless, we've
tried to make the LLVM integrated assembler handle correctly everything
that other assemblers for the same machine would assemble.

   This doesn't mean the assembler always uses the same syntax as
another assembler for the same architecture.  Unlike the GNU assembler
the LLVM integrated assembler usually assembles directly from the
internal LLVM Intermediate Represenation (IR) for the machine
instructions, rather than from a separate textual file (although it can
also do the latter).

   Unlike older assemblers, the LLVM integrated is designed to assemble
a source program in one pass of the source file.  This has a subtle
impact on the `.org' directive (*note `.org': Org.).


File: llvm-assembler.info,  Node: Object Formats,  Next: Command Line,  Prev: LLVM Assembler,  Up: Overview

1.3 Object File Formats
=======================

The LLVM integrated assembler can only produce the ELF object file
format with DWARF debug information.  Unlike the GNU assembler,
directives for debugging symbols are only available for the DWARF
format.  *Note Symbol Attributes: Symbol Attributes.


File: llvm-assembler.info,  Node: Command Line,  Next: Input Files,  Prev: Object Formats,  Up: Overview

1.4 Command Line
================

There is no separate command for running the LLVM integrated assembler.
The assembler is automatically invoked for any assembler source file
from the Clang front end to LLVM.
     clang ... MYFILE.s
   The output of the assembly will be controlled by the usual `clang'
options.  So by default the assembled output will be found in `a.out',
or if the `-c' flag is specified in MYFILE.o.

   The assembler can be invoked directly through the Clang front end to
LLVM.
     clang -cc1as ...
   In this case only one source file is given, and any assembled output
is sent to standard output.

   Unless otherwise indiated, clang will use the default architecture.
This can be changed using the `-target' option.
     clang -target ARCH ... MYFILE.s

   It is common practice to provide a symbolic link from clang to
architecture specific command name, which then implies use of that
architecture.
     ARCH-cc ... MYFILE.s

   If the assembler is invoked directly, then the assembler option to
specify the target triple must be used. For example:
     clang -cc1as -triple i686-apple-darwin9

   Note in particular that using -cc1as means any clang options are
ignored, so
     ARCH-cc -cc1as ...
   will invoke the assembler for the default architecture, _not_ the
ARCH architecture.

   After the program name `clang' or `ARC-cc', the command line may
contain options and file names.  Options may appear in any order, and
may be before, after, or between file names.  The order of file names
is not significant.

   Any command line argument passed to the assembler that begins with a
hyphen (`-') is an option.  Each option changes the behavior of the
assembler.  No option changes the way another option works.  An option
is a `-' followed by one or more letters; the case of the letter is
important.  All options are optional.

   Some options expect exactly one file name to follow them.  The file
name may either immediately follow the option's letter (compatible with
older assemblers) or it may be the next command argument (GNU
standard).  These two command lines are equivalent:

     ARCH-cc -o my-object-file.o mumble.s
     ARCH-cc -omy-object-file.o mumble.s

   There can sometimes be ambiguity between options for the C/C++
compiler and for the assembler.  In this case, the option should be
preceded by `-Wa,' to indicate it is intended for the assembler.


File: llvm-assembler.info,  Node: Input Files,  Next: Object,  Prev: Command Line,  Up: Overview

1.5 Input Files
===============

We use the phrase "source program", abbreviated "source", to describe
the program input to one run of the LLVM integrated assembler.  The
program may be in one or more files; how the source is partitioned into
files doesn't change the meaning of the source.

   Unlike the GNU assembler, the LLVM integrated assembler will by
default generate a fully linked executable, created by assembling each
source file in turn and then linking them.  Supplying the `-c' option
will cause just the assembly to happen, with one object file produced
for each source file.  There is no concept of concatenating the source
files for a single file assembly.

   You give a command line that has one or more input file names.  Any
with the suffix `.s' or `.S' will be assembled.  The difference between
the suffixes is that files ending in `.S' will first be passed through
the C pre-processor.  For example
     ARCH-cc -c hello.s
   will assembler the code in `hello.s', while:
     ARCH-cc -c hello.S
   will pass `hello.s' through the C pre-processor, then assemble it.

   The suffix can be overridden using Clang's `-x' option to specify the
language of succeeding files on the commmand line.  For the integrated
assembler, the two useful arguments to the `-x' option are `assembler'
and `assembler-with-cpp'.  So for example, the following would ensure
`hello.s' is passed through the C pre-processor before assembling:
     ARCH-cc -c -x assembler-with-cpp hello.s

   When invoked directly, the integrated assembler must be given at
most one argument to assemble.  It can also be used as a pipe:
     ARCH-cc -cc1as -triple ARCH -filetype obj < hello.s > hello.o

Filenames and Line-numbers
--------------------------

There are two ways of locating a line in the input file (or files) and
either may be used in reporting error messages.  One way refers to a
line number in a physical file; the other refers to a line number in a
"logical" file.  *Note Error and Warning Messages: Errors.

   "Physical files" are those files named in the command line given to
the LLVM integrated assembler.

   "Logical files" are simply names declared explicitly by assembler
directives; they bear no relation to physical files.  Logical file
names help error messages reflect the original source file, when
assembler source is itself synthesized from other files.  The LLVM
integrated assembler understands the `#' directives emitted by the LLVM
C preprocessor.  See also *note `.file': File.


File: llvm-assembler.info,  Node: Object,  Next: Errors,  Prev: Input Files,  Up: Overview

1.6 Output (Object) File
========================

Every time you run the LLVM integrated assembler it produces an output
file, which is your assembly language program translated into numbers.
This file is the object file.  Its default name is `a.out'.  You can
give it another name by using the `-o' option.  Conventionally, object
file names end with `.o'.  The default name is used for historical
reasons: older assemblers were capable of assembling self-contained
programs directly into a runnable program.  For some formats, this
isn't currently possible, but it can be done for the `a.out' format.

   The object file is meant to be input to the linker.  Clang/LLVM tool
chains have considerable choice of linker to use: GNU `ld', GNU `gold',
the LLVM `mc-linker' and the LLVM linker, `lld'.  The object file
contains assembled program code, information to help the linker
integrate the assembled program into a runnable file, and (optionally)
symbolic information for the debugger.


File: llvm-assembler.info,  Node: Errors,  Prev: Object,  Up: Overview

1.7 Error and Warning Messages
==============================

The LLVM integrated assembler may write warnings and error messages to
the standard error file (usually your terminal).  This should not
happen when the Clang/LLVM compiler runs the integrated assembler
automatically on assembler generated from C and C++ programs.  Warnings
report an assumption made so that the assembler could keep assembling a
flawed program; errors report a grave problem that stops the assembly.

   Warning messages have the format

     file_name:NNN:CCC:warning:Warning Message Text

(where NNN is a line number and CCC is a character position within the
line).  If a logical file name has been given (*note `.file': File.) it
is used for the filename, otherwise the name of the current input file
is used.  If a logical line number was given (*note `.line': Line.)
then it is used to calculate the number printed, otherwise the actual
line in the current source file is printed.  The message text is
intended to be self explanatory (in the grand Unix tradition).

   Error messages have the format
     file_name:NNN:CCC:error:Error Message Text
   The file name and line number are derived as for warning messages.
The actual message text may be rather less explanatory because many of
them aren't supposed to happen.


File: llvm-assembler.info,  Node: Invoking,  Next: Syntax,  Prev: Overview,  Up: Top

2 Command-Line Options
**********************

This chapter describes command-line options available in _all_ versions
of the GNU assembler; see *note Machine Dependencies::, for options
specific to particular machine architectures.

   There are three ways to pass options to the assembler.  Some options
are common to both the C compiler and assembler and can be used "as is".
     clang MYFILE.S -o MYFILE.o

   If the assembler is invoked automatically by Clang, then options
specific to the assembler may be passed with either the `-Wa' or
`-Xassembler' option:
     clang -Xassembler -compress-debug-sections ... MYFILE.S
     clang -Wa,-gdwarf-3 ... MYFILE.S

   For `-Wa', multiple options, or arguments to options, should be
separated by commas:
     ARCH-cc -c -g -O -Wa,-I.,-compress-debug-sections file.c

   If the assembler is invoked directly, then all options are
automatically interpreted as assembler options.
     clang -cc1as -help

   _Note:_  At the time of writing, there are some assembler options
that can only be passed if the assembler is invoked directly with
`-cc1as'.

* Menu:

* codegen::         How the assembly code is generated
* debug::           -g and other options controlling debug output
* encoding::        Show how instructions are encoded
* include::         -I for include search path
* information::     -help, -version
* llvm::            Additional arguments for LLVM option processing
* output::          -o and other options controlling output
* symbol-options::  Symbol table handling
* target::          Target specification
* warnings::        Control how warnings are handled


File: llvm-assembler.info,  Node: codegen,  Next: debug,  Up: Invoking

2.1 Code Generation
===================

* Menu:

* mnoexecstack::  -mnoexecstack
* mrelax-all::    -mrelax-all
* n::             -n


File: llvm-assembler.info,  Node: mnoexecstack,  Next: mrelax-all,  Up: codegen

2.1.1 `-mnoexecstack'
---------------------

Mark the output file as not needing an executable stack.  On some
architectures, for example Harvard architectures like AAP, it is
impossible to execute the stack, so this option has no additional
effect.


File: llvm-assembler.info,  Node: mrelax-all,  Next: n,  Prev: mnoexecstack,  Up: codegen

2.1.2 `-mrelax-all'
-------------------

Relax all machine instructions.  For architectures which relax from
short to longer instructions, this option says to relax all
instructions to their long form, not just those that have to be.

   _Note:_  Some architectures generate long instructions and then
relax to shorter instructions.  This is simpler to implement, but
suboptimal.  For these architectures, this flag has no effect.


File: llvm-assembler.info,  Node: n,  Prev: mrelax-all,  Up: codegen

2.1.3 `-n'
----------

Don't automatically start assembly file with a text section.


File: llvm-assembler.info,  Node: debug,  Next: encoding,  Prev: codegen,  Up: Invoking

2.2 Debug output
================

* Menu:

* compress-debug-sections::  -compress-debug-sections
* dwarf-debug-flags::        -dwarf-debug-flags VALUE
* dwarf-debug-producer::     -dwarf-debug-producer VALUE
* fdebug-compilation-dir::   -fdebug-compilation-dir VALUE
* gdwarf-n::                 -gdwarf-2, -gdwarf-3, -gdwarf-4
* g::                        -g
* main-file-name::           -main-file-name VALUE


File: llvm-assembler.info,  Node: compress-debug-sections,  Next: dwarf-debug-flags,  Up: debug

2.2.1 `-compress-debug-sections'
--------------------------------

Compress DWARF debug sections using zlib.


File: llvm-assembler.info,  Node: dwarf-debug-flags,  Next: dwarf-debug-producer,  Prev: compress-debug-sections,  Up: debug

2.2.2 `-dwarf-debug-flags' VALUE
--------------------------------

VALUE is a string to embed in the DWARF debug flags record.


File: llvm-assembler.info,  Node: dwarf-debug-producer,  Next: fdebug-compilation-dir,  Prev: dwarf-debug-flags,  Up: debug

2.2.3 `-dwarf-debug-producer' VALUE
-----------------------------------

VALUE is a string to embed in the DWARF `AT_producer' record.


File: llvm-assembler.info,  Node: fdebug-compilation-dir,  Next: gdwarf-n,  Prev: dwarf-debug-producer,  Up: debug

2.2.4 `-fdebug-compilation-dir' VALUE
-------------------------------------

VALUE  is the compilation directory to embed in the debug info.


File: llvm-assembler.info,  Node: gdwarf-n,  Next: g,  Prev: fdebug-compilation-dir,  Up: debug

2.2.5 `-gdwarf-2', `-gdwarf-3' and `-gdwarf-4'
----------------------------------------------

Generate source-level debug information using DWARF version 2, 3 or 4 as
indicated.  Default is DWARF version 4.


File: llvm-assembler.info,  Node: g,  Next: main-file-name,  Prev: gdwarf-n,  Up: debug

2.2.6 `-g'
----------

Generate source-level debug information.


File: llvm-assembler.info,  Node: main-file-name,  Prev: g,  Up: debug

2.2.7 `-main-file-name' VALUE
-----------------------------

VALUE is the main file name to embed in the debug info.


File: llvm-assembler.info,  Node: encoding,  Next: include,  Prev: debug,  Up: Invoking

2.3 Showing Assembly Instruction Encoding Information
=====================================================

* Menu:

* show-encoding::  -show-encoding
* show-inst::      -show-inst


File: llvm-assembler.info,  Node: show-encoding,  Next: show-inst,  Up: encoding

2.3.1 `-show-encoding'
----------------------

Show instruction encoding information in transliterate mode.


File: llvm-assembler.info,  Node: show-inst,  Prev: show-encoding,  Up: encoding

2.3.2 `-show-inst'
------------------

Show internal instruction representation in transliterate mode.


File: llvm-assembler.info,  Node: include,  Next: information,  Prev: encoding,  Up: Invoking

2.4 Search path for `.include': `-I' PATH
=========================================

Use this option to add a PATH to the list of directories the LLVM
integrated assembler searches for files specified in `.include'
directives (*note `.include': Include.).  You may use `-I' as many
times as necessary to include a variety of paths.  The current working
directory is always searched first; after that, the LLVM integrated
assembler searches any `-I' directories in the same order as they were
specified (left to right) on the command line.

   _Note:_ The assembly `-I' option only relates to the `.include'
directive.  Where the C pre-processor is used, any `#include'
directives will use the `-I' for the compiler.  For example:
     clang -IDIR1 -Wa,-IDIR2 MYFILE.S

   will search for any files in `#include' directives in DIR1 and any
files in `.include' directives in DIR2.


File: llvm-assembler.info,  Node: information,  Next: llvm,  Prev: include,  Up: Invoking

2.5 Help and Information about the Assembler
============================================

* Menu:

* help::              -help
* version::           -version


File: llvm-assembler.info,  Node: help,  Next: version,  Up: information

2.5.1 `-help'
-------------

Produce a summary of the options available to the assembler.  There is a
side-effect of the clang driver, that this option cannot be specified
using `-Wa'. For example
     clang -Wa,-help

   will just complain about the lack of input files.  The reason is
that the driver just passes `-Wa' options to the assembler, without any
knowledge of what they do.  It thus thinks `clang' has been invoked
without any file to process, so prints out the error message.

   Instead you should explicitly invoke the assembler backend (*note
invoking the assembler directly: cc1as.:
     clang -cc1as -help


File: llvm-assembler.info,  Node: version,  Prev: help,  Up: information

2.5.2 `-version'
----------------

Print out version information about the LLVM integrated assembler.

   _Note:_  As with the `-help' option, this cannot be invoked using
`-Wa' (*note `-help': help.), but must be used with the assembler
itself:
     clang -cc1as -version


File: llvm-assembler.info,  Node: llvm,  Next: output,  Prev: information,  Up: Invoking

2.6 `-mllvm' VALUE
==================

Pass the specified VALUE to the LLVM option processing system.  In
general this is only of value to compiler developers.


File: llvm-assembler.info,  Node: output,  Next: symbol-options,  Prev: llvm,  Up: Invoking

2.7 Options controlling assembler output
========================================

* Menu:

* filetype::            -filetype VALUE
* output-asm-variant::  -output-asm-variant VALUE
* o::                   -o FILE


File: llvm-assembler.info,  Node: filetype,  Next: output-asm-variant,  Up: output

2.7.1 `-filetype' TYPE
----------------------

Specify the output file type

`asm'
     Generate assembly source code.  This can be used to generate
     assembler source when using the assembler directly from code
     generated by the front end (equivalent to Clang's `-S' option,
     although the linker will then be confused by the absence of object
     files to link.  It is more usually used when the assembler is
     transliterating between one assembler flavor and another.

`null'
     Do not generate any output

`obj'
     Generate binary ELF object files.  This is the default.



File: llvm-assembler.info,  Node: output-asm-variant,  Next: o,  Prev: filetype,  Up: output

2.7.2 `-output-asm-variant' VALUE
---------------------------------

VALUE specifies a particular assembler variant for the target
architecture.  The meaning is target specific, and many targets have no
variants.


File: llvm-assembler.info,  Node: o,  Prev: output-asm-variant,  Up: output

2.7.3 `-o' FILE
---------------

Specify FILE as the output file.  If not specified output will by
default go to `a.out' if the file type is `obj' and to standard output
if the file type is `asm'.


File: llvm-assembler.info,  Node: symbol-options,  Next: target,  Prev: output,  Up: Invoking

2.8 Symbol table control: `-msave-temp-labels'
==============================================

Save temporary labels in the symbol table.

   _Note:_ This may change `.s' file semantics and shouldn't generally
be used on compiler-generated code.


File: llvm-assembler.info,  Node: target,  Next: warnings,  Prev: symbol-options,  Up: Invoking

2.9 Target specification
========================

* Menu:

* target-abi::      -target-abi VALUE
* target-cpu::      -target-cpu VALUE
* target-feature::  -target-feature VALUE
* triple::          -triple VALUE


File: llvm-assembler.info,  Node: target-abi,  Next: target-cpu,  Up: target

2.9.1 `-target-abi' VALUE
-------------------------

Target a ABI of type VALUE.  Not all targets may offer ABI values.


File: llvm-assembler.info,  Node: target-cpu,  Next: target-feature,  Prev: target-abi,  Up: target

2.9.2 `-target-cpu' VALUE
-------------------------

Target a specific CPU variant.  Not all targets may offer CPU values.


File: llvm-assembler.info,  Node: target-feature,  Next: triple,  Prev: target-cpu,  Up: target

2.9.3 `-target-feature' VALUE
-----------------------------

Set target specific attribute VALUE.  Not all targets may offer feature
values.


File: llvm-assembler.info,  Node: triple,  Prev: target-feature,  Up: target

2.9.4 `-triple' VALUE
---------------------

Specify the target triple.  For example i686-apple-darwin9.


File: llvm-assembler.info,  Node: warnings,  Prev: target,  Up: Invoking

2.10 Control of Warning Messages: `-massembler-fatal-warnings'
==============================================================

Causes all assembly warnings to be fatal.


File: llvm-assembler.info,  Node: Syntax,  Next: Sections,  Prev: Invoking,  Up: Top

3 Syntax
********

This chapter describes the machine-independent syntax allowed in a
source file.  LLVM integrated assembler syntax is similar to what many
other assemblers use; it is inspired by the GNU assembler, which in
turns is inspired by the BSD 4.2 VAX assembler.

* Menu:

* Preprocessing::               Preprocessing
* Whitespace::                  Whitespace
* Comments::                    Comments
* Symbol Intro::                Symbols
* Statements::                  Statements
* Constants::                   Constants


File: llvm-assembler.info,  Node: Preprocessing,  Next: Whitespace,  Up: Syntax

3.1 Preprocessing
=================

The LLVM integrated assembler internal preprocessor:
   * adjusts and removes extra whitespace.  It leaves one space or tab
     before the keywords on a line, and turns any other whitespace on
     the line into a single space.

   * removes all comments, replacing them with a single space, or an
     appropriate number of newlines.

   * converts character constants into the appropriate numeric values.

   It does not do macro processing, include file handling, or anything
else you may get from your C compiler's preprocessor.  You can do
include file processing with the `.include' directive (*note
`.include': Include.).  You can use Clang to get other "CPP" style
preprocessing by giving the input file a `.S' suffix.  *Note Input
Files: Input Files.

   Excess whitespace, comments, and character constants cannot be used
in the portions of the input text that are not preprocessed.

   Unlike the GNU assembler, `#NO_APP' and `#APP' before the text that
may contain whitespace or comments, and putting a line that says
`#NO_APP' after this text.  This feature is mainly intend to support
`asm' statements in compilers whose output is otherwise free of comments
and whitespace.


File: llvm-assembler.info,  Node: Whitespace,  Next: Comments,  Prev: Preprocessing,  Up: Syntax

3.2 Whitespace
==============

"Whitespace" is one or more blanks or tabs, in any order.  Whitespace
is used to separate symbols, and to make programs neater for people to
read.  Unless within character constants (*note Character Constants:
Characters.), any whitespace means the same as exactly one space.


File: llvm-assembler.info,  Node: Comments,  Next: Symbol Intro,  Prev: Whitespace,  Up: Syntax

3.3 Comments
============

There are two ways of rendering comments to LLVM integrated assembler.
In both cases the comment is equivalent to one space.

   Anything from `/*' through the next `*/' is a comment.  This means
you may not nest these comments.

     /*
       The only way to include a newline ('\n') in a comment
       is to use this sort of comment.
     */

     /* This sort of comment does not nest. */

   Anything from a "line comment" character up to the next newline is
considered a comment and is ignored.  The line comment character is
target specific, and some targets have multiple comment characters.
Some targets also have line comment characters that only work if they
are the first character on a line.  Some targets use a sequence of two
characters to introduce a line comment.  Some targets can also change
their line comment characters depending upon command line options that
have been used.  For more details see the _Syntax_ section in the
documentation for individual targets.

   If the line comment character is the hash sign (`#') then it still
has the special ability to enable and disable preprocessing (*note
Preprocessing::) and to specify logical line numbers:

   To be compatible with past assemblers, lines that begin with `#'
have a special interpretation.  Following the `#' should be an absolute
expression (*note Expressions::): the logical line number of the _next_
line.  Then a string (*note Strings: Strings.) is allowed: if present
it is a new logical file name.  The rest of the line, if any, should be
whitespace.

   If the first non-whitespace characters on the line are not numeric,
the line is ignored.  (Just like a comment.)

                               # This is an ordinary comment.
     # 42-6 "new_file_name"    # New logical file name
                               # This is logical line # 36.
   This feature is deprecated, and may disappear from future versions
of the LLVM integrated assembler.


File: llvm-assembler.info,  Node: Symbol Intro,  Next: Statements,  Prev: Comments,  Up: Syntax

3.4 Symbols
===========

A "symbol" is one or more characters chosen from the set of all letters
(both upper and lower case), digits and the three characters `_.$'.  On
most machines, you can also use `$' in symbol names; exceptions are
noted in *note Machine Dependencies::.  No symbol may begin with a
digit.  Case is significant.  There is no length limit: all characters
are significant.  Multibyte characters are supported.  Symbols are
delimited by characters not in that set, or by the beginning of a file
(since the source program must end with a newline, the end of a file is
not a possible symbol delimiter).  *Note Symbols::.  


File: llvm-assembler.info,  Node: Statements,  Next: Constants,  Prev: Symbol Intro,  Up: Syntax

3.5 Statements
==============

A "statement" ends at a newline character (`\n') or a "line separator
character".  The line separator character is target specific and
described in the _Syntax_ section of each target's documentation.  Not
all targets support a line separator character.  The newline or line
separator character is considered to be part of the preceding
statement.  Newlines and separators within character constants are an
exception: they do not end statements.

   It is an error to end any statement with end-of-file:  the last
character of any input file should be a newline.

   An empty statement is allowed, and may include whitespace.  It is
ignored.

   A statement begins with zero or more labels, optionally followed by
a key symbol which determines what kind of statement it is.  The key
symbol determines the syntax of the rest of the statement.  If the
symbol begins with a dot `.' then the statement is an assembler
directive: typically valid for any computer.  If the symbol begins with
a letter the statement is an assembly language "instruction": it
assembles into a machine language instruction.  Different versions of
the LLVM integrated assembler for different computers recognize
different instructions.  In fact, the same symbol may represent a
different instruction in a different computer's assembly language.

   A label is a symbol immediately followed by a colon (`:').
Whitespace before a label or after a colon is permitted, but you may
not have whitespace between a label's symbol and its colon. *Note
Labels::.

     label:     .directive    followed by something
     another_label:           # This is an empty statement.
                instruction   operand_1, operand_2, ...


File: llvm-assembler.info,  Node: Constants,  Prev: Statements,  Up: Syntax

3.6 Constants
=============

A constant is a number, written so that its value is known by
inspection, without knowing any context.  Like this:
     .byte  74, 0112, 092, 0x4A, 0X4a, 'J', '\J' # All the same value.
     .ascii "Ring the bell\7"                  # A string constant.
     .octa  0x123456789abcdef0123456789ABCDEF0 # A bignum.
     .float 0f-314159265358979323846264338327\
     95028841971.693993751E-40                 # - pi, a flonum.

* Menu:

* Characters::                  Character Constants
* Numbers::                     Number Constants


File: llvm-assembler.info,  Node: Characters,  Next: Numbers,  Up: Constants

3.6.1 Character Constants
-------------------------

There are two kinds of character constants.  A "character" stands for
one character in one byte and its value may be used in numeric
expressions.  String constants (properly called string _literals_) are
potentially many bytes and their values may not be used in arithmetic
expressions.

* Menu:

* Strings::                     Strings
* Chars::                       Characters


File: llvm-assembler.info,  Node: Strings,  Next: Chars,  Up: Characters

3.6.1.1 Strings
...............

A "string" is written between double-quotes.  It may contain
double-quotes or null characters.  The way to get special characters
into a string is to "escape" these characters: precede them with a
backslash `\' character.  For example `\\' represents one backslash:
the first `\' is an escape which tells the LLVM integrated assembler to
interpret the second character literally as a backslash (which prevents
the LLVM integrated assembler from recognizing the second `\' as an
escape character).  The list of escapes is target and operating system
specific.  The following list of escapes are commonly recognized.

`\b'
     Mnemonic for backspace; for ASCII this is octal code 010.

`\f'
     Mnemonic for FormFeed; for ASCII this is octal code 014.

`\n'
     Mnemonic for newline; for ASCII this is octal code 012.

`\r'
     Mnemonic for carriage-Return; for ASCII this is octal code 015.

`\t'
     Mnemonic for horizontal Tab; for ASCII this is octal code 011.

`\ DIGIT DIGIT DIGIT'
     An octal character code.  The numeric code is 3 octal digits.  For
     compatibility with other Unix systems, 8 and 9 are accepted as
     digits: for example, `\008' has the value 010, and `\009' the
     value 011.

`\`x' HEX-DIGITS...'
     A hex character code.  All trailing hex digits are combined.
     Either upper or lower case `x' works.

`\\'
     Represents one `\' character.

`\"'
     Represents one `"' character.  Needed in strings to represent this
     character, because an unescaped `"' would end the string.

`\ ANYTHING-ELSE'
     Any other character when escaped by `\' assembles as if the `\' was
     not present.  This is a change in behavior from the GNU assembler,
     which assumed that if you used an escape sequence you clearly
     didn't want the literal interpretation of the following character
     and should be warned.

   Which characters are escapable, and what those escapes represent,
varies widely among assemblers.  The current set is the set provided in
the user manual for the GNU assembler, and is a subset of what most C
compilers recognize.  If you are in doubt, do not use an escape
sequence.


File: llvm-assembler.info,  Node: Chars,  Prev: Strings,  Up: Characters

3.6.1.2 Characters
..................

A single character should be written as that character surrounded by
single quotes.  The same escapes apply to characters as to strings.  So
if you want to write the character backslash, you must write `'\\''
where the first `\' escapes the second `\'.  As you can see, the quote
is an acute accent, not a grave accent.  A newline within single quotes
is taken as a literal character and does not count as the end of a
statement.  The value of a character constant in a numeric expression
is the machine's byte-wide code for that character.  The LLVM
integrated assembler assumes your character code is ASCII: `'A'' means
65, `'B'' means 66, and so on.

   _Note:_ The GNU assembler used a single quote before a character.
There was no requirement for the closing quote afterwards.


File: llvm-assembler.info,  Node: Numbers,  Prev: Characters,  Up: Constants

3.6.2 Number Constants
----------------------

the LLVM integrated assembler distinguishes three kinds of numbers
according to how they are stored in the target machine.  _Integers_ are
numbers that would fit into an `int' in the C language.  _Bignums_ are
integers, but they are stored in more than 32 bits.  _Flonums_ are
floating point numbers, described below.

* Menu:

* Integers::                    Integers
* Bignums::                     Bignums
* Flonums::                     Flonums


File: llvm-assembler.info,  Node: Integers,  Next: Bignums,  Up: Numbers

3.6.2.1 Integers
................

A binary integer is `0b' or `0B' followed by zero or more of the binary
digits `01'.

   An octal integer is `0' followed by zero or more of the octal digits
(`01234567').

   A decimal integer starts with a non-zero digit followed by zero or
more digits (`0123456789').

   A hexadecimal integer is `0x' or `0X' followed by one or more
hexadecimal digits chosen from `0123456789abcdefABCDEF'.

   Integers have the usual values.  To denote a negative integer, use
the prefix operator `-' discussed under expressions (*note Prefix
Operators: Prefix Ops.).


File: llvm-assembler.info,  Node: Bignums,  Next: Flonums,  Prev: Integers,  Up: Numbers

3.6.2.2 Bignums
...............

A "bignum" has the same syntax and semantics as an integer except that
the number (or its negative) takes more than 32 bits to represent in
binary.  The distinction is made because in some places integers are
permitted while bignums are not.


File: llvm-assembler.info,  Node: Flonums,  Prev: Bignums,  Up: Numbers

3.6.2.3 Flonums
...............

A "flonum" represents a floating point number.  The translation is
indirect: a decimal floating point number from the text is converted by
the LLVM integrated assembler to a generic binary floating point number
of more than sufficient precision.  This generic floating point number
is converted to a particular computer's floating point format (or
formats) by a portion of the LLVM integrated assembler specialized to
that computer.

   A flonum is written by writing (in order)
   * The digit `0'.

   * A letter, to tell the LLVM integrated assembler the rest of the
     number is a flonum.  `e' is recommended.  Case is not important.
     There is architecture specificity here, with different letters
     having different meanings.

   * An optional sign: either `+' or `-'.

   * An optional "integer part": zero or more decimal digits.

   * An optional "fractional part": `.' followed by zero or more
     decimal digits.

   * An optional exponent, consisting of:

        * An `E' or `e'.

        * Optional sign: either `+' or `-'.

        * One or more decimal digits.


   At least one of the integer part or the fractional part must be
present.  The floating point number has the usual base-10 value.

   The LLVM integrated assembler does all processing using integers.
Flonums are computed independently of any floating point hardware in
the computer running the LLVM integrated assembler.


File: llvm-assembler.info,  Node: Sections,  Next: Symbols,  Prev: Syntax,  Up: Top

4 Sections and Relocation
*************************

* Menu:

* Secs Background::             Background
* Ld Sections::                 Linker Sections
* As Sections::                 Assembler Internal Sections
* Sub-Sections::                Sub-Sections
* bss::                         bss Section


File: llvm-assembler.info,  Node: Secs Background,  Next: Ld Sections,  Up: Sections

4.1 Background
==============

Roughly, a section is a range of addresses, with no gaps; all data "in"
those addresses is treated the same for some particular purpose.  For
example there may be a "read only" section.

   The linker reads many object files (partial programs) and combines
their contents to form a runnable program.  When the LLVM integrated
assembler emits an object file, the partial program is assumed to start
at address 0.  The linker assigns the final addresses for the partial
program, so that different partial programs do not overlap.  This is
actually an oversimplification, but it suffices to explain how the LLVM
integrated assembler uses sections.

   The linker moves blocks of bytes of your program to their run-time
addresses.  These blocks slide to their run-time addresses as rigid
units; their length does not change and neither does the order of bytes
within them.  Such a rigid unit is called a _section_.  Assigning
run-time addresses to sections is called "relocation".  It includes the
task of adjusting mentions of object-file addresses so they refer to
the proper run-time addresses.

   An object file written by the LLVM integrated assembler has at least
three sections, any of which may be empty.  These are named "text",
"data" and "bss" sections.

   The LLVM integrated assembler can also generate whatever other named
sections you specify using the `.section' directive (*note `.section':
Section.).  If you do not use any directives that place output in the
`.text' or `.data' sections, these sections still exist, but are empty.

   Within the object file, the text section starts at address `0', the
data section follows, and the bss section follows the data section.

   To let the linker know which data changes when the sections are
relocated, and how to change that data, the LLVM integrated assembler
also writes to the object file details of the relocation needed.  To
perform relocation the linker must know, each time an address in the
object file is mentioned:
   * Where in the object file is the beginning of this reference to an
     address?

   * How long (in bytes) is this reference?

   * Which section does the address refer to?  What is the numeric
     value of
          (ADDRESS) - (START-ADDRESS OF SECTION)?

   * Is the reference to an address "Program-Counter relative"?

   In fact, every address the LLVM integrated assembler ever uses is
expressed as
     (SECTION) + (OFFSET INTO SECTION)
   Further, most expressions the LLVM integrated assembler computes
have this section-relative nature.

   In this manual we use the notation {SECNAME N} to mean "offset N
into section SECNAME."

   Apart from text, data and bss sections you need to know about the
"absolute" section.  When the linker mixes partial programs, addresses
in the absolute section remain unchanged.  For example, address
`{absolute 0}' is "relocated" to run-time address 0 by the linker.
Although the linker never arranges two partial programs' data sections
with overlapping addresses after linking, _by definition_ their
absolute sections must overlap.  Address `{absolute 239}' in one part
of a program is always the same address when the program is running as
address `{absolute 239}' in any other part of the program.

   The idea of sections is extended to the "undefined" section.  Any
address whose section is unknown at assembly time is by definition
rendered {undefined U}--where U is filled in later.  Since numbers are
always defined, the only way to generate an undefined address is to
mention an undefined symbol.  A reference to a named common block would
be such a symbol: its value is unknown at assembly time so it has
section _undefined_.

   By analogy the word _section_ is used to describe groups of sections
in the linked program.  the linker puts all partial programs' text
sections in contiguous addresses in the linked program.  It is
customary to refer to the _text section_ of a program, meaning all the
addresses of all partial programs' text sections.  Likewise for data
and bss sections.

   Some sections are manipulated by the linker; others are invented for
use of the LLVM integrated assembler and have no meaning except during
assembly.


File: llvm-assembler.info,  Node: Ld Sections,  Next: As Sections,  Prev: Secs Background,  Up: Sections

4.2 Linker Sections
===================

The linker deals with just four kinds of sections, summarized below.

*named sections*
     These sections hold your program.  the LLVM integrated assembler
     and the linker treat them as separate but equal sections.
     Anything you can say of one section is true of another.  When the
     program is running, however, it is customary for the text section
     to be unalterable.  The text section is often shared among
     processes: it contains instructions, constants and the like.  The
     data section of a running program is usually alterable: for
     example, C variables would be stored in the data section.

*bss section*
     This section contains zeroed bytes when your program begins
     running.  It is used to hold uninitialized variables or common
     storage.  The length of each partial program's bss section is
     important, but because it starts out containing zeroed bytes there
     is no need to store explicit zero bytes in the object file.  The
     bss section was invented to eliminate those explicit zeros from
     object files.

*absolute section*
     Address 0 of this section is always "relocated" to runtime address
     0.  This is useful if you want to refer to an address that the
     linker must not change when relocating.  In this sense we speak of
     absolute addresses being "unrelocatable": they do not change
     during relocation.

*undefined section*
     This "section" is a catch-all for address references to objects
     not in the preceding sections.

   An idealized example of three relocatable sections follows.  The
example uses the traditional section names `.text' and `.data'.  Memory
addresses are on the horizontal axis.

                           +-----+----+--+
     partial program # 1:  |ttttt|dddd|00|
                           +-----+----+--+

                           text   data bss
                           seg.   seg. seg.

                           +---+---+---+
     partial program # 2:  |TTT|DDD|000|
                           +---+---+---+

                           +--+---+-----+--+----+---+-----+~~
     linked program:       |  |TTT|ttttt|  |dddd|DDD|00000|
                           +--+---+-----+--+----+---+-----+~~

         addresses:        0 ...


File: llvm-assembler.info,  Node: As Sections,  Next: Sub-Sections,  Prev: Ld Sections,  Up: Sections

4.3 Assembler Internal Sections
===============================

These sections are meant only for the internal use of the LLVM
integrated assembler.  They have no meaning at run-time.  You do not
really need to know about these sections for most purposes; but they
can be mentioned in the LLVM integrated assembler warning messages, so
it might be helpful to have an idea of their meanings to the LLVM
integrated assembler.  These sections are used to permit the value of
every expression in your assembly language program to be a
section-relative address.

ASSEMBLER-INTERNAL-LOGIC-ERROR!
     An internal assembler logic error has been found.  This means
     there is a bug in the assembler.

expr section
     The assembler stores complex expression internally as combinations
     of symbols.  When it needs to represent an expression as a symbol,
     it puts it in the expr section.


File: llvm-assembler.info,  Node: Sub-Sections,  Next: bss,  Prev: As Sections,  Up: Sections

4.4 Sub-Sections
================

You may have separate groups of data in named sections that you want to
end up near to each other in the object file, even though they are not
contiguous in the assembler source.  The LLVM integrated assembler
allows you to use "subsections" for this purpose.  Within each section,
there can be numbered subsections with values from 0 to 8192.  Objects
assembled into the same subsection go into the object file together
with other objects in the same subsection.  For example, a compiler
might want to store constants in the text section, but might not want
to have them interspersed with the program being assembled.  In this
case, the compiler could issue a `.text 0' before each section of code
being output, and a `.text 1' before each group of constants being
output.

   Subsections are optional.  If you do not use subsections, everything
goes in subsection number zero.

   Each subsection is zero-padded up to a multiple of four bytes.
(Subsections may be padded a different amount on different flavors of
the LLVM integrated assembler.)

   Subsections appear in your object file in numeric order, lowest
numbered to highest.  (All this to be compatible with other people's
assemblers.)  The object file contains no representation of
subsections; the linker and other programs that manipulate object files
see no trace of them.  They just see all your text subsections as a
text section, and all your data subsections as a data section.

   To specify which subsection you want subsequent statements assembled
into, use a numeric argument to specify it, in a `.text EXPRESSION' or a
`.data EXPRESSION' statement.  You can also use the `.subsection'
directive (*note SubSection::) to specify a subsection: `.subsection
EXPRESSION'.  EXPRESSION should be an absolute expression (*note
Expressions::).  If you just say `.text' then `.text 0' is assumed.
Likewise `.data' means `.data 0'.  Assembly begins in `text 0'.  For
instance:
     .text 0     # The default subsection is text 0 anyway.
     .ascii "This lives in the first text subsection. *"
     .text 1
     .ascii "But this lives in the second text subsection."
     .data 0
     .ascii "This lives in the data section,"
     .ascii "in the first data subsection."
     .text 0
     .ascii "This lives in the first text section,"
     .ascii "immediately following the asterisk (*)."

   Each section has a "location counter" incremented by one for every
byte assembled into that section.  Because subsections are merely a
convenience restricted to the LLVM integrated assembler there is no
concept of a subsection location counter.  There is no way to directly
manipulate a location counter--but the `.align' directive changes it,
and any label definition captures its current value.  The location
counter of the section where statements are being assembled is said to
be the "active" location counter.


File: llvm-assembler.info,  Node: bss,  Prev: Sub-Sections,  Up: Sections

4.5 bss Section
===============

The bss section is used for local common variable storage.  You may
allocate address space in the bss section, but you may not dictate data
to load into it before your program executes.  When your program starts
running, all the contents of the bss section are zeroed bytes.

   The `.lcomm' pseudo-op defines a symbol in the bss section; see
*note `.lcomm': Lcomm.

   The `.comm' pseudo-op may be used to declare a common symbol, which
is another form of uninitialized symbol; see *note `.comm': Comm.

   When assembling you may switch into the `.bss' section and define
symbols as usual; see *note `.section': Section.  You may only assemble
zero values into the section.  Typically the section will only contain
symbol definitions and `.skip' directives (*note `.skip': Skip.).


File: llvm-assembler.info,  Node: Symbols,  Next: Expressions,  Prev: Sections,  Up: Top

5 Symbols
*********

Symbols are a central concept: the programmer uses symbols to name
things, the linker uses symbols to link, and the debugger uses symbols
to debug.

     _Warning:_ the LLVM integrated assembler does not place symbols in
     the object file in the same order they were declared.  This may
     break some debuggers.

* Menu:

* Labels::                      Labels
* Setting Symbols::             Giving Symbols Other Values
* Symbol Names::                Symbol Names
* Dot::                         The Special Dot Symbol
* Symbol Attributes::           Symbol Attributes


File: llvm-assembler.info,  Node: Labels,  Next: Setting Symbols,  Up: Symbols

5.1 Labels
==========

A "label" is written as a symbol immediately followed by a colon `:'.
The symbol then represents the current value of the active location
counter, and is, for example, a suitable instruction operand.  You are
warned if you use the same symbol to represent two different locations:
the first definition overrides any other definitions.


File: llvm-assembler.info,  Node: Setting Symbols,  Next: Symbol Names,  Prev: Labels,  Up: Symbols

5.2 Giving Symbols Other Values
===============================

A symbol can be given an arbitrary value by writing a symbol, followed
by an equals sign `=', followed by an expression (*note Expressions::).
This is equivalent to using the `.set' directive.  *Note `.set': Set.
In the same way, using a double equals sign `='`=' here represents an
equivalent of the unsupported `.eqv' directive.  *Note `.eqv':
Unsupported.


File: llvm-assembler.info,  Node: Symbol Names,  Next: Dot,  Prev: Setting Symbols,  Up: Symbols

5.3 Symbol Names
================

Symbol names begin with a letter or with one of `._'.  On most
machines, you can also use `$' in symbol names; exceptions are noted in
*note Machine Dependencies::.  That character may be followed by any
string of digits, letters, dollar signs (unless otherwise noted for a
particular target machine), and underscores.

Case of letters is significant: `foo' is a different symbol name than
`Foo'.

   Multibyte characters are supported.  To generate a symbol name
containing multibyte characters enclose it within double quotes and use
escape codes. cf *Note Strings::.  Generating a multibyte symbol name
from a label is not currently supported.

   Each symbol has exactly one name.  Each name in an assembly language
program refers to exactly one symbol.  You may use that symbol name any
number of times in a program.

Local Symbol Names
------------------

A local symbol is any symbol beginning with certain local label
prefixes.  By default, the local label prefix is `.L', but each target
may have its own set of local label prefixes.

   Local symbols are defined and used within the assembler, but they
are normally not saved in object files.  Thus, they are not visible
when debugging.  You may use the `-msave-temp-labels' option (*note
Symbol Table Control: symbol-options.) to retain the local symbols in
the object files.

Local Labels
------------

Local labels help compilers and programmers use names temporarily.
They create symbols which are guaranteed to be unique over the entire
scope of the input source code and which can be referred to by a simple
notation.  To define a local label, write a label of the form `N:'
(where N represents any positive integer).  To refer to the most recent
previous definition of that label write `Nb', using the same number as
when you defined the label.  To refer to the next definition of a local
label, write `Nf'--the `b' stands for "backwards" and the `f' stands
for "forwards".

   There is no restriction on how you can use these labels, and you can
reuse them too.  So that it is possible to repeatedly define the same
local label (using the same number `N'), although you can only refer to
the most recently defined local label of that number (for a backwards
reference) or the next definition of a specific local label for a
forward reference.  It is also worth noting that the first 10 local
labels (`0:'...`9:') are implemented in a slightly more efficient
manner than the others.

   Here is an example:

     1:        branch 1f
     2:        branch 1b
     1:        branch 2f
     2:        branch 1b

   Which is the equivalent of:

     label_1:  branch label_3
     label_2:  branch label_1
     label_3:  branch label_4
     label_4:  branch label_3

   Local label names are only a notational device.  They are immediately
transformed into more conventional symbol names before the assembler
uses them.  The symbol names are stored in the symbol table, appear in
error messages, and are optionally emitted to the object file.  The
names are constructed using these parts:

`_local label prefix_'
     All local symbols begin with the system-specific local label
     prefix.  Normally both the LLVM integrated assembler and the
     linker forget symbols that start with the local label prefix.
     These labels are used for symbols you are never intended to see.
     If you use the `-L' option then the LLVM integrated assembler
     retains these symbols in the object file. If you also instruct the
     linker to retain these symbols, you may use them in debugging.

`NUMBER'
     This is the number that was used in the local label definition.
     So if the label is written `55:' then the number is `55'.

`Ctrl-B'
     This unusual character is included so you do not accidentally
     invent a symbol of the same name.  The character has ASCII value
     of `\002' (control-B).

`_ordinal number_'
     This is a serial number to keep the labels distinct.  The first
     definition of `0:' gets the number `1'.  The 15th definition of
     `0:' gets the number `15', and so on.  Likewise the first
     definition of `1:' gets the number `1' and its 15th definition
     gets `15' as well.

   So for example, the first `1:' may be named `.L1C-B1', and the 44th
`3:' may be named `.L3C-B44'.

Dollar Local Labels
-------------------

Unlike the GNU assembler, the LLVM integrated assembler does not support
dollar local labels.  These are even more local labels which go out of
scope (i.e., they become undefined) as soon as a non-local label is
defined.  They take the same format as ordinary local labels, except
that they have a dollar sign suffix to their numeric value, e.g.,
`55$:'.

   Assembler source code intended for the GNU assembler will need
modification if it contains such labels.


File: llvm-assembler.info,  Node: Dot,  Next: Symbol Attributes,  Prev: Symbol Names,  Up: Symbols

5.4 The Special Dot Symbol
==========================

The special symbol `.' refers to the current address that the LLVM
integrated assembler is assembling into.  Thus, the expression `melvin:
.long .' defines `melvin' to contain its own address.  Assigning a
value to `.' is treated the same as a `.org' directive.  Thus, the
expression `.=.+4' is the same as saying `.space 4'.


File: llvm-assembler.info,  Node: Symbol Attributes,  Prev: Dot,  Up: Symbols

5.5 Symbol Attributes
=====================

Every symbol has, as well as its name, the attributes "Value" and
"Type".  Depending on output format, symbols can also have auxiliary
attributes.

   If you use a symbol without defining it, the LLVM integrated
assembler assumes zero for all these attributes, and probably won't
warn you.  This makes the symbol an externally defined symbol, which is
generally what you would want.

* Menu:

* Symbol Value::                Value
* Symbol Type::                 Type


File: llvm-assembler.info,  Node: Symbol Value,  Next: Symbol Type,  Up: Symbol Attributes

5.5.1 Value
-----------

The value of a symbol is (usually) 32 bits.  For a symbol which labels a
location in the text, data, bss or absolute sections the value is the
number of addresses from the start of that section to the label.
Naturally for text, data and bss sections the value of a symbol changes
as the linker changes section base addresses during linking.  Absolute
symbols' values do not change during linking: that is why they are
called absolute.

   The value of an undefined symbol is treated in a special way.  If it
is 0 then the symbol is not defined in this assembler source file, and
the linker tries to determine its value from other files linked into the
same program.  You make this kind of symbol simply by mentioning a
symbol name without defining it.  A non-zero value represents a `.comm'
common declaration.  The value is how much common storage to reserve, in
bytes (addresses).  The symbol refers to the first address of the
allocated storage.


File: llvm-assembler.info,  Node: Symbol Type,  Prev: Symbol Value,  Up: Symbol Attributes

5.5.2 Type
----------

The type attribute of a symbol contains relocation (section)
information, any flag settings indicating that a symbol is external, and
(optionally), other information for linkers and debuggers.  The exact
format depends on the object-code output format in use.


File: llvm-assembler.info,  Node: Expressions,  Next: Pseudo Ops,  Prev: Symbols,  Up: Top

6 Expressions
*************

An "expression" specifies an address or numeric value.  Whitespace may
precede and/or follow an expression.

   The result of an expression must be an absolute number, or else an
offset into a particular section.  If an expression is not absolute,
and there is not enough information when the LLVM integrated assembler
sees the expression to know its section, a second pass over the source
program would be necessary to interpret the expression--but no second
pass is implemented, so the assembler aborts with an error message in
this situation.

* Menu:

* Empty Exprs::                 Empty Expressions
* Integer Exprs::               Integer Expressions


File: llvm-assembler.info,  Node: Empty Exprs,  Next: Integer Exprs,  Up: Expressions

6.1 Empty Expressions
=====================

An empty expression has no value: it is just whitespace or null.
Wherever an absolute expression is required, you may omit the
expression, and the LLVM integrated assembler assumes a value of
(absolute) 0.  This is compatible with other assemblers.


File: llvm-assembler.info,  Node: Integer Exprs,  Prev: Empty Exprs,  Up: Expressions

6.2 Integer Expressions
=======================

An "integer expression" is one or more _arguments_ delimited by
_operators_.

* Menu:

* Arguments::                   Arguments
* Operators::                   Operators
* Prefix Ops::                  Prefix Operators
* Infix Ops::                   Infix Operators


File: llvm-assembler.info,  Node: Arguments,  Next: Operators,  Up: Integer Exprs

6.2.1 Arguments
---------------

"Arguments" are symbols, numbers or subexpressions.  In other contexts
arguments are sometimes called "arithmetic operands".  In this manual,
to avoid confusing them with the "instruction operands" of the machine
language, we use the term "argument" to refer to parts of expressions
only, reserving the word "operand" to refer only to machine instruction
operands.

   Symbols are evaluated to yield {SECTION NNN} where SECTION is one of
text, data, bss, absolute, or undefined.  NNN is a signed, 2's
complement 32 bit integer.

   Numbers are usually integers.

   A number can be a flonum or bignum.  In this case, you are warned
that only the low order 32 bits are used, and the LLVM integrated
assembler pretends these 32 bits are an integer.  You may write
integer-manipulating instructions that act on exotic constants,
compatible with other assemblers.

   Subexpressions are a left parenthesis `(' followed by an integer
expression, followed by a right parenthesis `)'; or a prefix operator
followed by an argument.


File: llvm-assembler.info,  Node: Operators,  Next: Prefix Ops,  Prev: Arguments,  Up: Integer Exprs

6.2.2 Operators
---------------

"Operators" are arithmetic functions, like `+' or `%'.  Prefix
operators are followed by an argument.  Infix operators appear between
their arguments.  Operators may be preceded and/or followed by
whitespace.


File: llvm-assembler.info,  Node: Prefix Ops,  Next: Infix Ops,  Prev: Operators,  Up: Integer Exprs

6.2.3 Prefix Operator
---------------------

the LLVM integrated assembler has the following "prefix operators".
They each take one argument, which must be absolute.

`-'
     "Negation".  Two's complement negation.

`~'
     "Complementation".  Bitwise not.


File: llvm-assembler.info,  Node: Infix Ops,  Prev: Prefix Ops,  Up: Integer Exprs

6.2.4 Infix Operators
---------------------

"Infix operators" take two arguments, one on either side.  Operators
have precedence, but operations with equal precedence are performed left
to right.  Apart from `+' or `-', both arguments must be absolute, and
the result is absolute.

  1. Highest Precedence

    `*'
          "Multiplication".

    `/'
          "Division".  Truncation is the same as the C operator `/'

    `%'
          "Remainder".

    `<<'
          "Shift Left".  Same as the C operator `<<'.

    `>>'
          "Shift Right".  Same as the C operator `>>'.

  2. Intermediate precedence

    `|'
          "Bitwise Inclusive Or".

    `&'
          "Bitwise And".

    `^'
          "Bitwise Exclusive Or".

    `!'
          "Bitwise Or Not".

  3. Low Precedence

    `+'
          "Addition".  If either argument is absolute, the result has
          the section of the other argument.  You may not add together
          arguments from different sections.

    `-'
          "Subtraction".  If the right argument is absolute, the result
          has the section of the left argument.  If both arguments are
          in the same section, the result is absolute.  You may not
          subtract arguments from different sections.

    `=='
          "Is Equal To"

    `<>'
    `!='
          "Is Not Equal To"

    `<'
          "Is Less Than"

    `>'
          "Is Greater Than"

    `>='
          "Is Greater Than Or Equal To"

    `<='
          "Is Less Than Or Equal To"

          The comparison operators can be used as infix operators.  A
          true results has a value of -1 whereas a false result has a
          value of 0.   Note, these operators perform signed
          comparisons.

  4. Lowest Precedence

    `&&'
          "Logical And".

    `||'
          "Logical Or".

          These two logical operations can be used to combine the
          results of sub expressions.  Note, unlike the comparison
          operators a true result returns a value of 1 but a false
          results does still return 0.  Also note that the logical or
          operator has a slightly lower precedence than logical and.


   In short, it's only meaningful to add or subtract the _offsets_ in an
address; you can only have a defined section in one of the two
arguments.


File: llvm-assembler.info,  Node: Pseudo Ops,  Next: Object Attributes,  Prev: Expressions,  Up: Top

7 Assembler Directives
**********************

All assembler directives have names that begin with a period (`.').
The rest of the name is letters, usually in lower case.

   This chapter discusses directives that are available regardless of
the target machine configuration for the LLVM integrated assembler.
Some machine configurations provide additional directives.  *Note
Machine Dependencies::.

   _Note:_ While the LLVM integrated assembler strives for
compatibility with GNU assembler, not all GNU directives are supported.
Those which are unsupported are listed at the end of this chapter.
*Note Unsupported::.

* Menu:

* Abort::                       `.abort'
* Align::                       `.align ABS-EXPR , ABS-EXPR'
* Ascii::                       `.ascii "STRING"'...
* Asciz::                       `.asciz "STRING"'...
* Balign::                      `.balign ABS-EXPR , ABS-EXPR'
* Bundle directives::           `.bundle_align_mode ABS-EXPR', `.bundle_lock', `.bundle_unlock'
* Byte::                        `.byte EXPRESSIONS'
* CFI directives::		`.cfi_startproc [simple]', `.cfi_endproc', etc.
* Comm::                        `.comm SYMBOL , LENGTH '
* Data::                        `.data SUBSECTION'
* Double::                      `.double FLONUMS'
* Else::                        `.else'
* Elseif::                      `.elseif'
* End::				`.end'
* Endif::                       `.endif'
* Endm::                        `.endm'
* Endr::                        `.endr'
* Equ::                         `.equ SYMBOL, EXPRESSION'
* Equiv::                       `.equiv SYMBOL, EXPRESSION'
* Err::				`.err'
* Error::			`.error STRING'
* Exitm::			`.exitm'
* Extern::                      `.extern'
* File::                        `.file'
* Fill::                        `.fill REPEAT , SIZE , VALUE'
* Float::                       `.float FLONUMS'
* Global::                      `.global SYMBOL', `.globl SYMBOL'
* Hidden::                      `.hidden NAMES'
* Ident::                       `.ident'
* If::                          `.if ABSOLUTE EXPRESSION'
* Incbin::                      `.incbin "FILE"[,SKIP[,COUNT]]'
* Include::                     `.include "FILE"'
* Int::                         `.int EXPRESSIONS'
* Internal::                    `.internal NAMES'
* Irp::				`.irp SYMBOL,VALUES'...
* Irpc::			`.irpc SYMBOL,VALUES'...
* Lcomm::                       `.lcomm SYMBOL , LENGTH'
* Line::                        `.line LINE-NUMBER'
* Ln::                          `.ln LINE-NUMBER'
* Loc::                         `.loc FILENO LINENO'
* Local::                       `.local NAMES'
* Long::                        `.long EXPRESSIONS'
* Macro::			`.macro NAME ARGS'...
* Octa::                        `.octa BIGNUMS'
* Org::                         `.org NEW-LC, FILL'
* P2align::                     `.p2align ABS-EXPR, ABS-EXPR, ABS-EXPR'
* PopSection::                  `.popsection'
* Previous::                    `.previous'
* Protected::                   `.protected NAMES'
* Purgem::			`.purgem NAME'
* PushSection::                 `.pushsection NAME'

* Quad::                        `.quad BIGNUMS'
* Rept::			`.rept COUNT'
* Section::                     `.section NAME[, FLAGS]'
* Set::                         `.set SYMBOL, EXPRESSION'
* Short::                       `.short EXPRESSIONS'
* Single::                      `.single FLONUMS'
* Size::                        `.size [NAME , EXPRESSION]'
* Skip::                        `.skip SIZE , FILL'
* Sleb128::			`.sleb128 EXPRESSIONS'
* Space::                       `.space SIZE , FILL'
* String::                      `.string "STR"'
* SubSection::                  `.subsection'
* Symver::                      `.symver NAME,NAME2@NODENAME'
* Text::                        `.text SUBSECTION'
* Type::                        `.type <INT | NAME , TYPE DESCRIPTION>'
* Uleb128::                     `.uleb128 EXPRESSIONS'
* Version::                     `.version "STRING"'
* Warning::			`.warning STRING'
* Weak::                        `.weak NAMES'
* Weakref::                     `.weakref ALIAS, SYMBOL'
* Deprecated::                  Deprecated Directives
* Unsupported::                 Unsupported GNU Assembler Directives


File: llvm-assembler.info,  Node: Abort,  Next: Align,  Up: Pseudo Ops

7.1 `.abort'
============

This directive stops the assembly immediately.  It is for compatibility
with other assemblers.  The original idea was that the assembly
language source would be piped into the assembler.  If the sender of
the source quit, it could use this directive to tell the LLVM
integrated assembler to quit also.

   _Note:_ This directive is deprecated.  One day `.abort' will not be
supported.


File: llvm-assembler.info,  Node: Align,  Next: Ascii,  Prev: Abort,  Up: Pseudo Ops

7.2 `.align ABS-EXPR, ABS-EXPR, ABS-EXPR'
=========================================

Pad the location counter (in the current subsection) to a particular
storage boundary.  The first expression (which must be absolute) is the
alignment required, as described below.

   The second expression (also absolute) gives the fill value to be
stored in the padding bytes.  It (and the comma) may be omitted.  If it
is omitted, the padding bytes are normally zero.  However, on some
systems, if the section is marked as containing code and the fill value
is omitted, the space is filled with no-op instructions.

   The third expression is also absolute, and is also optional.  If it
is present, it is the maximum number of bytes that should be skipped by
this alignment directive.  If doing the alignment would require
skipping more bytes than the specified maximum, then the alignment is
not done at all.  You can omit the fill value (the second argument)
entirely by simply using two commas after the required alignment; this
can be useful if you want the alignment to be filled with no-op
instructions when appropriate.

   The way the required alignment is specified is target specific.
Commonly it is the byte boundary on which to align. Very occasionaly
the word boundary on which to align. On other systems, it is the number
of low-order zero bits the location counter must have after
advancement.  So for example `.align 3' advances the location counter
until it a multiple of 8.  If the location counter is already a
multiple of 8, no change is needed.

   This inconsistency is due to the different behaviors of the various
native assemblers for these systems which the LLVM integrated assembler
aims to emulate. The LLVM integrated assembler also provides `.balign'
and `.p2align' directives, described later, which have a consistent
behavior across all architectures (but are specific to the LLVM
integrated assembler and GNU assembler).


File: llvm-assembler.info,  Node: Ascii,  Next: Asciz,  Prev: Align,  Up: Pseudo Ops

7.3 `.ascii "STRING"'...
========================

`.ascii' expects zero or more string literals (*note Strings::)
separated by commas.  It assembles each string (with no automatic
trailing zero byte) into consecutive addresses.


File: llvm-assembler.info,  Node: Asciz,  Next: Balign,  Prev: Ascii,  Up: Pseudo Ops

7.4 `.asciz "STRING"'...
========================

`.asciz' is just like `.ascii', but each string is followed by a zero
byte.  The "z" in `.asciz' stands for "zero".


File: llvm-assembler.info,  Node: Balign,  Next: Bundle directives,  Prev: Asciz,  Up: Pseudo Ops

7.5 `.balign[wl] ABS-EXPR, ABS-EXPR, ABS-EXPR'
==============================================

Pad the location counter (in the current subsection) to a particular
storage boundary.  The first expression (which must be absolute) is the
alignment request in bytes and must be a power of 2.  For example
`.balign 8' advances the location counter until it is a multiple of 8.
If the location counter is already a multiple of 8, no change is needed.

   The second expression (also absolute) gives the fill value to be
stored in the padding bytes.  It (and the comma) may be omitted.  If it
is omitted, the padding bytes are normally zero.  However, on some
systems, if the section is marked as containing code and the fill value
is omitted, the space is filled with no-op instructions.

   The third expression is also absolute, and is also optional.  If it
is present, it is the maximum number of bytes that should be skipped by
this alignment directive.  If doing the alignment would require
skipping more bytes than the specified maximum, then the alignment is
not done at all.  You can omit the fill value (the second argument)
entirely by simply using two commas after the required alignment; this
can be useful if you want the alignment to be filled with no-op
instructions when appropriate.

   The `.balignw' and `.balignl' directives are variants of the
`.balign' directive.  The `.balignw' directive treats the fill pattern
as a two byte word value.  The `.balignl' directives treats the fill
pattern as a four byte longword value.  For example, `.balignw
4,0x368d' will align to a multiple of 4.  If it skips two bytes, they
will be filled in with the value 0x368d (the exact placement of the
bytes depends upon the endianness of the processor).  If it skips 1 or
3 bytes, the fill value is undefined.


File: llvm-assembler.info,  Node: Bundle directives,  Next: Byte,  Prev: Balign,  Up: Pseudo Ops

7.6 `.bundle_align_mode ABS-EXPR'
=================================

`.bundle_align_mode' enables or disables "aligned instruction bundle"
mode.  In this mode, sequences of adjacent instructions are grouped
into fixed-sized "bundles".  If the argument is zero, this mode is
disabled (which is the default state).  If the argument it not zero, it
gives the size of an instruction bundle as a power of two (as for the
`.p2align' directive, *note P2align::).

   For some targets, it's an ABI requirement that no instruction may
span a certain aligned boundary.  A "bundle" is simply a sequence of
instructions that starts on an aligned boundary.  For example, if
ABS-EXPR is `5' then the bundle size is 32, so each aligned chunk of 32
bytes is a bundle.  When aligned instruction bundle mode is in effect,
no single instruction may span a boundary between bundles.  If an
instruction would start too close to the end of a bundle for the length
of that particular instruction to fit within the bundle, then the space
at the end of that bundle is filled with no-op instructions so the
instruction starts in the next bundle.  As a corollary, it's an error
if any single instruction's encoding is longer than the bundle size.

7.7 `.bundle_lock' and `.bundle_unlock'
=======================================

The `.bundle_lock' and directive `.bundle_unlock' directives allow
explicit control over instruction bundle padding.  These directives are
only valid when `.bundle_align_mode' has been used to enable aligned
instruction bundle mode.  It's an error if they appear when
`.bundle_align_mode' has not been used at all, or when the last
directive was `.bundle_align_mode 0'.

   For some targets, it's an ABI requirement that certain instructions
may appear only as part of specified permissible sequences of multiple
instructions, all within the same bundle.  A pair of `.bundle_lock' and
`.bundle_unlock' directives define a "bundle-locked" instruction
sequence.  For purposes of aligned instruction bundle mode, a sequence
starting with `.bundle_lock' and ending with `.bundle_unlock' is
treated as a single instruction.  That is, the entire sequence must fit
into a single bundle and may not span a bundle boundary.  If necessary,
no-op instructions will be inserted before the first instruction of the
sequence so that the whole sequence starts on an aligned bundle
boundary.  It's an error if the sequence is longer than the bundle size.

   For convenience when using `.bundle_lock' and `.bundle_unlock'
inside assembler macros (*note Macro::), bundle-locked sequences may be
nested.  That is, a second `.bundle_lock' directive before the next
`.bundle_unlock' directive has no effect except that it must be matched
by another closing `.bundle_unlock' so that there is the same number of
`.bundle_lock' and `.bundle_unlock' directives.


File: llvm-assembler.info,  Node: Byte,  Next: CFI directives,  Prev: Bundle directives,  Up: Pseudo Ops

7.8 `.byte EXPRESSIONS'
=======================

`.byte' expects zero or more expressions, separated by commas.  Each
expression is assembled into the next byte.


File: llvm-assembler.info,  Node: CFI directives,  Next: Comm,  Prev: Byte,  Up: Pseudo Ops

7.9 `.cfi_sections SECTION_LIST'
================================

`.cfi_sections' may be used to specify whether CFI directives should
emit `.eh_frame' section and/or `.debug_frame' section.  If
SECTION_LIST is `.eh_frame', `.eh_frame' is emitted, if SECTION_LIST is
`.debug_frame', `.debug_frame' is emitted.  To emit both use
`.eh_frame, .debug_frame'.  The default if this directive is not used
is `.cfi_sections .eh_frame'.

7.10 `.cfi_startproc [simple]'
==============================

`.cfi_startproc' is used at the beginning of each function that should
have an entry in `.eh_frame'. It initializes some internal data
structures. Don't forget to close the function by `.cfi_endproc'.

   Unless `.cfi_startproc' is used along with parameter `simple' it
also emits some architecture dependent initial CFI instructions.

7.11 `.cfi_endproc'
===================

`.cfi_endproc' is used at the end of a function where it closes its
unwind entry previously opened by `.cfi_startproc', and emits it to
`.eh_frame'.

7.12 `.cfi_personality ENCODING [, EXP]'
========================================

`.cfi_personality' defines personality routine and its encoding.
ENCODING must be a constant determining how the personality should be
encoded.  If it is 255 (`DW_EH_PE_omit'), the second argument should not
be present, otherwise the second argument should be a symbol name
(unlike the GNU assembler, a constant is not permitted).  When using
indirect encodings, the symbol provided should be the location where
personality can be loaded from, not the personality routine itself.
The default after `.cfi_startproc' is `.cfi_personality 0xff', no
personality routine.

7.13 `.cfi_lsda ENCODING [, EXP]'
=================================

`.cfi_lsda' defines LSDA and its encoding.  ENCODING must be a constant
determining how the LSDA should be encoded.  If it is 255
(`DW_EH_PE_omit'), the second argument should not be present, otherwise
the second argument should be a symbol name (unlike the GNU assembler, a
constant is not permitted).  The default after `.cfi_startproc' is
`.cfi_lsda 0xff', no LSDA.

7.14 `.cfi_def_cfa REGISTER, OFFSET'
====================================

`.cfi_def_cfa' defines a rule for computing CFA as: _take address from
REGISTER and add OFFSET to it_.

7.15 `.cfi_def_cfa_register REGISTER'
=====================================

`.cfi_def_cfa_register' modifies a rule for computing CFA. From now on
REGISTER will be used instead of the old one. Offset remains the same.

7.16 `.cfi_def_cfa_offset OFFSET'
=================================

`.cfi_def_cfa_offset' modifies a rule for computing CFA. Register
remains the same, but OFFSET is new. Note that it is the absolute
offset that will be added to a defined register to compute CFA address.

7.17 `.cfi_adjust_cfa_offset OFFSET'
====================================

Same as `.cfi_def_cfa_offset' but OFFSET is a relative value that is
added/substracted from the previous offset.

7.18 `.cfi_offset REGISTER, OFFSET'
===================================

Previous value of REGISTER is saved at offset OFFSET from CFA.

7.19 `.cfi_rel_offset REGISTER, OFFSET'
=======================================

Previous value of REGISTER is saved at offset OFFSET from the current
CFA register.  This is transformed to `.cfi_offset' using the known
displacement of the CFA register from the CFA.  This is often easier to
use, because the number will match the code it's annotating.

7.20 `.cfi_register REGISTER1, REGISTER2'
=========================================

Previous value of REGISTER1 is saved in register REGISTER2.

7.21 `.cfi_restore REGISTER'
============================

`.cfi_restore' says that the rule for REGISTER is now the same as it
was at the beginning of the function, after all initial instruction
added by `.cfi_startproc' were executed.

7.22 `.cfi_undefined REGISTER'
==============================

From now on the previous value of REGISTER can't be restored anymore.

7.23 `.cfi_same_value REGISTER'
===============================

Current value of REGISTER is the same as in the previous frame, i.e. no
restoration needed.

7.24 `.cfi_remember_state' and `.cfi_restore_state',
====================================================

Use `.cfi_remember_state' to save all current rules for all registers.
If you then totally screw them up by subsequent `.cfi_*' directives you
can use `.cfi_restore_state' to restore the previous saved state.

7.25 `.cfi_signal_frame'
========================

Mark current function as signal handler.

7.26 `.cfi_window_save'
=======================

Save a complete register window.  This directive is generically
recognized, but its function, if any, is unclear, since few
architectures now support register windows.  SPARC is an example of
such an architecture.

7.27 `.cfi_escape' EXPRESSION[, ...]
====================================

Allows the user to add arbitrary bytes to the unwind info.  One might
use this to add OS-specific CFI opcodes, or generic CFI opcodes that
the LLVM integrated assembler does not yet support.


File: llvm-assembler.info,  Node: Comm,  Next: Data,  Prev: CFI directives,  Up: Pseudo Ops

7.28 `.comm SYMBOL, LENGTH [, ALIGNMENT]'
=========================================

`.comm' declares a common symbol named SYMBOL.  When linking, a common
symbol in one object file may be merged with a defined or common symbol
of the same name in another object file.  If the linker does not see a
definition for the symbol-just one or more common symbols-then it will
allocate LENGTH bytes of uninitialized memory.  LENGTH must be an
absolute expression.  If the linker sees multiple common symbols with
the same name, and they do not all have the same size, it will allocate
space using the largest size.

   The `.comm' directive takes an optional third argument.  This is the
desired alignment of the symbol, specified as a byte boundary (for
example, an alignment of 16 means that the least significant 4 bits of
the address should be zero).  The alignment must be an absolute
expression, and it must be a power of two.  If the linker allocates
uninitialized memory for the common symbol, it will use the alignment
when placing the symbol.  If no alignment is specified, the LLVM
integrated assembler will set the alignment to the largest power of two
less than or equal to the size of the symbol, up to a maximum of 16.


File: llvm-assembler.info,  Node: Data,  Next: Double,  Prev: Comm,  Up: Pseudo Ops

7.29 `.data SUBSECTION'
=======================

`.data' tells the LLVM integrated assembler to assemble the following
statements onto the end of the data subsection numbered SUBSECTION
(which is an absolute expression).  If SUBSECTION is omitted, it
defaults to zero.


File: llvm-assembler.info,  Node: Double,  Next: Else,  Prev: Data,  Up: Pseudo Ops

7.30 `.double FLONUMS'
======================

`.double' expects zero or more flonums, separated by commas.  It
assembles floating point numbers.  The exact kind of floating point
numbers emitted depends on how the LLVM integrated assembler is
configured.  *Note Machine Dependencies::.


File: llvm-assembler.info,  Node: Else,  Next: Elseif,  Prev: Double,  Up: Pseudo Ops

7.31 `.else'
============

`.else' is part of the the LLVM integrated assembler support for
conditional assembly; see *note `.if': If.  It marks the beginning of a
section of code to be assembled if the condition for the preceding `.if'
was false.


File: llvm-assembler.info,  Node: Elseif,  Next: End,  Prev: Else,  Up: Pseudo Ops

7.32 `.elseif'
==============

`.elseif' is part of the the LLVM integrated assembler support for
conditional assembly; see *note `.if': If.  It is shorthand for
beginning a new `.if' block that would otherwise fill the entire `.else'
section.


File: llvm-assembler.info,  Node: End,  Next: Endif,  Prev: Elseif,  Up: Pseudo Ops

7.33 `.end'
===========

`.end' marks the end of the assembly file.  The LLVM integrated
assembler does not process anything in the file past the `.end'
directive.


File: llvm-assembler.info,  Node: Endif,  Next: Endm,  Prev: End,  Up: Pseudo Ops

7.34 `.endif'
=============

`.endif' is part of the the LLVM integrated assembler support for
conditional assembly; it marks the end of a block of code that is only
assembled conditionally.  *Note `.if': If.


File: llvm-assembler.info,  Node: Endm,  Next: Endr,  Prev: Endif,  Up: Pseudo Ops

7.35 `.endm'
============

End the current macro definition.  *Note Macro::.


File: llvm-assembler.info,  Node: Endr,  Next: Equ,  Prev: Endm,  Up: Pseudo Ops

7.36 `.endr'
============

End the current `.irp', `.irpc' or `.rept' definition.  *Note Irp::.
*Note Irpc::.  *Note Rept::.


File: llvm-assembler.info,  Node: Equ,  Next: Equiv,  Prev: Endr,  Up: Pseudo Ops

7.37 `.equ SYMBOL, EXPRESSION'
==============================

This directive sets the value of SYMBOL to EXPRESSION.  It is
synonymous with `.set'. *Note `.set': Set.


File: llvm-assembler.info,  Node: Equiv,  Next: Err,  Prev: Equ,  Up: Pseudo Ops

7.38 `.equiv SYMBOL, EXPRESSION'
================================

The `.equiv' directive is like `.equ' and `.set', except that the
assembler will signal an error if SYMBOL is already defined.  Note a
symbol which has been referenced but not actually defined is considered
to be undefined.

   Except for the contents of the error message, this is roughly
equivalent to
     .ifdef SYM
     .err
     .endif
     .equ SYM,VAL
   plus it protects the symbol from later redefinition.


File: llvm-assembler.info,  Node: Err,  Next: Error,  Prev: Equiv,  Up: Pseudo Ops

7.39 `.err'
===========

If the LLVM integrated assembler assembles a `.err' directive, it will
print an error message and, unless the `-Z' option was used, it will not
generate an object file.  This can be used to signal an error in
conditionally compiled code.


File: llvm-assembler.info,  Node: Error,  Next: Exitm,  Prev: Err,  Up: Pseudo Ops

7.40 `.error "STRING"'
======================

Similarly to `.err', this directive emits an error, but you can specify
a string that will be emitted as the error message.  If you don't
specify the message, it defaults to `".error directive invoked in
source file"'.  *Note Error and Warning Messages: Errors.

      .error "This code has not been assembled and tested."


File: llvm-assembler.info,  Node: Exitm,  Next: Extern,  Prev: Error,  Up: Pseudo Ops

7.41 `.exitm'
=============

Exit early from the current macro definition.  *Note Macro::.


File: llvm-assembler.info,  Node: Extern,  Next: File,  Prev: Exitm,  Up: Pseudo Ops

7.42 `.extern'
==============

`.extern' is accepted in the source program--for compatibility with
other assemblers--but it is ignored.  the LLVM integrated assembler
treats all undefined symbols as external.


File: llvm-assembler.info,  Node: File,  Next: Fill,  Prev: Extern,  Up: Pseudo Ops

7.43 `.file'
============

When emitting DWARF2 line number information, `.file' assigns filenames
to the `.debug_line' file name table.  The syntax is:

     .file FILENO FILENAME

   The FILENO operand should be a unique positive integer to use as the
index of the entry in the table.  The FILENAME operand is a C string
literal.

   The detail of filename indices is exposed to the user because the
filename table is shared with the `.debug_info' section of the DWARF2
debugging information, and thus the user must know the exact indices
that table entries will have.


File: llvm-assembler.info,  Node: Fill,  Next: Float,  Prev: File,  Up: Pseudo Ops

7.44 `.fill REPEAT , SIZE , VALUE'
==================================

REPEAT, SIZE and VALUE are absolute expressions.  This emits REPEAT
copies of SIZE bytes.  REPEAT may be zero or more.  SIZE may be zero or
more, but if it is more than 8, then it is deemed to have the value 8,
compatible with other people's assemblers.  The contents of each REPEAT
bytes is taken from an 8-byte number.  The highest order 4 bytes are
zero.  The lowest order 4 bytes are VALUE rendered in the byte-order of
an integer on the computer the LLVM integrated assembler is assembling
for.  Each SIZE bytes in a repetition is taken from the lowest order
SIZE bytes of this number.  Again, this bizarre behavior is compatible
with other people's assemblers.

   SIZE and VALUE are optional.  If the second comma and VALUE are
absent, VALUE is assumed zero.  If the first comma and following tokens
are absent, SIZE is assumed to be 1.


File: llvm-assembler.info,  Node: Float,  Next: Global,  Prev: Fill,  Up: Pseudo Ops

7.45 `.float FLONUMS'
=====================

This directive assembles zero or more flonums, separated by commas.  It
has the same effect as `.single'.  The exact kind of floating point
numbers emitted depends on how the LLVM integrated assembler is
configured.  *Note Machine Dependencies::.


File: llvm-assembler.info,  Node: Global,  Next: Hidden,  Prev: Float,  Up: Pseudo Ops

7.46 `.global SYMBOL', `.globl SYMBOL'
======================================

`.global' makes the symbol visible to the linker.  If you define SYMBOL
in your partial program, its value is made available to other partial
programs that are linked with it.  Otherwise, SYMBOL takes its
attributes from a symbol of the same name from another file linked into
the same program.

   Both spellings (`.globl' and `.global') are accepted, for
compatibility with other assemblers.


File: llvm-assembler.info,  Node: Hidden,  Next: Ident,  Prev: Global,  Up: Pseudo Ops

7.47 `.hidden NAMES'
====================

This is one of the ELF visibility directives.  The other two are
`.internal' (*note `.internal': Internal.) and `.protected' (*note
`.protected': Protected.).

   This directive overrides the named symbols default visibility (which
is set by their binding: local, global or weak).  The directive sets
the visibility to `hidden' which means that the symbols are not visible
to other components.  Such symbols are always considered to be
`protected' as well.


File: llvm-assembler.info,  Node: Ident,  Next: If,  Prev: Hidden,  Up: Pseudo Ops

7.48 `.ident' STRING
====================

The STRING argument is treated as a comment and emitted to the
`.comment' section.


File: llvm-assembler.info,  Node: If,  Next: Incbin,  Prev: Ident,  Up: Pseudo Ops

7.49 `.if ABSOLUTE EXPRESSION' and Variants
===========================================

`.if' marks the beginning of a section of code which is only considered
part of the source program being assembled if the argument (which must
be an ABSOLUTE EXPRESSION) is non-zero.  The end of the conditional
section of code must be marked by `.endif' (*note `.endif': Endif.);
optionally, you may include code for the alternative condition, flagged
by `.else' (*note `.else': Else.).  If you have several conditions to
check, `.elseif' may be used to avoid nesting blocks if/else within
each subsequent `.else' block.

   The following variants of `.if' are also supported:
`.ifdef SYMBOL'
     Assembles the following section of code if the specified SYMBOL
     has been defined.  Note a symbol which has been referenced but not
     yet defined is considered to be undefined.

`.ifb TEXT'
     Assembles the following section of code if the operand is blank
     (empty).

`.ifc STRING1,STRING2'
     Assembles the following section of code if the two strings are the
     same.  The strings may be optionally _both_ quoted with double
     quotes.  If they are not quoted, the first string stops at the
     first comma, and the second string stops at the end of the line.
     Strings which contain whitespace should be quoted.  The string
     comparison is case sensitive.

     _Note:_  Unlike the GNU assembler, which uses single quotes, the
     LLVM integrated assembler requires double quotes.

`.ifeq ABSOLUTE EXPRESSION'
     Assembles the following section of code if the argument is zero.

`.ifeqs STRING1,STRING2'
     Another form of `.ifc'.  The strings must be quoted using double
     quotes.

`.ifge ABSOLUTE EXPRESSION'
     Assembles the following section of code if the argument is greater
     than or equal to zero.

`.ifgt ABSOLUTE EXPRESSION'
     Assembles the following section of code if the argument is greater
     than zero.

`.ifle ABSOLUTE EXPRESSION'
     Assembles the following section of code if the argument is less
     than or equal to zero.

`.iflt ABSOLUTE EXPRESSION'
     Assembles the following section of code if the argument is less
     than zero.

`.ifnb TEXT'
     Like `.ifb', but the sense of the test is reversed: this assembles
     the following section of code if the operand is non-blank
     (non-empty).

`.ifnc STRING1,STRING2.'
     Like `.ifc', but the sense of the test is reversed: this assembles
     the following section of code if the two strings are not the same.

`.ifndef SYMBOL'
`.ifnotdef SYMBOL'
     Assembles the following section of code if the specified SYMBOL
     has not been defined.  Both spelling variants are equivalent.
     Note a symbol which has been referenced but not yet defined is
     considered to be undefined.

`.ifne ABSOLUTE EXPRESSION'
     Assembles the following section of code if the argument is not
     equal to zero (in other words, this is equivalent to `.if').

`.ifnes STRING1,STRING2'
     Like `.ifeqs', but the sense of the test is reversed: this
     assembles the following section of code if the two strings are not
     the same.


File: llvm-assembler.info,  Node: Incbin,  Next: Include,  Prev: If,  Up: Pseudo Ops

7.50 `.incbin "FILE"'
=====================

The `incbin' directive includes FILE verbatim at the current location.
You can control the search paths used with the `-I' command-line option
(*note Command-Line Options: Invoking.).  Quotation marks are required
around FILE.

   _Note:_ Unlike the GNU assember, the LLVM integrated assembler does
not have optional second and third arguments to skip bytes from the
start of the file, or to specify a maximum number of bytes.


File: llvm-assembler.info,  Node: Include,  Next: Int,  Prev: Incbin,  Up: Pseudo Ops

7.51 `.include "FILE"'
======================

This directive provides a way to include supporting files at specified
points in your source program.  The code from FILE is assembled as if
it followed the point of the `.include'; when the end of the included
file is reached, assembly of the original file continues.  You can
control the search paths used with the `-I' command-line option (*note
Command-Line Options: Invoking.).  Quotation marks are required around
FILE.


File: llvm-assembler.info,  Node: Int,  Next: Internal,  Prev: Include,  Up: Pseudo Ops

7.52 `.int EXPRESSIONS'
=======================

Expect zero or more EXPRESSIONS, of any section, separated by commas.
For each expression, emit a number that, at run time, is the value of
that expression.  The byte order and bit size of the number is target
dependent.  *Note Machine Dependencies::.


File: llvm-assembler.info,  Node: Internal,  Next: Irp,  Prev: Int,  Up: Pseudo Ops

7.53 `.internal NAMES'
======================

This is one of the ELF visibility directives.  The other two are
`.hidden' (*note `.hidden': Hidden.) and `.protected' (*note
`.protected': Protected.).

   This directive overrides the named symbols default visibility (which
is set by their binding: local, global or weak).  The directive sets
the visibility to `internal' which means that the symbols are
considered to be `hidden' (i.e., not visible to other components), and
that some extra, processor specific processing must also be performed
upon the symbols as well.


File: llvm-assembler.info,  Node: Irp,  Next: Irpc,  Prev: Internal,  Up: Pseudo Ops

7.54 `.irp SYMBOL,VALUES'...
============================

Evaluate a sequence of statements assigning different values to SYMBOL.
The sequence of statements starts at the `.irp' directive, and is
terminated by an `.endr' directive.  For each VALUE, SYMBOL is set to
VALUE, and the sequence of statements is assembled.  If no VALUE is
listed, the sequence of statements is assembled once, with SYMBOL set
to the null string.  To refer to SYMBOL within the sequence of
statements, use \SYMBOL.

   For example, assembling

             .irp    param,1,2,3
             move    d\param,sp@-
             .endr

   is equivalent to assembling

             move    d1,sp@-
             move    d2,sp@-
             move    d3,sp@-

   For some caveats with the spelling of SYMBOL, see also *note Macro::.


File: llvm-assembler.info,  Node: Irpc,  Next: Lcomm,  Prev: Irp,  Up: Pseudo Ops

7.55 `.irpc SYMBOL,VALUES'...
=============================

Evaluate a sequence of statements assigning different values to SYMBOL.
The sequence of statements starts at the `.irpc' directive, and is
terminated by an `.endr' directive.  For each character in VALUE,
SYMBOL is set to the character, and the sequence of statements is
assembled.  If no VALUE is listed, the sequence of statements is
assembled once, with SYMBOL set to the null string.  To refer to SYMBOL
within the sequence of statements, use \SYMBOL.

   For example, assembling

             .irpc    param,123
             move    d\param,sp@-
             .endr

   is equivalent to assembling

             move    d1,sp@-
             move    d2,sp@-
             move    d3,sp@-

   For some caveats with the spelling of SYMBOL, see also the discussion
at *Note Macro::.


File: llvm-assembler.info,  Node: Lcomm,  Next: Line,  Prev: Irpc,  Up: Pseudo Ops

7.56 `.lcomm SYMBOL , LENGTH'
=============================

Reserve LENGTH (an absolute expression) bytes for a local common
denoted by SYMBOL.  The section and value of SYMBOL are those of the
new local common.  The addresses are allocated in the bss section, so
that at run-time the bytes start off zeroed.  SYMBOL is not declared
global (*note `.global': Global.), so is normally not visible to the
linker.

   Some targets permit a third argument to be used with `.lcomm'.  This
argument specifies the desired alignment of the symbol in the bss
section.


File: llvm-assembler.info,  Node: Line,  Next: Ln,  Prev: Lcomm,  Up: Pseudo Ops

7.57 `.line LINE-NUMBER'
========================

Even though this is a directive associated with the `a.out' or `b.out'
object-code formats, the LLVM integrated assembler still recognizes it
when producing ELF output.

   _Note:_ This directive is deprecated.  One day `.line' will not be
supported.  Use the `.ln' directive instead.  *Note Ln::.


File: llvm-assembler.info,  Node: Ln,  Next: Loc,  Prev: Line,  Up: Pseudo Ops

7.58 `.ln LINE-NUMBER'
======================

`.ln' is a synonym for the deprecated `.line' directive, and should be
used in preference.

   Tell the LLVM integrated assembler to change the logical line number.
LINE-NUMBER must be an absolute expression.  The next line has that
logical line number, so any other statements on the current line (after
a statement separator character such as `;') are reported as on logical
line number LINE-NUMBER - 1.


File: llvm-assembler.info,  Node: Loc,  Next: Local,  Prev: Ln,  Up: Pseudo Ops

7.59 `.loc FILENO LINENO [COLUMN] [OPTIONS]'
============================================

When emitting DWARF2 line number information, the `.loc' directive will
add a row to the `.debug_line' line number matrix corresponding to the
immediately following assembly instruction.  The FILENO, LINENO, and
optional COLUMN arguments will be applied to the `.debug_line' state
machine before the row is added.

   The OPTIONS are a sequence of the following tokens in any order:

`basic_block'
     This option will set the `basic_block' register in the
     `.debug_line' state machine to `true'.

`prologue_end'
     This option will set the `prologue_end' register in the
     `.debug_line' state machine to `true'.

`epilogue_begin'
     This option will set the `epilogue_begin' register in the
     `.debug_line' state machine to `true'.

`is_stmt VALUE'
     This option will set the `is_stmt' register in the `.debug_line'
     state machine to `value', which must be either 0 or 1.

`isa VALUE'
     This directive will set the `isa' register in the `.debug_line'
     state machine to VALUE, which must be an unsigned integer.

`discriminator VALUE'
     This directive will set the `discriminator' register in the
     `.debug_line' state machine to VALUE, which must be an unsigned
     integer.



File: llvm-assembler.info,  Node: Local,  Next: Long,  Prev: Loc,  Up: Pseudo Ops

7.60 `.local NAMES'
===================

This directive, which is available for ELF targets, marks each symbol in
the comma-separated list of `names' as a local symbol so that it will
not be externally visible.  If the symbols do not already exist, they
will be created.

   For targets where the `.lcomm' directive (*note Lcomm::) does not
accept an alignment argument, which is the case for most ELF targets,
the `.local' directive can be used in combination with `.comm' (*note
Comm::) to define aligned local common data.


File: llvm-assembler.info,  Node: Long,  Next: Macro,  Prev: Local,  Up: Pseudo Ops

7.61 `.long EXPRESSIONS'
========================

`.long' is the same as `.int'.  *Note `.int': Int.


File: llvm-assembler.info,  Node: Macro,  Next: Octa,  Prev: Long,  Up: Pseudo Ops

7.62 `.macro' and associated directives
=======================================

The commands `.macro' and `.endm' allow you to define macros that
generate assembly output.  For example, this definition specifies a
macro `sum' that puts a sequence of numbers into memory:

             .macro  sum from=0, to=5
             .long   \from
             .if     \to-\from
             sum     "(\from+1)",\to
             .endif
             .endm

With that definition, `SUM 0,5' is equivalent to this assembly input:

             .long   0
             .long   1
             .long   2
             .long   3
             .long   4
             .long   5

`.macro MACNAME'
`.macro MACNAME MACARGS ...'
     Begin the definition of a macro called MACNAME.  If your macro
     definition requires arguments, specify their names after the macro
     name, separated by commas or spaces.  You can qualify the macro
     argument to indicate whether all invocations must specify a
     non-blank value (through `:`req''), or whether it takes all of the
     remaining arguments (through `:`vararg'').  You can supply a
     default value for any macro argument by following the name with
     `=DEFLT'.  You cannot define two macros with the same MACNAME
     unless it has been subject to the `.purgem' directive (*note
     Purgem::) between the two definitions.  For example, these are all
     valid `.macro' statements:

    `.macro comm'
          Begin the definition of a macro called `comm', which takes no
          arguments.

    `.macro plus1 p, p1'
    `.macro plus1 p p1'
          Either statement begins the definition of a macro called
          `plus1', which takes two arguments; within the macro
          definition, write `\p' or `\p1' to evaluate the arguments.

    `.macro reserve_str p1=0 p2'
          Begin the definition of a macro called `reserve_str', with two
          arguments.  The first argument has a default value, but not
          the second.  After the definition is complete, you can call
          the macro either as `reserve_str A,B' (with `\p1' evaluating
          to A and `\p2' evaluating to B), or as `reserve_str ,B' (with
          `\p1' evaluating as the default, in this case `0', and `\p2'
          evaluating to B).

    `.macro m p1:req, p2=0, p3:vararg'
          Begin the definition of a macro called `m', with at least
          three arguments.  The first argument must always have a value
          specified, but not the second, which instead has a default
          value. The third formal will get assigned all remaining
          arguments specified at invocation time.

          When you call a macro, you can specify the argument values
          either by position, or by keyword.  For example, `sum 9,17'
          is equivalent to `sum to=17, from=9'.


     Note that since each of the MACARGS can be an identifier exactly
     as any other one permitted by the target architecture, there may be
     occasional problems if the target hand-crafts special meanings to
     certain characters when they occur in a special position.  For
     example, if the colon (`:') is generally permitted to be part of a
     symbol name, but the architecture specific code special-cases it
     when occurring as the final character of a symbol (to denote a
     label), then the macro parameter replacement code will have no way
     of knowing that and consider the whole construct (including the
     colon) an identifier, and check only this identifier for being the
     subject to parameter substitution.  So for example this macro
     definition:

          	.macro label l
          \l:
          	.endm

     might not work as expected.  Invoking `label foo' might not create
     a label called `foo' but instead just insert the text `\l:' into
     the assembler source, probably generating an error about an
     unrecognised identifier.

     Similarly problems might occur with the period character (`.')
     which is often allowed inside opcode names (and hence identifier
     names).  So for example constructing a macro to build an opcode
     from a base name and a length specifier like this:

          	.macro opcode base length
                  \base.\length
          	.endm

     and invoking it as `opcode store l' will not create a `store.l'
     instruction but instead generate some kind of error as the
     assembler tries to interpret the text `\base.\length'.

     There are several possible ways around this problem:

    `Insert white space'
          If it is possible to use white space characters then this is
          the simplest solution.  eg:

               	.macro label l
               \l :
               	.endm

    `Use `\()''
          The string `\()' can be used to separate the end of a macro
          argument from the following text.  eg:

               	.macro opcode base length
                       \base\().\length
               	.endm

    `Use the alternate macro syntax mode'
          In the alternative macro syntax mode the ampersand character
          (`&') can be used as a separator.  eg:

               	.altmacro
               	.macro label l
               l&:
               	.endm

     Note: this problem of correctly identifying string parameters to
     pseudo ops also applies to the identifiers used in `.irp' (*note
     Irp::) and `.irpc' (*note Irpc::) as well.

`.endm'
     Mark the end of a macro definition.

`.exitm'
     Exit early from the current macro definition.

`\@'
     the LLVM integrated assembler maintains a counter of how many
     macros it has executed in this pseudo-variable; you can copy that
     number to your output with `\@', but _only within a macro
     definition_.



File: llvm-assembler.info,  Node: Octa,  Next: Org,  Prev: Macro,  Up: Pseudo Ops

7.63 `.octa BIGNUMS'
====================

This directive expects zero or more bignums, separated by commas.  For
each bignum, it emits a 16-byte integer.

   The term "octa" comes from contexts in which a "word" is two bytes;
hence _octa_-word for 16 bytes.


File: llvm-assembler.info,  Node: Org,  Next: P2align,  Prev: Octa,  Up: Pseudo Ops

7.64 `.org NEW-LC , FILL'
=========================

Advance the location counter of the current section to NEW-LC.  NEW-LC
is either an absolute expression or an expression with the same section
as the current subsection.  That is, you can't use `.org' to cross
sections: if NEW-LC has the wrong section, the `.org' directive is
ignored.  To be compatible with former assemblers, if the section of
NEW-LC is absolute, the LLVM integrated assembler issues a warning, then
pretends the section of NEW-LC is the same as the current subsection.

   `.org' may only increase the location counter, or leave it
unchanged; you cannot use `.org' to move the location counter backwards.

   Because the LLVM integrated assembler tries to assemble programs in
one pass, NEW-LC may not be undefined.  If you really detest this
restriction we eagerly await a chance to share your improved assembler.

   Beware that the origin is relative to the start of the section, not
to the start of the subsection.  This is compatible with other people's
assemblers.

   When the location counter (of the current subsection) is advanced,
the intervening bytes are filled with FILL which should be an absolute
expression.  If the comma and FILL are omitted, FILL defaults to zero.


File: llvm-assembler.info,  Node: P2align,  Next: PopSection,  Prev: Org,  Up: Pseudo Ops

7.65 `.p2align[wl] ABS-EXPR, ABS-EXPR, ABS-EXPR'
================================================

Pad the location counter (in the current subsection) to a particular
storage boundary.  The first expression (which must be absolute) is the
number of low-order zero bits the location counter must have after
advancement.  For example `.p2align 3' advances the location counter
until it a multiple of 8.  If the location counter is already a
multiple of 8, no change is needed.

   The second expression (also absolute) gives the fill value to be
stored in the padding bytes.  It (and the comma) may be omitted.  If it
is omitted, the padding bytes are normally zero.  However, on some
systems, if the section is marked as containing code and the fill value
is omitted, the space is filled with no-op instructions.

   The third expression is also absolute, and is also optional.  If it
is present, it is the maximum number of bytes that should be skipped by
this alignment directive.  If doing the alignment would require
skipping more bytes than the specified maximum, then the alignment is
not done at all.  You can omit the fill value (the second argument)
entirely by simply using two commas after the required alignment; this
can be useful if you want the alignment to be filled with no-op
instructions when appropriate.

   The `.p2alignw' and `.p2alignl' directives are variants of the
`.p2align' directive.  The `.p2alignw' directive treats the fill
pattern as a two byte word value.  The `.p2alignl' directives treats the
fill pattern as a four byte longword value.  For example, `.p2alignw
2,0x368d' will align to a multiple of 4.  If it skips two bytes, they
will be filled in with the value 0x368d (the exact placement of the
bytes depends upon the endianness of the processor).  If it skips 1 or
3 bytes, the fill value is undefined.


File: llvm-assembler.info,  Node: PopSection,  Next: Previous,  Prev: P2align,  Up: Pseudo Ops

7.66 `.popsection'
==================

This is one of the ELF section stack manipulation directives.  The
others are `.section' (*note Section::), `.subsection' (*note
SubSection::), `.pushsection' (*note PushSection::), and `.previous'
(*note Previous::).

   This directive replaces the current section (and subsection) with
the top section (and subsection) on the section stack.  This section is
popped off the stack.


File: llvm-assembler.info,  Node: Previous,  Next: Protected,  Prev: PopSection,  Up: Pseudo Ops

7.67 `.previous'
================

This is one of the ELF section stack manipulation directives.  The
others are `.section' (*note Section::), `.subsection' (*note
SubSection::), `.pushsection' (*note PushSection::), and `.popsection'
(*note PopSection::).

   This directive swaps the current section (and subsection) with most
recently referenced section/subsection pair prior to this one.  Multiple
`.previous' directives in a row will flip between two sections (and
their subsections).  For example:

     .section A
      .subsection 1
       .word 0x1234
      .subsection 2
       .word 0x5678
     .previous
      .word 0x9abc

   Will place 0x1234 and 0x9abc into subsection 1 and 0x5678 into
subsection 2 of section A.  Whilst:

     .section A
     .subsection 1
       # Now in section A subsection 1
       .word 0x1234
     .section B
     .subsection 0
       # Now in section B subsection 0
       .word 0x5678
     .subsection 1
       # Now in section B subsection 1
       .word 0x9abc
     .previous
       # Now in section B subsection 0
       .word 0xdef0

   Will place 0x1234 into section A, 0x5678 and 0xdef0 into subsection
0 of section B and 0x9abc into subsection 1 of section B.

   In terms of the section stack, this directive swaps the current
section with the top section on the section stack.


File: llvm-assembler.info,  Node: Protected,  Next: Purgem,  Prev: Previous,  Up: Pseudo Ops

7.68 `.protected NAMES'
=======================

This is one of the ELF visibility directives.  The other two are
`.hidden' (*note Hidden::) and `.internal' (*note Internal::).

   This directive overrides the named symbols default visibility (which
is set by their binding: local, global or weak).  The directive sets
the visibility to `protected' which means that any references to the
symbols from within the components that defines them must be resolved
to the definition in that component, even if a definition in another
component would normally preempt this.


File: llvm-assembler.info,  Node: Purgem,  Next: PushSection,  Prev: Protected,  Up: Pseudo Ops

7.69 `.purgem NAME'
===================

Undefine the macro NAME, so that later uses of the string will not be
expanded.  *Note Macro::.


File: llvm-assembler.info,  Node: PushSection,  Next: Quad,  Prev: Purgem,  Up: Pseudo Ops

7.70 `.pushsection NAME [, SUBSECTION] [, "FLAGS"[, @TYPE[,ARGUMENTS]]]'
========================================================================

This is one of the ELF section stack manipulation directives.  The
others are `.section' (*note Section::), `.subsection' (*note
SubSection::), `.popsection' (*note PopSection::), and `.previous'
(*note Previous::).

   This directive pushes the current section (and subsection) onto the
top of the section stack, and then replaces the current section and
subsection with `name' and `subsection'. The optional `flags', `type'
and `arguments' are treated the same as in the `.section' (*note
Section::) directive.


File: llvm-assembler.info,  Node: Quad,  Next: Rept,  Prev: PushSection,  Up: Pseudo Ops

7.71 `.quad BIGNUMS'
====================

`.quad' expects zero or more bignums, separated by commas.  For each
bignum, it emits an 8-byte integer.  If the bignum won't fit in 8
bytes, it prints a warning message; and just takes the lowest order 8
bytes of the bignum.  

   The term "quad" comes from contexts in which a "word" is two bytes;
hence _quad_-word for 8 bytes.


File: llvm-assembler.info,  Node: Rept,  Next: Section,  Prev: Quad,  Up: Pseudo Ops

7.72 `.rept COUNT'
==================

Repeat the sequence of lines between the `.rept' directive and the next
`.endr' directive COUNT times.

   For example, assembling

             .rept   3
             .long   0
             .endr

   is equivalent to assembling

             .long   0
             .long   0
             .long   0


File: llvm-assembler.info,  Node: Section,  Next: Set,  Prev: Rept,  Up: Pseudo Ops

7.73 `.section NAME'
====================

Use the `.section' directive to assemble the following code into a
section named NAME.

   This directive is only supported for targets that actually support
arbitrarily named sections; on `a.out' targets, for example, it is not
accepted, even with a standard `a.out' section name.

   This is one of the ELF section stack manipulation directives.  The
others are `.subsection' (*note SubSection::), `.pushsection' (*note
PushSection::), `.popsection' (*note PopSection::), and `.previous'
(*note Previous::).

   The `.section' directive is used like this:

     .section NAME [, "FLAGS"[, @TYPE[,FLAG_SPECIFIC_ARGUMENTS]]]

   The optional FLAGS argument is a quoted string which may contain any
combination of the following characters:
`a'
     section is allocatable

`e'
     section is excluded from executable and shared library.

`w'
     section is writable

`x'
     section is executable

`M'
     section is mergeable

`S'
     section contains zero terminated strings

`G'
     section is a member of a section group

`T'
     section is used for thread-local-storage

`?'
     section is a member of the previously-current section's group, if
     any
   There may be further target dependent flags.  For example AAP
supports the `R' flag to indicate a section should not be relaxed when
linking.  *Note Machine Dependencies::.

   The optional TYPE argument may contain one of the following
constants:
`@progbits'
     section contains data

`@nobits'
     section does not contain data (i.e., section only occupies space)

`@note'
     section contains data which is used by things other than the
     program

`@init_array'
     section contains an array of pointers to init functions

`@fini_array'
     section contains an array of pointers to finish functions

`@preinit_array'
     section contains an array of pointers to pre-init functions

   Many targets only support the first three section types.

   _Note:_ On targets where the `@' character is the start of a comment
(eg ARM) then another character is used instead.  For example the ARM
port uses the `%' character.

   If FLAGS contains the `M' symbol then the TYPE argument must be
specified as well as an extra argument--ENTSIZE--like this:

     .section NAME , "FLAGS"M, @TYPE, ENTSIZE

   Sections with the `M' flag but not `S' flag must contain fixed size
constants, each ENTSIZE octets long. Sections with both `M' and `S'
must contain zero terminated strings where each character is ENTSIZE
bytes long. The linker may remove duplicates within sections with the
same name, same entity size and same flags.  ENTSIZE must be an
absolute expression.  For sections with both `M' and `S', a string
which is a suffix of a larger string is considered a duplicate.  Thus
`"def"' will be merged with `"abcdef"';  A reference to the first
`"def"' will be changed to a reference to `"abcdef"+3'.

   If FLAGS contains the `G' symbol then the TYPE argument must be
present along with an additional field like this:

     .section NAME , "FLAGS"G, @TYPE, GROUPNAME[, LINKAGE]

   The GROUPNAME field specifies the name of the section group to which
this particular section belongs.  The optional linkage field can
contain:
`comdat'
     indicates that only one copy of this section should be retained

`.gnu.linkonce'
     an alias for comdat

   _Note:_ If both the M and G flags are present then the fields for
the Merge flag should come first, like this:

     .section NAME , "FLAGS"MG, @TYPE, ENTSIZE, GROUPNAME[, LINKAGE]

   If FLAGS contains the `?' symbol then it may not also contain the
`G' symbol and the GROUPNAME or LINKAGE fields should not be present.
Instead, `?' says to consider the section that's current before this
directive.  If that section used `G', then the new section will use `G'
with those same GROUPNAME and LINKAGE fields implicitly.  If not, then
the `?' symbol has no effect.

   If no flags are specified, the default flags depend upon the section
name.  If the section name is not recognized, the default will be for
the section to have none of the above flags: it will not be allocated
in memory, nor writable, nor executable.  The section will contain data.

   The assembler supports another type of `.section' directive for
compatibility with the Solaris assembler:

     .section "NAME"[, FLAGS...]

   _Note:_ The section name is quoted.  There may be a sequence of comma
separated flags:
`#alloc'
     section is allocatable

`#write'
     section is writable

`#execinstr'
     section is executable

`#exclude'
     section is excluded from executable and shared library.

`#tls'
     section is used for thread local storage

   This directive replaces the current section and subsection.  The GNU
assembler testsuite directory `gas/testsuite/gas/elf' contains some
examples of how this directive and the other section stack directives.


File: llvm-assembler.info,  Node: Set,  Next: Short,  Prev: Section,  Up: Pseudo Ops

7.74 `.set SYMBOL, EXPRESSION'
==============================

Set the value of SYMBOL to EXPRESSION.  This changes SYMBOL's value and
type to conform to EXPRESSION.  If SYMBOL was flagged as external, it
remains flagged (*note Symbol Attributes::).

   You may `.set' a symbol many times in the same assembly.

   If you `.set' a global symbol, the value stored in the object file
is the last value stored into it.


File: llvm-assembler.info,  Node: Short,  Next: Single,  Prev: Set,  Up: Pseudo Ops

7.75 `.short EXPRESSIONS'
=========================

Insert arguments into the output.  The meaning is target specific.  In
particular there may be unusual behavior if the target has a 32-bit
address space, but less than 32-bit addressing.  *Note Machine
Dependencies::.


File: llvm-assembler.info,  Node: Single,  Next: Size,  Prev: Short,  Up: Pseudo Ops

7.76 `.single FLONUMS'
======================

This directive assembles zero or more flonums, separated by commas.  It
has the same effect as `.float'.  The exact kind of floating point
numbers emitted depends on how the LLVM integrated assembler is
configured.  *Note Machine Dependencies::.


File: llvm-assembler.info,  Node: Size,  Next: Skip,  Prev: Single,  Up: Pseudo Ops

7.77 `.size EXPRESSION'
=======================

This directive sets the size associated with a symbol NAME.  The size
in bytes is computed from EXPRESSION which can make use of label
arithmetic.  This directive is typically used to set the size of
function symbols.


File: llvm-assembler.info,  Node: Skip,  Next: Sleb128,  Prev: Size,  Up: Pseudo Ops

7.78 `.skip SIZE , FILL'
========================

This directive emits SIZE bytes, each of value FILL.  Both SIZE and
FILL are absolute expressions.  If the comma and FILL are omitted, FILL
is assumed to be zero.  This is the same as `.space'.


File: llvm-assembler.info,  Node: Sleb128,  Next: Space,  Prev: Skip,  Up: Pseudo Ops

7.79 `.sleb128 EXPRESSIONS'
===========================

SLEB128 stands for "signed little endian base 128."  This is a compact,
variable length representation of numbers used by the DWARF symbolic
debugging format.  *Note `.uleb128': Uleb128.


File: llvm-assembler.info,  Node: Space,  Next: String,  Prev: Sleb128,  Up: Pseudo Ops

7.80 `.space SIZE , FILL'
=========================

This directive emits SIZE bytes, each of value FILL.  Both SIZE and
FILL are absolute expressions.  If the comma and FILL are omitted, FILL
is assumed to be zero.  This is the same as `.skip'.


File: llvm-assembler.info,  Node: String,  Next: SubSection,  Prev: Space,  Up: Pseudo Ops

7.81 `.string' "STR"
====================

Copy the characters in STR to the object file.  You may specify more
than one string to copy, separated by commas.  Unless otherwise
specified for a particular machine, the assembler marks the end of each
string with a 0 byte.  You can use any of the escape sequences
described in *note Strings: Strings.

   The GNU assembler variants `.string8', `.string16', `.string32' and
`.string64' are not supported by the LLVM integrated assembler.  *Note
Unsupported::.


File: llvm-assembler.info,  Node: SubSection,  Next: Symver,  Prev: String,  Up: Pseudo Ops

7.82 `.subsection EXPRESSION'
=============================

This is one of the ELF section stack manipulation directives.  The
others are `.section' (*note Section::), `.pushsection' (*note
PushSection::), `.popsection' (*note PopSection::), and `.previous'
(*note Previous::).

   This directive replaces the current subsection with EXPRESSION.  The
current section is not changed.  The replaced subsection is put onto the
section stack in place of the then current top of stack subsection.


File: llvm-assembler.info,  Node: Symver,  Next: Text,  Prev: SubSection,  Up: Pseudo Ops

7.83 `.symver'
==============

Use the `.symver' directive to bind symbols to specific version nodes
within a source file.  This is only supported on ELF platforms, and is
typically used when assembling files to be linked into a shared library.
There are cases where it may make sense to use this in objects to be
bound into an application itself so as to override a versioned symbol
from a shared library.

   The `.symver' directive can be used like this:
     .symver NAME, NAME2@NODENAME
   If the symbol NAME is defined within the file being assembled, the
`.symver' directive effectively creates a symbol alias with the name
NAME2@NODENAME, and in fact the main reason that we just don't try and
create a regular alias is that the @ character isn't permitted in
symbol names.  The NAME2 part of the name is the actual name of the
symbol by which it will be externally referenced.  The name NAME itself
is merely a name of convenience that is used so that it is possible to
have definitions for multiple versions of a function within a single
source file, and so that the compiler can unambiguously know which
version of a function is being mentioned.  The NODENAME portion of the
alias should be the name of a node specified in the version script
supplied to the linker when building a shared library.  If you are
attempting to override a versioned symbol from a shared library, then
NODENAME should correspond to the nodename of the symbol you are trying
to override.

   If the symbol NAME is not defined within the file being assembled,
all references to NAME will be changed to NAME2@NODENAME.  If no
reference to NAME is made, NAME2@NODENAME will be removed from the
symbol table.

   Another usage of the `.symver' directive is:
     .symver NAME, NAME2@@NODENAME
   In this case, the symbol NAME must exist and be defined within the
file being assembled. It is similar to NAME2@NODENAME. The difference
is NAME2@@NODENAME will also be used to resolve references to NAME2 by
the linker.

   The third usage of the `.symver' directive is:
     .symver NAME, NAME2@@@NODENAME
   When NAME is not defined within the file being assembled, it is
treated as NAME2@NODENAME. When NAME is defined within the file being
assembled, the symbol name, NAME, will be changed to NAME2@@NODENAME.


File: llvm-assembler.info,  Node: Text,  Next: Type,  Prev: Symver,  Up: Pseudo Ops

7.84 `.text SUBSECTION'
=======================

Tells the LLVM integrated assembler to assemble the following
statements onto the end of the text subsection numbered SUBSECTION,
which is an absolute expression.  If SUBSECTION is omitted, subsection
number zero is used.


File: llvm-assembler.info,  Node: Type,  Next: Uleb128,  Prev: Text,  Up: Pseudo Ops

7.85 `.type NAME , TYPE DESCRIPTION'
====================================

This sets the type of symbol NAME to be either a function symbol or an
object symbol.  There are five different syntaxes supported for the
TYPE DESCRIPTION field, in order to provide compatibility with various
other assemblers.

   Because some of the characters used in these syntaxes (such as `@'
and `#') are comment characters for some architectures, some of the
syntaxes below do not work on all architectures.  The first variant
will be accepted by the LLVM integrated assembler on all architectures
so that variant should be used for maximum portability, if you do not
need to assemble your code with other assemblers.

   The syntaxes supported are:

       .type <name> STT_<TYPE_IN_UPPER_CASE>
       .type <name>,#<type>
       .type <name>,@<type>
       .type <name>,%<type>
       .type <name>,"<type>"

   The types supported are:

`STT_FUNC'
`function'
     Mark the symbol as being a function name.

`STT_GNU_IFUNC'
`gnu_indirect_function'
     Mark the symbol as an indirect function when evaluated during reloc
     processing.  (This is only supported on assemblers targeting GNU
     systems).

`STT_OBJECT'
`object'
     Mark the symbol as being a data object.

`STT_TLS'
`tls_object'
     Mark the symbol as being a thead-local data object.

`STT_COMMON'
`common'
     Mark the symbol as being a common data object.

`STT_NOTYPE'
`notype'
     Does not mark the symbol in any way.  It is supported just for
     completeness.

`gnu_unique_object'
     Marks the symbol as being a globally unique data object.  The
     dynamic linker will make sure that in the entire process there is
     just one symbol with this name and type in use.  (This is only
     supported on assemblers targeting GNU systems).


   _Note:_ Some targets support extra types in addition to those listed
above.  *Note Machine Dependencies::.


File: llvm-assembler.info,  Node: Uleb128,  Next: Version,  Prev: Type,  Up: Pseudo Ops

7.86 `.uleb128 EXPRESSIONS'
===========================

ULEB128 stands for "unsigned little endian base 128."  This is a
compact, variable length representation of numbers used by the DWARF
symbolic debugging format.  *Note `.sleb128': Sleb128.


File: llvm-assembler.info,  Node: Version,  Next: Warning,  Prev: Uleb128,  Up: Pseudo Ops

7.87 `.version "STRING"'
========================

This directive creates a `.note' section and places into it an ELF
formatted note of type NT_VERSION.  The note's name is set to `string'.


File: llvm-assembler.info,  Node: Warning,  Next: Weak,  Prev: Version,  Up: Pseudo Ops

7.88 `.warning "STRING"'
========================

Similar to the directive `.error' (*note `.error "STRING"': Error.),
but just emits a warning.


File: llvm-assembler.info,  Node: Weak,  Next: Weakref,  Prev: Warning,  Up: Pseudo Ops

7.89 `.weak NAMES'
==================

This directive sets the weak attribute on the comma separated list of
symbol `names'.  If the symbols do not already exist, they will be
created.


File: llvm-assembler.info,  Node: Weakref,  Next: Deprecated,  Prev: Weak,  Up: Pseudo Ops

7.90 `.weakref ALIAS, TARGET'
=============================

This directive creates an alias to the target symbol that enables the
symbol to be referenced with weak-symbol semantics, but without
actually making it weak.  If direct references or definitions of the
symbol are present, then the symbol will not be weak, but if all
references to it are through weak references, the symbol will be marked
as weak in the symbol table.

   The effect is equivalent to moving all references to the alias to a
separate assembly source file, renaming the alias to the symbol in it,
declaring the symbol as weak there, and running a reloadable link to
merge the object files resulting from the assembly of the new source
file and the old source file that had the references to the alias
removed.

   The alias itself never makes to the symbol table, and is entirely
handled within the assembler.


File: llvm-assembler.info,  Node: Deprecated,  Next: Unsupported,  Prev: Weakref,  Up: Pseudo Ops

7.91 Deprecated Directives
==========================

One day these directives won't work.  They are included for
compatibility with older assemblers.
`.abort'
     Abort assembly.

`.line'
     Set line number.


File: llvm-assembler.info,  Node: Unsupported,  Prev: Deprecated,  Up: Pseudo Ops

7.92 Unsupported GNU Assembler Directives
=========================================

These directives are supported by the GNU assembler, but not the LLVM
integrated assembler.  Code originally intended for the GNU assembler
will need modifying to eliminate the need for these directives.

`.altmacro'
     Enable alternate macro mode.

`.cfi_return_column'
     Change return column register.

`.cfi_val_encoded_addr'
     Encode value of label in output.

`.eject'
     Force a page break when generating listings.

`.endfunc'
     Marks the end of a function specified with `.func'.

`.eqv'
     Lazily evaluated version of `.equiv'.

`.fail'
     Generates an error or a warning depending on its argument.

`.func'
     Emit debugging information to denote a function.

`.gnu_attribute'
     Record a GNU object attribute for this file.

`.hword'
     Emit 16-bit numbers. A synonym for `.short'; depending on the
     target architecture, it may also be a synonym for `.word'.

`.lflags'
     This option was ignored by the GNU assembler anyway.

`.linkonce'
     Mark the current section so that the linker only includes a single
     copy of it.  Incompatible with ELF output files.

`.list'
     Control whether or not assembly listings are generated.

`.loc_mark_labels'
     Control emission of basic block debug info.

`LOCAL NAME [ , ... ]'
     Part of the unsupported "alternate macro syntax".

`.noaltmacro'
     Disable alternate macro mode, which is no longer supported.

`.nolist'
     Control whether or not assembly listings are generated.

`.offset'
     Set the location counter in the absolute section.

`.print'
     Print string on standard output.

`.psize'
     Declare the number of lines and columns to use for each listing
     page

`.reloc'
     Generate a relocation.

`.sbttl'
     Generate a subheadng in a listing.

`.string8'
`.string16'
`.string32'
`.string64'
     Directives to copy expanded string characters into the object file.

`.struct'
     Set offset symbol values.

`.title'
     Set a title for listing files.

`.vtableentry'
     Create VTABLE_ENTRY relocation.

`.vtableinherit'
     Create VTABLE_INHERIT relocation.

     @item .word Emit words in a machine dependent way.



File: llvm-assembler.info,  Node: Object Attributes,  Next: Machine Dependencies,  Prev: Pseudo Ops,  Up: Top

8 Object Attributes
*******************

Object attributes are a concept introduced by the GNU assembler, to
provide information about architecture variations and compatibility
that could be of use to the linker.

   GNU object attributes are not supported by the LLVM integrated
assembler.


File: llvm-assembler.info,  Node: Machine Dependencies,  Next: Reporting Bugs,  Prev: Object Attributes,  Up: Top

9 Machine Dependent Features
****************************

The machine instruction sets are (almost by definition) different on
each machine where the LLVM integrated assembler runs.  Floating point
representations vary as well, and the LLVM integrated assembler often
supports a few additional directives or command-line options for
compatibility with other assemblers on a particular platform.  Finally,
some versions of the LLVM integrated assembler support special
pseudo-instructions for branch optimization.

   This chapter discusses most of these differences, though it does not
include details on any machine's instruction set.  For details on that
subject, see the hardware manufacturer's manual.

* Menu:

* AAP-dependent::              AAP Dependent Features


File: llvm-assembler.info,  Node: AAP-dependent,  Up: Machine Dependencies

9.1 AAP Dependent Features
==========================

the LLVM integrated assembler for AAP architectures supports several
different AAP processors, and AAP ISA levels I through V, AAP32, and
AAP64.  For information about the AAP instruction set, see `AAP RISC
Architecture', by Kane and Heindrich (Prentice-Hall).  For an overview
of AAP assembly conventions, see "Appendix D: Assembly Language
Programming" in the same work.

* Menu:

* AAP Options::   	Assembler options
* AAP Macros:: 	High-level assembly macros
* AAP Symbol Sizes::	Directives to override the size of symbols
* AAP Small Data:: 	Controlling the use of small data accesses
* AAP ISA::    	Directives to override the ISA level
* AAP assembly options:: Directives to control code generation
* AAP autoextend::	Directives for extending AAP 16 bit instructions
* AAP insn::		Directive to mark data as an instruction
* AAP FP ABIs::	Marking which FP ABI is in use
* AAP NaN Encodings::	Directives to record which NaN encoding is being used
* AAP Option Stack::	Directives to save and restore options
* AAP ASE Instruction Generation Overrides:: Directives to control
  			generation of AAP ASE instructions
* AAP Floating-Point:: Directives to override floating-point options
* AAP Syntax::         AAP specific syntactical considerations


File: llvm-assembler.info,  Node: AAP Options,  Next: AAP Macros,  Up: AAP-dependent

9.1.1 Assembler options
-----------------------

The AAP configurations of  the LLVM integrated assembler support these
special options:

`-G NUM'
     Set the "small data" limit to N bytes.  The default limit is 8
     bytes.  *Note Controlling the use of small data accesses: AAP
     Small Data.

`-EB'
`-EL'
     Any AAP configuration of the LLVM integrated assembler can select
     big-endian or little-endian output at run time (unlike the other
     development tools, which must be configured for one or the other).
     Use `-EB' to select big-endian output, and `-EL' for little-endian.

`-KPIC'
     Generate SVR4-style PIC.  This option tells the assembler to
     generate SVR4-style position-independent macro expansions.  It
     also tells the assembler to mark the output file as PIC.

`-mvxworks-pic'
     Generate VxWorks PIC.  This option tells the assembler to generate
     VxWorks-style position-independent macro expansions.

`-mips1'
`-mips2'
`-mips3'
`-mips4'
`-mips5'
`-mips32'
`-mips32r2'
`-mips32r3'
`-mips32r5'
`-mips32r6'
`-mips64'
`-mips64r2'
`-mips64r3'
`-mips64r5'
`-mips64r6'
     Generate code for a particular AAP Instruction Set Architecture
     level.  `-mips1' corresponds to the R2000 and R3000 processors,
     `-mips2' to the R6000 processor, `-mips3' to the R4000 processor,
     and `-mips4' to the R8000 and R10000 processors.  `-mips5',
     `-mips32', `-mips32r2', `-mips32r3', `-mips32r5', `-mips32r6',
     `-mips64', `-mips64r2', `-mips64r3', `-mips64r5', and `-mips64r6'
     correspond to generic AAP V, AAP32, AAP32 Release 2, AAP32 Release
     3, AAP32 Release 5, AAP32 Release 6, AAP64, and AAP64 Release 2,
     AAP64 Release 3, AAP64 Release 5, and AAP64 Release 6 ISA
     processors, respectively.  You can also switch instruction sets
     during the assembly; see *note Directives to override the ISA
     level: AAP ISA.

`-mgp32'
`-mfp32'
     Some macros have different expansions for 32-bit and 64-bit
     registers.  The register sizes are normally inferred from the ISA
     and ABI, but these flags force a certain group of registers to be
     treated as 32 bits wide at all times.  `-mgp32' controls the size
     of general-purpose registers and `-mfp32' controls the size of
     floating-point registers.

     The `.set gp=32' and `.set fp=32' directives allow the size of
     registers to be changed for parts of an object. The default value
     is restored by `.set gp=default' and `.set fp=default'.

     On some AAP variants there is a 32-bit mode flag; when this flag is
     set, 64-bit instructions generate a trap.  Also, some 32-bit OSes
     only save the 32-bit registers on a context switch, so it is
     essential never to use the 64-bit registers.

`-mgp64'
`-mfp64'
     Assume that 64-bit registers are available.  This is provided in
     the interests of symmetry with `-mgp32' and `-mfp32'.

     The `.set gp=64' and `.set fp=64' directives allow the size of
     registers to be changed for parts of an object. The default value
     is restored by `.set gp=default' and `.set fp=default'.

`-mfpxx'
     Make no assumptions about whether 32-bit or 64-bit floating-point
     registers are available. This is provided to support having modules
     compatible with either `-mfp32' or `-mfp64'. This option can only
     be used with AAP II and above.

     The `.set fp=xx' directive allows a part of an object to be marked
     as not making assumptions about 32-bit or 64-bit FP registers.  The
     default value is restored by `.set fp=default'.

`-modd-spreg'
`-mno-odd-spreg'
     Enable use of floating-point operations on odd-numbered
     single-precision registers when supported by the ISA.  `-mfpxx'
     implies `-mno-odd-spreg', otherwise the default is `-modd-spreg'

`-mips16'
`-no-mips16'
     Generate code for the AAP 16 processor.  This is equivalent to
     putting `.set mips16' at the start of the assembly file.
     `-no-mips16' turns off this option.

`-mmicromips'
`-mno-micromips'
     Generate code for the microAAP processor.  This is equivalent to
     putting `.set micromips' at the start of the assembly file.
     `-mno-micromips' turns off this option.  This is equivalent to
     putting `.set nomicromips' at the start of the assembly file.

`-msmartmips'
`-mno-smartmips'
     Enables the SmartAAP extensions to the AAP32 instruction set, which
     provides a number of new instructions which target smartcard and
     cryptographic applications.  This is equivalent to putting `.set
     smartmips' at the start of the assembly file.  `-mno-smartmips'
     turns off this option.

`-mips3d'
`-no-mips3d'
     Generate code for the AAP-3D Application Specific Extension.  This
     tells the assembler to accept AAP-3D instructions.  `-no-mips3d'
     turns off this option.

`-mdmx'
`-no-mdmx'
     Generate code for the MDMX Application Specific Extension.  This
     tells the assembler to accept MDMX instructions.  `-no-mdmx' turns
     off this option.

`-mdsp'
`-mno-dsp'
     Generate code for the DSP Release 1 Application Specific Extension.
     This tells the assembler to accept DSP Release 1 instructions.
     `-mno-dsp' turns off this option.

`-mdspr2'
`-mno-dspr2'
     Generate code for the DSP Release 2 Application Specific Extension.
     This option implies -mdsp.  This tells the assembler to accept DSP
     Release 2 instructions.  `-mno-dspr2' turns off this option.

`-mmt'
`-mno-mt'
     Generate code for the MT Application Specific Extension.  This
     tells the assembler to accept MT instructions.  `-mno-mt' turns
     off this option.

`-mmcu'
`-mno-mcu'
     Generate code for the MCU Application Specific Extension.  This
     tells the assembler to accept MCU instructions.  `-mno-mcu' turns
     off this option.

`-mmsa'
`-mno-msa'
     Generate code for the AAP SIMD Architecture Extension.  This tells
     the assembler to accept MSA instructions.  `-mno-msa' turns off
     this option.

`-mxpa'
`-mno-xpa'
     Generate code for the AAP eXtended Physical Address (XPA)
     Extension.  This tells the assembler to accept XPA instructions.
     `-mno-xpa' turns off this option.

`-mvirt'
`-mno-virt'
     Generate code for the Virtualization Application Specific
     Extension.  This tells the assembler to accept Virtualization
     instructions.  `-mno-virt' turns off this option.

`-minsn32'
`-mno-insn32'
     Only use 32-bit instruction encodings when generating code for the
     microAAP processor.  This option inhibits the use of any 16-bit
     instructions.  This is equivalent to putting `.set insn32' at the
     start of the assembly file.  `-mno-insn32' turns off this option.
     This is equivalent to putting `.set noinsn32' at the start of the
     assembly file.  By default `-mno-insn32' is selected, allowing all
     instructions to be used.

`-mfix7000'
`-mno-fix7000'
     Cause nops to be inserted if the read of the destination register
     of an mfhi or mflo instruction occurs in the following two
     instructions.

`-mfix-rm7000'
`-mno-fix-rm7000'
     Cause nops to be inserted if a dmult or dmultu instruction is
     followed by a load instruction.

`-mfix-loongson2f-jump'
`-mno-fix-loongson2f-jump'
     Eliminate instruction fetch from outside 256M region to work
     around the Loongson2F `jump' instructions.  Without it, under
     extreme cases, the kernel may crash.  The issue has been solved in
     latest processor batches, but this fix has no side effect to them.

`-mfix-loongson2f-nop'
`-mno-fix-loongson2f-nop'
     Replace nops by `or at,at,zero' to work around the Loongson2F
     `nop' errata.  Without it, under extreme cases, the CPU might
     deadlock.  The issue has been solved in later Loongson2F batches,
     but this fix has no side effect to them.

`-mfix-vr4120'
`-mno-fix-vr4120'
     Insert nops to work around certain VR4120 errata.  This option is
     intended to be used on GCC-generated code: it is not designed to
     catch all problems in hand-written assembler code.

`-mfix-vr4130'
`-mno-fix-vr4130'
     Insert nops to work around the VR4130 `mflo'/`mfhi' errata.

`-mfix-24k'
`-mno-fix-24k'
     Insert nops to work around the 24K `eret'/`deret' errata.

`-mfix-cn63xxp1'
`-mno-fix-cn63xxp1'
     Replace `pref' hints 0 - 4 and 6 - 24 with hint 28 to work around
     certain CN63XXP1 errata.

`-m4010'
`-no-m4010'
     Generate code for the LSI R4010 chip.  This tells the assembler to
     accept the R4010-specific instructions (`addciu', `ffc', etc.),
     and to not schedule `nop' instructions around accesses to the `HI'
     and `LO' registers.  `-no-m4010' turns off this option.

`-m4650'
`-no-m4650'
     Generate code for the AAP R4650 chip.  This tells the assembler to
     accept the `mad' and `madu' instruction, and to not schedule `nop'
     instructions around accesses to the `HI' and `LO' registers.
     `-no-m4650' turns off this option.

`-m3900'
`-no-m3900'
`-m4100'
`-no-m4100'
     For each option `-mNNNN', generate code for the AAP RNNNN chip.
     This tells the assembler to accept instructions specific to that
     chip, and to schedule for that chip's hazards.

`-march=CPU'
     Generate code for a particular AAP CPU.  It is exactly equivalent
     to `-mCPU', except that there are more value of CPU understood.
     Valid CPU value are:

          2000, 3000, 3900, 4000, 4010, 4100, 4111, vr4120, vr4130,
          vr4181, 4300, 4400, 4600, 4650, 5000, rm5200, rm5230, rm5231,
          rm5261, rm5721, vr5400, vr5500, 6000, rm7000, 8000, rm9000,
          10000, 12000, 14000, 16000, 4kc, 4km, 4kp, 4ksc, 4kec, 4kem,
          4kep, 4ksd, m4k, m4kp, m14k, m14kc, m14ke, m14kec, 24kc,
          24kf2_1, 24kf, 24kf1_1, 24kec, 24kef2_1, 24kef, 24kef1_1,
          34kc, 34kf2_1, 34kf, 34kf1_1, 34kn, 74kc, 74kf2_1, 74kf,
          74kf1_1, 74kf3_2, 1004kc, 1004kf2_1, 1004kf, 1004kf1_1, p5600,
          5kc, 5kf, 20kc, 25kf, sb1, sb1a, i6400, loongson2e,
          loongson2f, loongson3a, octeon, octeon+, octeon2, octeon3,
          xlr, xlp

     For compatibility reasons, `Nx' and `Bfx' are accepted as synonyms
     for `Nf1_1'.  These values are deprecated.

`-mtune=CPU'
     Schedule and tune for a particular AAP CPU.  Valid CPU values are
     identical to `-march=CPU'.

`-mabi=ABI'
     Record which ABI the source code uses.  The recognized arguments
     are: `32', `n32', `o64', `64' and `eabi'.

`-msym32'
`-mno-sym32'
     Equivalent to adding `.set sym32' or `.set nosym32' to the
     beginning of the assembler input.  *Note AAP Symbol Sizes::.

`-nocpp'
     This option is ignored.  It is accepted for command-line
     compatibility with other assemblers, which use it to turn off C
     style preprocessing.  With  the LLVM integrated assembler, there
     is no need for `-nocpp', because the  assembler itself never runs
     the C preprocessor.

`-msoft-float'
`-mhard-float'
     Disable or enable floating-point instructions.  Note that by
     default floating-point instructions are always allowed even with
     CPU targets that don't have support for these instructions.

`-msingle-float'
`-mdouble-float'
     Disable or enable double-precision floating-point operations.  Note
     that by default double-precision floating-point operations are
     always allowed even with CPU targets that don't have support for
     these operations.

`--construct-floats'
`--no-construct-floats'
     The `--no-construct-floats' option disables the construction of
     double width floating point constants by loading the two halves of
     the value into the two single width floating point registers that
     make up the double width register.  This feature is useful if the
     processor support the FR bit in its status  register, and this bit
     is known (by the programmer) to be set.  This bit prevents the
     aliasing of the double width register by the single width
     registers.

     By default `--construct-floats' is selected, allowing construction
     of these floating point constants.

`--relax-branch'
`--no-relax-branch'
     The `--relax-branch' option enables the relaxation of out-of-range
     branches.  Any branches whose target cannot be reached directly are
     converted to a small instruction sequence including an
     inverse-condition branch to the physically next instruction, and a
     jump to the original target is inserted between the two
     instructions.  In PIC code the jump will involve further
     instructions for address calculation.

     The `BC1ANY2F', `BC1ANY2T', `BC1ANY4F', `BC1ANY4T', `BPOSGE32' and
     `BPOSGE64' instructions are excluded from relaxation, because they
     have no complementing counterparts.  They could be relaxed with
     the use of a longer sequence involving another branch, however
     this has not been implemented and if their target turns out of
     reach, they produce an error even if branch relaxation is enabled.

     Also no AAP16 branches are ever relaxed.

     By default `--no-relax-branch' is selected, causing any
     out-of-range branches to produce an error.

`-mnan=ENCODING'
     This option indicates whether the source code uses the IEEE 2008
     NaN encoding (`-mnan=2008') or the original AAP encoding
     (`-mnan=legacy').  It is equivalent to adding a `.nan' directive
     to the beginning of the source file.  *Note AAP NaN Encodings::.

     `-mnan=legacy' is the default if no `-mnan' option or `.nan'
     directive is used.

`--trap'
`--no-break'
     the LLVM integrated assembler automatically macro expands certain
     division and multiplication instructions to check for overflow and
     division by zero.  This option causes the LLVM integrated
     assembler to generate code to take a trap exception rather than a
     break exception when an error is detected.  The trap instructions
     are only supported at Instruction Set Architecture level 2 and
     higher.

`--break'
`--no-trap'
     Generate code to take a break exception rather than a trap
     exception when an error is detected.  This is the default.

`-mpdr'
`-mno-pdr'
     Control generation of `.pdr' sections.  Off by default on IRIX, on
     elsewhere.

`-mshared'
`-mno-shared'
     When generating code using the Unix calling conventions (selected
     by `-KPIC' or `-mcall_shared'), gas will normally generate code
     which can go into a shared library.  The `-mno-shared' option
     tells gas to generate code which uses the calling convention, but
     can not go into a shared library.  The resulting code is slightly
     more efficient.  This option only affects the handling of the
     `.cpload' and `.cpsetup' pseudo-ops.


File: llvm-assembler.info,  Node: AAP Macros,  Next: AAP Symbol Sizes,  Prev: AAP Options,  Up: AAP-dependent

9.1.2 High-level assembly macros
--------------------------------

AAP assemblers have traditionally provided a wider range of
instructions than the AAP architecture itself.  These extra
instructions are usually referred to as "macro" instructions (1).

   Some AAP macro instructions extend an underlying architectural
instruction while others are entirely new.  An example of the former
type is `and', which allows the third operand to be either a register
or an arbitrary immediate value.  Examples of the latter type include
`bgt', which branches to the third operand when the first operand is
greater than the second operand, and `ulh', which implements an
unaligned 2-byte load.

   One of the most common extensions provided by macros is to expand
memory offsets to the full address range (32 or 64 bits) and to allow
symbolic offsets such as `my_data + 4' to be used in place of integer
constants.  For example, the architectural instruction `lbu' allows
only a signed 16-bit offset, whereas the macro `lbu' allows code such
as `lbu $4,array+32769($5)'.  The implementation of these symbolic
offsets depends on several factors, such as whether the assembler is
generating SVR4-style PIC (selected by `-KPIC', *note Assembler
options: AAP Options.), the size of symbols (*note Directives to
override the size of symbols: AAP Symbol Sizes.), and the small data
limit (*note Controlling the use of small data accesses: AAP Small
Data.).

   Sometimes it is undesirable to have one assembly instruction expand
to several machine instructions.  The directive `.set nomacro' tells
the assembler to warn when this happens.  `.set macro' restores the
default behavior.

   Some macro instructions need a temporary register to store
intermediate results.  This register is usually `$1', also known as
`$at', but it can be changed to any core register REG using `.set
at=REG'.  Note that `$at' always refers to `$1' regardless of which
register is being used as the temporary register.

   Implicit uses of the temporary register in macros could interfere
with explicit uses in the assembly code.  The assembler therefore warns
whenever it sees an explicit use of the temporary register.  The
directive `.set noat' silences this warning while `.set at' restores
the default behavior.  It is safe to use `.set noat' while `.set
nomacro' is in effect since single-instruction macros never need a
temporary register.

   Note that while the  assembler provides these macros for
compatibility, it does not make any attempt to optimize them with the
surrounding code.

   ---------- Footnotes ----------

   (1) The term "macro" is somewhat overloaded here, since these macros
have no relation to those defined by `.macro', *note `.macro': Macro.


File: llvm-assembler.info,  Node: AAP Symbol Sizes,  Next: AAP Small Data,  Prev: AAP Macros,  Up: AAP-dependent

9.1.3 Directives to override the size of symbols
------------------------------------------------

The n64 ABI allows symbols to have any 64-bit value.  Although this
provides a great deal of flexibility, it means that some macros have
much longer expansions than their 32-bit counterparts.  For example,
the non-PIC expansion of `dla $4,sym' is usually:

     lui     $4,%highest(sym)
     lui     $1,%hi(sym)
     daddiu  $4,$4,%higher(sym)
     daddiu  $1,$1,%lo(sym)
     dsll32  $4,$4,0
     daddu   $4,$4,$1

   whereas the 32-bit expansion is simply:

     lui     $4,%hi(sym)
     daddiu  $4,$4,%lo(sym)

   n64 code is sometimes constructed in such a way that all symbolic
constants are known to have 32-bit values, and in such cases, it's
preferable to use the 32-bit expansion instead of the 64-bit expansion.

   You can use the `.set sym32' directive to tell the assembler that,
from this point on, all expressions of the form `SYMBOL' or `SYMBOL +
OFFSET' have 32-bit values.  For example:

     .set sym32
     dla     $4,sym
     lw      $4,sym+16
     sw      $4,sym+0x8000($4)

   will cause the assembler to treat `sym', `sym+16' and `sym+0x8000'
as 32-bit values.  The handling of non-symbolic addresses is not
affected.

   The directive `.set nosym32' ends a `.set sym32' block and reverts
to the normal behavior.  It is also possible to change the symbol size
using the command-line options `-msym32' and `-mno-sym32'.

   These options and directives are always accepted, but at present,
they have no effect for anything other than n64.


File: llvm-assembler.info,  Node: AAP Small Data,  Next: AAP ISA,  Prev: AAP Symbol Sizes,  Up: AAP-dependent

9.1.4 Controlling the use of small data accesses
------------------------------------------------

It often takes several instructions to load the address of a symbol.
For example, when `addr' is a 32-bit symbol, the non-PIC expansion of
`dla $4,addr' is usually:

     lui     $4,%hi(addr)
     daddiu  $4,$4,%lo(addr)

   The sequence is much longer when `addr' is a 64-bit symbol.  *Note
Directives to override the size of symbols: AAP Symbol Sizes.

   In order to cut down on this overhead, most embedded AAP systems set
aside a 64-kilobyte "small data" area and guarantee that all data of
size N and smaller will be placed in that area.  The limit N is passed
to both the assembler and the linker using the command-line option `-G
N', *note Assembler options: AAP Options.  Note that the same value of
N must be used when linking and when assembling all input files to the
link; any inconsistency could cause a relocation overflow error.

   The size of an object in the `.bss' section is set by the `.comm' or
`.lcomm' directive that defines it.  The size of an external object may
be set with the `.extern' directive.  For example, `.extern sym,4'
declares that the object at `sym' is 4 bytes in length, while leaving
`sym' otherwise undefined.

   When no `-G' option is given, the default limit is 8 bytes.  The
option `-G 0' prevents any data from being automatically classified as
small.

   It is also possible to mark specific objects as small by putting them
in the special sections `.sdata' and `.sbss', which are "small"
counterparts of `.data' and `.bss' respectively.  The toolchain will
treat such data as small regardless of the `-G' setting.

   On startup, systems that support a small data area are expected to
initialize register `$28', also known as `$gp', in such a way that
small data can be accessed using a 16-bit offset from that register.
For example, when `addr' is small data, the `dla $4,addr' instruction
above is equivalent to:

     daddiu  $4,$28,%gp_rel(addr)

   Small data is not supported for SVR4-style PIC.


File: llvm-assembler.info,  Node: AAP ISA,  Next: AAP assembly options,  Prev: AAP Small Data,  Up: AAP-dependent

9.1.5 Directives to override the ISA level
------------------------------------------

the LLVM integrated assembler supports an additional directive to change
the AAP Instruction Set Architecture level on the fly: `.set mipsN'.  N
should be a number from 0 to 5, or 32, 32r2, 32r3, 32r5, 32r6, 64,
64r2, 64r3, 64r5 or 64r6.  The values other than 0 make the assembler
accept instructions for the corresponding ISA level, from that point on
in the assembly.  `.set mipsN' affects not only which instructions are
permitted, but also how certain macros are expanded.  `.set mips0'
restores the ISA level to its original level: either the level you
selected with command line options, or the default for your
configuration.  You can use this feature to permit specific AAP III
instructions while assembling in 32 bit mode.  Use this directive with
care!

   The `.set arch=CPU' directive provides even finer control.  It
changes the effective CPU target and allows the assembler to use
instructions specific to a particular CPU.  All CPUs supported by the
`-march' command line option are also selectable by this directive.
The original value is restored by `.set arch=default'.

   The directive `.set mips16' puts the assembler into AAP 16 mode, in
which it will assemble instructions for the AAP 16 processor.  Use
`.set nomips16' to return to normal 32 bit mode.

   Traditional AAP assemblers do not support this directive.

   The directive `.set micromips' puts the assembler into microAAP mode,
in which it will assemble instructions for the microAAP processor.  Use
`.set nomicromips' to return to normal 32 bit mode.

   Traditional AAP assemblers do not support this directive.


File: llvm-assembler.info,  Node: AAP assembly options,  Next: AAP autoextend,  Prev: AAP ISA,  Up: AAP-dependent

9.1.6 Directives to control code generation
-------------------------------------------

The `.module' directive allows command line options to be set directly
from assembly.  The format of the directive matches the `.set'
directive but only those options which are relevant to a whole module
are supported.  The effect of a `.module' directive is the same as the
corresponding command line option.  Where `.set' directives support
returning to a default then the `.module' directives do not as they
define the defaults.

   These module-level directives must appear first in assembly.

   Traditional AAP assemblers do not support this directive.

   The directive `.set insn32' makes the assembler only use 32-bit
instruction encodings when generating code for the microAAP processor.
This directive inhibits the use of any 16-bit instructions from that
point on in the assembly.  The `.set noinsn32' directive allows 16-bit
instructions to be accepted.

   Traditional AAP assemblers do not support this directive.


File: llvm-assembler.info,  Node: AAP autoextend,  Next: AAP insn,  Prev: AAP assembly options,  Up: AAP-dependent

9.1.7 Directives for extending AAP 16 bit instructions
------------------------------------------------------

By default, AAP 16 instructions are automatically extended to 32 bits
when necessary.  The directive `.set noautoextend' will turn this off.
When `.set noautoextend' is in effect, any 32 bit instruction must be
explicitly extended with the `.e' modifier (e.g., `li.e $4,1000').  The
directive `.set autoextend' may be used to once again automatically
extend instructions when necessary.

   This directive is only meaningful when in AAP 16 mode.  Traditional
AAP assemblers do not support this directive.


File: llvm-assembler.info,  Node: AAP insn,  Next: AAP FP ABIs,  Prev: AAP autoextend,  Up: AAP-dependent

9.1.8 Directive to mark data as an instruction
----------------------------------------------

The `.insn' directive tells the LLVM integrated assembler that the
following data is actually instructions.  This makes a difference in
AAP 16 and microAAP modes: when loading the address of a label which
precedes instructions, the LLVM integrated assembler automatically adds
1 to the value, so that jumping to the loaded address will do the right
thing.

   The `.global' and `.globl' directives supported by the LLVM
integrated assembler will by default mark the symbol as pointing to a
region of data not code.  This means that, for example, any
instructions following such a symbol will not be disassembled by
`objdump' as it will regard them as data.  To change this behavior an
optional section name can be placed after the symbol name in the
`.global' directive.  If this section exists and is known to be a code
section, then the symbol will be marked as pointing at code not data.
Ie the syntax for the directive is:

   `.global SYMBOL[ SECTION][, SYMBOL[ SECTION]] ...',

   Here is a short example:

             .global foo .text, bar, baz .data
     foo:
             nop
     bar:
             .word 0x0
     baz:
             .word 0x1


File: llvm-assembler.info,  Node: AAP FP ABIs,  Next: AAP NaN Encodings,  Prev: AAP insn,  Up: AAP-dependent

9.1.9 Directives to control the FP ABI
--------------------------------------

* Menu:

* AAP FP ABI History::                History of FP ABIs
* AAP FP ABI Variants::               Supported FP ABIs
* AAP FP ABI Selection::              Automatic selection of FP ABI
* AAP FP ABI Compatibility::          Linking different FP ABI variants


File: llvm-assembler.info,  Node: AAP FP ABI History,  Next: AAP FP ABI Variants,  Up: AAP FP ABIs

9.1.9.1 History of FP ABIs
..........................

The AAP ABIs support a variety of different floating-point extensions
where calling-convention and register sizes vary for floating-point
data.  The extensions exist to support a wide variety of optional
architecture features.  The resulting ABI variants are generally
incompatible with each other and must be tracked carefully.

   Traditionally the use of an explicit `.gnu_attribute 4, N' directive
is used to indicate which ABI is in use by a specific module.  It was
then left to the user to ensure that command line options and the
selected ABI were compatible with some potential for inconsistencies.


File: llvm-assembler.info,  Node: AAP FP ABI Variants,  Next: AAP FP ABI Selection,  Prev: AAP FP ABI History,  Up: AAP FP ABIs

9.1.9.2 Supported FP ABIs
.........................

The supported floating-point ABI variants are:

`0 - No floating-point'
     This variant is used to indicate that floating-point is not used
     within the module at all and therefore has no impact on the ABI.
     This is the default.

`1 - Double-precision'
     This variant indicates that double-precision support is used.  For
     64-bit ABIs this means that 64-bit wide floating-point registers
     are required.  For 32-bit ABIs this means that 32-bit wide
     floating-point registers are required and double-precision
     operations use pairs of registers.

`2 - Single-precision'
     This variant indicates that single-precision support is used.
     Double precision operations will be supported via soft-float
     routines.

`3 - Soft-float'
     This variant indicates that although floating-point support is
     used all operations are emulated in software.  This means the ABI
     is modified to pass all floating-point data in general-purpose
     registers.

`4 - Deprecated'
     This variant existed as an initial attempt at supporting 64-bit
     wide floating-point registers for O32 ABI on a AAP32r2 CPU.  This
     has been superseded by 5, 6 and 7.

`5 - Double-precision 32-bit CPU, 32-bit or 64-bit FPU'
     This variant is used by 32-bit ABIs to indicate that the
     floating-point code in the module has been designed to operate
     correctly with either 32-bit wide or 64-bit wide floating-point
     registers.  Double-precision support is used.  Only O32 currently
     supports this variant and requires a minimum architecture of AAP
     II.

`6 - Double-precision 32-bit FPU, 64-bit FPU'
     This variant is used by 32-bit ABIs to indicate that the
     floating-point code in the module requires 64-bit wide
     floating-point registers.  Double-precision support is used.  Only
     O32 currently supports this variant and requires a minimum
     architecture of AAP32r2.

`7 - Double-precision compat 32-bit FPU, 64-bit FPU'
     This variant is used by 32-bit ABIs to indicate that the
     floating-point code in the module requires 64-bit wide
     floating-point registers.  Double-precision support is used.  This
     differs from the previous ABI as it restricts use of odd-numbered
     single-precision registers.  Only O32 currently supports this
     variant and requires a minimum architecture of AAP32r2.


File: llvm-assembler.info,  Node: AAP FP ABI Selection,  Next: AAP FP ABI Compatibility,  Prev: AAP FP ABI Variants,  Up: AAP FP ABIs

9.1.9.3 Automatic selection of FP ABI
.....................................

In order to simplify and add safety to the process of selecting the
correct floating-point ABI, the assembler will automatically infer the
correct `.gnu_attribute 4, N' directive based on command line options
and `.module' overrides.  Where an explicit `.gnu_attribute 4, N'
directive has been seen then a warning will be raised if it does not
match an inferred setting.

   The floating-point ABI is inferred as follows.  If `-msoft-float'
has been used the module will be marked as soft-float.  If
`-msingle-float' has been used then the module will be marked as
single-precision.  The remaining ABIs are then selected based on the FP
register width.  Double-precision is selected if the width of GP and FP
registers match and the special double-precision variants for 32-bit
ABIs are then selected depending on `-mfpxx', `-mfp64' and
`-mno-odd-spreg'.


File: llvm-assembler.info,  Node: AAP FP ABI Compatibility,  Prev: AAP FP ABI Selection,  Up: AAP FP ABIs

9.1.9.4 Linking different FP ABI variants
.........................................

Modules using the default FP ABI (no floating-point) can be linked with
any other (singular) FP ABI variant.

   Special compatibility support exists for O32 with the four
double-precision FP ABI variants.  The `-mfpxx' FP ABI is specifically
designed to be compatible with the standard double-precision ABI and the
`-mfp64' FP ABIs.  This makes it desirable for O32 modules to be built
as `-mfpxx' to ensure the maximum compatibility with other modules
produced for more specific needs.  The only FP ABIs which cannot be
linked together are the standard double-precision ABI and the full
`-mfp64' ABI with `-modd-spreg'.


File: llvm-assembler.info,  Node: AAP NaN Encodings,  Next: AAP Option Stack,  Prev: AAP FP ABIs,  Up: AAP-dependent

9.1.10 Directives to record which NaN encoding is being used
------------------------------------------------------------

The IEEE 754 floating-point standard defines two types of not-a-number
(NaN) data: "signalling" NaNs and "quiet" NaNs.  The original version
of the standard did not specify how these two types should be
distinguished.  Most implementations followed the i387 model, in which
the first bit of the significand is set for quiet NaNs and clear for
signalling NaNs.  However, the original AAP implementation assigned the
opposite meaning to the bit, so that it was set for signalling NaNs and
clear for quiet NaNs.

   The 2008 revision of the standard formally suggested the i387 choice
and as from Sep 2012 the current release of the AAP architecture
therefore optionally supports that form.  Code that uses one NaN
encoding would usually be incompatible with code that uses the other
NaN encoding, so AAP ELF objects have a flag (`EF_AAP_NAN2008') to
record which encoding is being used.

   Assembly files can use the `.nan' directive to select between the
two encodings.  `.nan 2008' says that the assembly file uses the IEEE
754-2008 encoding while `.nan legacy' says that the file uses the
original AAP encoding.  If several `.nan' directives are given, the
final setting is the one that is used.

   The command-line options `-mnan=legacy' and `-mnan=2008' can be used
instead of `.nan legacy' and `.nan 2008' respectively.  However, any
`.nan' directive overrides the command-line setting.

   `.nan legacy' is the default if no `.nan' directive or `-mnan'
option is given.

   Note that  the LLVM integrated assembler does not produce NaNs
itself and therefore these directives do not affect code generation.
They simply control the setting of the `EF_AAP_NAN2008' flag.

   Traditional AAP assemblers do not support these directives.


File: llvm-assembler.info,  Node: AAP Option Stack,  Next: AAP ASE Instruction Generation Overrides,  Prev: AAP NaN Encodings,  Up: AAP-dependent

9.1.11 Directives to save and restore options
---------------------------------------------

The directives `.set push' and `.set pop' may be used to save and
restore the current settings for all the options which are controlled
by `.set'.  The `.set push' directive saves the current settings on a
stack.  The `.set pop' directive pops the stack and restores the
settings.

   These directives can be useful inside an macro which must change an
option such as the ISA level or instruction reordering but does not want
to change the state of the code which invoked the macro.

   Traditional AAP assemblers do not support these directives.


File: llvm-assembler.info,  Node: AAP ASE Instruction Generation Overrides,  Next: AAP Floating-Point,  Prev: AAP Option Stack,  Up: AAP-dependent

9.1.12 Directives to control generation of AAP ASE instructions
---------------------------------------------------------------

The directive `.set mips3d' makes the assembler accept instructions
from the AAP-3D Application Specific Extension from that point on in
the assembly.  The `.set nomips3d' directive prevents AAP-3D
instructions from being accepted.

   The directive `.set smartmips' makes the assembler accept
instructions from the SmartAAP Application Specific Extension to the
AAP32 ISA from that point on in the assembly.  The `.set nosmartmips'
directive prevents SmartAAP instructions from being accepted.

   The directive `.set mdmx' makes the assembler accept instructions
from the MDMX Application Specific Extension from that point on in the
assembly.  The `.set nomdmx' directive prevents MDMX instructions from
being accepted.

   The directive `.set dsp' makes the assembler accept instructions
from the DSP Release 1 Application Specific Extension from that point
on in the assembly.  The `.set nodsp' directive prevents DSP Release 1
instructions from being accepted.

   The directive `.set dspr2' makes the assembler accept instructions
from the DSP Release 2 Application Specific Extension from that point
on in the assembly.  This directive implies `.set dsp'.  The `.set
nodspr2' directive prevents DSP Release 2 instructions from being
accepted.

   The directive `.set mt' makes the assembler accept instructions from
the MT Application Specific Extension from that point on in the
assembly.  The `.set nomt' directive prevents MT instructions from
being accepted.

   The directive `.set mcu' makes the assembler accept instructions
from the MCU Application Specific Extension from that point on in the
assembly.  The `.set nomcu' directive prevents MCU instructions from
being accepted.

   The directive `.set msa' makes the assembler accept instructions
from the AAP SIMD Architecture Extension from that point on in the
assembly.  The `.set nomsa' directive prevents MSA instructions from
being accepted.

   The directive `.set virt' makes the assembler accept instructions
from the Virtualization Application Specific Extension from that point
on in the assembly.  The `.set novirt' directive prevents Virtualization
instructions from being accepted.

   The directive `.set xpa' makes the assembler accept instructions
from the XPA Extension from that point on in the assembly.  The `.set
noxpa' directive prevents XPA instructions from being accepted.

   Traditional AAP assemblers do not support these directives.


File: llvm-assembler.info,  Node: AAP Floating-Point,  Next: AAP Syntax,  Prev: AAP ASE Instruction Generation Overrides,  Up: AAP-dependent

9.1.13 Directives to override floating-point options
----------------------------------------------------

The directives `.set softfloat' and `.set hardfloat' provide finer
control of disabling and enabling float-point instructions.  These
directives always override the default (that hard-float instructions
are accepted) or the command-line options (`-msoft-float' and
`-mhard-float').

   The directives `.set singlefloat' and `.set doublefloat' provide
finer control of disabling and enabling double-precision float-point
operations.  These directives always override the default (that
double-precision operations are accepted) or the command-line options
(`-msingle-float' and `-mdouble-float').

   Traditional AAP assemblers do not support these directives.


File: llvm-assembler.info,  Node: AAP Syntax,  Prev: AAP Floating-Point,  Up: AAP-dependent

9.1.14 Syntactical considerations for the AAP assembler
-------------------------------------------------------

* Menu:

* AAP-Chars::                Special Characters


File: llvm-assembler.info,  Node: AAP-Chars,  Up: AAP Syntax

9.1.14.1 Special Characters
...........................

The presence of a `#' on a line indicates the start of a comment that
extends to the end of the current line.

   If a `#' appears as the first character of a line, the whole line is
treated as a comment, but in this case the line can also be a logical
line number directive (*note Comments::) or a preprocessor control
command (*note Preprocessing::).

   The `;' character can be used to separate statements on the same
line.


File: llvm-assembler.info,  Node: Reporting Bugs,  Next: Acknowledgements,  Prev: Machine Dependencies,  Up: Top

10 Reporting Bugs
*****************

Your bug reports play an essential role in making the LLVM integrated
assembler reliable.

   Reporting a bug may help you by bringing a solution to your problem,
or it may not.  But in any case the principal function of a bug report
is to help the entire community by making the next version of the LLVM
integrated assembler work better.  Bug reports are your contribution to
the maintenance of the LLVM integrated assembler.

   In order for a bug report to serve its purpose, you must include the
information that enables us to fix the bug.

* Menu:

* Bug Criteria::                Have you found a bug?
* Bug Reporting::               How to report bugs


File: llvm-assembler.info,  Node: Bug Criteria,  Next: Bug Reporting,  Up: Reporting Bugs

10.1 Have You Found a Bug?
==========================

If you are not sure whether you have found a bug, here are some
guidelines:

   * If the assembler gets a fatal signal, for any input whatever, that
     is a the LLVM integrated assembler bug.  Reliable assemblers never
     crash.

   * If the LLVM integrated assembler produces an error message for
     valid input, that is a bug.

   * If the LLVM integrated assembler does not produce an error message
     for invalid input, that is a bug.  However, you should note that
     your idea of "invalid input" might be our idea of "an extension"
     or "support for traditional practice".

   * If you are an experienced user of assemblers, your suggestions for
     improvement of the LLVM integrated assembler are welcome in any
     case.


File: llvm-assembler.info,  Node: Bug Reporting,  Prev: Bug Criteria,  Up: Reporting Bugs

10.2 How to Report Bugs
=======================

A number of companies and individuals offer support for GNU products.
If you obtained the LLVM integrated assembler from a support
organization, we recommend you contact that organization first.

   You can find contact information for many support companies and
individuals in the file `etc/SERVICE' in the GNU Emacs distribution.

   In any event, we also recommend that you send bug reports for the
LLVM integrated assembler to www.embecosm.com.

   The fundamental principle of reporting bugs usefully is this:
*report all the facts*.  If you are not sure whether to state a fact or
leave it out, state it!

   Often people omit facts because they think they know what causes the
problem and assume that some details do not matter.  Thus, you might
assume that the name of a symbol you use in an example does not matter.
Well, probably it does not, but one cannot be sure.  Perhaps the bug is
a stray memory reference which happens to fetch from the location where
that name is stored in memory; perhaps, if the name were different, the
contents of that location would fool the assembler into doing the right
thing despite the bug.  Play it safe and give a specific, complete
example.  That is the easiest thing for you to do, and the most helpful.

   Keep in mind that the purpose of a bug report is to enable us to fix
the bug if it is new to us.  Therefore, always write your bug reports
on the assumption that the bug has not been reported previously.

   Sometimes people give a few sketchy facts and ask, "Does this ring a
bell?"  This cannot help us fix a bug, so it is basically useless.  We
respond by asking for enough details to enable us to investigate.  You
might as well expedite matters by sending them to begin with.

   To enable us to fix the bug, you should include all these things:

   * The version of the LLVM integrated assembler.  the LLVM integrated
     assembler announces it if you start it with the `--version'
     argument.

     Without this, we will not know whether there is any point in
     looking for the bug in the current version of the LLVM integrated
     assembler.

   * Any patches you may have applied to the the LLVM integrated
     assembler source.

   * The type of machine you are using, and the operating system name
     and version number.

   * What compiler (and its version) was used to compile the LLVM
     integrated assembler--e.g.  "`gcc-2.7'".

   * The command arguments you gave the assembler to assemble your
     example and observe the bug.  To guarantee you will not omit
     something important, list them all.  A copy of the Makefile (or
     the output from make) is sufficient.

     If we were to try to guess the arguments, we would probably guess
     wrong and then we might not encounter the bug.

   * A complete input file that will reproduce the bug.  If the bug is
     observed when the assembler is invoked via a compiler, send the
     assembler source, not the high level language source.  Clang/LLVM
     will produce the assembler source when run with the `-S' option.
     With Clang/LLVM you can also use the options `-v --save-temps';
     this will save the assembler source in a file with an extension of
     `.s', and also show you exactly how the LLVM integrated assembler
     is being run.

   * A description of what behavior you observe that you believe is
     incorrect.  For example, "It gets a fatal signal."

     Of course, if the bug is that the LLVM integrated assembler gets a
     fatal signal, then we will certainly notice it.  But if the bug is
     incorrect output, we might not notice unless it is glaringly
     wrong.  You might as well not give us a chance to make a mistake.

     Even if the problem you experience is a fatal signal, you should
     still say so explicitly.  Suppose something strange is going on,
     such as, your copy of the LLVM integrated assembler is out of
     sync, or you have encountered a bug in the C library on your
     system.  (This has happened!)  Your copy might crash and ours
     would not.  If you told us to expect a crash, then when ours fails
     to crash, we would know that the bug was not happening for us.  If
     you had not told us to expect a crash, then we would not be able
     to draw any conclusion from our observations.

   * If you wish to suggest changes to the the LLVM integrated
     assembler source, send us context diffs, as generated by `diff'
     with the `-u', `-c', or `-p' option.  Always send diffs from the
     old file to the new file.  If you even discuss something in the
     the LLVM integrated assembler source, refer to it by context, not
     by line number.

     The line numbers in our development sources will not match those
     in your sources.  Your line numbers would convey no useful
     information to us.

   Here are some things that are not necessary:

   * A description of the envelope of the bug.

     Often people who encounter a bug spend a lot of time investigating
     which changes to the input file will make the bug go away and which
     changes will not affect it.

     This is often time consuming and not very useful, because the way
     we will find the bug is by running a single example under the
     debugger with breakpoints, not by pure deduction from a series of
     examples.  We recommend that you save your time for something else.

     Of course, if you can find a simpler example to report _instead_
     of the original one, that is a convenience for us.  Errors in the
     output will be easier to spot, running under the debugger will take
     less time, and so on.

     However, simplification is not vital; if you do not want to do
     this, report the bug anyway and send us the entire test case you
     used.

   * A patch for the bug.

     A patch for the bug does help us if it is a good one.  But do not
     omit the necessary information, such as the test case, on the
     assumption that a patch is all we need.  We might see problems
     with your patch and decide to fix the problem another way, or we
     might not understand it at all.

     Sometimes with a program as complicated as the LLVM integrated
     assembler it is very hard to construct an example that will make
     the program follow a certain path through the code.  If you do not
     send us the example, we will not be able to construct one, so we
     will not be able to verify that the bug is fixed.

     And if we cannot understand what bug you are trying to fix, or why
     your patch should be an improvement, we will not install it.  A
     test case will help us to understand.

   * A guess about what the bug is or what it depends on.

     Such guesses are usually wrong.  Even we cannot guess right about
     such things without first using the debugger to find the facts.


File: llvm-assembler.info,  Node: Acknowledgements,  Next: GNU Free Documentation License,  Prev: Reporting Bugs,  Up: Top

11 Acknowledgements
*******************

If you have contributed to GAS and your name isn't listed here, it is
not meant as a slight.  We just don't know about it.  Send mail to the
maintainer, and we'll correct the situation.  Currently the maintainer
is Nick Clifton (email address `nickc@redhat.com').

   Dean Elsner wrote the original GNU assembler for the VAX.(1)

   Jay Fenlason maintained GAS for a while, adding support for
GDB-specific debug information and the 68k series machines, most of the
preprocessing pass, and extensive changes in `messages.c',
`input-file.c', `write.c'.

   K. Richard Pixley maintained GAS for a while, adding various
enhancements and many bug fixes, including merging support for several
processors, breaking GAS up to handle multiple object file format back
ends (including heavy rewrite, testing, an integration of the coff and
b.out back ends), adding configuration including heavy testing and
verification of cross assemblers and file splits and renaming,
converted GAS to strictly ANSI C including full prototypes, added
support for m680[34]0 and cpu32, did considerable work on i960
including a COFF port (including considerable amounts of reverse
engineering), a SPARC opcode file rewrite, DECstation, rs6000, and
hp300hpux host ports, updated "know" assertions and made them work,
much other reorganization, cleanup, and lint.

   Ken Raeburn wrote the high-level BFD interface code to replace most
of the code in format-specific I/O modules.

   The original VMS support was contributed by David L. Kashtan.  Eric
Youngdale has done much work with it since.

   The Intel 80386 machine description was written by Eliot Dresselhaus.

   Minh Tran-Le at IntelliCorp contributed some AIX 386 support.

   The Motorola 88k machine description was contributed by Devon Bowen
of Buffalo University and Torbjorn Granlund of the Swedish Institute of
Computer Science.

   Keith Knowles at the Open Software Foundation wrote the original
MIPS back end (`tc-mips.c', `tc-mips.h'), and contributed Rose format
support (which hasn't been merged in yet).  Ralph Campbell worked with
the MIPS code to support a.out format.

   Support for the Zilog Z8k and Renesas H8/300 processors (tc-z8k,
tc-h8300), and IEEE 695 object file format (obj-ieee), was written by
Steve Chamberlain of Cygnus Support.  Steve also modified the COFF back
end to use BFD for some low-level operations, for use with the H8/300
and AMD 29k targets.

   John Gilmore built the AMD 29000 support, added `.include' support,
and simplified the configuration of which versions accept which
directives.  He updated the 68k machine description so that Motorola's
opcodes always produced fixed-size instructions (e.g., `jsr'), while
synthetic instructions remained shrinkable (`jbsr').  John fixed many
bugs, including true tested cross-compilation support, and one bug in
relaxation that took a week and required the proverbial one-bit fix.

   Ian Lance Taylor of Cygnus Support merged the Motorola and MIT
syntax for the 68k, completed support for some COFF targets (68k, i386
SVR3, and SCO Unix), added support for MIPS ECOFF and ELF targets,
wrote the initial RS/6000 and PowerPC assembler, and made a few other
minor patches.

   Steve Chamberlain made GAS able to generate listings.

   Hewlett-Packard contributed support for the HP9000/300.

   Jeff Law wrote GAS and BFD support for the native HPPA object format
(SOM) along with a fairly extensive HPPA testsuite (for both SOM and
ELF object formats).  This work was supported by both the Center for
Software Science at the University of Utah and Cygnus Support.

   Support for ELF format files has been worked on by Mark Eichin of
Cygnus Support (original, incomplete implementation for SPARC), Pete
Hoogenboom and Jeff Law at the University of Utah (HPPA mainly),
Michael Meissner of the Open Software Foundation (i386 mainly), and Ken
Raeburn of Cygnus Support (sparc, and some initial 64-bit support).

   Linas Vepstas added GAS support for the ESA/390 "IBM 370"
architecture.

   Richard Henderson rewrote the Alpha assembler. Klaus Kaempf wrote
GAS and BFD support for openVMS/Alpha.

   Timothy Wall, Michael Hayes, and Greg Smart contributed to the
various tic* flavors.

   David Heine, Sterling Augustine, Bob Wilson and John Ruttenberg from
Tensilica, Inc. added support for Xtensa processors.

   Several engineers at Cygnus Support have also provided many small
bug fixes and configuration enhancements.

   Jon Beniston added support for the Lattice Mico32 architecture.

   Jeremy Bennett of Embecosm created the version for the LLVM
Integrated Assembler as a derived document of the GNU Assembler Manual.

   Many others have contributed large or small bugfixes and
enhancements.  If you have contributed significant work and are not
mentioned on this list, and want to be, let us know.  Some of the
history has been lost; we are not intentionally leaving anyone out.

   ---------- Footnotes ----------

   (1) Any more details?


File: llvm-assembler.info,  Node: GNU Free Documentation License,  Next: AS Index,  Prev: Acknowledgements,  Up: Top

Appendix A GNU Free Documentation License
*****************************************

                     Version 1.3, 3 November 2008

     Copyright (C) 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
     `http://fsf.org/'

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document "free" in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of "copyleft", which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.
     We recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it
     can be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     "Document", below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as "you".  You
     accept the license if you copy, modify or distribute the work in a
     way requiring permission under copyright law.

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document's overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The "Invariant Sections" are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in
     the notice that says that the Document is released under this
     License.  If a section does not fit the above definition of
     Secondary then it is not allowed to be designated as Invariant.
     The Document may contain zero Invariant Sections.  If the Document
     does not identify any Invariant Sections then there are none.

     The "Cover Texts" are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images
     composed of pixels) generic paint programs or (for drawings) some
     widely available drawing editor, and that is suitable for input to
     text formatters or for automatic translation to a variety of
     formats suitable for input to text formatters.  A copy made in an
     otherwise Transparent file format whose markup, or absence of
     markup, has been arranged to thwart or discourage subsequent
     modification by readers is not Transparent.  An image format is
     not Transparent if used for any substantial amount of text.  A
     copy that is not "Transparent" is called "Opaque".

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and
     standard-conforming simple HTML, PostScript or PDF designed for
     human modification.  Examples of transparent image formats include
     PNG, XCF and JPG.  Opaque formats include proprietary formats that
     can be read and edited only by proprietary word processors, SGML or
     XML for which the DTD and/or processing tools are not generally
     available, and the machine-generated HTML, PostScript or PDF
     produced by some word processors for output purposes only.

     The "Title Page" means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, "Title
     Page" means the text near the most prominent appearance of the
     work's title, preceding the beginning of the body of the text.

     The "publisher" means any person or entity that distributes copies
     of the Document to the public.

     A section "Entitled XYZ" means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     "Acknowledgements", "Dedications", "Endorsements", or "History".)
     To "Preserve the Title" of such a section when you modify the
     Document means that it remains a section "Entitled XYZ" according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow
     the conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document's license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the
     title equally prominent and visible.  You may add other material
     on the covers in addition.  Copying with changes limited to the
     covers, as long as they preserve the title of the Document and
     satisfy these conditions, can be treated as verbatim copying in
     other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a
     machine-readable Transparent copy along with each Opaque copy, or
     state in or with each Opaque copy a computer-network location from
     which the general network-using public has access to download
     using public-standard network protocols a complete Transparent
     copy of the Document, free of added material.  If you use the
     latter option, you must take reasonably prudent steps, when you
     begin distribution of Opaque copies in quantity, to ensure that
     this Transparent copy will remain thus accessible at the stated
     location until at least one year after the last time you
     distribute an Opaque copy (directly or through your agents or
     retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of
     copies, to give them a chance to provide you with an updated
     version of the Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with
     the Modified Version filling the role of the Document, thus
     licensing distribution and modification of the Modified Version to
     whoever possesses a copy of it.  In addition, you must do these
     things in the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of
          previous versions (which should, if there were any, be listed
          in the History section of the Document).  You may use the
          same title as a previous version if the original publisher of
          that version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document's
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled "History", Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on
          the Title Page.  If there is no section Entitled "History" in
          the Document, create one stating the title, year, authors,
          and publisher of the Document as given on its Title Page,
          then add an item describing the Modified Version as stated in
          the previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in
          the "History" section.  You may omit a network location for a
          work that was published at least four years before the
          Document itself, or if the original publisher of the version
          it refers to gives permission.

       K. For any section Entitled "Acknowledgements" or "Dedications",
          Preserve the Title of the section, and preserve in the
          section all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document,
          unaltered in their text and in their titles.  Section numbers
          or the equivalent are not considered part of the section
          titles.

       M. Delete any section Entitled "Endorsements".  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          "Endorsements" or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option
     designate some or all of these sections as invariant.  To do this,
     add their titles to the list of Invariant Sections in the Modified
     Version's license notice.  These titles must be distinct from any
     other section titles.

     You may add a section Entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various
     parties--for example, statements of peer review or that the text
     has been approved by an organization as the authoritative
     definition of a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end
     of the list of Cover Texts in the Modified Version.  Only one
     passage of Front-Cover Text and one of Back-Cover Text may be
     added by (or through arrangements made by) any one entity.  If the
     Document already includes a cover text for the same cover,
     previously added by you or by arrangement made by the same entity
     you are acting on behalf of, you may not add another; but you may
     replace the old one, on explicit permission from the previous
     publisher that added the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination
     all of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     "History" in the various original documents, forming one section
     Entitled "History"; likewise combine any sections Entitled
     "Acknowledgements", and any sections Entitled "Dedications".  You
     must delete all sections Entitled "Endorsements."

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the
     documents in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow
     this License in all other respects regarding verbatim copying of
     that document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of
     a storage or distribution medium, is called an "aggregate" if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation's users beyond what the individual
     works permit.  When the Document is included in an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document's Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled "Acknowledgements",
     "Dedications", or "History", the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense, or distribute it is void,
     and will automatically terminate your rights under this License.

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly
     and finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from
     you under this License.  If your rights have been terminated and
     not permanently reinstated, receipt of a copy of some or all of
     the same material does not give you any rights to use it.

 10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     `http://www.gnu.org/copyleft/'.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If
     the Document does not specify a version number of this License,
     you may choose any version ever published (not as a draft) by the
     Free Software Foundation.  If the Document specifies that a proxy
     can decide which future versions of this License can be used, that
     proxy's public statement of acceptance of a version permanently
     authorizes you to choose that version for the Document.

 11. RELICENSING

     "Massive Multiauthor Collaboration Site" (or "MMC Site") means any
     World Wide Web server that publishes copyrightable works and also
     provides prominent facilities for anybody to edit those works.  A
     public wiki that anybody can edit is an example of such a server.
     A "Massive Multiauthor Collaboration" (or "MMC") contained in the
     site means any set of copyrightable works thus published on the MMC
     site.

     "CC-BY-SA" means the Creative Commons Attribution-Share Alike 3.0
     license published by Creative Commons Corporation, a not-for-profit
     corporation with a principal place of business in San Francisco,
     California, as well as future copyleft versions of that license
     published by that same organization.

     "Incorporate" means to publish or republish a Document, in whole or
     in part, as part of another Document.

     An MMC is "eligible for relicensing" if it is licensed under this
     License, and if all works that were first published under this
     License somewhere other than this MMC, and subsequently
     incorporated in whole or in part into the MMC, (1) had no cover
     texts or invariant sections, and (2) were thus incorporated prior
     to November 1, 2008.

     The operator of an MMC Site may republish an MMC contained in the
     site under CC-BY-SA on the same site at any time before August 1,
     2009, provided the MMC is eligible for relicensing.


ADDENDUM: How to use this License for your documents
====================================================

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.3
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
       Texts.  A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

   If you have Invariant Sections, Front-Cover Texts and Back-Cover
Texts, replace the "with...Texts." line with this:

         with the Invariant Sections being LIST THEIR TITLES, with
         the Front-Cover Texts being LIST, and with the Back-Cover Texts
         being LIST.

   If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License, to
permit their use in free software.


File: llvm-assembler.info,  Node: AS Index,  Prev: GNU Free Documentation License,  Up: Top

LLVM Integrated Assembler Index
*******************************

 [index ]
* Menu:

* #:                                     Comments.            (line  33)
* #APP:                                  Preprocessing.       (line  26)
* #NO_APP:                               Preprocessing.       (line  26)
* -cc1as:                                Command Line.        (line  14)
* -compress-debug-sections:              compress-debug-sections.
                                                              (line   6)
* -dwarf-debug-flags VALUE:              dwarf-debug-flags.   (line   6)
* -dwarf-debug-producer VALUE:           dwarf-debug-producer.
                                                              (line   6)
* -EB option (AAP):                      AAP Options.         (line  14)
* -EL option (AAP):                      AAP Options.         (line  14)
* -fdebug-compilation-dir VALUE:         fdebug-compilation-dir.
                                                              (line   6)
* -filetype asm:                         filetype.            (line   9)
* -filetype null:                        filetype.            (line  17)
* -filetype obj:                         filetype.            (line  20)
* -g:                                    g.                   (line   6)
* -G option (AAP):                       AAP Options.         (line   9)
* -gdwarf-2:                             gdwarf-n.            (line   6)
* -gdwarf-3:                             gdwarf-n.            (line   6)
* -gdwarf-4:                             gdwarf-n.            (line   6)
* -help:                                 help.                (line   6)
* -I PATH:                               include.             (line   6)
* -KPIC option, AAP:                     AAP Options.         (line  22)
* -main-file-name VALUE:                 main-file-name.      (line   6)
* -massembler-fatal-warnings:            warnings.            (line   6)
* -mllvm VALUE:                          llvm.                (line   6)
* -mnan= command line option, AAP:       AAP Options.         (line 341)
* -mno-sym32:                            AAP Options.         (line 282)
* -mnoexecstack:                         mnoexecstack.        (line   6)
* -mrelax-all:                           mrelax-all.          (line   6)
* -msave-temp-labels:                    symbol-options.      (line   6)
* -msym32:                               AAP Options.         (line 282)
* -mvxworks-pic option, AAP:             AAP Options.         (line  27)
* -n:                                    n.                   (line   6)
* -nocpp ignored (AAP):                  AAP Options.         (line 285)
* -o FILE:                               o.                   (line   6)
* -output-asm-variant VALUE:             output-asm-variant.  (line   6)
* -show-encoding:                        show-encoding.       (line   6)
* -show-inst:                            show-inst.           (line   6)
* -target-abi VALUE:                     target-abi.          (line   6)
* -target-cpu VALUE:                     target-cpu.          (line   6)
* -target-feature VALUE:                 target-feature.      (line   6)
* -triple VALUE:                         triple.              (line   6)
* -version:                              version.             (line   6)
* . (symbol):                            Dot.                 (line   6)
* .abort (deprecated) <1>:               Deprecated.          (line   9)
* .abort (deprecated):                   Abort.               (line   6)
* .altmacro (unsupported):               Unsupported.         (line  11)
* .ascii:                                Ascii.               (line   6)
* .balign:                               Balign.              (line   6)
* .balignl:                              Balign.              (line   6)
* .balignw:                              Balign.              (line   6)
* .bundle_align_mode:                    Bundle directives.   (line   6)
* .byte:                                 Byte.                (line   6)
* .cfi_adjust_cfa_offset:                CFI directives.      (line  75)
* .cfi_def_cfa:                          CFI directives.      (line  56)
* .cfi_def_cfa_offset:                   CFI directives.      (line  68)
* .cfi_def_cfa_register:                 CFI directives.      (line  62)
* .cfi_endproc:                          CFI directives.      (line  26)
* .cfi_escape:                           CFI directives.      (line 137)
* .cfi_lsda:                             CFI directives.      (line  46)
* .cfi_offset:                           CFI directives.      (line  81)
* .cfi_personality:                      CFI directives.      (line  33)
* .cfi_register:                         CFI directives.      (line  94)
* .cfi_rel_offset:                       CFI directives.      (line  86)
* .cfi_remember_state:                   CFI directives.      (line 117)
* .cfi_restore:                          CFI directives.      (line  99)
* .cfi_restore_state:                    CFI directives.      (line 117)
* .cfi_return_column (unsupported):      Unsupported.         (line  14)
* .cfi_same_value:                       CFI directives.      (line 111)
* .cfi_sections:                         CFI directives.      (line   6)
* .cfi_signal_frame:                     CFI directives.      (line 124)
* .cfi_startproc:                        CFI directives.      (line  16)
* .cfi_undefined:                        CFI directives.      (line 106)
* .cfi_val_encoded_addr (unsupported):   Unsupported.         (line  17)
* .cfi_window_save:                      CFI directives.      (line 129)
* .comm:                                 Comm.                (line   6)
* .data:                                 Data.                (line   6)
* .double:                               Double.              (line   6)
* .eject (unsupported):                  Unsupported.         (line  20)
* .else:                                 Else.                (line   6)
* .elseif:                               Elseif.              (line   6)
* .end:                                  End.                 (line   6)
* .endfunc (unsupported):                Unsupported.         (line  23)
* .endif:                                Endif.               (line   6)
* .endm:                                 Endm.                (line   6)
* .endr:                                 Endr.                (line   6)
* .equ:                                  Equ.                 (line   6)
* .equiv:                                Equiv.               (line   6)
* .eqv (unsupported):                    Unsupported.         (line  26)
* .err:                                  Err.                 (line   6)
* .error:                                Error.               (line   6)
* .exitm:                                Exitm.               (line   6)
* .extern:                               Extern.              (line   6)
* .fail (unsupported):                   Unsupported.         (line  29)
* .file:                                 File.                (line   6)
* .fill:                                 Fill.                (line   6)
* .float:                                Float.               (line   6)
* .func (unsupported):                   Unsupported.         (line  32)
* .global <1>:                           AAP insn.            (line  13)
* .global:                               Global.              (line   6)
* .gnu_attribute (unsupported):          Unsupported.         (line  35)
* .gnu_attribute 4, N directive, AAP:    AAP FP ABI History.  (line   6)
* .gnu_attribute Tag_GNU_AAP_ABI_FP, N directive, AAP: AAP FP ABI History.
                                                              (line   6)
* .hidden:                               Hidden.              (line   6)
* .hword (unsupported):                  Unsupported.         (line  38)
* .ident:                                Ident.               (line   6)
* .if:                                   If.                  (line   6)
* .ifb:                                  If.                  (line  22)
* .ifc:                                  If.                  (line  26)
* .ifdef:                                If.                  (line  17)
* .ifeq:                                 If.                  (line  37)
* .ifeqs:                                If.                  (line  40)
* .ifge:                                 If.                  (line  44)
* .ifgt:                                 If.                  (line  48)
* .ifle:                                 If.                  (line  52)
* .iflt:                                 If.                  (line  56)
* .ifnb:                                 If.                  (line  60)
* .ifnc:                                 If.                  (line  64)
* .ifndef:                               If.                  (line  70)
* .ifne:                                 If.                  (line  76)
* .ifnes:                                If.                  (line  80)
* .ifnotdef:                             If.                  (line  70)
* .incbin:                               Incbin.              (line   6)
* .include:                              Include.             (line   6)
* .insn:                                 AAP insn.            (line   6)
* .int:                                  Int.                 (line   6)
* .internal:                             Internal.            (line   6)
* .irp:                                  Irp.                 (line   6)
* .irpc:                                 Irpc.                (line   6)
* .lcomm:                                Lcomm.               (line   6)
* .line (deprecated):                    Line.                (line   6)
* .linet (deprecated):                   Deprecated.          (line  12)
* .linkonce (unsupported):               Unsupported.         (line  45)
* .list (unsupported):                   Unsupported.         (line  49)
* .loc_mark_labels (unsupported):        Unsupported.         (line  52)
* .local:                                Local.               (line   6)
* .long:                                 Long.                (line   6)
* .macro:                                Macro.               (line  28)
* .module:                               AAP assembly options.
                                                              (line   6)
* .module fp=NN directive, AAP:          AAP FP ABI Selection.
                                                              (line   6)
* .nan directive, AAP:                   AAP NaN Encodings.   (line   6)
* .noaltmacro (unsupported):             Unsupported.         (line  58)
* .nolist (unsupported):                 Unsupported.         (line  61)
* .o:                                    Object.              (line   6)
* .octa:                                 Octa.                (line   6)
* .offset (unsupported):                 Unsupported.         (line  64)
* .org:                                  Org.                 (line   6)
* .p2align:                              P2align.             (line   6)
* .p2alignl:                             P2align.             (line  28)
* .p2alignw:                             P2align.             (line  28)
* .popsection:                           PopSection.          (line   6)
* .previous:                             Previous.            (line   6)
* .print (unsupported):                  Unsupported.         (line  67)
* .protected:                            Protected.           (line   6)
* .psize (unsupported):                  Unsupported.         (line  70)
* .purgem:                               Purgem.              (line   6)
* .pushsection:                          PushSection.         (line   6)
* .quad:                                 Quad.                (line   6)
* .reloc (unsupported):                  Unsupported.         (line  74)
* .rept:                                 Rept.                (line   6)
* .sbttl (unsupported):                  Unsupported.         (line  77)
* .section:                              Section.             (line  18)
* .set arch=CPU:                         AAP ISA.             (line  19)
* .set at:                               AAP Macros.          (line  42)
* .set at=REG:                           AAP Macros.          (line  36)
* .set autoextend:                       AAP autoextend.      (line   6)
* .set doublefloat:                      AAP Floating-Point.  (line  12)
* .set dsp:                              AAP ASE Instruction Generation Overrides.
                                                              (line  21)
* .set dspr2:                            AAP ASE Instruction Generation Overrides.
                                                              (line  26)
* .set hardfloat:                        AAP Floating-Point.  (line   6)
* .set insn32:                           AAP assembly options.
                                                              (line  18)
* .set macro:                            AAP Macros.          (line  31)
* .set mcu:                              AAP ASE Instruction Generation Overrides.
                                                              (line  37)
* .set mdmx:                             AAP ASE Instruction Generation Overrides.
                                                              (line  16)
* .set mips3d:                           AAP ASE Instruction Generation Overrides.
                                                              (line   6)
* .set mipsN:                            AAP ISA.             (line   6)
* .set msa:                              AAP ASE Instruction Generation Overrides.
                                                              (line  42)
* .set mt:                               AAP ASE Instruction Generation Overrides.
                                                              (line  32)
* .set noat:                             AAP Macros.          (line  42)
* .set noautoextend:                     AAP autoextend.      (line   6)
* .set nodsp:                            AAP ASE Instruction Generation Overrides.
                                                              (line  21)
* .set nodspr2:                          AAP ASE Instruction Generation Overrides.
                                                              (line  26)
* .set noinsn32:                         AAP assembly options.
                                                              (line  18)
* .set nomacro:                          AAP Macros.          (line  31)
* .set nomcu:                            AAP ASE Instruction Generation Overrides.
                                                              (line  37)
* .set nomdmx:                           AAP ASE Instruction Generation Overrides.
                                                              (line  16)
* .set nomips3d:                         AAP ASE Instruction Generation Overrides.
                                                              (line   6)
* .set nomsa:                            AAP ASE Instruction Generation Overrides.
                                                              (line  42)
* .set nomt:                             AAP ASE Instruction Generation Overrides.
                                                              (line  32)
* .set nosmartmips:                      AAP ASE Instruction Generation Overrides.
                                                              (line  11)
* .set nosym32:                          AAP Symbol Sizes.    (line   6)
* .set novirt:                           AAP ASE Instruction Generation Overrides.
                                                              (line  47)
* .set noxpa:                            AAP ASE Instruction Generation Overrides.
                                                              (line  52)
* .set pop:                              AAP Option Stack.    (line   6)
* .set push:                             AAP Option Stack.    (line   6)
* .set singlefloat:                      AAP Floating-Point.  (line  12)
* .set smartmips:                        AAP ASE Instruction Generation Overrides.
                                                              (line  11)
* .set softfloat:                        AAP Floating-Point.  (line   6)
* .set sym32:                            AAP Symbol Sizes.    (line   6)
* .set virt:                             AAP ASE Instruction Generation Overrides.
                                                              (line  47)
* .set xpa:                              AAP ASE Instruction Generation Overrides.
                                                              (line  52)
* .short:                                Short.               (line   6)
* .single:                               Single.              (line   6)
* .size:                                 Size.                (line   6)
* .skip:                                 Skip.                (line   6)
* .sleb128:                              Sleb128.             (line   6)
* .space:                                Space.               (line   6)
* .string:                               String.              (line   6)
* .string16 (unsupported):               Unsupported.         (line  83)
* .string32 (unsupported):               Unsupported.         (line  83)
* .string64 (unsupported):               Unsupported.         (line  83)
* .string8 (unsupported):                Unsupported.         (line  83)
* .struct (unsupported):                 Unsupported.         (line  86)
* .subsection:                           SubSection.          (line   6)
* .text:                                 Text.                (line   6)
* .title (unsupported):                  Unsupported.         (line  89)
* .type:                                 Type.                (line   6)
* .uleb128:                              Uleb128.             (line   6)
* .version:                              Version.             (line   6)
* .vtable_entry (unsupported):           Unsupported.         (line  92)
* .vtable_inherit (unsupported):         Unsupported.         (line  95)
* .warning:                              Warning.             (line   6)
* .weak:                                 Weak.                (line   6)
* .weakref:                              Weakref.             (line   6)
* .word (unsupported):                   Unsupported.         (line  97)
* : (label):                             Statements.          (line  31)
* \" (doublequote character):            Strings.             (line  44)
* \\ (\ character):                      Strings.             (line  41)
* \b (backspace character):              Strings.             (line  16)
* \DDD (octal character code):           Strings.             (line  31)
* \f (formfeed character):               Strings.             (line  19)
* \n (newline character):                Strings.             (line  22)
* \r (carriage return character):        Strings.             (line  25)
* \t (tab):                              Strings.             (line  28)
* \XD... (hex character code):           Strings.             (line  37)
* a.out:                                 Object.              (line   6)
* AAP 32-bit microAAP instruction generation override: AAP assembly options.
                                                              (line  18)
* AAP AAP-3D instruction generation override: AAP ASE Instruction Generation Overrides.
                                                              (line   6)
* AAP architecture options:              AAP Options.         (line  30)
* AAP big-endian output:                 AAP Options.         (line  14)
* AAP CPU override:                      AAP ISA.             (line  19)
* AAP directives to override command line options: AAP assembly options.
                                                              (line   6)
* AAP DSP Release 1 instruction generation override: AAP ASE Instruction Generation Overrides.
                                                              (line  21)
* AAP DSP Release 2 instruction generation override: AAP ASE Instruction Generation Overrides.
                                                              (line  26)
* AAP eXtended Physical Address (XPA) instruction generation override: AAP ASE Instruction Generation Overrides.
                                                              (line  52)
* AAP IEEE 754 NaN data encoding selection: AAP NaN Encodings.
                                                              (line   6)
* AAP ISA override:                      AAP ISA.             (line   6)
* AAP line comment character:            AAP-Chars.           (line   6)
* AAP line separator:                    AAP-Chars.           (line  14)
* AAP little-endian output:              AAP Options.         (line  14)
* AAP MCU instruction generation override: AAP ASE Instruction Generation Overrides.
                                                              (line  37)
* AAP MDMX instruction generation override: AAP ASE Instruction Generation Overrides.
                                                              (line  16)
* AAP MT instruction generation override: AAP ASE Instruction Generation Overrides.
                                                              (line  32)
* AAP option stack:                      AAP Option Stack.    (line   6)
* AAP processor:                         AAP-dependent.       (line   6)
* AAP SIMD Architecture instruction generation override: AAP ASE Instruction Generation Overrides.
                                                              (line  42)
* abort directive (deprecated) <1>:      Deprecated.          (line   9)
* abort directive (deprecated):          Abort.               (line   6)
* absolute section:                      Ld Sections.         (line  27)
* addition, permitted arguments:         Infix Ops.           (line  44)
* addresses:                             Expressions.         (line   6)
* addresses, format of:                  Secs Background.     (line  54)
* advancing location counter:            Org.                 (line   6)
* align directive:                       Align.               (line   6)
* aligned instruction bundle:            Bundle directives.   (line   6)
* altmacro directive (unsupported):      Unsupported.         (line  11)
* arguments for addition:                Infix Ops.           (line  44)
* arguments for subtraction:             Infix Ops.           (line  49)
* arguments in expressions:              Arguments.           (line   6)
* arithmetic functions:                  Operators.           (line   6)
* arithmetic operands:                   Arguments.           (line   6)
* ascii directive:                       Ascii.               (line   6)
* asciz directive:                       Asciz.               (line   6)
* assembler bugs, reporting:             Bug Reporting.       (line   6)
* assembler crash:                       Bug Criteria.        (line   9)
* assembler internal logic error:        As Sections.         (line  15)
* assembler version:                     information.         (line   6)
* assembler, and linker:                 Secs Background.     (line  10)
* assembler, invoking directly:          Command Line.        (line  29)
* assembly code generation:              codegen.             (line   6)
* assembly debug output:                 debug.               (line   6)
* assembly help:                         information.         (line   6)
* assembly instruction encoding:         encoding.            (line   6)
* assembly symbol table control:         symbol-options.      (line   6)
* assembly target specification:         target.              (line   6)
* assembly warning control:              warnings.            (line   6)
* assembly, additional LLVM options:     llvm.                (line   6)
* assembly, output options:              output.              (line   6)
* assigning values to symbols <1>:       Equ.                 (line   6)
* assigning values to symbols:           Setting Symbols.     (line   6)
* at register, AAP:                      AAP Macros.          (line  36)
* attributes, symbol:                    Symbol Attributes.   (line   6)
* backslash (\\):                        Strings.             (line  41)
* backspace (\b):                        Strings.             (line  16)
* balign directive:                      Balign.              (line   6)
* balignl directive:                     Balign.              (line   6)
* balignw directive:                     Balign.              (line   6)
* big-endian output, AAP:                AAP Options.         (line  14)
* bignums:                               Bignums.             (line   6)
* binary files, including:               Incbin.              (line   6)
* binary integers:                       Integers.            (line   6)
* bss section <1>:                       bss.                 (line   6)
* bss section:                           Ld Sections.         (line  18)
* bug criteria:                          Bug Criteria.        (line   6)
* bug reports:                           Bug Reporting.       (line   6)
* bugs in assembler:                     Reporting Bugs.      (line   6)
* bundle:                                Bundle directives.   (line   6)
* bundle-locked:                         Bundle directives.   (line  35)
* bundle_align_mode directive:           Bundle directives.   (line   6)
* bundle_lock directive:                 Bundle directives.   (line  28)
* bundle_unlock directive:               Bundle directives.   (line  28)
* byte directive:                        Byte.                (line   6)
* carriage return (\r):                  Strings.             (line  25)
* cfi_adjust_cfa_offset directive:       CFI directives.      (line  75)
* cfi_def_cfa directive:                 CFI directives.      (line  56)
* cfi_def_cfa_offset directive:          CFI directives.      (line  68)
* cfi_def_cfa_register directive:        CFI directives.      (line  62)
* cfi_endproc directive:                 CFI directives.      (line  26)
* cfi_escape directive:                  CFI directives.      (line 137)
* cfi_lsda directive:                    CFI directives.      (line  46)
* cfi_offset directive:                  CFI directives.      (line  81)
* cfi_personality directive:             CFI directives.      (line  33)
* cfi_register directive:                CFI directives.      (line  94)
* cfi_rel_offset directive:              CFI directives.      (line  86)
* cfi_remember_state directive:          CFI directives.      (line 117)
* cfi_restore directive:                 CFI directives.      (line  99)
* cfi_restore_state directive:           CFI directives.      (line 117)
* cfi_return_column directive (unsupported): Unsupported.     (line  14)
* cfi_same_value directive:              CFI directives.      (line 111)
* cfi_sections directive:                CFI directives.      (line   6)
* cfi_signal_frame directive:            CFI directives.      (line 124)
* cfi_startproc directive:               CFI directives.      (line  16)
* cfi_undefined directive:               CFI directives.      (line 106)
* cfi_val_encoded_addr directive (unsupported): Unsupported.  (line  17)
* cfi_window_save directive:             CFI directives.      (line 129)
* character constants:                   Characters.          (line   6)
* character escape codes:                Strings.             (line  16)
* character, single:                     Chars.               (line   6)
* characters used in symbols:            Symbol Intro.        (line   6)
* code generation, assembly:             codegen.             (line   6)
* COMDAT:                                Unsupported.         (line  45)
* comm directive:                        Comm.                (line   6)
* command line conventions:              Command Line.        (line   6)
* comments:                              Comments.            (line   6)
* comments, removed by preprocessor:     Preprocessing.       (line  11)
* common sections:                       Unsupported.         (line  45)
* common variable storage:               bss.                 (line   6)
* comparison expressions:                Infix Ops.           (line  55)
* conditional assembly:                  If.                  (line   6)
* constant, single character:            Chars.               (line   6)
* constants:                             Constants.           (line   6)
* constants, bignum:                     Bignums.             (line   6)
* constants, character:                  Characters.          (line   6)
* constants, converted by preprocessor:  Preprocessing.       (line  14)
* constants, floating point:             Flonums.             (line   6)
* constants, integer:                    Integers.            (line   6)
* constants, number:                     Numbers.             (line   6)
* constants, string:                     Strings.             (line   6)
* crash of assembler:                    Bug Criteria.        (line   9)
* current address:                       Dot.                 (line   6)
* current address, advancing:            Org.                 (line   6)
* data directive:                        Data.                (line   6)
* debug for register windws:             CFI directives.      (line 129)
* debug output, assembly:                debug.               (line   6)
* debuggers, and symbol order:           Symbols.             (line  10)
* decimal integers:                      Integers.            (line  12)
* deprecated directives:                 Deprecated.          (line   6)
* directives and instructions:           Statements.          (line  20)
* directives, machine independent:       Pseudo Ops.          (line   6)
* Disable floating-point instructions:   AAP Floating-Point.  (line   6)
* Disable single-precision floating-point operations: AAP Floating-Point.
                                                              (line  12)
* dollar local symbols:                  Symbol Names.        (line 110)
* dot (symbol):                          Dot.                 (line   6)
* double directive:                      Double.              (line   6)
* doublequote (\"):                      Strings.             (line  44)
* eight-byte integer:                    Quad.                (line   9)
* eject directive (unsupported):         Unsupported.         (line  20)
* else directive:                        Else.                (line   6)
* elseif directive:                      Elseif.              (line   6)
* empty expressions:                     Empty Exprs.         (line   6)
* encoding of instructions, assembly:    encoding.            (line   6)
* end directive:                         End.                 (line   6)
* endfunc directive (unsupported):       Unsupported.         (line  23)
* endif directive:                       Endif.               (line   6)
* endm directive <1>:                    Macro.               (line 138)
* endm directive:                        Endm.                (line   6)
* endr directive:                        Endr.                (line   6)
* EOF, newline must precede:             Statements.          (line  14)
* equ directive:                         Equ.                 (line   6)
* equiv directive:                       Equiv.               (line   6)
* eqv directive (unsupported):           Unsupported.         (line  26)
* err directive:                         Err.                 (line   6)
* error directive:                       Error.               (line   6)
* error messages:                        Errors.              (line   6)
* error on valid input:                  Bug Criteria.        (line  13)
* escape codes, character:               Strings.             (line  16)
* exitm directive <1>:                   Macro.               (line 141)
* exitm directive:                       Exitm.               (line   6)
* expr (internal section):               As Sections.         (line  19)
* expression arguments:                  Arguments.           (line   6)
* expressions:                           Expressions.         (line   6)
* expressions, comparison:               Infix Ops.           (line  55)
* expressions, empty:                    Empty Exprs.         (line   6)
* expressions, integer:                  Integer Exprs.       (line   6)
* extern directive:                      Extern.              (line   6)
* fail directive (unsupported):          Unsupported.         (line  29)
* fatal signal:                          Bug Criteria.        (line   9)
* file directive:                        File.                (line   6)
* files, including:                      Include.             (line   6)
* files, input:                          Input Files.         (line   6)
* fill directive:                        Fill.                (line   6)
* filling memory <1>:                    Space.               (line   6)
* filling memory:                        Skip.                (line   6)
* float directive:                       Float.               (line   6)
* floating point numbers:                Flonums.             (line   6)
* floating point numbers (double):       Double.              (line   6)
* floating point numbers (single) <1>:   Single.              (line   6)
* floating point numbers (single):       Float.               (line   6)
* flonums:                               Flonums.             (line   6)
* format of error messages:              Errors.              (line  25)
* format of warning messages:            Errors.              (line  13)
* formfeed (\f):                         Strings.             (line  19)
* func directive (unsupported):          Unsupported.         (line  32)
* functions, in expressions:             Operators.           (line   6)
* global directive:                      Global.              (line   6)
* GNU assembler directives, unsupported: Unsupported.         (line   6)
* GNU object attributes:                 Object Attributes.   (line   6)
* gnu_attribute directive (unsupported): Unsupported.         (line  35)
* gold:                                  Object.              (line  15)
* gp register, AAP:                      AAP Small Data.      (line   6)
* grouping data:                         Sub-Sections.        (line   6)
* help, assembly:                        information.         (line   6)
* hex character code (\XD...):           Strings.             (line  37)
* hexadecimal integers:                  Integers.            (line  15)
* hidden directive:                      Hidden.              (line   6)
* hword directive (unsupported):         Unsupported.         (line  38)
* ident directive:                       Ident.               (line   6)
* if directive:                          If.                  (line   6)
* ifb directive:                         If.                  (line  22)
* ifc directive:                         If.                  (line  26)
* ifdef directive:                       If.                  (line  17)
* ifeq directive:                        If.                  (line  37)
* ifeqs directive:                       If.                  (line  40)
* ifge directive:                        If.                  (line  44)
* ifgt directive:                        If.                  (line  48)
* ifle directive:                        If.                  (line  52)
* iflt directive:                        If.                  (line  56)
* ifnb directive:                        If.                  (line  60)
* ifnc directive:                        If.                  (line  64)
* ifndef directive:                      If.                  (line  70)
* ifne directive:                        If.                  (line  76)
* ifnes directive:                       If.                  (line  80)
* ifnotdef directive:                    If.                  (line  70)
* incbin directive:                      Incbin.              (line   6)
* include directive:                     Include.             (line   6)
* include directive search path:         include.             (line   6)
* infix operators:                       Infix Ops.           (line   6)
* input:                                 Input Files.         (line   6)
* input file linenumbers:                Input Files.         (line  41)
* instruction bundle:                    Bundle directives.   (line   6)
* instructions and directives:           Statements.          (line  20)
* int directive:                         Int.                 (line   6)
* integer expressions:                   Integer Exprs.       (line   6)
* integer, 16-byte:                      Octa.                (line   6)
* integer, 8-byte:                       Quad.                (line   9)
* integers:                              Integers.            (line   6)
* integers, 16-bit (unsupported):        Unsupported.         (line  38)
* integers, 32-bit:                      Int.                 (line   6)
* integers, binary:                      Integers.            (line   6)
* integers, decimal:                     Integers.            (line  12)
* integers, hexadecimal:                 Integers.            (line  15)
* integers, octal:                       Integers.            (line   9)
* integers, one byte:                    Byte.                (line   6)
* internal assembler sections:           As Sections.         (line   6)
* internal directive:                    Internal.            (line   6)
* invalid input:                         Bug Criteria.        (line  16)
* invocation summary:                    Overview.            (line   6)
* irp directive:                         Irp.                 (line   6)
* irpc directive:                        Irpc.                (line   6)
* label (:):                             Statements.          (line  31)
* labels:                                Labels.              (line   6)
* lcomm directive:                       Lcomm.               (line   6)
* ld:                                    Object.              (line  15)
* length of symbols:                     Symbol Intro.        (line  14)
* lflags (unsupported):                  Unsupported.         (line  42)
* lflags directive (unsupported):        Unsupported.         (line  42)
* line comment character:                Comments.            (line  19)
* line comment character, AAP:           AAP-Chars.           (line   6)
* line directive (deprecated):           Line.                (line   6)
* line numbers, in input files:          Input Files.         (line  41)
* line numbers, in warnings/errors:      Errors.              (line  17)
* line separator character:              Statements.          (line   6)
* line separator, AAP:                   AAP-Chars.           (line  14)
* lines starting with #:                 Comments.            (line  33)
* linet directive (deprecated):          Deprecated.          (line  12)
* linker:                                Object.              (line  15)
* linker, and assembler:                 Secs Background.     (line  10)
* linkonce directive (unsupported):      Unsupported.         (line  45)
* list directive (unsupported):          Unsupported.         (line  49)
* listing control, turning off:          Unsupported.         (line  61)
* listing control, turning on:           Unsupported.         (line  49)
* listing control: new page (unsupported): Unsupported.       (line  20)
* listing control: paper size (unsupported): Unsupported.     (line  70)
* listing control: subtitle (unsupported): Unsupported.       (line  77)
* listing control: title line (unsupported): Unsupported.     (line  89)
* little-endian output, AAP:             AAP Options.         (line  14)
* lld:                                   Object.              (line  15)
* LLVM options for assembly:             llvm.                (line   6)
* ln directive:                          Ln.                  (line   6)
* loc directive:                         Loc.                 (line   6)
* loc_mark_labels directive (unsupported): Unsupported.       (line  52)
* local common symbols:                  Lcomm.               (line   6)
* local directive:                       Local.               (line   6)
* local labels:                          Symbol Names.        (line  40)
* local symbol names:                    Symbol Names.        (line  27)
* LOCAL within macros (unsupported):     Unsupported.         (line  55)
* location counter:                      Dot.                 (line   6)
* location counter, advancing:           Org.                 (line   6)
* logical line number:                   Line.                (line   6)
* logical line numbers:                  Comments.            (line  33)
* long directive:                        Long.                (line   6)
* machine dependencies:                  Machine Dependencies.
                                                              (line   6)
* machine independent directives:        Pseudo Ops.          (line   6)
* machine instructions (not covered):    Manual.              (line  15)
* machine-independent syntax:            Syntax.              (line   6)
* macro directive:                       Macro.               (line  28)
* macros:                                Macro.               (line   6)
* macros, count executed:                Macro.               (line 143)
* macros, LOCAL (unsupported):           Unsupported.         (line  55)
* manual, structure and purpose:         Manual.              (line   6)
* mclinker:                              Object.              (line  15)
* messages from assembler:               Errors.              (line   6)
* minus, permitted arguments:            Infix Ops.           (line  49)
* named section:                         Section.             (line   6)
* named sections:                        Ld Sections.         (line   8)
* names, symbol:                         Symbol Names.        (line   6)
* new page, in listings (unsupported):   Unsupported.         (line  20)
* newline (\n):                          Strings.             (line  22)
* newline, required at file end:         Statements.          (line  14)
* noaltmacro directive (unsupported):    Unsupported.         (line  58)
* nolist directive (unsupported):        Unsupported.         (line  61)
* null-terminated strings:               Asciz.               (line   6)
* number constants:                      Numbers.             (line   6)
* number of macros executed:             Macro.               (line 143)
* numbered subsections:                  Sub-Sections.        (line   6)
* numbers, 16-bit (unsupported):         Unsupported.         (line  38)
* numeric values:                        Expressions.         (line   6)
* object attributes:                     Object Attributes.   (line   6)
* object file:                           Object.              (line   6)
* object file format:                    Object Formats.      (line   6)
* obsolescent directives:                Deprecated.          (line   6)
* octa directive:                        Octa.                (line   6)
* octal character code (\DDD):           Strings.             (line  31)
* octal integers:                        Integers.            (line   9)
* offset directive (unsupported):        Unsupported.         (line  64)
* operands in expressions:               Arguments.           (line   6)
* operator precedence:                   Infix Ops.           (line  11)
* operators, in expressions:             Operators.           (line   6)
* operators, permitted arguments:        Infix Ops.           (line   6)
* option summary:                        Overview.            (line   6)
* options, all versions of assembler:    Invoking.            (line   6)
* options, command line:                 Command Line.        (line  44)
* org directive:                         Org.                 (line   6)
* output file:                           Object.              (line   6)
* output options for assembly:           output.              (line   6)
* p2align directive:                     P2align.             (line   6)
* p2alignl directive:                    P2align.             (line  28)
* p2alignw directive:                    P2align.             (line  28)
* padding the location counter:          Align.               (line   6)
* padding the location counter given a power of two: P2align. (line   6)
* padding the location counter given number of bytes: Balign. (line   6)
* page, in listings (unsupported):       Unsupported.         (line  20)
* paper size, for listings (unsupported): Unsupported.        (line  70)
* paths for .include:                    include.             (line   6)
* patterns, writing in memory:           Fill.                (line   6)
* PIC selection, AAP:                    AAP Options.         (line  22)
* plus, permitted arguments:             Infix Ops.           (line  44)
* popsection directive:                  PopSection.          (line   6)
* precedence of operators:               Infix Ops.           (line  11)
* precision, floating point:             Flonums.             (line   6)
* prefix operators:                      Prefix Ops.          (line   6)
* preprocessing:                         Preprocessing.       (line   6)
* preprocessing, turning on and off:     Preprocessing.       (line  26)
* previous directive:                    Previous.            (line   6)
* print directive (unsupported):         Unsupported.         (line  67)
* protected directive:                   Protected.           (line   6)
* pseudo-ops, machine independent:       Pseudo Ops.          (line   6)
* psize directive (unsupported):         Unsupported.         (line  70)
* purgem directive:                      Purgem.              (line   6)
* purpose of the LLVM integrated assembler: LLVM Assembler.   (line  13)
* pushsection directive:                 PushSection.         (line   6)
* quad directive:                        Quad.                (line   6)
* reloc directive (unsupported):         Unsupported.         (line  74)
* relocation:                            Sections.            (line   6)
* relocation example:                    Ld Sections.         (line  38)
* reporting bugs in assembler:           Reporting Bugs.      (line   6)
* rept directive:                        Rept.                (line   6)
* sbttl directive (unsupported):         Unsupported.         (line  77)
* search path for .include:              include.             (line   6)
* section directive:                     Section.             (line  18)
* Section Stack <1>:                     SubSection.          (line   6)
* Section Stack <2>:                     Section.             (line  13)
* Section Stack <3>:                     PushSection.         (line   6)
* Section Stack <4>:                     Previous.            (line   6)
* Section Stack:                         PopSection.          (line   6)
* section-relative addressing:           Secs Background.     (line  54)
* sections:                              Sections.            (line   6)
* sections in messages, internal:        As Sections.         (line   6)
* sections, named:                       Ld Sections.         (line   8)
* set directive:                         Set.                 (line   6)
* short directive:                       Short.               (line   6)
* single character constant:             Chars.               (line   6)
* single directive:                      Single.              (line   6)
* sixteen bit integers (unsupported):    Unsupported.         (line  38)
* sixteen byte integer:                  Octa.                (line   6)
* size directive:                        Size.                (line   6)
* skip directive:                        Skip.                (line   6)
* sleb128 directive:                     Sleb128.             (line   6)
* small data, AAP:                       AAP Small Data.      (line   6)
* SmartAAP instruction generation override: AAP ASE Instruction Generation Overrides.
                                                              (line  11)
* source program:                        Input Files.         (line   6)
* space directive:                       Space.               (line   6)
* standard assembler sections:           Secs Background.     (line  26)
* statement separator character:         Statements.          (line   6)
* statement separator, AAP:              AAP-Chars.           (line  14)
* statements, structure of:              Statements.          (line   6)
* stopping the assembly:                 Abort.               (line   6)
* string constants:                      Strings.             (line   6)
* string directive:                      String.              (line   6)
* string literals:                       Ascii.               (line   6)
* string, copying to object file:        String.              (line   6)
* string16 directive (unsupported):      Unsupported.         (line  83)
* string16, copying to object file (unsupported): Unsupported.
                                                              (line  83)
* string32 directive (unsupported):      Unsupported.         (line  83)
* string32, copying to object file (unsupported): Unsupported.
                                                              (line  83)
* string64 directive (unsupported):      Unsupported.         (line  83)
* string64, copying to object file (unsupported): Unsupported.
                                                              (line  83)
* string8 directive (unsupported):       Unsupported.         (line  83)
* string8, copying to object file (unsupported): Unsupported. (line  83)
* struct directive (unsupported):        Unsupported.         (line  86)
* subexpressions:                        Arguments.           (line  25)
* subsection directive:                  SubSection.          (line   6)
* subtitles for listings (unsupported):  Unsupported.         (line  77)
* subtraction, permitted arguments:      Infix Ops.           (line  49)
* summary of options:                    Overview.            (line   6)
* supporting files, including:           Include.             (line   6)
* symbol attributes:                     Symbol Attributes.   (line   6)
* symbol names:                          Symbol Names.        (line   6)
* symbol names, local:                   Symbol Names.        (line  27)
* symbol names, temporary:               Symbol Names.        (line  40)
* symbol table control, assembly:        symbol-options.      (line   6)
* symbol type <1>:                       Type.                (line   6)
* symbol type:                           Symbol Type.         (line   6)
* symbol value:                          Symbol Value.        (line   6)
* symbol value, setting:                 Set.                 (line   6)
* symbol values, assigning:              Setting Symbols.     (line   6)
* symbol versioning:                     Symver.              (line   6)
* symbol, common:                        Comm.                (line   6)
* symbol, making visible to linker:      Global.              (line   6)
* symbols:                               Symbols.             (line   6)
* symbols, assigning values to:          Equ.                 (line   6)
* symbols, local common:                 Lcomm.               (line   6)
* symver directive:                      Symver.              (line   6)
* syntax, machine-independent:           Syntax.              (line   6)
* tab (\t):                              Strings.             (line  28)
* target specification, assembly:        target.              (line   6)
* temporary symbol names:                Symbol Names.        (line  40)
* text directive:                        Text.                (line   6)
* title directive (unsupported):         Unsupported.         (line  89)
* turning preprocessing on and off:      Preprocessing.       (line  26)
* type directive:                        Type.                (line   6)
* type of a symbol:                      Symbol Type.         (line   6)
* uleb128 directive:                     Uleb128.             (line   6)
* undefined section:                     Ld Sections.         (line  34)
* unsupported GNU assembler directives:  Unsupported.         (line   6)
* value of a symbol:                     Symbol Value.        (line   6)
* version directive:                     Version.             (line   6)
* version, assembler:                    information.         (line   6)
* versions of symbols:                   Symver.              (line   6)
* Virtualization instruction generation override: AAP ASE Instruction Generation Overrides.
                                                              (line  47)
* visibility <1>:                        Protected.           (line   6)
* visibility <2>:                        Internal.            (line   6)
* visibility:                            Hidden.              (line   6)
* vtable_entry directive (unsupported):  Unsupported.         (line  92)
* vtable_inherit directive (unsupported): Unsupported.        (line  95)
* warning control, assembly:             warnings.            (line   6)
* warning directive:                     Warning.             (line   6)
* warning messages:                      Errors.              (line   6)
* weak directive:                        Weak.                (line   6)
* weakref directive:                     Weakref.             (line   6)
* whitespace:                            Whitespace.          (line   6)
* whitespace, removed by preprocessor:   Preprocessing.       (line   7)
* word directive (unsupported):          Unsupported.         (line  97)
* writing patterns in memory:            Fill.                (line   6)
* zero-terminated strings:               Asciz.               (line   6)



Tag Table:
Node: Top817
Node: Overview1882
Node: Manual2536
Node: LLVM Assembler3532
Node: Object Formats4920
Node: Command Line5331
Ref: cc1as5861
Node: Input Files7844
Node: Object10450
Node: Errors11534
Node: Invoking12917
Node: codegen14636
Node: mnoexecstack14844
Node: mrelax-all15178
Node: n15703
Node: debug15860
Node: compress-debug-sections16364
Node: dwarf-debug-flags16573
Node: dwarf-debug-producer16829
Node: fdebug-compilation-dir17092
Node: gdwarf-n17352
Node: g17660
Node: main-file-name17816
Node: encoding18008
Node: show-encoding18282
Node: show-inst18475
Node: include18663
Node: information19640
Node: help19893
Node: version20594
Node: llvm20944
Node: output21197
Node: filetype21507
Node: output-asm-variant22188
Node: o22498
Node: symbol-options22775
Node: target23119
Node: target-abi23431
Node: target-cpu23632
Node: target-feature23859
Node: triple24100
Node: warnings24286
Node: Syntax24532
Node: Preprocessing25159
Node: Whitespace26469
Node: Comments26877
Node: Symbol Intro28949
Node: Statements29688
Node: Constants31515
Node: Characters32160
Node: Strings32674
Node: Chars34926
Node: Numbers35824
Node: Integers36401
Node: Bignums37069
Node: Flonums37437
Node: Sections38956
Node: Secs Background39346
Node: Ld Sections43657
Node: As Sections46065
Node: Sub-Sections47062
Node: bss50068
Node: Symbols50962
Node: Labels51652
Node: Setting Symbols52093
Node: Symbol Names52621
Node: Dot57545
Node: Symbol Attributes58029
Node: Symbol Value58624
Node: Symbol Type59693
Node: Expressions60071
Node: Empty Exprs60853
Node: Integer Exprs61237
Node: Arguments61644
Node: Operators62787
Node: Prefix Ops63134
Node: Infix Ops63498
Node: Pseudo Ops65900
Node: Abort70253
Node: Align70740
Node: Ascii72771
Node: Asciz73089
Node: Balign73346
Node: Bundle directives75258
Node: Byte78199
Node: CFI directives78470
Node: Comm83644
Node: Data84967
Node: Double85324
Node: Else85699
Node: Elseif86037
Node: End86368
Node: Endif86620
Node: Endm86915
Node: Endr87079
Node: Equ87289
Node: Equiv87543
Node: Err88111
Node: Error88461
Node: Exitm88918
Node: Extern89099
Node: File89397
Node: Fill90056
Node: Float91058
Node: Global91439
Node: Hidden92003
Node: Ident92594
Node: If92807
Node: Incbin96037
Node: Include96598
Node: Int97161
Node: Internal97554
Node: Irp98213
Node: Irpc99104
Node: Lcomm100033
Node: Line100679
Node: Ln101113
Node: Loc101649
Node: Local103037
Node: Long103649
Node: Macro103839
Node: Octa109678
Node: Org110023
Node: P2align111368
Node: PopSection113308
Node: Previous113828
Node: Protected115257
Node: Purgem115920
Node: PushSection116157
Node: Quad116912
Node: Rept117379
Node: Section117806
Node: Set122795
Node: Short123300
Node: Single123659
Node: Size124041
Node: Skip124396
Node: Sleb128124730
Node: Space125064
Node: String125402
Node: SubSection126003
Node: Symver126592
Node: Text128979
Node: Type129338
Node: Uleb128131343
Node: Version131681
Node: Warning131966
Node: Weak132204
Node: Weakref132481
Node: Deprecated133462
Node: Unsupported133777
Node: Object Attributes136091
Node: Machine Dependencies136496
Node: AAP-dependent137385
Node: AAP Options138770
Node: AAP Macros153542
Ref: AAP Macros-Footnote-1156253
Node: AAP Symbol Sizes156396
Node: AAP Small Data158074
Node: AAP ISA160240
Node: AAP assembly options162044
Node: AAP autoextend163180
Node: AAP insn163915
Node: AAP FP ABIs165273
Node: AAP FP ABI History165727
Node: AAP FP ABI Variants166493
Node: AAP FP ABI Selection169049
Node: AAP FP ABI Compatibility170119
Node: AAP NaN Encodings170936
Node: AAP Option Stack172919
Node: AAP ASE Instruction Generation Overrides173709
Node: AAP Floating-Point176420
Node: AAP Syntax177331
Node: AAP-Chars177597
Node: Reporting Bugs178147
Node: Bug Criteria178960
Node: Bug Reporting179854
Node: Acknowledgements186841
Ref: Acknowledgements-Footnote-1191954
Node: GNU Free Documentation License191980
Node: AS Index217161

End Tag Table
