This is llvm-assembler.info, produced by makeinfo version 5.2 from
llvm-assembler.texi.

This file documents the LLVM Integrated Assembler.

   Copyright (C) 1991-2015 Free Software Foundation, Inc.  Copyright (C)
2015 Embecosm Limited

   Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled "GNU
Free Documentation License".

INFO-DIR-SECTION Software development
START-INFO-DIR-ENTRY
* Clang: (clang).               The LLVM integrated assembler
END-INFO-DIR-ENTRY


File: llvm-assembler.info,  Node: Top,  Next: Overview,  Up: (dir)

Using the LLVM integrated assembler
***********************************

This file is a user guide to the LLVM integrated assembler version 3.8.

   This document is distributed under the terms of the GNU Free
Documentation License.  A copy of the license is included in the section
entitled "GNU Free Documentation License".

* Menu:

* Overview::                    Overview
* Invoking::                    Command-Line Options
* Syntax::                      Syntax
* Sections::                    Sections and Relocation
* Symbols::                     Symbols
* Expressions::                 Expressions
* Pseudo Ops::                  Assembler Directives
* Machine Dependencies::        Machine Dependent Features
* Reporting Bugs::              Reporting Bugs
* Acknowledgments::             Who Did What
* GNU Free Documentation License::  GNU Free Documentation License
* AS Index::                    LLVM Integrated Assembler Index


File: llvm-assembler.info,  Node: Overview,  Next: Invoking,  Prev: Top,  Up: Top

1 Overview
**********

* Menu:

* Manual::                      Structure of this Manual
* LLVM Assembler::              The LLVM Integrated Assembler
* Object Formats::              Object File Formats
* Command Line::                Command Line
* Input Files::                 Input Files
* Object::                      Output (Object) File
* Errors::                      Error and Warning Messages


File: llvm-assembler.info,  Node: Manual,  Next: LLVM Assembler,  Up: Overview

1.1 Structure of this Manual
============================

This manual is intended to describe what you need to know to use the
LLVM integrated assembler.  We cover the syntax expected in source
files, including notation for symbols, constants, and expressions; the
directives that the assembler understands; and of course how to invoke
the assembler.

   This manual also describes some of the machine-dependent features of
various flavors of the assembler.

   On the other hand, this manual is _not_ intended as an introduction
to programming in assembly language--let alone programming in general!
In a similar vein, we make no attempt to introduce the machine
architecture; we do _not_ describe the instruction set, standard
mnemonics, registers or addressing modes that are standard to a
particular architecture.  You may want to consult the manufacturer's
machine architecture manual for this information.


File: llvm-assembler.info,  Node: LLVM Assembler,  Next: Object Formats,  Prev: Manual,  Up: Overview

1.2 The LLVM Integrated Assembler
=================================

The LLVM integrated assembler is really a family of assemblers.  If you
use (or have used) the LLVM integrated assembler on one architecture,
you should find a fairly similar environment when you use it on another
architecture.  Each version has much in common with the others,
including object file formats, most assembler directives (often called
"pseudo-ops") and assembler syntax.

   The LLVM integrated assembler is primarily intended to assemble the
output of the LLVM compiler for use by the linker.  Nevertheless, the
LLVM integrated assembler should handle correctly everything that other
assemblers for the same machine would assemble.

   This doesn't mean the assembler always uses the same syntax as
another assembler for the same architecture.  Unlike the GNU assembler
the LLVM integrated assembler usually assembles directly from the
internal LLVM Intermediate Represenation (IR) for the machine
instructions, rather than from a separate textual file (although it can
also do the latter).

   Unlike older assemblers, the LLVM integrated is designed to assemble
a source program in one pass of the source file.  This has a subtle
impact on the '.org' directive (*note '.org': Org.).


File: llvm-assembler.info,  Node: Object Formats,  Next: Command Line,  Prev: LLVM Assembler,  Up: Overview

1.3 Object File Formats
=======================

The LLVM integrated assembler can produce the ELF, COFF and Mach-O
object file formats with DWARF or STABS debug information.  However
STABS support (a much older format) is limited, and unlike the GNU
assembler, directives for debugging symbols are only available for the
DWARF format.  *Note Symbol Attributes: Symbol Attributes.


File: llvm-assembler.info,  Node: Command Line,  Next: Input Files,  Prev: Object Formats,  Up: Overview

1.4 Command Line
================

There is no separate command for running the LLVM integrated assembler.
The assembler is automatically invoked for any assembler source file
from the Clang front end to LLVM.
     clang ... MYFILE.s
   The output of the assembly will be controlled by the usual 'clang'
options.  So by default the assembled output will be found in 'a.out',
or if the '-c' flag is specified in MYFILE.o.

   The main 'clang' command is a driver programs for the various
sub-commands that make up the Clang/LLVM compiler system.  The LLVM
integrated assembler can be invoked directly through the Clang front end
to LLVM.
     clang -cc1as ...
   In this case only one source file is given, and any assembled output
is sent to standard output.

   Unless otherwise indicated, clang will use the default architecture.
This can be changed using the '-target' option.
     clang -target ARCH ... MYFILE.s

   It is common practice to provide a symbolic link from clang to
architecture specific command name, which then implies use of that
architecture.
     ARCH-cc ... MYFILE.s

   If the assembler is invoked directly, then the assembler option to
specify the target triple must be used.  For example:
     clang -cc1as -triple i686-apple-darwin9

   Note in particular that using -cc1as means any clang options are
ignored, so
     ARCH-cc -cc1as ...
   will invoke the assembler for the default architecture, _not_ the
ARCH architecture.

   After the program name 'clang' or 'ARCH-cc', the command line may
contain options and file names.  Options may appear in any order, and
may be before, after, or between file names.  The order of file names is
not significant.

   Any command line argument passed to the assembler that begins with a
hyphen ('-') is an option.  Each option changes the behavior of the
assembler.  No option changes the way another option works.  An option
is a '-' followed by one or more letters; the case of the letter is
important.  All options are optional.

   Some options expect exactly one file name to follow them.  The file
name may either immediately follow the option's letter (compatible with
older assemblers) or it may be the next command argument (GNU standard).
These two command lines are equivalent:

     ARCH-cc -o my-object-file.o mumble.s
     ARCH-cc -omy-object-file.o mumble.s

   The details of command line options for the LLVM integrated assembler
are described in a later chapter.  *Note Invoking::.


File: llvm-assembler.info,  Node: Input Files,  Next: Object,  Prev: Command Line,  Up: Overview

1.5 Input Files
===============

We use the phrase "source program", abbreviated "source", to describe
the program input to one run of the LLVM integrated assembler.  The
program may be in one or more files; how the source is partitioned into
files doesn't change the meaning of the source.

   Unlike the GNU assembler, the LLVM integrated assembler will by
default generate a fully linked executable, created by assembling each
source file in turn and then linking them.  Supplying the '-c' option
will cause just the assembly to happen, with one object file produced
for each source file.  There is no concept of concatenating the source
files for a single file assembly.

   A command line should have one or more input file names.  Any with
the suffix '.s' or '.S' will be assembled.  The difference between the
suffixes is that files ending in '.S' will first be passed through the C
pre-processor.  For example
     ARCH-cc -c hello.s
   will assembler the code in 'hello.s', while:
     ARCH-cc -c hello.S
   will pass 'hello.s' through the C pre-processor, then assemble it.

   The suffix can be overridden using Clang's '-x' option to specify the
language of succeeding files on the command line.  For the integrated
assembler, the two useful arguments to the '-x' option are 'assembler'
and 'assembler-with-cpp'.  So for example, the following would ensure
'hello.s' is passed through the C pre-processor before assembling:
     ARCH-cc -c -x assembler-with-cpp hello.s

   When invoked directly, the integrated assembler must be given at most
one argument to assemble.  It can also be used as a pipe:
     ARCH-cc -cc1as -triple ARCH -filetype obj < hello.s > hello.o

Filenames and Line-numbers
--------------------------

There are two ways of locating a line in the input file (or files) and
either may be used in reporting error messages.  One way refers to a
line number in a physical file; the other refers to a line number in a
"logical" file.  *Note Error and Warning Messages: Errors.

   "Physical files" are those files named in the command line given to
the LLVM integrated assembler.

   "Logical files" are simply names declared explicitly by assembler
directives; they bear no relation to physical files.  Logical file names
help error messages reflect the original source file, when assembler
source is itself synthesized from other files.  The LLVM integrated
assembler understands the '#' directives emitted by the LLVM C
pre-processor.  See also *note '.file': File.


File: llvm-assembler.info,  Node: Object,  Next: Errors,  Prev: Input Files,  Up: Overview

1.6 Output (Object) File
========================

Every time you run the LLVM integrated assembler it produces an output
file, which is your assembly language program translated into numbers.
This file is the object file.  Its default name is 'a.out'.  You can
give it another name by using the '-o' option.  Conventionally, object
file names end with '.o'.  The default name is used for historical
reasons: older assemblers were capable of assembling self-contained
programs directly into a runnable program.  For some formats, this isn't
currently possible, but it can be done for the 'a.out' format.

   The object file is meant to be input to the linker.  Clang/LLVM tool
chains have considerable choice of linker to use: GNU 'ld', GNU 'gold',
the LLVM 'mc-linker' and the LLVM linker, 'lld'.  The object file
contains assembled program code, information to help the linker
integrate the assembled program into a runnable file, and (optionally)
symbolic information for the debugger.


File: llvm-assembler.info,  Node: Errors,  Prev: Object,  Up: Overview

1.7 Error and Warning Messages
==============================

The LLVM integrated assembler may write warnings and error messages to
the standard error file (usually your terminal).  This should not happen
when the Clang/LLVM compiler runs the integrated assembler automatically
on assembler generated from C and C++ programs.  Warnings report an
assumption made so that the assembler could keep assembling a flawed
program; errors report a grave problem that stops the assembly.

   Warning messages have the format

     file_name:NNN:CCC:warning:Warning Message Text

(where NNN is a line number and CCC is a character position within the
line).  If a logical file name has been given (*note '.file': File.) it
is used for the filename, otherwise the name of the current input file
is used.  If a logical line number was given (*note '.line': Line.) then
it is used to calculate the number printed, otherwise the actual line in
the current source file is printed.  The message text is intended to be
self explanatory (in the grand Unix tradition).

   Error messages have the format
     file_name:NNN:CCC:error:Error Message Text
   The file name and line number are derived as for warning messages.
The actual message text may be rather less explanatory because many of
them aren't supposed to happen.


File: llvm-assembler.info,  Node: Invoking,  Next: Syntax,  Prev: Overview,  Up: Top

2 Command-Line Options
**********************

This chapter describes command-line options available in _all_ versions
of the GNU assembler; see *note Machine Dependencies::, for options
specific to particular machine architectures.

   There are three ways to pass options to the assembler.  Some options
are common to both the C compiler and assembler and can be used "as is".
     clang MYFILE.S -o MYFILE.o

   If the assembler is invoked automatically by Clang, then options
specific to the assembler may be passed with either the '-Wa' or
'-Xassembler' option:
     clang -Xassembler -compress-debug-sections ... MYFILE.S
     clang -Wa,-gdwarf-3 ... MYFILE.S

   For '-Wa', multiple options, or arguments to options, should be
separated by commas:
     ARCH-cc -c -g -O -Wa,-I.,-compress-debug-sections file.c

   If the assembler is invoked directly, then all options are
automatically interpreted as assembler options.
     clang -cc1as -help

   _Note:_ Some options to the LLVM integrated assembler are considered
part of the internal interface between the clang driver and the LLVM
integrated assembler component.  These options are not accessible via
'-Wa' or '-Xassembler', and can only be used when the assembler is
invoked directly using '-cc1as'.  Avoid using such options-since they
are part of an internal interface they are subject to change or removal
without warning.

* Menu:

* common-options::     Options Which are Common to the Compiler and Assembler
* assembler-options::  Options Passed by '-Wa' or '-Xassembler'
* internal-options::   Internal Assembler Options


File: llvm-assembler.info,  Node: common-options,  Next: assembler-options,  Up: Invoking

2.1 Options Which are Common to the Compiler and Assembler
==========================================================

These are options, which are common to the C/C++ compiler and are passed
on from Clang to the assembler when processing any assembler files.

'-g'
     Generate source-level debug information.  Whether this generates
     DWARF-2, DWARF-3 or DWARF-4 is target specific.  *Note Machine
     Dependencies::.

'-gdwarf-2'
'-gdwarf-3'
'-gdwarf-4'
     Generate source-level debug information using DWARF version 2, 3 or
     4 as indicated.  Default is DWARF version 4.

'-I PATH'
     Use this option to add a PATH to the list of directories the LLVM
     integrated assembler searches for files specified in '.include'
     directives (*note '.include': Include.).  You may use '-I' as many
     times as necessary to include a variety of paths.  The current
     working directory is always searched first; after that, the LLVM
     integrated assembler searches any '-I' directories in the same
     order as they were specified (left to right) on the command line.

     _Note:_ This directive is common to the C pre-processor option, so
     where the C pre-processor is used, any '#include' directives will
     also use these directories.  It is possible to pass this option
     using '-Wa' or '-Xassembler' to give an include search directory
     which is used only for assembler '.include' files.  For example:
          clang -IDIR1 -Wa,-IDIR2 MYFILE.S

     will search for any files in '#include' directives in DIR1 and any
     files in '.include' directives in DIR1 and then DIR2.

'-llvm VALUE'
     Pass the specified VALUE to the LLVM option processing system.  In
     general this is only of value to compiler developers.

'-mrelax-all'
     Relax all machine instructions.  For architectures which relax from
     short to longer instructions, this option says to relax all
     instructions to their long form, not just those that have to be.

     _Note:_ Some architectures generate long instructions and then
     relax to shorter instructions.  This is simpler to implement, but
     sub-optimal.  For these architectures, this flag has no effect.

'-o FILE'
     Specify FILE as the output file.  If not specified output will by
     default go to 'a.out' if the file type is 'obj' and to standard
     output if the file type is 'asm'.


File: llvm-assembler.info,  Node: assembler-options,  Next: internal-options,  Prev: common-options,  Up: Invoking

2.2 Options Passed by '-Wa' or '-Xassembler'
============================================

These are options which form the public (stable) interface to the LLVM
integrated assembler.  They must be passed to the assembler using either
the '-Xassembler' or '-Wa' options:
     clang -Xassembler OPTION ...
     clang -Wa,OPTION ...

'-compress-debug-sections'
     Compress DWARF debug sections using zlib.


File: llvm-assembler.info,  Node: internal-options,  Prev: assembler-options,  Up: Invoking

2.3 Internal Assembler Options
==============================

These are options which form the internal interface to the LLVM
integrated assembler.  They can only be used if the assembler is invoked
explicitly:
     clang -cc1as OPTION ...

   _Note:_ These options are subject to change or withdrawal without
warning, so should be avoided.

'-dwarf-debug-flags VALUE'
     VALUE is a string to embed in the DWARF debug flags record.

     _Note:_ This option can be passed direct to Clang, but is ignored
     with a warning.

'-dwarf-debug-producer VALUE'
     VALUE is a string to embed in the DWARF 'AT_producer' record.

'-fdebug-compilation-dir VALUE'
     VALUE is the compilation directory to embed in the debug info.

'-filetype TYPE'
     Specify the output file type

     'asm'
          Generate assembly source code.  This can be used to generate
          assembler source when using the assembler directly.  It is
          usually used when the assembler is transliterating between one
          assembler flavor and another.  This is the default when the
          assembler is invoked directly.

     'null'
          Do not generate any output

     'obj'
          Generate binary object files.

'-help'
     Produce a summary of the options available to the assembler.  This
     option has to be passed explicitly to the assembler, since
     otherwise the main Clang help will be provided.

     _Note:_ A side-effect of the clang driver is that this option
     cannot be specified using '-Wa' pr '-Xassembler'.  For example:
          clang -Wa,-help

     will just complain about the lack of input files.  The reason is
     that the driver just passes '-Wa' options to the assembler, without
     any knowledge of what they do.  It thus thinks 'clang' has been
     invoked without any file to process, so prints out the error
     message.

'-version'
     Print out version information about the LLVM integrated assembler.

     _Note:_ As with the '-help' option, this cannot be invoked using
     '-Wa'.

'-main-file-name VALUE'
     VALUE is the main file name to embed in the debug info.

'-massembler-fatal-warnings'
     Causes all assembly warnings to be fatal.

'-mnoexecstack'
     Mark the output file as not needing an executable stack.  On some
     architectures, for example Harvard architectures like AAP, it is
     impossible to execute the stack, so this option has no additional
     effect.

'-msave-temp-labels'
     Save temporary labels in the symbol table.

     _Note:_ This may change '.s' file semantics and shouldn't generally
     be used on compiler-generated code.

'-show-encoding'
     Show instruction encoding information in transliterate mode.

'-n'
     Don't automatically start assembly file with a text section.

'-output-asm-variant VALUE'
     VALUE specifies a particular assembler variant for the target
     architecture.  The meaning is target specific, and many targets
     have no variants.  *Note Machine Dependencies::.

'-show-inst'
     Show internal instruction representation in transliterate mode.

'-target-abi VALUE'
     Target a ABI of type VALUE.  Not all targets may offer ABI values.

'-target-cpu VALUE'
     Target a specific CPU variant.  Not all targets may offer CPU
     values.

'-target-feature VALUE'
     Set target specific attribute VALUE.  Not all targets may offer
     feature values.

'-triple VALUE'
     Specify the target triple for the assembler.  For example
     i686-apple-darwin9.


File: llvm-assembler.info,  Node: Syntax,  Next: Sections,  Prev: Invoking,  Up: Top

3 Syntax
********

This chapter describes the machine-independent syntax allowed in a
source file.  LLVM integrated assembler syntax is similar to what many
other assemblers use; it is inspired by the GNU assembler, which in
turns is inspired by the BSD 4.2 VAX assembler.

* Menu:

* Preprocessing::               Pre-Processing
* Whitespace::                  Whitespace
* Comments::                    Comments
* Symbol Intro::                Symbols
* Statements::                  Statements
* Constants::                   Constants


File: llvm-assembler.info,  Node: Preprocessing,  Next: Whitespace,  Up: Syntax

3.1 Pre-Processing
==================

The LLVM integrated assembler internal pre-processor:
   * adjusts and removes extra whitespace.  It leaves one space or tab
     before the keywords on a line, and turns any other whitespace on
     the line into a single space.

   * removes all comments, replacing them with a single space, or an
     appropriate number of newlines.

   * converts character constants into the appropriate numeric values.

   It does not do macro processing, include file handling, or anything
else you may get from your C compiler's pre-processor.  You can do
include file processing with the '.include' directive (*note '.include':
Include.).  You can use Clang to get other "CPP" style pre-processing by
giving the input file a '.S' suffix.  *Note Input Files: Input Files.

   Excess whitespace, comments, and character constants cannot be used
in the portions of the input text that are not pre-processed.

   Unlike the GNU assembler, '#NO_APP' and '#APP' before the text that
may contain whitespace or comments, and putting a line that says
'#NO_APP' after this text.  This feature is mainly intend to support
'asm' statements in compilers whose output is otherwise free of comments
and whitespace.


File: llvm-assembler.info,  Node: Whitespace,  Next: Comments,  Prev: Preprocessing,  Up: Syntax

3.2 Whitespace
==============

"Whitespace" is one or more blanks or tabs, in any order.  Whitespace is
used to separate symbols, and to make programs neater for people to
read.  Unless within character constants (*note Character Constants:
Characters.), any whitespace means the same as exactly one space.


File: llvm-assembler.info,  Node: Comments,  Next: Symbol Intro,  Prev: Whitespace,  Up: Syntax

3.3 Comments
============

There are two ways of rendering comments to LLVM integrated assembler.
In both cases the comment is equivalent to one space.

   Anything from '/*' through the next '*/' is a comment.  This means
you may not nest these comments.

     /*
       The only way to include a newline ('\n') in a comment
       is to use this sort of comment.
     */

     /* This sort of comment does not nest. */

   Anything from a "line comment" character up to the next newline is
considered a comment and is ignored.  The line comment character is
target specific, and some targets have multiple comment characters.
Some targets also have line comment characters that only work if they
are the first character on a line.  Some targets use a sequence of two
characters to introduce a line comment.  Some targets can also change
their line comment characters depending upon command line options that
have been used.  For more details see the _Syntax_ section in the
documentation for individual targets.

   If the line comment character is the hash sign ('#') then it still
has the special ability to enable and disable pre-processing (*note
Preprocessing::) and to specify logical line numbers:

   To be compatible with past assemblers, lines that begin with '#' have
a special interpretation.  Following the '#' should be an absolute
expression (*note Expressions::): the logical line number of the _next_
line.  Then a string (*note Strings: Strings.) is allowed: if present it
is a new logical file name.  The rest of the line, if any, should be
whitespace.

   If the first non-whitespace characters on the line are not numeric,
the line is ignored.  (Just like a comment.)

                               # This is an ordinary comment.
     # 42-6 "new_file_name"    # New logical file name
                               # This is logical line # 36.
   This feature is deprecated, and may disappear from future versions of
the LLVM integrated assembler.


File: llvm-assembler.info,  Node: Symbol Intro,  Next: Statements,  Prev: Comments,  Up: Syntax

3.4 Symbols
===========

A "symbol" is one or more characters chosen from the set of all letters
(both upper and lower case), digits and the three characters '_.$'.  On
most machines, you can also use '$' in symbol names; exceptions are
noted in *note Machine Dependencies::.  No symbol may begin with a
digit.  Case is significant.  There is no length limit: all characters
are significant.  Multi-Byte characters are supported.  Symbols are
delimited by characters not in that set, or by the beginning of a file
(since the source program must end with a newline, the end of a file is
not a possible symbol delimiter).  *Note Symbols::.


File: llvm-assembler.info,  Node: Statements,  Next: Constants,  Prev: Symbol Intro,  Up: Syntax

3.5 Statements
==============

A "statement" ends at a newline character ('\n') or a "line separator
character".  The line separator character is target specific and
described in the _Syntax_ section of each target's documentation.  Not
all targets support a line separator character.  The newline or line
separator character is considered to be part of the preceding statement.
Newlines and separators within character constants are an exception:
they do not end statements.

   It is an error to end any statement with end-of-file: the last
character of any input file should be a newline.

   An empty statement is allowed, and may include whitespace.  It is
ignored.

   A statement begins with zero or more labels, optionally followed by a
key symbol which determines what kind of statement it is.  The key
symbol determines the syntax of the rest of the statement.  If the
symbol begins with a dot '.' then the statement is an assembler
directive: typically valid for any computer.  If the symbol begins with
a letter the statement is an assembly language "instruction": it
assembles into a machine language instruction.  Different versions of
the LLVM integrated assembler for different computers recognize
different instructions.  In fact, the same symbol may represent a
different instruction in a different computer's assembly language.

   A label is a symbol immediately followed by a colon (':').
Whitespace before a label or after a colon is permitted, but you may not
have whitespace between a label's symbol and its colon.  *Note Labels::.

     label:     .directive    followed by something
     another_label:           # This is an empty statement.
                instruction   operand_1, operand_2, ...


File: llvm-assembler.info,  Node: Constants,  Prev: Statements,  Up: Syntax

3.6 Constants
=============

A constant is a number, written so that its value is known by
inspection, without knowing any context.  Like this:
     .byte  74, 0112, 092, 0x4A, 0X4a, 'J', '\J' # All the same value.
     .ascii "Ring the bell\7"                  # A string constant.
     .octa  0x123456789abcdef0123456789ABCDEF0 # A bignum.
     .float 0f-314159265358979323846264338327\
     95028841971.693993751E-40                 # - pi, a flonum.

* Menu:

* Characters::                  Character Constants
* Numbers::                     Number Constants


File: llvm-assembler.info,  Node: Characters,  Next: Numbers,  Up: Constants

3.6.1 Character Constants
-------------------------

There are two kinds of character constants.  A "character" stands for
one character in one byte and its value may be used in numeric
expressions.  String constants (properly called string _literals_) are
potentially many bytes and their values may not be used in arithmetic
expressions.

* Menu:

* Strings::                     Strings
* Chars::                       Characters


File: llvm-assembler.info,  Node: Strings,  Next: Chars,  Up: Characters

3.6.1.1 Strings
...............

A "string" is written between double-quotes.  It may contain
double-quotes or null characters.  The way to get special characters
into a string is to "escape" these characters: precede them with a
backslash '\' character.  For example '\\' represents one backslash: the
first '\' is an escape which tells the LLVM integrated assembler to
interpret the second character literally as a backslash (which prevents
the LLVM integrated assembler from recognizing the second '\' as an
escape character).  The list of escapes is target and operating system
specific.  The following list of escapes are commonly recognized.

'\b'
     Mnemonic for backspace; for ASCII this is octal code 010.

'\f'
     Mnemonic for formfeed; for ASCII this is octal code 014.

'\n'
     Mnemonic for newline; for ASCII this is octal code 012.

'\r'
     Mnemonic for carriage-Return; for ASCII this is octal code 015.

'\t'
     Mnemonic for horizontal Tab; for ASCII this is octal code 011.

'\ DIGIT DIGIT DIGIT'
     An octal character code.  The numeric code is 3 octal digits.  For
     compatibility with other Unix systems, 8 and 9 are accepted as
     digits: for example, '\008' has the value 010, and '\009' the value
     011.

'\x HEX-DIGITS...'
     A hex character code.  All trailing hex digits are combined.
     Either upper or lower case 'x' works.

'\\'
     Represents one '\' character.

'\"'
     Represents one '"' character.  Needed in strings to represent this
     character, because an unescaped '"' would end the string.

'\ ANYTHING-ELSE'
     Any other character when escaped by '\' assembles as if the '\' was
     not present.  This is a change in behavior from the GNU assembler,
     which assumed that if you used an escape sequence you clearly
     didn't want the literal interpretation of the following character
     and should be warned.

   Which characters are escapable, and what those escapes represent,
varies widely among assemblers.  The current set is the set provided in
the user manual for the GNU assembler, and is a subset of what most C
compilers recognize.  If you are in doubt, do not use an escape
sequence.


File: llvm-assembler.info,  Node: Chars,  Prev: Strings,  Up: Characters

3.6.1.2 Characters
..................

A single character should be written as that character surrounded by
single quotes.  The same escapes apply to characters as to strings.  So
if you want to write the character backslash, you must write ''\\''
where the first '\' escapes the second '\'.  As you can see, the quote
is an acute accent, not a grave accent.  A newline within single quotes
is taken as a literal character and does not count as the end of a
statement.  The value of a character constant in a numeric expression is
the machine's byte-wide code for that character.  The LLVM integrated
assembler assumes your character code is ASCII: ''A'' means 65, ''B''
means 66, and so on.

   _Note:_ The GNU assembler used a single quote before a character.
There was no requirement for the closing quote afterwards.


File: llvm-assembler.info,  Node: Numbers,  Prev: Characters,  Up: Constants

3.6.2 Number Constants
----------------------

The LLVM integrated assembler distinguishes three kinds of numbers
according to how they are stored in the target machine.  _Integers_ are
numbers that would fit into an 'int' in the C language.  _Bignums_ are
integers, but they are stored in more than 32 bits.  _Flonums_ are
floating point numbers, described below.

* Menu:

* Integers::                    Integers
* Bignums::                     Bignums
* Flonums::                     Flonums


File: llvm-assembler.info,  Node: Integers,  Next: Bignums,  Up: Numbers

3.6.2.1 Integers
................

A binary integer is '0b' or '0B' followed by zero or more of the binary
digits '01'.

   An octal integer is '0' followed by zero or more of the octal digits
('01234567').

   A decimal integer starts with a non-zero digit followed by zero or
more digits ('0123456789').

   A hexadecimal integer is '0x' or '0X' followed by one or more
hexadecimal digits chosen from '0123456789abcdefABCDEF'.

   Integers have the usual values.  To denote a negative integer, use
the prefix operator '-' discussed under expressions (*note Prefix
Operators: Prefix Ops.).


File: llvm-assembler.info,  Node: Bignums,  Next: Flonums,  Prev: Integers,  Up: Numbers

3.6.2.2 Bignums
...............

A "bignum" has the same syntax and semantics as an integer except that
the number (or its negative) takes more than 32 bits to represent in
binary.  The distinction is made because in some places integers are
permitted while bignums are not.


File: llvm-assembler.info,  Node: Flonums,  Prev: Bignums,  Up: Numbers

3.6.2.3 Flonums
...............

A "flonum" represents a floating point number.  The translation is
indirect: a decimal floating point number from the text is converted by
the LLVM integrated assembler to a generic binary floating point number
of more than sufficient precision.  This generic floating point number
is converted to a particular computer's floating point format (or
formats) by a portion of the LLVM integrated assembler specialized to
that computer.

   A flonum is written by writing (in order)
   * The digit '0'.
   * A letter, to tell the LLVM integrated assembler the rest of the
     number is a flonum.  'e' is recommended.  Case is not important.
     There is architecture specificity here, with different letters
     having different meanings.

   * An optional sign: either '+' or '-'.

   * An optional "integer part": zero or more decimal digits.

   * An optional "fractional part": '.' followed by zero or more decimal
     digits.

   * An optional exponent, consisting of:

        * An 'E' or 'e'.
        * Optional sign: either '+' or '-'.
        * One or more decimal digits.

   At least one of the integer part or the fractional part must be
present.  The floating point number has the usual base-10 value.

   The LLVM integrated assembler does all processing using integers.
Flonums are computed independently of any floating point hardware in the
computer running the LLVM integrated assembler.


File: llvm-assembler.info,  Node: Sections,  Next: Symbols,  Prev: Syntax,  Up: Top

4 Sections and Relocation
*************************

* Menu:

* Secs Background::             Background
* Ld Sections::                 Linker Sections
* As Sections::                 Assembler Internal Sections
* Sub-Sections::                Sub-Sections
* bss::                         bss Section


File: llvm-assembler.info,  Node: Secs Background,  Next: Ld Sections,  Up: Sections

4.1 Background
==============

Roughly, a section is a range of addresses, with no gaps; all data "in"
those addresses is treated the same for some particular purpose.  For
example there may be a "read only" section.

   The linker reads many object files (partial programs) and combines
their contents to form a runnable program.  When the LLVM integrated
assembler emits an object file, the partial program is assumed to start
at address 0.  The linker assigns the final addresses for the partial
program, so that different partial programs do not overlap.  This is
actually an oversimplification, but it suffices to explain how the LLVM
integrated assembler uses sections.

   The linker moves blocks of bytes of your program to their run-time
addresses.  These blocks slide to their run-time addresses as rigid
units; their length does not change and neither does the order of bytes
within them.  Such a rigid unit is called a _section_.  Assigning
run-time addresses to sections is called "relocation".  It includes the
task of adjusting mentions of object-file addresses so they refer to the
proper run-time addresses.

   An object file written by the LLVM integrated assembler has at least
three sections, any of which may be empty.  These are named "text",
"data" and "bss" sections.

   The LLVM integrated assembler can also generate whatever other named
sections you specify using the '.section' directive (*note '.section':
SectionElf.).  If you do not use any directives that place output in the
'.text' or '.data' sections, these sections still exist, but are empty.

   Within the object file, the text section starts at address '0', the
data section follows, and the bss section follows the data section.

   To let the linker know which data changes when the sections are
relocated, and how to change that data, the LLVM integrated assembler
also writes to the object file details of the relocation needed.  To
perform relocation the linker must know, each time an address in the
object file is mentioned:
   * Where in the object file is the beginning of this reference to an
     address?
   * How long (in bytes) is this reference?
   * Which section does the address refer to?  What is the numeric value
     of
          (ADDRESS) - (START-ADDRESS OF SECTION)?
   * Is the reference to an address "Program-Counter relative"?

   In fact, every address the LLVM integrated assembler ever uses is
expressed as
     (SECTION) + (OFFSET INTO SECTION)
Further, most expressions the LLVM integrated assembler computes have
this section-relative nature.

   In this manual we use the notation {SECNAME N} to mean "offset N into
section SECNAME."

   Apart from text, data and bss sections you need to know about the
"absolute" section.  When the linker mixes partial programs, addresses
in the absolute section remain unchanged.  For example, address
'{absolute 0}' is "relocated" to run-time address 0 by the linker.
Although the linker never arranges two partial programs' data sections
with overlapping addresses after linking, _by definition_ their absolute
sections must overlap.  Address '{absolute 239}' in one part of a
program is always the same address when the program is running as
address '{absolute 239}' in any other part of the program.

   The idea of sections is extended to the "undefined" section.  Any
address whose section is unknown at assembly time is by definition
rendered {undefined U}--where U is filled in later.  Since numbers are
always defined, the only way to generate an undefined address is to
mention an undefined symbol.  A reference to a named common block would
be such a symbol: its value is unknown at assembly time so it has
section _undefined_.

   By analogy the word _section_ is used to describe groups of sections
in the linked program.  the linker puts all partial programs' text
sections in contiguous addresses in the linked program.  It is customary
to refer to the _text section_ of a program, meaning all the addresses
of all partial programs' text sections.  Likewise for data and bss
sections.

   Some sections are manipulated by the linker; others are invented for
use of the LLVM integrated assembler and have no meaning except during
assembly.


File: llvm-assembler.info,  Node: Ld Sections,  Next: As Sections,  Prev: Secs Background,  Up: Sections

4.2 Linker Sections
===================

The linker deals with just four kinds of sections, summarized below.

*named sections*
     These sections hold your program.  The LLVM integrated assembler
     and the linker treat them as separate but equal sections.  Anything
     you can say of one section is true of another.  When the program is
     running, however, it is customary for the text section to be
     unalterable.  The text section is often shared among processes: it
     contains instructions, constants and the like.  The data section of
     a running program is usually alterable: for example, C variables
     would be stored in the data section.

*bss section*
     This section contains zeroed bytes when your program begins
     running.  It is used to hold uninitialized variables or common
     storage.  The length of each partial program's bss section is
     important, but because it starts out containing zeroed bytes there
     is no need to store explicit zero bytes in the object file.  The
     bss section was invented to eliminate those explicit zeros from
     object files.

*absolute section*
     Address 0 of this section is always "relocated" to runtime address
     0.  This is useful if you want to refer to an address that the
     linker must not change when relocating.  In this sense we speak of
     absolute addresses being "unrelocatable": they do not change during
     relocation.

*undefined section*
     This "section" is a catch-all for address references to objects not
     in the preceding sections.

   An idealized example of three relocatable sections follows.  The
example uses the traditional section names '.text' and '.data'.  Memory
addresses are on the horizontal axis.

                           +-----+----+--+
     partial program # 1:  |ttttt|dddd|00|
                           +-----+----+--+

                           text   data bss
                           seg.   seg. seg.

                           +---+---+---+
     partial program # 2:  |TTT|DDD|000|
                           +---+---+---+

                           +--+---+-----+--+----+---+-----+~~
     linked program:       |  |TTT|ttttt|  |dddd|DDD|00000|
                           +--+---+-----+--+----+---+-----+~~

         addresses:        0 ...


File: llvm-assembler.info,  Node: As Sections,  Next: Sub-Sections,  Prev: Ld Sections,  Up: Sections

4.3 Assembler Internal Sections
===============================

These sections are meant only for the internal use of the LLVM
integrated assembler.  They have no meaning at run-time.  You do not
really need to know about these sections for most purposes; but they can
be mentioned in the LLVM integrated assembler warning messages, so it
might be helpful to have an idea of their meanings to the LLVM
integrated assembler.  These sections are used to permit the value of
every expression in your assembly language program to be a
section-relative address.

ASSEMBLER-INTERNAL-LOGIC-ERROR!
     An internal assembler logic error has been found.  This means there
     is a bug in the assembler.

expr section
     The assembler stores complex expression internally as combinations
     of symbols.  When it needs to represent an expression as a symbol,
     it puts it in the expr section.


File: llvm-assembler.info,  Node: Sub-Sections,  Next: bss,  Prev: As Sections,  Up: Sections

4.4 Sub-Sections
================

You may have separate groups of data in named sections that you want to
end up near to each other in the object file, even though they are not
contiguous in the assembler source.  The LLVM integrated assembler
allows you to use "subsections" for this purpose.  Within each section,
there can be numbered subsections with values from 0 to 8192.  Objects
assembled into the same subsection go into the object file together with
other objects in the same subsection.  For example, a compiler might
want to store constants in the text section, but might not want to have
them interspersed with the program being assembled.  In this case, the
compiler could issue a '.text 0' before each section of code being
output, and a '.text 1' before each group of constants being output.

   Subsections are optional.  If you do not use subsections, everything
goes in subsection number zero.

   Each subsection is zero-padded up to a multiple of four bytes.
(Subsections may be padded a different amount on different flavors of
the LLVM integrated assembler.)

   Subsections appear in your object file in numeric order, lowest
numbered to highest.  (All this to be compatible with other people's
assemblers.)  The object file contains no representation of subsections;
the linker and other programs that manipulate object files see no trace
of them.  They just see all your text subsections as a text section, and
all your data subsections as a data section.

   To specify which subsection you want subsequent statements assembled
into, use a numeric argument to specify it, in a '.text EXPRESSION' or a
'.data EXPRESSION' statement.  You can also use the '.subsection'
directive (*note SubSectionElf::) to specify a subsection: '.subsection
EXPRESSION'.  EXPRESSION should be an absolute expression (*note
Expressions::).  If you just say '.text' then '.text 0' is assumed.
Likewise '.data' means '.data 0'.  Assembly begins in 'text 0'.  For
instance:
     .text 0     # The default subsection is text 0 anyway.
     .ascii "This lives in the first text subsection. *"
     .text 1
     .ascii "But this lives in the second text subsection."
     .data 0
     .ascii "This lives in the data section,"
     .ascii "in the first data subsection."
     .text 0
     .ascii "This lives in the first text section,"
     .ascii "immediately following the asterisk (*)."

   Each section has a "location counter" incremented by one for every
byte assembled into that section.  Because subsections are merely a
convenience restricted to the LLVM integrated assembler there is no
concept of a subsection location counter.  There is no way to directly
manipulate a location counter--but the '.align' directive changes it,
and any label definition captures its current value.  The location
counter of the section where statements are being assembled is said to
be the "active" location counter.


File: llvm-assembler.info,  Node: bss,  Prev: Sub-Sections,  Up: Sections

4.5 bss Section
===============

The bss section is used for local common variable storage.  You may
allocate address space in the bss section, but you may not dictate data
to load into it before your program executes.  When your program starts
running, all the contents of the bss section are zeroed bytes.

   The '.lcomm' pseudo-op defines a symbol in the bss section; see *note
'.lcomm': Lcomm.

   The '.comm' pseudo-op may be used to declare a common symbol, which
is another form of uninitialized symbol; see *note '.comm': Comm.

   When assembling you may switch into the '.bss' section and define
symbols as usual; see *note '.section': SectionElf.  You may only
assemble zero values into the section.  Typically the section will only
contain symbol definitions and '.skip' directives (*note '.skip':
Skip.).


File: llvm-assembler.info,  Node: Symbols,  Next: Expressions,  Prev: Sections,  Up: Top

5 Symbols
*********

Symbols are a central concept: the programmer uses symbols to name
things, the linker uses symbols to link, and the debugger uses symbols
to debug.

     _Warning:_ The LLVM integrated assembler does not place symbols in
     the object file in the same order they were declared.  This may
     break some debuggers.

* Menu:

* Labels::                      Labels
* Setting Symbols::             Giving Symbols Other Values
* Symbol Names::                Symbol Names
* Dot::                         The Special Dot Symbol
* Symbol Attributes::           Symbol Attributes


File: llvm-assembler.info,  Node: Labels,  Next: Setting Symbols,  Up: Symbols

5.1 Labels
==========

A "label" is written as a symbol immediately followed by a colon ':'.
The symbol then represents the current value of the active location
counter, and is, for example, a suitable instruction operand.  You are
warned if you use the same symbol to represent two different locations:
the first definition overrides any other definitions.


File: llvm-assembler.info,  Node: Setting Symbols,  Next: Symbol Names,  Prev: Labels,  Up: Symbols

5.2 Giving Symbols Other Values
===============================

A symbol can be given an arbitrary value by writing a symbol, followed
by an equals sign '=', followed by an expression (*note Expressions::).
This is equivalent to using the '.set' directive.  *Note '.set': Set.
In the same way, using a double equals sign '=''=' here represents an
equivalent of the unsupported '.eqv' directive.  *Note '.eqv':
Unsupported.


File: llvm-assembler.info,  Node: Symbol Names,  Next: Dot,  Prev: Setting Symbols,  Up: Symbols

5.3 Symbol Names
================

Symbol names begin with a letter or with one of '._'.  On most machines,
you can also use '$' in symbol names; exceptions are noted in *note
Machine Dependencies::.  That character may be followed by any string of
digits, letters, dollar signs (unless otherwise noted for a particular
target machine), and underscores.

   Case of letters is significant: 'foo' is a different symbol name than
'Foo'.

   Multi-Byte characters are supported.  To generate a symbol name
containing multi-byte characters enclose it within double quotes and use
escape codes.  cf *Note Strings::.  Generating a multi-byte symbol name
from a label is not currently supported.

   Each symbol has exactly one name.  Each name in an assembly language
program refers to exactly one symbol.  You may use that symbol name any
number of times in a program.

Local Symbol Names
------------------

A local symbol is any symbol beginning with certain local label
prefixes.  By default, the local label prefix is '.L', but each target
may have its own set of local label prefixes.

   Local symbols are defined and used within the assembler, but they are
normally not saved in object files.  Thus, they are not visible when
debugging.  You may use the '-msave-temp-labels' option (*note Symbol
Table Control: internal-options.) to retain the local symbols in the
object files.

Local Labels
------------

Local labels help compilers and programmers use names temporarily.  They
create symbols which are guaranteed to be unique over the entire scope
of the input source code and which can be referred to by a simple
notation.  To define a local label, write a label of the form 'N:'
(where N represents any positive integer).  To refer to the most recent
previous definition of that label write 'Nb', using the same number as
when you defined the label.  To refer to the next definition of a local
label, write 'Nf'--the 'b' stands for "backwards" and the 'f' stands for
"forwards".

   There is no restriction on how you can use these labels, and you can
reuse them too.  So that it is possible to repeatedly define the same
local label (using the same number 'N'), although you can only refer to
the most recently defined local label of that number (for a backwards
reference) or the next definition of a specific local label for a
forward reference.  It is also worth noting that the first 10 local
labels ('0:'...'9:') are implemented in a slightly more efficient manner
than the others.

   Here is an example:

     1:        branch 1f
     2:        branch 1b
     1:        branch 2f
     2:        branch 1b

   Which is the equivalent of:

     label_1:  branch label_3
     label_2:  branch label_1
     label_3:  branch label_4
     label_4:  branch label_3

   Local label names are only a notational device.  They are immediately
transformed into more conventional symbol names before the assembler
uses them.  The symbol names are stored in the symbol table, appear in
error messages, and are optionally emitted to the object file.  The
names are constructed using these parts:

'_local label prefix_'
     All local symbols begin with the system-specific local label
     prefix.  Normally both the LLVM integrated assembler and the linker
     forget symbols that start with the local label prefix.  These
     labels are used for symbols you are never intended to see.  If you
     use the '-L' option then the LLVM integrated assembler retains
     these symbols in the object file.  If you also instruct the linker
     to retain these symbols, you may use them in debugging.

'NUMBER'
     This is the number that was used in the local label definition.  So
     if the label is written '55:' then the number is '55'.

'Ctrl-B'
     This unusual character is included so you do not accidentally
     invent a symbol of the same name.  The character has ASCII value of
     '\002' (control-B).

'_ordinal number_'
     This is a serial number to keep the labels distinct.  The first
     definition of '0:' gets the number '1'.  The 15th definition of
     '0:' gets the number '15', and so on.  Likewise the first
     definition of '1:' gets the number '1' and its 15th definition gets
     '15' as well.

   So for example, the first '1:' may be named '.L1C-B1', and the 44th
'3:' may be named '.L3C-B44'.

Dollar Local Labels
-------------------

Unlike the GNU assembler, the LLVM integrated assembler does not support
dollar local labels.  These are even more local labels which go out of
scope (i.e., they become undefined) as soon as a non-local label is
defined.  They take the same format as ordinary local labels, except
that they have a dollar sign suffix to their numeric value, e.g.,
'55$:'.

   Assembler source code intended for the GNU assembler will need
modification if it contains such labels.


File: llvm-assembler.info,  Node: Dot,  Next: Symbol Attributes,  Prev: Symbol Names,  Up: Symbols

5.4 The Special Dot Symbol
==========================

The special symbol '.' refers to the current address that the LLVM
integrated assembler is assembling into.  Thus, the expression 'melvin:
.long .' defines 'melvin' to contain its own address.  Assigning a value
to '.' is treated the same as a '.org' directive.  Thus, the expression
'.=.+4' is the same as saying '.space 4'.


File: llvm-assembler.info,  Node: Symbol Attributes,  Prev: Dot,  Up: Symbols

5.5 Symbol Attributes
=====================

Every symbol has, as well as its name, the attributes "Value" and
"Type".  Depending on output format, symbols can also have auxiliary
attributes.

   If you use a symbol without defining it, the LLVM integrated
assembler assumes zero for all these attributes, and probably won't warn
you.  This makes the symbol an externally defined symbol, which is
generally what you would want.

* Menu:

* Symbol Value::                Value
* Symbol Type::                 Type


File: llvm-assembler.info,  Node: Symbol Value,  Next: Symbol Type,  Up: Symbol Attributes

5.5.1 Value
-----------

The value of a symbol is (usually) 32 bits.  For a symbol which labels a
location in the text, data, bss or absolute sections the value is the
number of addresses from the start of that section to the label.
Naturally for text, data and bss sections the value of a symbol changes
as the linker changes section base addresses during linking.  Absolute
symbols' values do not change during linking: that is why they are
called absolute.

   The value of an undefined symbol is treated in a special way.  If it
is 0 then the symbol is not defined in this assembler source file, and
the linker tries to determine its value from other files linked into the
same program.  You make this kind of symbol simply by mentioning a
symbol name without defining it.  A non-zero value represents a '.comm'
common declaration.  The value is how much common storage to reserve, in
bytes (addresses).  The symbol refers to the first address of the
allocated storage.


File: llvm-assembler.info,  Node: Symbol Type,  Prev: Symbol Value,  Up: Symbol Attributes

5.5.2 Type
----------

The type attribute of a symbol contains relocation (section)
information, any flag settings indicating that a symbol is external, and
(optionally), other information for linkers and debuggers.  The exact
format depends on the object-code output format in use.


File: llvm-assembler.info,  Node: Expressions,  Next: Pseudo Ops,  Prev: Symbols,  Up: Top

6 Expressions
*************

An "expression" specifies an address or numeric value.  Whitespace may
precede and/or follow an expression.

   The result of an expression must be an absolute number, or else an
offset into a particular section.  If an expression is not absolute, and
there is not enough information when the LLVM integrated assembler sees
the expression to know its section, a second pass over the source
program would be necessary to interpret the expression--but no second
pass is implemented, so the assembler aborts with an error message in
this situation.

* Menu:

* Empty Exprs::                 Empty Expressions
* Integer Exprs::               Integer Expressions


File: llvm-assembler.info,  Node: Empty Exprs,  Next: Integer Exprs,  Up: Expressions

6.1 Empty Expressions
=====================

An empty expression has no value: it is just whitespace or null.
Wherever an absolute expression is required, you may omit the
expression, and the LLVM integrated assembler assumes a value of
(absolute) 0.  This is compatible with other assemblers.


File: llvm-assembler.info,  Node: Integer Exprs,  Prev: Empty Exprs,  Up: Expressions

6.2 Integer Expressions
=======================

An "integer expression" is one or more _arguments_ delimited by
_operators_.

* Menu:

* Arguments::                   Arguments
* Operators::                   Operators
* Prefix Ops::                  Prefix Operators
* Infix Ops::                   Infix Operators


File: llvm-assembler.info,  Node: Arguments,  Next: Operators,  Up: Integer Exprs

6.2.1 Arguments
---------------

"Arguments" are symbols, numbers or subexpressions.  In other contexts
arguments are sometimes called "arithmetic operands".  In this manual,
to avoid confusing them with the "instruction operands" of the machine
language, we use the term "argument" to refer to parts of expressions
only, reserving the word "operand" to refer only to machine instruction
operands.

   Symbols are evaluated to yield {SECTION NNN} where SECTION is one of
text, data, bss, absolute, or undefined.  NNN is a signed, 2's
complement 32 bit integer.

   Numbers are usually integers.

   A number can be a flonum or bignum.  In this case, you are warned
that only the low order 32 bits are used, and the LLVM integrated
assembler pretends these 32 bits are an integer.  You may write
integer-manipulating instructions that act on exotic constants,
compatible with other assemblers.

   Subexpressions are a left parenthesis '(' followed by an integer
expression, followed by a right parenthesis ')'; or a prefix operator
followed by an argument.


File: llvm-assembler.info,  Node: Operators,  Next: Prefix Ops,  Prev: Arguments,  Up: Integer Exprs

6.2.2 Operators
---------------

"Operators" are arithmetic functions, like '+' or '%'.  Prefix operators
are followed by an argument.  Infix operators appear between their
arguments.  Operators may be preceded and/or followed by whitespace.


File: llvm-assembler.info,  Node: Prefix Ops,  Next: Infix Ops,  Prev: Operators,  Up: Integer Exprs

6.2.3 Prefix Operator
---------------------

the LLVM integrated assembler has the following "prefix operators".
They each take one argument, which must be absolute.

'-'
     "Negation".  Two's complement negation.
'~'
     "Complementation".  Bitwise not.


File: llvm-assembler.info,  Node: Infix Ops,  Prev: Prefix Ops,  Up: Integer Exprs

6.2.4 Infix Operators
---------------------

"Infix operators" take two arguments, one on either side.  Operators
have precedence, but operations with equal precedence are performed left
to right.  Apart from '+' or '-', both arguments must be absolute, and
the result is absolute.

  1. Highest Precedence

     '*'
          "Multiplication".

     '/'
          "Division".  Truncation is the same as the C operator '/'

     '%'
          "Remainder".

     '<<'
          "Shift Left".  Same as the C operator '<<'.

     '>>'
          "Shift Right".  Same as the C operator '>>'.

  2. Intermediate precedence

     '|'

          "Bitwise Inclusive Or".

     '&'
          "Bitwise And".

     '^'
          "Bitwise Exclusive Or".

     '!'
          "Bitwise Or Not".

  3. Low Precedence

     '+'
          "Addition".  If either argument is absolute, the result has
          the section of the other argument.  You may not add together
          arguments from different sections.

     '-'
          "Subtraction".  If the right argument is absolute, the result
          has the section of the left argument.  If both arguments are
          in the same section, the result is absolute.  You may not
          subtract arguments from different sections.

     '=='
          "Is Equal To"
     '<>'
     '!='
          "Is Not Equal To"
     '<'
          "Is Less Than"
     '>'
          "Is Greater Than"
     '>='
          "Is Greater Than Or Equal To"
     '<='
          "Is Less Than Or Equal To"

          The comparison operators can be used as infix operators.  A
          true results has a value of -1 whereas a false result has a
          value of 0.  Note, these operators perform signed comparisons.

  4. Lowest Precedence

     '&&'
          "Logical And".

     '||'
          "Logical Or".

          These two logical operations can be used to combine the
          results of sub expressions.  Note, unlike the comparison
          operators a true result returns a value of 1 but a false
          results does still return 0.  Also note that the logical or
          operator has a slightly lower precedence than logical and.

   In short, it's only meaningful to add or subtract the _offsets_ in an
address; you can only have a defined section in one of the two
arguments.


File: llvm-assembler.info,  Node: Pseudo Ops,  Next: Machine Dependencies,  Prev: Expressions,  Up: Top

7 Assembler Directives
**********************

All assembler directives have names that begin with a period ('.').  The
rest of the name is letters, usually in lower case.

   This chapter discusses directives that are available regardless of
the target machine configuration for the LLVM integrated assembler.
Some machine configurations provide additional directives.  *Note
Machine Dependencies::.

   Not all directives are supported for all object file formats.  This
chapter is divided into sections for directives common to all formats
and directives specific to ELF, COFF (including the Win64 event handling
directives) and Mach-O. Some directives (such as '.section') are
supported by each format, but with different semantics, so appear
multiple times.

   _Note:_ While the LLVM integrated assembler strives for compatibility
with GNU assembler, not all GNU directives are supported.  Those which
are unsupported are listed at the end of this chapter.  *Note
Unsupported::.

   Conversely, there are also a number of directives supported by the
LLVM integrated assembler, which are not supported (or at least not
documented as being supported) by the GNU assembler.  These are:
'.2byte', '.4bytes', '.8byte', '.align32', '.cfi_escape',
'.cfi_sections', '.code16', '.code16gcc', '.common', '.endmacro',
'.lazy_reference', '.macros_off', '.macros_on', '.no_dead_strip',
'.private_extern', '.reference', '.stabs', '.string',
'.symbol_resolver', '.value', '.weak_definition',
'.weak_def_can_be_hidden', '.weak_ref', '.zero'.

* Menu:

* Common Directives::  Directives Common to All Object Formats
* ELF Directives::     ELF Specific Directives
* COFF Directives::    COFF Specific Directives
* Mach-O Directives::  Mach-O Specific Directives
* Deprecated::         Deprecated Directives
* Unsupported::        Unsupported GNU Assembler Directives


File: llvm-assembler.info,  Node: Common Directives,  Next: ELF Directives,  Up: Pseudo Ops

7.1 Directives Common to All Object Formats
===========================================

These directives have the same form and semantics for all object formats

* Menu:

* 2byte::                       '.2byte EXPRESSIONS'
* 4byte::                       '.4byte EXPRESSIONS'
* 8byte::                       '.8byte EXPRESSIONS'
* Abort::                       '.abort'
* Align::                       '.align ABS-EXPR , ABS-EXPR'
* Align32::                     '.align32 ABS-EXPR , ABS-EXPR'
* Ascii::                       '.ascii "STRING"'...
* Asciz::                       '.asciz "STRING"'...
* Balign::                      '.balign ABS-EXPR , ABS-EXPR'
* BundleAlign::                 '.bundle_align_mode ABS-EXPR'
* BundleLock::                  '.bundle_lock', '.bundle_unlock'
* Byte::                        '.byte EXPRESSIONS'
* CFIDirectives::		CFI Directives
* Code16::                      '.code16', '.code16gcc'
* Comm::                        '.comm SYMBOL , LENGTH [, ALIGNMENT]'
* Common::                      '.common SYMBOL , LENGTH [, ALIGNMENT]'
* Double::                      '.double FLONUMS'
* Else::                        '.else'
* Elseif::                      '.elseif'
* End::				'.end'
* Endif::                       '.endif'
* Endm::                        '.endm', '.endmacro'
* Endr::                        '.endr'
* Equ::                         '.equ SYMBOL, EXPRESSION'
* Equiv::                       '.equiv SYMBOL, EXPRESSION'
* Err::				'.err'
* Error::			'.error STRING'
* Exitm::			'.exitm'
* Extern::                      '.extern'
* File::                        '.file'
* Fill::                        '.fill REPEAT , SIZE , VALUE'
* Float::                       '.float FLONUMS'
* Global::                      '.global SYMBOL', '.globl SYMBOL'
* Ident::                       '.ident'
* If::                          '.if ABSOLUTE EXPRESSION'
* Incbin::                      '.incbin "FILE"[,SKIP[,COUNT]]'
* Include::                     '.include "FILE"'
* Int::                         '.int EXPRESSIONS'
* Irp::				'.irp SYMBOL,VALUES'...
* Irpc::			'.irpc SYMBOL,VALUES'...
* LazyReference::               '.lazy_reference SYMBOL'
* Lcomm::                       '.lcomm SYMBOL , LENGTH'
* Line::                        '.line LINE-NUMBER'
* Loc::                         '.loc FILENO LINENO'
* Long::                        '.long EXPRESSIONS'
* Macro::			'.macro NAME ARGS'...
* NoDeadStrip::                 '.no_dead_strip'
* Octa::                        '.octa BIGNUMS'
* Org::                         '.org NEW-LC, FILL'
* P2align::                     '.p2align ABS-EXPR, ABS-EXPR, ABS-EXPR'
* PrivateExtern::               '.private_extern NAME'
* Purgem::			'.purgem NAME'
* Quad::                        '.quad BIGNUMS'
* Reference::                   '.reference SYMBOL'
* Rept::			'.rept COUNT'
* Set::                         '.set SYMBOL, EXPRESSION'
* Short::                       '.short EXPRESSIONS'
* Single::                      '.single FLONUMS'
* Skip::                        '.skip SIZE , FILL'
* Sleb128::			'.sleb128 EXPRESSIONS'
* Space::                       '.space SIZE , FILL'
* Stabs::                       '.stabs'
* String::                      '.string "STR"'
* SymbolResolver::              '.symbol_resolver NAME'
* Uleb128::                     '.uleb128 EXPRESSIONS'
* Value::                       '.value'
* Warning::			'.warning STRING'
* WeakDefCanBeHidden::          '.weak_def_can_be_hidden NAME'
* WeakDefinition::              '.weak_definition NAME'
* WeakReference::               '.weak_reference NAME'
* Zero::                        '.zero SIZE'


File: llvm-assembler.info,  Node: 2byte,  Next: 4byte,  Up: Common Directives

7.1.1 '.2byte'
--------------

'.2byte' expects zero or more expressions, separated by commas.  Each
expression is assembled into the next two bytes.  The endianness of the
insertion is target specific.  *Note Machine Dependencies::.


File: llvm-assembler.info,  Node: 4byte,  Next: 8byte,  Prev: 2byte,  Up: Common Directives

7.1.2 '.4byte'
--------------

'.4byte' expects zero or more expressions, separated by commas.  Each
expression is assembled into the next four bytes.  The endianness of the
insertion is target specific.  *Note Machine Dependencies::.


File: llvm-assembler.info,  Node: 8byte,  Next: Abort,  Prev: 4byte,  Up: Common Directives

7.1.3 '.8byte'
--------------

'.8byte' expects zero or more expressions, separated by commas.  Each
expression is assembled into the next eight bytes.  It is a synonym for
'.quad' (*note Quad::.  The endianness of the insertion is target
specific.  *Note Machine Dependencies::.


File: llvm-assembler.info,  Node: Abort,  Next: Align,  Prev: 8byte,  Up: Common Directives

7.1.4 '.abort'
--------------

This directive stops the assembly immediately.  It is for compatibility
with other assemblers.  The original idea was that the assembly language
source would be piped into the assembler.  If the sender of the source
quit, it could use this directive to tell the LLVM integrated assembler
to quit also.

   _Note:_ This directive is deprecated.  One day '.abort' will not be
supported.


File: llvm-assembler.info,  Node: Align,  Next: Align32,  Prev: Abort,  Up: Common Directives

7.1.5 '.align ABS-EXPR, ABS-EXPR, ABS-EXPR'
-------------------------------------------

Pad the location counter (in the current subsection) to a particular
storage boundary.  The first expression (which must be absolute) is the
alignment required, as described below.

   The second expression (also absolute) gives the fill value to be
stored in the padding bytes.  It (and the comma) may be omitted.  If it
is omitted, the padding bytes are normally zero.  However, on some
systems, if the section is marked as containing code and the fill value
is omitted, the space is filled with no-op instructions.

   The third expression is also absolute, and is also optional.  If it
is present, it is the maximum number of bytes that should be skipped by
this alignment directive.  If doing the alignment would require skipping
more bytes than the specified maximum, then the alignment is not done at
all.  You can omit the fill value (the second argument) entirely by
simply using two commas after the required alignment; this can be useful
if you want the alignment to be filled with no-op instructions when
appropriate.

   The way the required alignment is specified is target specific.
Commonly it is the byte boundary on which to align.  Very occasionally
the word boundary on which to align.  On other systems, it is the number
of low-order zero bits the location counter must have after advancement.
So for example '.align 3' advances the location counter until it a
multiple of 8.  If the location counter is already a multiple of 8, no
change is needed.

   This inconsistency is due to the different behaviors of the various
native assemblers for these systems which the LLVM integrated assembler
aims to emulate.  The LLVM integrated assembler also provides '.balign'
and '.p2align' directives, described later, which have a consistent
behavior across all architectures (but are specific to the LLVM
integrated assembler and GNU assembler).


File: llvm-assembler.info,  Node: Align32,  Next: Ascii,  Prev: Align,  Up: Common Directives

7.1.6 '.align32 ABS-EXPR, ABS-EXPR, ABS-EXPR'
---------------------------------------------

This directive is almost identical to '.align' (*note Align::), but
allows specification of a 32-bit fill value as the second argument, and
may have different default behavior for the fill value.

   If no value is omitted, the padding bytes are normally zero.
However, on some systems, if the section is marked as containing code
and the fill value is omitted, the space is filled with no-op
instructions.  This behavior may also differ between '.align' and
'.align32' directives--for example '.align' may fill with no-op
instructions, while '.align32' fills with zero.

   The interpretation of the fill value when less than 32-bits need to
be filled is target specific.  *Note Machine Dependencies::.


File: llvm-assembler.info,  Node: Ascii,  Next: Asciz,  Prev: Align32,  Up: Common Directives

7.1.7 '.ascii "STRING"'...
--------------------------

'.ascii' expects zero or more string literals (*note Strings::)
separated by commas.  It assembles each string (with no automatic
trailing zero byte) into consecutive addresses.


File: llvm-assembler.info,  Node: Asciz,  Next: Balign,  Prev: Ascii,  Up: Common Directives

7.1.8 '.asciz "STRING"'...
--------------------------

'.asciz' is just like '.ascii', but each string is followed by a zero
byte.  The "z" in '.asciz' stands for "zero".


File: llvm-assembler.info,  Node: Balign,  Next: BundleAlign,  Prev: Asciz,  Up: Common Directives

7.1.9 '.balign[wl] ABS-EXPR, ABS-EXPR, ABS-EXPR'
------------------------------------------------

Pad the location counter (in the current subsection) to a particular
storage boundary.  The first expression (which must be absolute) is the
alignment request in bytes and must be a power of 2.  For example
'.balign 8' advances the location counter until it is a multiple of 8.
If the location counter is already a multiple of 8, no change is needed.

   The second expression (also absolute) gives the fill value to be
stored in the padding bytes.  It (and the comma) may be omitted.  If it
is omitted, the padding bytes are normally zero.  However, on some
systems, if the section is marked as containing code and the fill value
is omitted, the space is filled with no-op instructions.

   The third expression is also absolute, and is also optional.  If it
is present, it is the maximum number of bytes that should be skipped by
this alignment directive.  If doing the alignment would require skipping
more bytes than the specified maximum, then the alignment is not done at
all.  You can omit the fill value (the second argument) entirely by
simply using two commas after the required alignment; this can be useful
if you want the alignment to be filled with no-op instructions when
appropriate.

   The '.balignw' and '.balignl' directives are variants of the
'.balign' directive.  The '.balignw' directive treats the fill pattern
as a two byte word value.  The '.balignl' directives treats the fill
pattern as a four byte long word value.  For example, '.balignw
4,0x368d' will align to a multiple of 4.  If it skips two bytes, they
will be filled in with the value 0x368d (the exact placement of the
bytes depends upon the endianness of the processor).  If it skips 1 or 3
bytes, the fill value is undefined.


File: llvm-assembler.info,  Node: BundleAlign,  Next: BundleLock,  Prev: Balign,  Up: Common Directives

7.1.10 '.bundle_align_mode ABS-EXPR'
------------------------------------

'.bundle_align_mode' enables or disables "aligned instruction bundle"
mode.  In this mode, sequences of adjacent instructions are grouped into
fixed-sized "bundles".  If the argument is zero, this mode is disabled
(which is the default state).  If the argument it not zero, it gives the
size of an instruction bundle as a power of two (as for the '.p2align'
directive, *note P2align::).

   For some targets, it's an ABI requirement that no instruction may
span a certain aligned boundary.  A "bundle" is simply a sequence of
instructions that starts on an aligned boundary.  For example, if
ABS-EXPR is '5' then the bundle size is 32, so each aligned chunk of 32
bytes is a bundle.  When aligned instruction bundle mode is in effect,
no single instruction may span a boundary between bundles.  If an
instruction would start too close to the end of a bundle for the length
of that particular instruction to fit within the bundle, then the space
at the end of that bundle is filled with no-op instructions so the
instruction starts in the next bundle.  As a corollary, it's an error if
any single instruction's encoding is longer than the bundle size.


File: llvm-assembler.info,  Node: BundleLock,  Next: Byte,  Prev: BundleAlign,  Up: Common Directives

7.1.11 '.bundle_lock' and '.bundle_unlock'
------------------------------------------

The '.bundle_lock' and directive '.bundle_unlock' directives allow
explicit control over instruction bundle padding.  These directives are
only valid when '.bundle_align_mode' has been used to enable aligned
instruction bundle mode.  It's an error if they appear when
'.bundle_align_mode' has not been used at all, or when the last
directive was '.bundle_align_mode 0'.

   For some targets, it's an ABI requirement that certain instructions
may appear only as part of specified permissible sequences of multiple
instructions, all within the same bundle.  A pair of '.bundle_lock' and
'.bundle_unlock' directives define a "bundle-locked" instruction
sequence.  For purposes of aligned instruction bundle mode, a sequence
starting with '.bundle_lock' and ending with '.bundle_unlock' is treated
as a single instruction.  That is, the entire sequence must fit into a
single bundle and may not span a bundle boundary.  If necessary, no-op
instructions will be inserted before the first instruction of the
sequence so that the whole sequence starts on an aligned bundle
boundary.  It's an error if the sequence is longer than the bundle size.

   For convenience when using '.bundle_lock' and '.bundle_unlock' inside
assembler macros (*note Macro::), bundle-locked sequences may be nested.
That is, a second '.bundle_lock' directive before the next
'.bundle_unlock' directive has no effect except that it must be matched
by another closing '.bundle_unlock' so that there is the same number of
'.bundle_lock' and '.bundle_unlock' directives.


File: llvm-assembler.info,  Node: Byte,  Next: CFIDirectives,  Prev: BundleLock,  Up: Common Directives

7.1.12 '.byte EXPRESSIONS'
--------------------------

'.byte' expects zero or more expressions, separated by commas.  Each
expression is assembled into the next byte.


File: llvm-assembler.info,  Node: CFIDirectives,  Next: Code16,  Prev: Byte,  Up: Common Directives

7.1.13 CFI Directives
---------------------

* Menu:

* CfiSections::          '.cfi_sections SECTION_LIST'
* CfiStartproc::         '.cfi_startproc [simple]'
* CfiEndproc::           '.cfi_endproc'
* CfiPersonality::       '.cfi_personality ENCODING [, EXP]'
* CfiLsda::              '.cfi_lsda ENCODING [, EXP]'
* CfiDefCfa::            '.cfi_def_cfa REGISTER, OFFSET'
* CfiDefCfaRegister::    '.cfi_def_cfa_register REGISTER'
* CfiDefCfaOffset::      '.cfi_def_cfa_offset OFFSET'
* CfiAdjustCfaOffset::   '.cfi_adjust_cfa_offset OFFSET'
* CfiOffset::            '.cfi_offset REGISTER, OFFSET'
* CfiRelOffset::         '.cfi_rel_offset REGISTER, OFFSET'
* CfiRegister::          '.cfi_register REGISTER1, REGISTER2'
* CfiRestore::           '.cfi_restore REGISTER'
* CfiUndefined::         '.cfi_undefined REGISTER'
* CfiSameValue::         '.cfi_same_value REGISTER'
* CfiRememberState::     '.cfi_remember_state' and '.cfi_restore_state',
* CfiSignalFrame::       '.cfi_signal_frame'
* CfiWindowSave::        '.cfi_window_save'
* CfiEscape::            '.cfi_escape' EXPRESSION[, ...]


File: llvm-assembler.info,  Node: CfiSections,  Next: CfiStartproc,  Up: CFIDirectives

7.1.13.1 '.cfi_sections SECTION_LIST'
.....................................

'.cfi_sections' may be used to specify whether CFI directives should
emit '.eh_frame' section and/or '.debug_frame' section.  If SECTION_LIST
is '.eh_frame', '.eh_frame' is emitted, if SECTION_LIST is
'.debug_frame', '.debug_frame' is emitted.  To emit both use '.eh_frame,
.debug_frame'.  The default if this directive is not used is
'.cfi_sections .eh_frame'.


File: llvm-assembler.info,  Node: CfiStartproc,  Next: CfiEndproc,  Prev: CfiSections,  Up: CFIDirectives

7.1.13.2 '.cfi_startproc [simple]'
..................................

'.cfi_startproc' is used at the beginning of each function that should
have an entry in '.eh_frame'.  It initializes some internal data
structures.  Don't forget to close the function by '.cfi_endproc'.

   Unless '.cfi_startproc' is used along with parameter 'simple' it also
emits some architecture dependent initial CFI instructions.


File: llvm-assembler.info,  Node: CfiEndproc,  Next: CfiPersonality,  Prev: CfiStartproc,  Up: CFIDirectives

7.1.13.3 '.cfi_endproc'
.......................

'.cfi_endproc' is used at the end of a function where it closes its
unwind entry previously opened by '.cfi_startproc', and emits it to
'.eh_frame'.


File: llvm-assembler.info,  Node: CfiPersonality,  Next: CfiLsda,  Prev: CfiEndproc,  Up: CFIDirectives

7.1.13.4 '.cfi_personality ENCODING [, EXP]'
............................................

'.cfi_personality' defines personality routine and its encoding.
ENCODING must be a constant determining how the personality should be
encoded.  If it is 255 ('DW_EH_PE_omit'), the second argument should not
be present, otherwise the second argument should be a symbol name
(unlike the GNU assembler, a constant is not permitted).  When using
indirect encodings, the symbol provided should be the location where
personality can be loaded from, not the personality routine itself.  The
default after '.cfi_startproc' is '.cfi_personality 0xff', no
personality routine.


File: llvm-assembler.info,  Node: CfiLsda,  Next: CfiDefCfa,  Prev: CfiPersonality,  Up: CFIDirectives

7.1.13.5 '.cfi_lsda ENCODING [, EXP]'
.....................................

'.cfi_lsda' defines LSDA and its encoding.  ENCODING must be a constant
determining how the LSDA should be encoded.  If it is 255
('DW_EH_PE_omit'), the second argument should not be present, otherwise
the second argument should be a symbol name (unlike the GNU assembler, a
constant is not permitted).  The default after '.cfi_startproc' is
'.cfi_lsda 0xff', no LSDA.


File: llvm-assembler.info,  Node: CfiDefCfa,  Next: CfiDefCfaRegister,  Prev: CfiLsda,  Up: CFIDirectives

7.1.13.6 '.cfi_def_cfa REGISTER, OFFSET'
........................................

'.cfi_def_cfa' defines a rule for computing CFA as: _take address from
REGISTER and add OFFSET to it_.


File: llvm-assembler.info,  Node: CfiDefCfaRegister,  Next: CfiDefCfaOffset,  Prev: CfiDefCfa,  Up: CFIDirectives

7.1.13.7 '.cfi_def_cfa_register REGISTER'
.........................................

'.cfi_def_cfa_register' modifies a rule for computing CFA. From now on
REGISTER will be used instead of the old one.  Offset remains the same.


File: llvm-assembler.info,  Node: CfiDefCfaOffset,  Next: CfiAdjustCfaOffset,  Prev: CfiDefCfaRegister,  Up: CFIDirectives

7.1.13.8 '.cfi_def_cfa_offset OFFSET'
.....................................

'.cfi_def_cfa_offset' modifies a rule for computing CFA. Register
remains the same, but OFFSET is new.  Note that it is the absolute
offset that will be added to a defined register to compute CFA address.


File: llvm-assembler.info,  Node: CfiAdjustCfaOffset,  Next: CfiOffset,  Prev: CfiDefCfaOffset,  Up: CFIDirectives

7.1.13.9 '.cfi_adjust_cfa_offset OFFSET'
........................................

Same as '.cfi_def_cfa_offset' but OFFSET is a relative value that is
added/subtracted from the previous offset.


File: llvm-assembler.info,  Node: CfiOffset,  Next: CfiRelOffset,  Prev: CfiAdjustCfaOffset,  Up: CFIDirectives

7.1.13.10 '.cfi_offset REGISTER, OFFSET'
........................................

Previous value of REGISTER is saved at offset OFFSET from CFA.


File: llvm-assembler.info,  Node: CfiRelOffset,  Next: CfiRegister,  Prev: CfiOffset,  Up: CFIDirectives

7.1.13.11 '.cfi_rel_offset REGISTER, OFFSET'
............................................

Previous value of REGISTER is saved at offset OFFSET from the current
CFA register.  This is transformed to '.cfi_offset' using the known
displacement of the CFA register from the CFA. This is often easier to
use, because the number will match the code it's annotating.


File: llvm-assembler.info,  Node: CfiRegister,  Next: CfiRestore,  Prev: CfiRelOffset,  Up: CFIDirectives

7.1.13.12 '.cfi_register REGISTER1, REGISTER2'
..............................................

Previous value of REGISTER1 is saved in register REGISTER2.


File: llvm-assembler.info,  Node: CfiRestore,  Next: CfiUndefined,  Prev: CfiRegister,  Up: CFIDirectives

7.1.13.13 '.cfi_restore REGISTER'
.................................

'.cfi_restore' says that the rule for REGISTER is now the same as it was
at the beginning of the function, after all initial instruction added by
'.cfi_startproc' were executed.


File: llvm-assembler.info,  Node: CfiUndefined,  Next: CfiSameValue,  Prev: CfiRestore,  Up: CFIDirectives

7.1.13.14 '.cfi_undefined REGISTER'
...................................

From now on the previous value of REGISTER can't be restored anymore.


File: llvm-assembler.info,  Node: CfiSameValue,  Next: CfiRememberState,  Prev: CfiUndefined,  Up: CFIDirectives

7.1.13.15 '.cfi_same_value REGISTER'
....................................

Current value of REGISTER is the same as in the previous frame, i.e.  no
restoration needed.


File: llvm-assembler.info,  Node: CfiRememberState,  Next: CfiSignalFrame,  Prev: CfiSameValue,  Up: CFIDirectives

7.1.13.16 '.cfi_remember_state' and '.cfi_restore_state',
.........................................................

Use '.cfi_remember_state' to save all current rules for all registers.
If you then totally screw them up by subsequent '.cfi_*' directives you
can use '.cfi_restore_state' to restore the previous saved state.


File: llvm-assembler.info,  Node: CfiSignalFrame,  Next: CfiWindowSave,  Prev: CfiRememberState,  Up: CFIDirectives

7.1.13.17 '.cfi_signal_frame'
.............................

Mark current function as signal handler.


File: llvm-assembler.info,  Node: CfiWindowSave,  Next: CfiEscape,  Prev: CfiSignalFrame,  Up: CFIDirectives

7.1.13.18 '.cfi_window_save'
............................

Save a complete register window.  This directive is generically
recognized, but its function, if any, is unclear, since few
architectures now support register windows.  SPARC is an example of such
an architecture.


File: llvm-assembler.info,  Node: CfiEscape,  Prev: CfiWindowSave,  Up: CFIDirectives

7.1.13.19 '.cfi_escape' EXPRESSION[, ...]
.........................................

Allows the user to add arbitrary bytes to the unwind info.  One might
use this to add OS-specific CFI opcodes, or generic CFI opcodes that the
LLVM integrated assembler does not yet support.


File: llvm-assembler.info,  Node: Code16,  Next: Comm,  Prev: CFIDirectives,  Up: Common Directives

7.1.14 '.code16', '.code16gcc'
------------------------------

These are target dependent assembler directives for architectures such
as Intel x86 and ARM to control generation of 16-bit code (*note Machine
Dependencies::.  For historical reasons they are included in the
standard assembler directives, so all architectures must support them.
Most architectures will support them by reporting an error that along
the lines of "code16 not supported yet".


File: llvm-assembler.info,  Node: Comm,  Next: Common,  Prev: Code16,  Up: Common Directives

7.1.15 '.comm SYMBOL, LENGTH [, ALIGNMENT]'
-------------------------------------------

'.comm' declares a common symbol named SYMBOL.  When linking, a common
symbol in one object file may be merged with a defined or common symbol
of the same name in another object file.  If the linker does not see a
definition for the symbol-just one or more common symbols-then it will
allocate LENGTH bytes of uninitialized memory.  LENGTH must be an
absolute expression.  If the linker sees multiple common symbols with
the same name, and they do not all have the same size, it will allocate
space using the largest size.

   The '.comm' directive takes an optional third argument.  This is the
desired alignment of the symbol, specified as a byte boundary (for
example, an alignment of 16 means that the least significant 4 bits of
the address should be zero).  The alignment must be an absolute
expression, and it must be a power of two.  If the linker allocates
uninitialized memory for the common symbol, it will use the alignment
when placing the symbol.  If no alignment is specified, the LLVM
integrated assembler will set the alignment to the largest power of two
less than or equal to the size of the symbol, up to a maximum of 16.


File: llvm-assembler.info,  Node: Common,  Next: Double,  Prev: Comm,  Up: Common Directives

7.1.16 '.common SYMBOL, LENGTH [, ALIGNMENT]'
---------------------------------------------

This is a synonym for '.comm'.

   _Caution:_ '.common' is not supported by the GNU assembler, so should
be avoided in portable code.


File: llvm-assembler.info,  Node: Double,  Next: Else,  Prev: Common,  Up: Common Directives

7.1.17 '.double FLONUMS'
------------------------

'.double' expects zero or more flonums, separated by commas.  It
assembles floating point numbers.  The exact kind of floating point
numbers emitted depends on how the LLVM integrated assembler is
configured.  *Note Machine Dependencies::.


File: llvm-assembler.info,  Node: Else,  Next: Elseif,  Prev: Double,  Up: Common Directives

7.1.18 '.else'
--------------

'.else' is part of the the LLVM integrated assembler support for
conditional assembly; see *note '.if': If.  It marks the beginning of a
section of code to be assembled if the condition for the preceding '.if'
was false.


File: llvm-assembler.info,  Node: Elseif,  Next: End,  Prev: Else,  Up: Common Directives

7.1.19 '.elseif'
----------------

'.elseif' is part of the the LLVM integrated assembler support for
conditional assembly; see *note '.if': If.  It is shorthand for
beginning a new '.if' block that would otherwise fill the entire '.else'
section.


File: llvm-assembler.info,  Node: End,  Next: Endif,  Prev: Elseif,  Up: Common Directives

7.1.20 '.end'
-------------

'.end' marks the end of the assembly file.  The LLVM integrated
assembler does not process anything in the file past the '.end'
directive.


File: llvm-assembler.info,  Node: Endif,  Next: Endm,  Prev: End,  Up: Common Directives

7.1.21 '.endif'
---------------

'.endif' is part of the the LLVM integrated assembler support for
conditional assembly; it marks the end of a block of code that is only
assembled conditionally.  *Note '.if': If.


File: llvm-assembler.info,  Node: Endm,  Next: Endr,  Prev: Endif,  Up: Common Directives

7.1.22 '.endm'
--------------

End the current macro definition.  *Note Macro::.


File: llvm-assembler.info,  Node: Endr,  Next: Equ,  Prev: Endm,  Up: Common Directives

7.1.23 '.endr'
--------------

End the current '.irp', '.irpc' or '.rept' definition.  *Note Irp::.
*Note Irpc::.  *Note Rept::.


File: llvm-assembler.info,  Node: Equ,  Next: Equiv,  Prev: Endr,  Up: Common Directives

7.1.24 '.equ SYMBOL, EXPRESSION'
--------------------------------

This directive sets the value of SYMBOL to EXPRESSION.  It is synonymous
with '.set'.  *Note '.set': Set.


File: llvm-assembler.info,  Node: Equiv,  Next: Err,  Prev: Equ,  Up: Common Directives

7.1.25 '.equiv SYMBOL, EXPRESSION'
----------------------------------

The '.equiv' directive is like '.equ' and '.set', except that the
assembler will signal an error if SYMBOL is already defined.  Note a
symbol which has been referenced but not actually defined is considered
to be undefined.

   Except for the contents of the error message, this is roughly
equivalent to
     .ifdef SYM
     .err
     .endif
     .equ SYM,VAL
   plus it protects the symbol from later redefinition.


File: llvm-assembler.info,  Node: Err,  Next: Error,  Prev: Equiv,  Up: Common Directives

7.1.26 '.err'
-------------

If the LLVM integrated assembler assembles a '.err' directive, it will
print an error message and, unless the '-Z' option was used, it will not
generate an object file.  This can be used to signal an error in
conditionally compiled code.


File: llvm-assembler.info,  Node: Error,  Next: Exitm,  Prev: Err,  Up: Common Directives

7.1.27 '.error "STRING"'
------------------------

Similarly to '.err', this directive emits an error, but you can specify
a string that will be emitted as the error message.  If you don't
specify the message, it defaults to '".error directive invoked in source
file"'.  *Note Error and Warning Messages: Errors.

      .error "This code has not been assembled and tested."


File: llvm-assembler.info,  Node: Exitm,  Next: Extern,  Prev: Error,  Up: Common Directives

7.1.28 '.exitm'
---------------

Exit early from the current macro definition.  *Note Macro::.


File: llvm-assembler.info,  Node: Extern,  Next: File,  Prev: Exitm,  Up: Common Directives

7.1.29 '.extern'
----------------

'.extern' is accepted in the source program--for compatibility with
other assemblers--but it is ignored.  The LLVM integrated assembler
treats all undefined symbols as external.


File: llvm-assembler.info,  Node: File,  Next: Fill,  Prev: Extern,  Up: Common Directives

7.1.30 '.file'
--------------

When emitting DWARF2 line number information, '.file' assigns filenames
to the '.debug_line' file name table.  The syntax is:

     .file FILENO FILENAME

   The FILENO operand should be a unique positive integer to use as the
index of the entry in the table.  The FILENAME operand is a C string
literal.

   The detail of filename indices is exposed to the user because the
filename table is shared with the '.debug_info' section of the DWARF2
debugging information, and thus the user must know the exact indices
that table entries will have.


File: llvm-assembler.info,  Node: Fill,  Next: Float,  Prev: File,  Up: Common Directives

7.1.31 '.fill REPEAT , SIZE , VALUE'
------------------------------------

REPEAT, SIZE and VALUE are absolute expressions.  This emits REPEAT
copies of SIZE bytes.  REPEAT may be zero or more.  SIZE may be zero or
more, but if it is more than 8, then it is deemed to have the value 8,
compatible with other people's assemblers.  The contents of each REPEAT
bytes is taken from an 8-byte number.  The highest order 4 bytes are
zero.  The lowest order 4 bytes are VALUE rendered in the byte-order of
an integer on the computer the LLVM integrated assembler is assembling
for.  Each SIZE bytes in a repetition is taken from the lowest order
SIZE bytes of this number.  Again, this bizarre behavior is compatible
with other people's assemblers.

   SIZE and VALUE are optional.  If the second comma and VALUE are
absent, VALUE is assumed zero.  If the first comma and following tokens
are absent, SIZE is assumed to be 1.


File: llvm-assembler.info,  Node: Float,  Next: Global,  Prev: Fill,  Up: Common Directives

7.1.32 '.float FLONUMS'
-----------------------

This directive assembles zero or more flonums, separated by commas.  It
has the same effect as '.single'.  The exact kind of floating point
numbers emitted depends on how the LLVM integrated assembler is
configured.  *Note Machine Dependencies::.


File: llvm-assembler.info,  Node: Global,  Next: Ident,  Prev: Float,  Up: Common Directives

7.1.33 '.global SYMBOL', '.globl SYMBOL'
----------------------------------------

'.global' makes the symbol visible to the linker.  If you define SYMBOL
in your partial program, its value is made available to other partial
programs that are linked with it.  Otherwise, SYMBOL takes its
attributes from a symbol of the same name from another file linked into
the same program.

   Both spellings ('.globl' and '.global') are accepted, for
compatibility with other assemblers.


File: llvm-assembler.info,  Node: Ident,  Next: If,  Prev: Global,  Up: Common Directives

7.1.34 '.ident' STRING
----------------------

The STRING argument is treated as a comment and emitted to the
'.comment' section.


File: llvm-assembler.info,  Node: If,  Next: Incbin,  Prev: Ident,  Up: Common Directives

7.1.35 '.if ABSOLUTE EXPRESSION' and Variants
---------------------------------------------

'.if' marks the beginning of a section of code which is only considered
part of the source program being assembled if the argument (which must
be an ABSOLUTE EXPRESSION) is non-zero.  The end of the conditional
section of code must be marked by '.endif' (*note '.endif': Endif.);
optionally, you may include code for the alternative condition, flagged
by '.else' (*note '.else': Else.).  If you have several conditions to
check, '.elseif' may be used to avoid nesting blocks if/else within each
subsequent '.else' block.

   The following variants of '.if' are also supported:
'.ifdef SYMBOL'
     Assembles the following section of code if the specified SYMBOL has
     been defined.  Note a symbol which has been referenced but not yet
     defined is considered to be undefined.

'.ifb TEXT'
     Assembles the following section of code if the operand is blank
     (empty).

'.ifc STRING1,STRING2'
     Assembles the following section of code if the two strings are the
     same.  The strings may be optionally _both_ quoted with double
     quotes.  If they are not quoted, the first string stops at the
     first comma, and the second string stops at the end of the line.
     Strings which contain whitespace should be quoted.  The string
     comparison is case sensitive.

     _Note:_ Unlike the GNU assembler, which uses single quotes, the
     LLVM integrated assembler requires double quotes.

'.ifeq ABSOLUTE EXPRESSION'
     Assembles the following section of code if the argument is zero.

'.ifeqs STRING1,STRING2'
     Another form of '.ifc'.  The strings must be quoted using double
     quotes.

'.ifge ABSOLUTE EXPRESSION'
     Assembles the following section of code if the argument is greater
     than or equal to zero.

'.ifgt ABSOLUTE EXPRESSION'
     Assembles the following section of code if the argument is greater
     than zero.

'.ifle ABSOLUTE EXPRESSION'
     Assembles the following section of code if the argument is less
     than or equal to zero.

'.iflt ABSOLUTE EXPRESSION'
     Assembles the following section of code if the argument is less
     than zero.

'.ifnb TEXT'
     Like '.ifb', but the sense of the test is reversed: this assembles
     the following section of code if the operand is non-blank
     (non-empty).

'.ifnc STRING1,STRING2.'
     Like '.ifc', but the sense of the test is reversed: this assembles
     the following section of code if the two strings are not the same.

'.ifndef SYMBOL'
'.ifnotdef SYMBOL'
     Assembles the following section of code if the specified SYMBOL has
     not been defined.  Both spelling variants are equivalent.  Note a
     symbol which has been referenced but not yet defined is considered
     to be undefined.

'.ifne ABSOLUTE EXPRESSION'
     Assembles the following section of code if the argument is not
     equal to zero (in other words, this is equivalent to '.if').

'.ifnes STRING1,STRING2'
     Like '.ifeqs', but the sense of the test is reversed: this
     assembles the following section of code if the two strings are not
     the same.


File: llvm-assembler.info,  Node: Incbin,  Next: Include,  Prev: If,  Up: Common Directives

7.1.36 '.incbin "FILE"'
-----------------------

The 'incbin' directive includes FILE verbatim at the current location.
You can control the search paths used with the '-I' command-line option
(*note Command-Line Options: Invoking.).  Quotation marks are required
around FILE.

   _Note:_ Unlike the GNU assembler, the LLVM integrated assembler does
not have optional second and third arguments to skip bytes from the
start of the file, or to specify a maximum number of bytes.


File: llvm-assembler.info,  Node: Include,  Next: Int,  Prev: Incbin,  Up: Common Directives

7.1.37 '.include "FILE"'
------------------------

This directive provides a way to include supporting files at specified
points in your source program.  The code from FILE is assembled as if it
followed the point of the '.include'; when the end of the included file
is reached, assembly of the original file continues.  You can control
the search paths used with the '-I' command-line option (*note
Command-Line Options: Invoking.).  Quotation marks are required around
FILE.


File: llvm-assembler.info,  Node: Int,  Next: Irp,  Prev: Include,  Up: Common Directives

7.1.38 '.int EXPRESSIONS'
-------------------------

Expect zero or more EXPRESSIONS, of any section, separated by commas.
For each expression, emit a number that, at run time, is the value of
that expression.  The byte order and bit size of the number is target
dependent.  *Note Machine Dependencies::.


File: llvm-assembler.info,  Node: Irp,  Next: Irpc,  Prev: Int,  Up: Common Directives

7.1.39 '.irp SYMBOL,VALUES'...
------------------------------

Evaluate a sequence of statements assigning different values to SYMBOL.
The sequence of statements starts at the '.irp' directive, and is
terminated by an '.endr' directive.  For each VALUE, SYMBOL is set to
VALUE, and the sequence of statements is assembled.  If no VALUE is
listed, the sequence of statements is assembled once, with SYMBOL set to
the null string.  To refer to SYMBOL within the sequence of statements,
use \SYMBOL.

   For example, assembling

             .irp    param,1,2,3
             move    d\param,sp@-
             .endr

   is equivalent to assembling

             move    d1,sp@-
             move    d2,sp@-
             move    d3,sp@-

   For some caveats with the spelling of SYMBOL, see also *note Macro::.


File: llvm-assembler.info,  Node: Irpc,  Next: LazyReference,  Prev: Irp,  Up: Common Directives

7.1.40 '.irpc SYMBOL,VALUES'...
-------------------------------

Evaluate a sequence of statements assigning different values to SYMBOL.
The sequence of statements starts at the '.irpc' directive, and is
terminated by an '.endr' directive.  For each character in VALUE, SYMBOL
is set to the character, and the sequence of statements is assembled.
If no VALUE is listed, the sequence of statements is assembled once,
with SYMBOL set to the null string.  To refer to SYMBOL within the
sequence of statements, use \SYMBOL.

   For example, assembling

             .irpc    param,123
             move    d\param,sp@-
             .endr

   is equivalent to assembling

             move    d1,sp@-
             move    d2,sp@-
             move    d3,sp@-

   For some caveats with the spelling of SYMBOL, see also the discussion
at *Note Macro::.


File: llvm-assembler.info,  Node: LazyReference,  Next: Lcomm,  Prev: Irpc,  Up: Common Directives

7.1.41 '.lazy_reference SYMBOL'
-------------------------------

This is a Mach-O specific assembler directive (*note
LazyReferenceMachO::).  For historical reasons it is included in the
standard assembler directives, so all architectures must support them.
Assemblers generating other object formats will support this directive
by reporting an error "unable to emit symbol attribute".


File: llvm-assembler.info,  Node: Lcomm,  Next: Line,  Prev: LazyReference,  Up: Common Directives

7.1.42 '.lcomm SYMBOL , LENGTH'
-------------------------------

Reserve LENGTH (an absolute expression) bytes for a local common denoted
by SYMBOL.  The section and value of SYMBOL are those of the new local
common.  The addresses are allocated in the bss section, so that at
run-time the bytes start off zeroed.  SYMBOL is not declared global
(*note '.global': Global.), so is normally not visible to the linker.

   Some targets permit a third argument to be used with '.lcomm'.  This
argument specifies the desired alignment of the symbol in the bss
section.


File: llvm-assembler.info,  Node: Line,  Next: Loc,  Prev: Lcomm,  Up: Common Directives

7.1.43 '.line LINE-NUMBER'
--------------------------

Even though this is a directive associated with the 'a.out' or 'b.out'
object-code formats, the LLVM integrated assembler still recognizes it
when producing ELF output.

   _Note:_ This directive is deprecated.  One day '.line' will not be
supported.


File: llvm-assembler.info,  Node: Loc,  Next: Long,  Prev: Line,  Up: Common Directives

7.1.44 '.loc FILENO LINENO [COLUMN] [OPTIONS]'
----------------------------------------------

When emitting DWARF2 line number information, the '.loc' directive will
add a row to the '.debug_line' line number matrix corresponding to the
immediately following assembly instruction.  The FILENO, LINENO, and
optional COLUMN arguments will be applied to the '.debug_line' state
machine before the row is added.

   The OPTIONS are a sequence of the following tokens in any order:

'basic_block'
     This option will set the 'basic_block' register in the
     '.debug_line' state machine to 'true'.

'prologue_end'
     This option will set the 'prologue_end' register in the
     '.debug_line' state machine to 'true'.

'epilogue_begin'
     This option will set the 'epilogue_begin' register in the
     '.debug_line' state machine to 'true'.

'is_stmt VALUE'
     This option will set the 'is_stmt' register in the '.debug_line'
     state machine to 'value', which must be either 0 or 1.

'isa VALUE'
     This directive will set the 'isa' register in the '.debug_line'
     state machine to VALUE, which must be an unsigned integer.

'discriminator VALUE'
     This directive will set the 'discriminator' register in the
     '.debug_line' state machine to VALUE, which must be an unsigned
     integer.


File: llvm-assembler.info,  Node: Long,  Next: Macro,  Prev: Loc,  Up: Common Directives

7.1.45 '.long EXPRESSIONS'
--------------------------

'.long' is the same as '.int'.  *Note '.int': Int.


File: llvm-assembler.info,  Node: Macro,  Next: NoDeadStrip,  Prev: Long,  Up: Common Directives

7.1.46 '.macro' and associated directives
-----------------------------------------

The commands '.macro' and '.endm' allow you to define macros that
generate assembly output.  For example, this definition specifies a
macro 'sum' that puts a sequence of numbers into memory:

             .macro  sum from=0, to=5
             .long   \from
             .if     \to-\from
             sum     "(\from+1)",\to
             .endif
             .endm

With that definition, 'SUM 0,5' is equivalent to this assembly input:

             .long   0
             .long   1
             .long   2
             .long   3
             .long   4
             .long   5

'.macro MACNAME'
'.macro MACNAME MACARGS ...'
     Begin the definition of a macro called MACNAME.  If your macro
     definition requires arguments, specify their names after the macro
     name, separated by commas or spaces.  You can qualify the macro
     argument to indicate whether all invocations must specify a
     non-blank value (through ':'req''), or whether it takes all of the
     remaining arguments (through ':'vararg'').  You can supply a
     default value for any macro argument by following the name with
     '=DEFLT'.  You cannot define two macros with the same MACNAME
     unless it has been subject to the '.purgem' directive (*note
     Purgem::) between the two definitions.  For example, these are all
     valid '.macro' statements:

     '.macro comm'
          Begin the definition of a macro called 'comm', which takes no
          arguments.

     '.macro plus1 p, p1'
     '.macro plus1 p p1'
          Either statement begins the definition of a macro called
          'plus1', which takes two arguments; within the macro
          definition, write '\p' or '\p1' to evaluate the arguments.

     '.macro reserve_str p1=0 p2'
          Begin the definition of a macro called 'reserve_str', with two
          arguments.  The first argument has a default value, but not
          the second.  After the definition is complete, you can call
          the macro either as 'reserve_str A,B' (with '\p1' evaluating
          to A and '\p2' evaluating to B), or as 'reserve_str ,B' (with
          '\p1' evaluating as the default, in this case '0', and '\p2'
          evaluating to B).

     '.macro m p1:req, p2=0, p3:vararg'
          Begin the definition of a macro called 'm', with at least
          three arguments.  The first argument must always have a value
          specified, but not the second, which instead has a default
          value.  The third formal will get assigned all remaining
          arguments specified at invocation time.

          When you call a macro, you can specify the argument values
          either by position, or by keyword.  For example, 'sum 9,17' is
          equivalent to 'sum to=17, from=9'.

     Note that since each of the MACARGS can be an identifier exactly as
     any other one permitted by the target architecture, there may be
     occasional problems if the target hand-crafts special meanings to
     certain characters when they occur in a special position.  For
     example, if the colon (':') is generally permitted to be part of a
     symbol name, but the architecture specific code special-cases it
     when occurring as the final character of a symbol (to denote a
     label), then the macro parameter replacement code will have no way
     of knowing that and consider the whole construct (including the
     colon) an identifier, and check only this identifier for being the
     subject to parameter substitution.  So for example this macro
     definition:

          	.macro label l
          \l:
          	.endm

     might not work as expected.  Invoking 'label foo' might not create
     a label called 'foo' but instead just insert the text '\l:' into
     the assembler source, probably generating an error about an
     unrecognized identifier.

     Similarly problems might occur with the period character ('.')
     which is often allowed inside opcode names (and hence identifier
     names).  So for example constructing a macro to build an opcode
     from a base name and a length specifier like this:

          	.macro opcode base length
                  \base.\length
          	.endm

     and invoking it as 'opcode store l' will not create a 'store.l'
     instruction but instead generate some kind of error as the
     assembler tries to interpret the text '\base.\length'.

     There are several possible ways around this problem:

     'Insert white space'
          If it is possible to use white space characters then this is
          the simplest solution.  e.g.:

               	.macro label l
               \l :
               	.endm

     'Use '\()''
          The string '\()' can be used to separate the end of a macro
          argument from the following text.  e.g.:

               	.macro opcode base length
                       \base\().\length
               	.endm

     'Use the alternate macro syntax mode'
          In the alternative macro syntax mode the ampersand character
          ('&') can be used as a separator.  e.g.:

               	.altmacro
               	.macro label l
               l&:
               	.endm

     Note: this problem of correctly identifying string parameters to
     pseudo ops also applies to the identifiers used in '.irp' (*note
     Irp::) and '.irpc' (*note Irpc::) as well.

'.endm'
     Mark the end of a macro definition.

'.exitm'
     Exit early from the current macro definition.

'\@'
     the LLVM integrated assembler maintains a counter of how many
     macros it has executed in this pseudo-variable; you can copy that
     number to your output with '\@', but _only within a macro
     definition_.

'.macros_on'
'.macros_off'
     Enable ('macros_on' and disable ('macros_off') recognition of
     macros in the code.


File: llvm-assembler.info,  Node: NoDeadStrip,  Next: Octa,  Prev: Macro,  Up: Common Directives

7.1.47 '.no_dead_strip'
-----------------------

This is a Mach-O specific assembler directive (*note
NoDeadStripMachO::).  For historical reasons it is included in the
standard assembler directives, so all architectures must support them.
Assemblers generating code for other object file formats will silently
ignore this directive.


File: llvm-assembler.info,  Node: Octa,  Next: Org,  Prev: NoDeadStrip,  Up: Common Directives

7.1.48 '.octa BIGNUMS'
----------------------

This directive expects zero or more bignums, separated by commas.  For
each bignum, it emits a 16-byte integer.

   The term "octa" comes from contexts in which a "word" is two bytes;
hence _octa_-word for 16 bytes.


File: llvm-assembler.info,  Node: Org,  Next: P2align,  Prev: Octa,  Up: Common Directives

7.1.49 '.org NEW-LC , FILL'
---------------------------

Advance the location counter of the current section to NEW-LC.  NEW-LC
is either an absolute expression or an expression with the same section
as the current subsection.  That is, you can't use '.org' to cross
sections: if NEW-LC has the wrong section, the '.org' directive is
ignored.  To be compatible with former assemblers, if the section of
NEW-LC is absolute, the LLVM integrated assembler issues a warning, then
pretends the section of NEW-LC is the same as the current subsection.

   '.org' may only increase the location counter, or leave it unchanged;
you cannot use '.org' to move the location counter backwards.

   Because the LLVM integrated assembler tries to assemble programs in
one pass, NEW-LC may not be undefined.  If you really detest this
restriction we eagerly await a chance to share your improved assembler.

   Beware that the origin is relative to the start of the section, not
to the start of the subsection.  This is compatible with other people's
assemblers.

   When the location counter (of the current subsection) is advanced,
the intervening bytes are filled with FILL which should be an absolute
expression.  If the comma and FILL are omitted, FILL defaults to zero.


File: llvm-assembler.info,  Node: P2align,  Next: PrivateExtern,  Prev: Org,  Up: Common Directives

7.1.50 '.p2align[wl] ABS-EXPR, ABS-EXPR, ABS-EXPR'
--------------------------------------------------

Pad the location counter (in the current subsection) to a particular
storage boundary.  The first expression (which must be absolute) is the
number of low-order zero bits the location counter must have after
advancement.  For example '.p2align 3' advances the location counter
until it a multiple of 8.  If the location counter is already a multiple
of 8, no change is needed.

   The second expression (also absolute) gives the fill value to be
stored in the padding bytes.  It (and the comma) may be omitted.  If it
is omitted, the padding bytes are normally zero.  However, on some
systems, if the section is marked as containing code and the fill value
is omitted, the space is filled with no-op instructions.

   The third expression is also absolute, and is also optional.  If it
is present, it is the maximum number of bytes that should be skipped by
this alignment directive.  If doing the alignment would require skipping
more bytes than the specified maximum, then the alignment is not done at
all.  You can omit the fill value (the second argument) entirely by
simply using two commas after the required alignment; this can be useful
if you want the alignment to be filled with no-op instructions when
appropriate.

   The '.p2alignw' and '.p2alignl' directives are variants of the
'.p2align' directive.  The '.p2alignw' directive treats the fill pattern
as a two byte word value.  The '.p2alignl' directives treats the fill
pattern as a four byte long word value.  For example, '.p2alignw
2,0x368d' will align to a multiple of 4.  If it skips two bytes, they
will be filled in with the value 0x368d (the exact placement of the
bytes depends upon the endianness of the processor).  If it skips 1 or 3
bytes, the fill value is undefined.


File: llvm-assembler.info,  Node: PrivateExtern,  Next: Purgem,  Prev: P2align,  Up: Common Directives

7.1.51 '.private_extern NAME'
-----------------------------

This is a Mach-O specific assembler directive (*note
PrivateExternMachO::).  For historical reasons it is included in the
standard assembler directives, so all architectures must support them.
Assemblers generating other object formats will support this directive
by reporting an error "unable to emit symbol attribute".


File: llvm-assembler.info,  Node: Purgem,  Next: Quad,  Prev: PrivateExtern,  Up: Common Directives

7.1.52 '.purgem NAME'
---------------------

Undefine the macro NAME, so that later uses of the string will not be
expanded.  *Note Macro::.


File: llvm-assembler.info,  Node: Quad,  Next: Reference,  Prev: Purgem,  Up: Common Directives

7.1.53 '.quad BIGNUMS'
----------------------

'.quad' expects zero or more bignums, separated by commas.  For each
bignum, it emits an 8-byte integer.  If the bignum won't fit in 8 bytes,
it prints a warning message; and just takes the lowest order 8 bytes of
the bignum.

   The term "quad" comes from contexts in which a "word" is two bytes;
hence _quad_-word for 8 bytes.


File: llvm-assembler.info,  Node: Reference,  Next: Rept,  Prev: Quad,  Up: Common Directives

7.1.54 '.reference SYMBOL'
--------------------------

This is a Mach-O specific assembler directive (*note ReferenceMachO::).
For historical reasons it is included in the standard assembler
directives, so all architectures must support them.  Assemblers
generating other object formats will support this directive by reporting
an error "unable to emit symbol attribute".


File: llvm-assembler.info,  Node: Rept,  Next: Set,  Prev: Reference,  Up: Common Directives

7.1.55 '.rept COUNT'
--------------------

Repeat the sequence of lines between the '.rept' directive and the next
'.endr' directive COUNT times.

   For example, assembling

             .rept   3
             .long   0
             .endr

   is equivalent to assembling

             .long   0
             .long   0
             .long   0


File: llvm-assembler.info,  Node: Set,  Next: Short,  Prev: Rept,  Up: Common Directives

7.1.56 '.set SYMBOL, EXPRESSION'
--------------------------------

Set the value of SYMBOL to EXPRESSION.  This changes SYMBOL's value and
type to conform to EXPRESSION.  If SYMBOL was flagged as external, it
remains flagged (*note Symbol Attributes::).

   You may '.set' a symbol many times in the same assembly.

   If you '.set' a global symbol, the value stored in the object file is
the last value stored into it.


File: llvm-assembler.info,  Node: Short,  Next: Single,  Prev: Set,  Up: Common Directives

7.1.57 '.short EXPRESSIONS'
---------------------------

Insert arguments into the output.  The meaning is target specific.  In
particular there may be unusual behavior if the target has a 32-bit
address space, but less than 32-bit addressing.  *Note Machine
Dependencies::.


File: llvm-assembler.info,  Node: Single,  Next: Skip,  Prev: Short,  Up: Common Directives

7.1.58 '.single FLONUMS'
------------------------

This directive assembles zero or more flonums, separated by commas.  It
has the same effect as '.float'.  The exact kind of floating point
numbers emitted depends on how the LLVM integrated assembler is
configured.  *Note Machine Dependencies::.


File: llvm-assembler.info,  Node: Skip,  Next: Sleb128,  Prev: Single,  Up: Common Directives

7.1.59 '.skip SIZE , FILL'
--------------------------

This directive emits SIZE bytes, each of value FILL.  Both SIZE and FILL
are absolute expressions.  If the comma and FILL are omitted, FILL is
assumed to be zero.  This is the same as '.space'.


File: llvm-assembler.info,  Node: Sleb128,  Next: Space,  Prev: Skip,  Up: Common Directives

7.1.60 '.sleb128 EXPRESSIONS'
-----------------------------

SLEB128 stands for "signed little endian base 128."  This is a compact,
variable length representation of numbers used by the DWARF symbolic
debugging format.  *Note '.uleb128': Uleb128.


File: llvm-assembler.info,  Node: Space,  Next: Stabs,  Prev: Sleb128,  Up: Common Directives

7.1.61 '.space SIZE , FILL'
---------------------------

This directive emits SIZE bytes, each of value FILL.  Both SIZE and FILL
are absolute expressions.  If the comma and FILL are omitted, FILL is
assumed to be zero.  This is the same as '.skip'.


File: llvm-assembler.info,  Node: Stabs,  Next: String,  Prev: Space,  Up: Common Directives

7.1.62 '.stabs STRING TYPE OTHER DESC VALUE'
--------------------------------------------

_Note:_ Support for STABS is still incomplete in the LLVM Integrated
Assembler.  This directive should be used with caution.  Most
architectures will report that this is an "unsupported directive".

   Where it is supported, this directive emits symbols (*note
Symbols::), for use by symbolic debuggers.  The five fields are:

STRING
     This is the symbol's name.  It may contain any character except
     '\000', so is more general than ordinary symbol names.  Some
     debuggers used to code arbitrarily complex structures into symbol
     names using this field.

TYPE
     An absolute expression.  The symbol's type is set to the low 8 bits
     of this expression.  Any bit pattern is permitted, but linkers and
     debuggers choke on silly bit patterns.

OTHER
     An absolute expression.  The symbol's "other" attribute is set to
     the low 8 bits of this expression.

DESC
     An absolute expression.  The symbol's descriptor is set to the low
     16 bits of this expression.

VALUE
     An absolute expression which becomes the symbol's value.

   If a warning is detected while reading a '.stabs' statement, the
symbol has probably already been created; you get a half-formed symbol
in your object file.  This is compatible with earlier assemblers!

   _Note:_ The GNU assembler also supports the variant directives
'.stabd' and '.stabn'.  '.stabd' omits the STRING and VALUE fields,
setting them respectively to the null pointer and the current location.
'stabn' omits the STRING field, setting it to the empty string '""'.
Neither of these directives is supported by the LLVM integrated
assembler.


File: llvm-assembler.info,  Node: String,  Next: SymbolResolver,  Prev: Stabs,  Up: Common Directives

7.1.63 '.string' "STR"
----------------------

Copy the characters in STR to the object file.  You may specify more
than one string to copy, separated by commas.  Unless otherwise
specified for a particular machine, the assembler marks the end of each
string with a 0 byte.  You can use any of the escape sequences described
in *note Strings: Strings.

   The GNU assembler variants '.string8', '.string16', '.string32' and
'.string64' are not supported by the LLVM integrated assembler.  *Note
Unsupported::.


File: llvm-assembler.info,  Node: SymbolResolver,  Next: Uleb128,  Prev: String,  Up: Common Directives

7.1.64 '.symbol_resolver NAME'
------------------------------

This is an undocumented Mach-O specific assembler directive (*note
SymbolResolverMachO::).  For historical reasons it is included in the
standard assembler directives, so all architectures must support them.
Assemblers generating other object formats will support this directive
by reporting an error "unable to emit symbol attribute".


File: llvm-assembler.info,  Node: Uleb128,  Next: Value,  Prev: SymbolResolver,  Up: Common Directives

7.1.65 '.uleb128 EXPRESSIONS'
-----------------------------

ULEB128 stands for "unsigned little endian base 128."  This is a
compact, variable length representation of numbers used by the DWARF
symbolic debugging format.  *Note '.sleb128': Sleb128.


File: llvm-assembler.info,  Node: Value,  Next: Warning,  Prev: Uleb128,  Up: Common Directives

7.1.66 '.value'
---------------

This is a target dependent assembler directives for Intel i386 target,
and is equivalent to the '.short' directive (*note Short::.  For
historical reasons it is included in the standard assembler directives,
so all architectures must support it.  Most architectures will either
silently ignore this directive, or report an error along the lines of
"value directive not supported yet".


File: llvm-assembler.info,  Node: Warning,  Next: WeakDefCanBeHidden,  Prev: Value,  Up: Common Directives

7.1.67 '.warning "STRING"'
--------------------------

Similar to the directive '.error' (*note '.error "STRING"': Error.), but
just emits a warning.


File: llvm-assembler.info,  Node: WeakDefCanBeHidden,  Next: WeakDefinition,  Prev: Warning,  Up: Common Directives

7.1.68 '.weak_def_can_be_hidden'
--------------------------------

This is an undocumented Mach-O specific assembler directive (*note
WeakDefCanBeHiddenMachO::).  For historical reasons it is included in
the standard assembler directives, so all architectures must support
them.  Assemblers generating other object formats will support this
directive by reporting an error "unable to emit symbol attribute".


File: llvm-assembler.info,  Node: WeakDefinition,  Next: WeakReference,  Prev: WeakDefCanBeHidden,  Up: Common Directives

7.1.69 '.weak_definition NAME'
------------------------------

This is a Mach-O specific assembler directive (*note
WeakDefinitionMachO::).  For historical reasons it is included in the
standard assembler directives, so all architectures must support them.
Assemblers generating other object formats will support this directive
by reporting an error "unable to emit symbol attribute".


File: llvm-assembler.info,  Node: WeakReference,  Next: Zero,  Prev: WeakDefinition,  Up: Common Directives

7.1.70 '.weak_reference NAME'
-----------------------------

This is a Mach-O specific assembler directive (*note
WeakReferenceMachO::).  For historical reasons it is included in the
standard assembler directives, so all architectures must support them.
Assemblers generating ELF or COFF will implement this as equivalent to
the '.weak' directive (*note WeakElf::, *note WeakCoff::).


File: llvm-assembler.info,  Node: Zero,  Prev: WeakReference,  Up: Common Directives

7.1.71 '.zero SIZE'
-------------------

This directive emits SIZE zero-valued bytes.  SIZE must be an absolute
expression.  This directive is actually an alias for the '.skip'
directive (*note Skip::), so it can take an optional second argument of
the value to store in the bytes instead of zero.  Using '.zero' in this
way would be confusing however.


File: llvm-assembler.info,  Node: ELF Directives,  Next: COFF Directives,  Prev: Common Directives,  Up: Pseudo Ops

7.2 ELF Specific Directives
===========================

* Menu:

* BssElf::                         '.bss [ SUBSECTION ]'
* DataElf::                        '.data [ SUBSECTION ]'
* HiddenElf::                      '.hidden NAMES'
* IdentElf::                       '.ident'
* InternalElf::                    '.internal NAMES'
* LocalElf::                       '.local NAMES'
* PopSectionElf::                  '.popsection'
* PreviousElf::                    '.previous'
* ProtectedElf::                   '.protected NAMES'
* PushSectionElf::                 '.pushsection NAME'
* RodataElf::                      '.rodata [ SUBSECTION ]'
* SectionElf::                     '.section NAME[, FLAGS]'
* SizeElf::                        '.size [NAME , EXPRESSION]'
* SubSectionElf::                  '.subsection'
* SymverElf::                      '.symver NAME,NAME2@NODENAME'
* TbssElf::                        '.tbss [ SUBSECTION ]'
* TdataElf::                       '.tdata [ SUBSECTION ]'
* TextElf::                        '.text [ SUBSECTION ]'
* TypeElf::                        '.type <INT | NAME , TYPE DESCRIPTION>'
* VersionElf::                     '.version "STRING"'
* WeakElf::                        '.weak NAMES'
* WeakrefElf::                     '.weakref ALIAS, SYMBOL'


File: llvm-assembler.info,  Node: BssElf,  Next: DataElf,  Up: ELF Directives

7.2.1 '.bss [ SUBSECTION ]'
---------------------------

'.bss' tells the LLVM integrated assembler to assemble the following
statements onto the end of the BSS subsection numbered SUBSECTION (which
is an absolute expression).  If SUBSECTION is omitted, it defaults to
zero.


File: llvm-assembler.info,  Node: DataElf,  Next: HiddenElf,  Prev: BssElf,  Up: ELF Directives

7.2.2 '.data [ SUBSECTION ]'
----------------------------

'.data' tells the LLVM integrated assembler to assemble the following
statements onto the end of the data subsection numbered SUBSECTION
(which is an absolute expression).  If SUBSECTION is omitted, it
defaults to zero.


File: llvm-assembler.info,  Node: HiddenElf,  Next: IdentElf,  Prev: DataElf,  Up: ELF Directives

7.2.3 '.hidden NAMES'
---------------------

This is one of the ELF visibility directives.  The other two are
'.internal' (*note '.internal': InternalElf.) and '.protected' (*note
'.protected': ProtectedElf.).  This directive overrides the named
symbols default visibility (which is set by their binding: local, global
or weak).  The directive sets the visibility to 'hidden' which means
that the symbols are not visible to other components.  Such symbols are
always considered to be 'protected' as well.


File: llvm-assembler.info,  Node: IdentElf,  Next: InternalElf,  Prev: HiddenElf,  Up: ELF Directives

7.2.4 '.ident'
--------------

This directive is used by some assemblers to place tags in object files.
The behavior of this directive varies depending on the target.  When
using ELF, comments are emitted to the '.comment' section.


File: llvm-assembler.info,  Node: InternalElf,  Next: LocalElf,  Prev: IdentElf,  Up: ELF Directives

7.2.5 '.internal NAMES'
-----------------------

This is one of the ELF visibility directives.  The other two are
'.hidden' (*note '.hidden': HiddenElf.) and '.protected' (*note
'.protected': ProtectedElf.).

   This directive overrides the named symbols default visibility (which
is set by their binding: local, global or weak).  The directive sets the
visibility to 'internal' which means that the symbols are considered to
be 'hidden' (i.e., not visible to other components), and that some
extra, processor specific processing must also be performed upon the
symbols as well.


File: llvm-assembler.info,  Node: LocalElf,  Next: PopSectionElf,  Prev: InternalElf,  Up: ELF Directives

7.2.6 '.local NAMES'
--------------------

This ELF specific directive marks each symbol in the comma-separated
list of 'names' as a local symbol so that it will not be externally
visible.  If the symbols do not already exist, they will be created.

   For targets where the '.lcomm' directive (*note Lcomm::) does not
accept an alignment argument, which is the case for most ELF targets,
the '.local' directive can be used in combination with '.comm' (*note
Comm::) to define aligned local common data.


File: llvm-assembler.info,  Node: PopSectionElf,  Next: PreviousElf,  Prev: LocalElf,  Up: ELF Directives

7.2.7 '.popsection'
-------------------

This is one of the ELF section stack manipulation directives.  The
others are '.section' (*note SectionElf::), '.subsection' (*note
SubSectionElf::), '.pushsection' (*note PushSectionElf::), and
'.previous' (*note PreviousElf::).

   This directive replaces the current section (and subsection) with the
top section (and subsection) on the section stack.  This section is
popped off the stack.


File: llvm-assembler.info,  Node: PreviousElf,  Next: ProtectedElf,  Prev: PopSectionElf,  Up: ELF Directives

7.2.8 '.previous'
-----------------

This is one of the ELF section stack manipulation directives.  The
others are '.section' (*note SectionElf::), '.subsection' (*note
SubSectionElf::), '.pushsection' (*note PushSectionElf::), and
'.popsection' (*note PopSectionElf::).

   This directive swaps the current section (and subsection) with most
recently referenced section/subsection pair prior to this one.  Multiple
'.previous' directives in a row will flip between two sections (and
their subsections).  For example:

     .section A
      .subsection 1
       .word 0x1234
      .subsection 2
       .word 0x5678
     .previous
      .word 0x9abc

   Will place 0x1234 and 0x9abc into subsection 1 and 0x5678 into
subsection 2 of section A. Whilst:

     .section A
     .subsection 1
       # Now in section A subsection 1
       .word 0x1234
     .section B
     .subsection 0
       # Now in section B subsection 0
       .word 0x5678
     .subsection 1
       # Now in section B subsection 1
       .word 0x9abc
     .previous
       # Now in section B subsection 0
       .word 0xdef0

   Will place 0x1234 into section A, 0x5678 and 0xdef0 into subsection 0
of section B and 0x9abc into subsection 1 of section B.

   In terms of the section stack, this directive swaps the current
section with the top section on the section stack.


File: llvm-assembler.info,  Node: ProtectedElf,  Next: PushSectionElf,  Prev: PreviousElf,  Up: ELF Directives

7.2.9 '.protected NAMES'
------------------------

This is one of the ELF visibility directives.  The other two are
'.hidden' (*note HiddenElf::) and '.internal' (*note InternalElf::).

   This directive overrides the named symbols default visibility (which
is set by their binding: local, global or weak).  The directive sets the
visibility to 'protected' which means that any references to the symbols
from within the components that defines them must be resolved to the
definition in that component, even if a definition in another component
would normally preempt this.


File: llvm-assembler.info,  Node: PushSectionElf,  Next: RodataElf,  Prev: ProtectedElf,  Up: ELF Directives

7.2.10 '.pushsection NAME [, SUBSECTION] [, "FLAGS"[, @TYPE[,ARGUMENTS]]]'
--------------------------------------------------------------------------

This is one of the ELF section stack manipulation directives.  The
others are '.section' (*note SectionElf::), '.subsection' (*note
SubSectionElf::), '.popsection' (*note PopSectionElf::), and '.previous'
(*note PreviousElf::).

   This directive pushes the current section (and subsection) onto the
top of the section stack, and then replaces the current section and
subsection with 'name' and 'subsection'.  The optional 'flags', 'type'
and 'arguments' are treated the same as in the '.section' (*note
SectionElf::) directive.


File: llvm-assembler.info,  Node: RodataElf,  Next: SectionElf,  Prev: PushSectionElf,  Up: ELF Directives

7.2.11 '.rodata [ SUBSECTION ]'
-------------------------------

'.rodata' tells the LLVM integrated assembler to assemble the following
statements onto the end of the read-only data subsection numbered
SUBSECTION (which is an absolute expression).  If SUBSECTION is omitted,
it defaults to zero.


File: llvm-assembler.info,  Node: SectionElf,  Next: SizeElf,  Prev: RodataElf,  Up: ELF Directives

7.2.12 '.section NAME'
----------------------

Use the '.section' directive to assemble the following code into a
section named NAME.

   This directive is only supported for targets that actually support
arbitrarily named sections; on 'a.out' targets, for example, it is not
accepted, even with a standard 'a.out' section name.

   This is one of the ELF section stack manipulation directives.  The
others are '.subsection' (*note SubSectionElf::), '.pushsection' (*note
PushSectionElf::), '.popsection' (*note PopSectionElf::), and
'.previous' (*note PreviousElf::).

   The '.section' directive is used like this:

     .section NAME [, "FLAGS"[, @TYPE[,FLAG_SPECIFIC_ARGUMENTS]]]

   The optional FLAGS argument is a quoted string which may contain any
combination of the following characters:
'a'
     section is allocatable
'e'
     section is excluded from executable and shared library.
'w'
     section is writable
'x'
     section is executable
'M'
     section is mergeable
'S'
     section contains zero terminated strings
'G'
     section is a member of a section group
'T'
     section is used for thread-local-storage
'?'
     section is a member of the previously-current section's group, if
     any
   There may be further target dependent flags.  For example AAP
supports the 'R' flag to indicate a section should not be relaxed when
linking.  *Note Machine Dependencies::.

   The optional TYPE argument may contain one of the following
constants:
'@progbits'
     section contains data
'@nobits'
     section does not contain data (i.e., section only occupies space)
'@note'
     section contains data which is used by things other than the
     program
'@init_array'
     section contains an array of pointers to init functions
'@fini_array'
     section contains an array of pointers to finish functions
'@preinit_array'
     section contains an array of pointers to pre-init functions

   Many targets only support the first three section types.

   _Note:_ On targets where the '@' character is the start of a comment
(e.g.  ARM) then another character is used instead.  For example the ARM
port uses the '%' character.

   If FLAGS contains the 'M' symbol then the TYPE argument must be
specified as well as an extra argument--ENTSIZE--like this:

     .section NAME , "FLAGS"M, @TYPE, ENTSIZE

   Sections with the 'M' flag but not 'S' flag must contain fixed size
constants, each ENTSIZE octets long.  Sections with both 'M' and 'S'
must contain zero terminated strings where each character is ENTSIZE
bytes long.  The linker may remove duplicates within sections with the
same name, same entity size and same flags.  ENTSIZE must be an absolute
expression.  For sections with both 'M' and 'S', a string which is a
suffix of a larger string is considered a duplicate.  Thus '"def"' will
be merged with '"abcdef"'; A reference to the first '"def"' will be
changed to a reference to '"abcdef"+3'.

   If FLAGS contains the 'G' symbol then the TYPE argument must be
present along with an additional field like this:

     .section NAME , "FLAGS"G, @TYPE, GROUPNAME[, LINKAGE]

   The GROUPNAME field specifies the name of the section group to which
this particular section belongs.  The optional linkage field can
contain:
'comdat'
     indicates that only one copy of this section should be retained
'.gnu.linkonce'
     an alias for comdat

   _Note:_ If both the M and G flags are present then the fields for the
Merge flag should come first, like this:

     .section NAME , "FLAGS"MG, @TYPE, ENTSIZE, GROUPNAME[, LINKAGE]

   If FLAGS contains the '?' symbol then it may not also contain the 'G'
symbol and the GROUPNAME or LINKAGE fields should not be present.
Instead, '?' says to consider the section that's current before this
directive.  If that section used 'G', then the new section will use 'G'
with those same GROUPNAME and LINKAGE fields implicitly.  If not, then
the '?' symbol has no effect.

   If no flags are specified, the default flags depend upon the section
name.  If the section name is not recognized, the default will be for
the section to have none of the above flags: it will not be allocated in
memory, nor writable, nor executable.  The section will contain data.

   The assembler supports another type of '.section' directive for
compatibility with the Solaris assembler:

     .section "NAME"[, FLAGS...]

   _Note:_ The section name is quoted.  There may be a sequence of comma
separated flags:
'#alloc'
     section is allocatable
'#write'
     section is writable
'#execinstr'
     section is executable
'#exclude'
     section is excluded from executable and shared library.
'#tls'
     section is used for thread local storage

   This directive replaces the current section and subsection.  The GNU
assembler testsuite directory 'gas/testsuite/gas/elf' contains some
examples of how this directive and the other section stack directives.


File: llvm-assembler.info,  Node: SizeElf,  Next: SubSectionElf,  Prev: SectionElf,  Up: ELF Directives

7.2.13 '.size EXPRESSION'
-------------------------

This directive sets the size associated with a symbol NAME.  The size in
bytes is computed from EXPRESSION which can make use of label
arithmetic.  This directive is typically used to set the size of
function symbols.


File: llvm-assembler.info,  Node: SubSectionElf,  Next: SymverElf,  Prev: SizeElf,  Up: ELF Directives

7.2.14 '.subsection EXPRESSION'
-------------------------------

This is one of the ELF section stack manipulation directives.  The
others are '.section' (*note SectionElf::), '.pushsection' (*note
PushSectionElf::), '.popsection' (*note PopSectionElf::), and
'.previous' (*note PreviousElf::).

   This directive replaces the current subsection with EXPRESSION.  The
current section is not changed.  The replaced subsection is put onto the
section stack in place of the then current top of stack subsection.


File: llvm-assembler.info,  Node: SymverElf,  Next: TbssElf,  Prev: SubSectionElf,  Up: ELF Directives

7.2.15 '.symver'
----------------

Use the '.symver' directive to bind symbols to specific version nodes
within a source file.  This is only supported on ELF platforms, and is
typically used when assembling files to be linked into a shared library.
There are cases where it may make sense to use this in objects to be
bound into an application itself so as to override a versioned symbol
from a shared library.

   The '.symver' directive can be used like this:
     .symver NAME, NAME2@NODENAME
   If the symbol NAME is defined within the file being assembled, the
'.symver' directive effectively creates a symbol alias with the name
NAME2@NODENAME, and in fact the main reason that we just don't try and
create a regular alias is that the @ character isn't permitted in symbol
names.  The NAME2 part of the name is the actual name of the symbol by
which it will be externally referenced.  The name NAME itself is merely
a name of convenience that is used so that it is possible to have
definitions for multiple versions of a function within a single source
file, and so that the compiler can unambiguously know which version of a
function is being mentioned.  The NODENAME portion of the alias should
be the name of a node specified in the version script supplied to the
linker when building a shared library.  If you are attempting to
override a versioned symbol from a shared library, then NODENAME should
correspond to the node name of the symbol you are trying to override.

   If the symbol NAME is not defined within the file being assembled,
all references to NAME will be changed to NAME2@NODENAME.  If no
reference to NAME is made, NAME2@NODENAME will be removed from the
symbol table.

   Another usage of the '.symver' directive is:
     .symver NAME, NAME2@@NODENAME
   In this case, the symbol NAME must exist and be defined within the
file being assembled.  It is similar to NAME2@NODENAME.  The difference
is NAME2@@NODENAME will also be used to resolve references to NAME2 by
the linker.

   The third usage of the '.symver' directive is:
     .symver NAME, NAME2@@@NODENAME
   When NAME is not defined within the file being assembled, it is
treated as NAME2@NODENAME.  When NAME is defined within the file being
assembled, the symbol name, NAME, will be changed to NAME2@@NODENAME.


File: llvm-assembler.info,  Node: TbssElf,  Next: TdataElf,  Prev: SymverElf,  Up: ELF Directives

7.2.16 '.tbss [ SUBSECTION ]'
-----------------------------

'.tbss' tells the LLVM integrated assembler to assemble the following
statements onto the end of the TBSS subsection numbered SUBSECTION
(which is an absolute expression).  If SUBSECTION is omitted, it
defaults to zero.  This section is used for uninitialized thread local
storage (TLS) objects.


File: llvm-assembler.info,  Node: TdataElf,  Next: TextElf,  Prev: TbssElf,  Up: ELF Directives

7.2.17 '.tdata [ SUBSECTION ]'
------------------------------

'.tdata' tells the LLVM integrated assembler to assemble the following
statements onto the end of the tdata subsection numbered SUBSECTION
(which is an absolute expression).  If SUBSECTION is omitted, it
defaults to zero.  This section is used for initialized thread local
storage (TLS) objects.


File: llvm-assembler.info,  Node: TextElf,  Next: TypeElf,  Prev: TdataElf,  Up: ELF Directives

7.2.18 '.text [ SUBSECTION ]'
-----------------------------

Tells the LLVM integrated assembler to assemble the following statements
onto the end of the text subsection numbered SUBSECTION, which is an
absolute expression.  If SUBSECTION is omitted, subsection number zero
is used.


File: llvm-assembler.info,  Node: TypeElf,  Next: VersionElf,  Prev: TextElf,  Up: ELF Directives

7.2.19 '.type NAME , TYPE DESCRIPTION'
--------------------------------------

This sets the type of symbol NAME to be either a function symbol or an
object symbol.  There are five different syntaxes supported for the TYPE
DESCRIPTION field, in order to provide compatibility with various other
assemblers.

   Because some of the characters used in these syntaxes (such as '@'
and '#') are comment characters for some architectures, some of the
syntaxes below do not work on all architectures.  The first variant will
be accepted by the LLVM integrated assembler on all architectures so
that variant should be used for maximum portability, if you do not need
to assemble your code with other assemblers.

   The syntaxes supported are:

       .type <name> STT_<TYPE_IN_UPPER_CASE>
       .type <name>,#<type>
       .type <name>,@<type>
       .type <name>,%<type>
       .type <name>,"<type>"

   The types supported are:

'STT_FUNC'
'function'
     Mark the symbol as being a function name.

'STT_GNU_IFUNC'
'gnu_indirect_function'
     Mark the symbol as an indirect function when evaluated during
     relocation processing.  (This is only supported on assemblers
     targeting GNU systems).

'STT_OBJECT'
'object'
     Mark the symbol as being a data object.

'STT_TLS'
'tls_object'
     Mark the symbol as being a thread-local data object.

'STT_COMMON'
'common'
     Mark the symbol as being a common data object.

'STT_NOTYPE'
'notype'
     Does not mark the symbol in any way.  It is supported just for
     completeness.

'gnu_unique_object'
     Marks the symbol as being a globally unique data object.  The
     dynamic linker will make sure that in the entire process there is
     just one symbol with this name and type in use.  (This is only
     supported on assemblers targeting GNU systems).

   _Note:_ Some targets support extra types in addition to those listed
above.  *Note Machine Dependencies::.


File: llvm-assembler.info,  Node: VersionElf,  Next: WeakElf,  Prev: TypeElf,  Up: ELF Directives

7.2.20 '.version "STRING"'
--------------------------

This directive creates a '.note' section and places into it an ELF
formatted note of type NT_VERSION. The note's name is set to 'string'.


File: llvm-assembler.info,  Node: WeakElf,  Next: WeakrefElf,  Prev: VersionElf,  Up: ELF Directives

7.2.21 '.weak NAMES'
--------------------

This directive sets the weak attribute on the comma separated list of
symbol 'names'.  If the symbols do not already exist, they will be
created.


File: llvm-assembler.info,  Node: WeakrefElf,  Prev: WeakElf,  Up: ELF Directives

7.2.22 '.weakref ALIAS, TARGET'
-------------------------------

This directive creates an alias to the target symbol that enables the
symbol to be referenced with weak-symbol semantics, but without actually
making it weak.  If direct references or definitions of the symbol are
present, then the symbol will not be weak, but if all references to it
are through weak references, the symbol will be marked as weak in the
symbol table.

   The effect is equivalent to moving all references to the alias to a
separate assembly source file, renaming the alias to the symbol in it,
declaring the symbol as weak there, and running a reloadable link to
merge the object files resulting from the assembly of the new source
file and the old source file that had the references to the alias
removed.

   The alias itself never makes to the symbol table, and is entirely
handled within the assembler.


File: llvm-assembler.info,  Node: COFF Directives,  Next: Mach-O Directives,  Prev: ELF Directives,  Up: Pseudo Ops

7.3 COFF Specific Directives
============================

* Menu:

* BssCoff::             '.bss [ SUBSECTION ]'
* DataCoff::            '.data [ SUBSECTION ]'
* DefCoff::             '.def NAME', '.endef'
* LinkonceCoff::        '.linkonce TYPE'
* SclCoff::             '.scl'
* SecidxCoff::          '.secidx FUNCNAME', '.secrel32 FUNCNAME'
* SectionCoff::         '.section NAME [, "FLAGS" | , SUBSECTION ]'
* TextCoff::            '.text [ SUBSECTION ]'
* TypeCoff::            '.type'
* Win64Coff::           Directives for Win64 Structured Event Handling
* WeakCoff::            '.weak NAMES'


File: llvm-assembler.info,  Node: BssCoff,  Next: DataCoff,  Up: COFF Directives

7.3.1 '.bss [ SUBSECTION ]'
---------------------------

'.bss' tells the LLVM integrated assembler to assemble the following
statements onto the end of the BSS subsection numbered SUBSECTION (which
is an absolute expression).  If SUBSECTION is omitted, it defaults to
zero.


File: llvm-assembler.info,  Node: DataCoff,  Next: DefCoff,  Prev: BssCoff,  Up: COFF Directives

7.3.2 '.data [ SUBSECTION ]'
----------------------------

'.data' tells the LLVM integrated assembler to assemble the following
statements onto the end of the data subsection numbered SUBSECTION
(which is an absolute expression).  If SUBSECTION is omitted, it
defaults to zero.


File: llvm-assembler.info,  Node: DefCoff,  Next: LinkonceCoff,  Prev: DataCoff,  Up: COFF Directives

7.3.3 '.def NAME', '.endef'
---------------------------

Begin defining debugging information for a symbol NAME; the definition
extends until the '.endef' directive is encountered.


File: llvm-assembler.info,  Node: LinkonceCoff,  Next: SclCoff,  Prev: DefCoff,  Up: COFF Directives

7.3.4 '.linkonce TYPE'
----------------------

Mark the current section so that the linker only includes a single copy
of it.  This may be used to include the same section in several
different object files, but ensure that the linker will only include it
once in the final output file.  The '.linkonce' pseudo-op must be used
for each instance of the section.  Duplicate sections are detected based
on the section name, so it should be unique.

   This directive is only supported by a few object file formats.  COFF
support, other than as Windows Portable Executable format is a LLVM
integrated assembler extension.

   The TYPE argument is optional.  For example:
     .linkonce same_size

   If specified, it must be one of the following strings.  Not all types
may be supported on all object file formats.

'discard'
     Silently discard duplicate sections.  This is the default.

'one_only'
     Warn if there are duplicate sections, but still keep only one copy.

'same_size'
     Warn if any of the duplicates have different sizes.

'same_contents'
     Warn if any of the duplicates do not have exactly the same
     contents.

'largest'
     Links the largest section from among the duplicates.

'newest'
     Links the newest section from among the duplicates.


File: llvm-assembler.info,  Node: SclCoff,  Next: SecidxCoff,  Prev: LinkonceCoff,  Up: COFF Directives

7.3.5 '.scl'
------------

Set the storage-class value for a symbol.  This directive may only be
used inside a '.def'/'.endef' pair (*note DefCoff::.  Storage class may
flag whether a symbol is static or external, or it may record further
symbolic debugging information.


File: llvm-assembler.info,  Node: SecidxCoff,  Next: SectionCoff,  Prev: SclCoff,  Up: COFF Directives

7.3.6 '.secidx FUNCNAME', '.secrel32'
-------------------------------------

These are target dependent assembler directives for the Intel x86 family
of architectures (*note Machine Dependencies::.  For historical reason
they are generic COFF directives, so must be implemented by any target
that supports COFF.

   '.secrel32' generates a relocation that corresponds to the COFF
relocation types 'IMAGE_REL_I386_SECREL' (32-bit) or
'IMAGE_REL_AMD64_SECREL' (64-bit).

   The '.secidx' relocation generates an index of the section that
contains the target.  It corresponds to the COFF relocation types
'IMAGE_REL_I386_SECTION' (32-bit) or 'IMAGE_REL_AMD64_SECTION' (64-bit).

   The following example is taken from the LLVM 3.6 documentation.

     .section .debug$S,"rn"
            .long 4
            .long 242
            .long 40
            .secrel32  _function_name
            .secidx    _function_name
            ...


File: llvm-assembler.info,  Node: SectionCoff,  Next: TextCoff,  Prev: SecidxCoff,  Up: COFF Directives

7.3.7 '.section NAME [, "FLAGS" | , SUBSECTION ]'
-------------------------------------------------

If the optional argument is quoted, it is taken as flags to use for the
section.  Each flag is a single character.  The following flags are
recognized:
'b'
     bss section (uninitialized data)
'n'
     section is not loaded
'w'
     writable section
'd'
     data section
'e'
     exclude section from linking
'r'
     read-only section
'x'
     executable section
's'
     shared section (meaningful for PE targets)
'a'
     ignored.  (For compatibility with the ELF version)
'y'
     section is not readable (meaningful for PE targets)
'0-9'
     single-digit power-of-two section alignment (GNU extension)

   If no flags are specified, the default flags depend upon the section
name.  If the section name is not recognized, the default will be for
the section to be loaded and writable.  Note the 'n' and 'w' flags
remove attributes from the section, rather than adding them, so if they
are used on their own it will be as if no flags had been specified at
all.

   If the optional argument to the '.section' directive is not quoted,
it is taken as a subsection number (*note Sub-Sections::).


File: llvm-assembler.info,  Node: TextCoff,  Next: TypeCoff,  Prev: SectionCoff,  Up: COFF Directives

7.3.8 '.text [ SUBSECTION ]'
----------------------------

Tells the LLVM integrated assembler to assemble the following statements
onto the end of the text subsection numbered SUBSECTION, which is an
absolute expression.  If SUBSECTION is omitted, subsection number zero
is used.


File: llvm-assembler.info,  Node: TypeCoff,  Next: Win64Coff,  Prev: TextCoff,  Up: COFF Directives

7.3.9 '.type'
-------------

This directive is used to set the type of a symbol.  For COFF targets,
this directive is permitted only within '.def'/'.endef' pairs.  It is
used like this:

     .type INT

   This records the integer INT as the type attribute of a symbol table
entry.


File: llvm-assembler.info,  Node: Win64Coff,  Next: WeakCoff,  Prev: TypeCoff,  Up: COFF Directives

7.3.10 COFF Specific Directives for Win64 Structured Event Handling
-------------------------------------------------------------------

The windows structure event handling (SEH) directives are implemented,
but there seems to be no documentation for these directives.  The
information in this section has been gleaned from looking at the source
code, so should be treated with caution.

* Menu:

* SehProc::                  '.seh_proc NAME', '.seh_endproc'
* SehEndprologue::           '.seh_endprologue'
* SehHandler::               '.seh_handler FUNCNAME [ EVENTTYPE, EVENTTYPE,... ]'
* SehHandlerdata::           '.seh_handlerdata'
* SehPushframe::             '.seh_pushframe SIZE'
* SehPushreg::               '.seh_pushreg REG'
* SehSavereg::               '.seh_savereg REG OFFSET'
* SehSavexmn::               '.seh_savexmm REG OFFSET'
* SehSetframe::              '.seh_setframe REG OFFSET'
* SehStackalloc::            '.seh_stackalloc SIZE'
* SehChained::               '.seh_startchained', '.seh_endchained'


File: llvm-assembler.info,  Node: SehProc,  Next: SehEndprologue,  Up: Win64Coff

7.3.10.1 '.seh_proc NAME', '.seh_endproc'
.........................................

These directives mark the start and end of any function in a SEH
environment.


File: llvm-assembler.info,  Node: SehEndprologue,  Next: SehHandler,  Prev: SehProc,  Up: Win64Coff

7.3.10.2 '.seh_endprologue'
...........................

This directive marks the end of a function prologue in a SEH environment
and should precede the 'seh_proc' (*note SehProc::) directive of the
function.  All code from the previous '.seh_endproc' to
'.seh_endprologue' is considered part of the function prologue.


File: llvm-assembler.info,  Node: SehHandler,  Next: SehHandlerdata,  Prev: SehEndprologue,  Up: Win64Coff

7.3.10.3 '.seh_handler FUNCNAME [ EVENTTYPE, EVENTTYPE,... ]'
.............................................................

FUNCNAME is marked as an event handler for events of type EVENTTYPE for
the next function to be specified by PROC (*note SehProc::).  If
EVENTTYPE is omitted, the handler will be for any events other than
those for which a separate '.seh_handler' directive with EVENTTYPE has
been specified.

   These directives should follow '.seh_endprologue' (*note
SehEndprologue::).


File: llvm-assembler.info,  Node: SehHandlerdata,  Next: SehPushframe,  Prev: SehHandler,  Up: Win64Coff

7.3.10.4 '.seh_handlerdata'
...........................

This indicates that subsequent data should be written into a separate
section for SEH handler data.
             .seh_handler    dummy_handler, @unwind,@except
             .seh_handlerdata
             .long 0
             .text
             .seh_proc


File: llvm-assembler.info,  Node: SehPushframe,  Next: SehPushreg,  Prev: SehHandlerdata,  Up: Win64Coff

7.3.10.5 '.seh_pushframe SIZE'
..............................

Indicate that a frame of SIZE bytes is used.  This directive should
appear after the '.seh_endprologue' directive (*note SehEndprologue::)
and before the '.seh_proc' directive (*note SehProc::) for the function
to which it refers.


File: llvm-assembler.info,  Node: SehPushreg,  Next: SehSavereg,  Prev: SehPushframe,  Up: Win64Coff

7.3.10.6 '.seh_pushreg REG'
...........................

Indicate that register REG is pushed to the stack.  This directive
should appear after the '.seh_endprologue' directive (*note
SehEndprologue::) and before the '.seh_proc' directive (*note SehProc::)
for the function to which it refers.


File: llvm-assembler.info,  Node: SehSavereg,  Next: SehSavexmn,  Prev: SehPushreg,  Up: Win64Coff

7.3.10.7 '.seh_savereg REG OFFSET'
..................................

Indicate that general purpose register REG is save at OFFSET on the
stack.  This directive should appear after the '.seh_endprologue'
directive (*note SehEndprologue::) and before the '.seh_proc' directive
(*note SehProc::) for the function to which it refers.


File: llvm-assembler.info,  Node: SehSavexmn,  Next: SehSetframe,  Prev: SehSavereg,  Up: Win64Coff

7.3.10.8 '.seh_savexmn REG OFFSET'
..................................

Indicate that XMM register REG is save at OFFSET on the stack.  This
directive should appear after the '.seh_endprologue' directive (*note
SehEndprologue::) and before the '.seh_proc' directive (*note SehProc::)
for the function to which it refers.


File: llvm-assembler.info,  Node: SehSetframe,  Next: SehStackalloc,  Prev: SehSavexmn,  Up: Win64Coff

7.3.10.9 '.seh_setframe REG OFFSET'
...................................

Indicate that the frame pointer is in REG and initially points to OFFSET
on the stack.  This directive should appear after the '.seh_endprologue'
directive (*note SehEndprologue::) and before the '.seh_proc' directive
(*note SehProc::) for the function to which it refers.


File: llvm-assembler.info,  Node: SehStackalloc,  Next: SehChained,  Prev: SehSetframe,  Up: Win64Coff

7.3.10.10 '.seh_stackalloc SIZE'
................................

Indicate further allocation of SIZE bytes of stack has been made.  This
directive should appear after the '.seh_endprologue' directive (*note
SehEndprologue::) and before the '.seh_proc' directive (*note SehProc::)
for the function to which it refers.


File: llvm-assembler.info,  Node: SehChained,  Prev: SehStackalloc,  Up: Win64Coff

7.3.10.11 '.seh_startchained', '.seh_endchained'
................................................

Indicate the start and end of a chained event handler.


File: llvm-assembler.info,  Node: WeakCoff,  Prev: Win64Coff,  Up: COFF Directives

7.3.11 '.weak NAMES'
--------------------

This directive sets the weak attribute on the comma separated list of
symbol 'names'.  If the symbols do not already exist, they will be
created.

   On a Windows Portable Executable (PE) target, weak symbols are
supported natively as weak aliases.  When a weak symbol is created that
is not an alias, the LLVM integrated assembler creates an alternate
symbol to hold the default value.

   On COFF targets other than PE, weak symbols are a GNU extension also
supported by the LLVM integrated assembler.  This directive sets the
weak attribute on the comma separated list of symbol 'names'.  If the
symbols do not already exist, they will be created.


File: llvm-assembler.info,  Node: Mach-O Directives,  Next: Deprecated,  Prev: COFF Directives,  Up: Pseudo Ops

7.4 Mach-O Specific Directives
==============================

LLVM implements all the assembler directives described by the OS X
Assembler Reference manual.  This document only provides a summary,
together with any LLVM specific extensions.

* Menu:

* BssMachO::                        '.bss'
* ConstMachO::                      '.const'
* ConstDataMachO::                  '.const_data'
* ConstructorMachO::                '.constructor', '.destructor'
* CstringMachO::                    '.cstring'
* DataMachO::                       '.data'
* DescMachO::                       '.desc SYMBOL, EXPR'
* DumpMachO::                       '.dump FILENAME', '.load FILENAME'
* DyldMachO::                       '.dyld'
* FvmlibInitMachO::                 '.fvmlib_init0', '.fvmlib_init1'
* IdentMachO::                      '.ident'
* IosVersionMinMachO::              '.ios_version_min MAJOR, MINOR, PATCH'
* LazySymbolPointerMachO::          '.lazy_symbol_pointer', '.non_lazy_symbol_pointer'
* LazyReferenceMachO::              '.lazy_reference SYMBOL'
* LinkerOptionMachO::               '.linker_option "STRING"'
* LiteralMachO::                    '.literal4', '.literal8', '.literal16'
* LsymMachO::                       '.lsym SYMBO, EXPRESSION'
* MacosxVersionMinMachO::           '.macosx_version_min MAJOR, MINOR, PATCH'
* ModInitFuncMachO::                '.mod_init_func', '.mod_term_func'
* NoDeadStripMachO::                '.no_dead_strip SYMBOL'
* ObjC::                            Mach-O Objective C Specific Directives
* PicsymbolStubMachO::              '.picsymbol_stub'
* PreviousMachO::                   '.previous'
* PrivateExternMachO::              '.private_extern NAME'
* ReferenceMachO::                  '.reference SYMBOL'
* SectionMachO::                    '.section SEGNAME, SECTNAME [[[, TYPE ], ATTRIBUTE ], SIZEOF_STUB ] '
* StaticConstMachO::                '.static_const'
* StaticDataMachO::                 '.static_data'
* SymbolResolverMachO::             '.symbol_resolver RESOLVER'
* SymbolStubMachO::                 '.symbol_stub'
* TbssMachO::                       '.tbss SYMBOL SIZE ALIGN'
* TdataMachO::                      '.tdata'
* TextMachO::                       '.text'
* ThreadInitFuncMachO::             '.thread_init_func'
* TlvMachO::                        '.tlv'
* WeakDefCanBeHiddenMachO::         '.weak_def_can_be_hidden NAME'
* WeakDefinitionMachO::             '.weak_definition NAME'
* WeakReferenceMachO::              '.weak_reference NAME'
* ZerofillMachO::                   '.zerofill SEGNAME, SECTNAME [, SYMBOL, SIZE [, ALIGN ]]'


File: llvm-assembler.info,  Node: BssMachO,  Next: ConstMachO,  Up: Mach-O Directives

7.4.1 '.bss'
------------

This is a synonym for:
             .section  "__DATA", "__bss"

   *Note SectionMachO::.


File: llvm-assembler.info,  Node: ConstMachO,  Next: ConstDataMachO,  Prev: BssMachO,  Up: Mach-O Directives

7.4.2 '.const'
--------------

This is a synonym for:
             .section  "__TEXT", "__const"

   *Note SectionMachO::.


File: llvm-assembler.info,  Node: ConstDataMachO,  Next: ConstructorMachO,  Prev: ConstMachO,  Up: Mach-O Directives

7.4.3 '.const_data'
-------------------

This is a synonym for:
             .section  "__DATA", "__const_data"

   *Note SectionMachO::.


File: llvm-assembler.info,  Node: ConstructorMachO,  Next: CstringMachO,  Prev: ConstDataMachO,  Up: Mach-O Directives

7.4.4 '.constructor', '.destructor'
-----------------------------------

These are synonyms respectively for:
             .section  "__TEXT", "__constructor"
             .section  "__TEXT", "__destructor"

   *Note SectionMachO::.


File: llvm-assembler.info,  Node: CstringMachO,  Next: DataMachO,  Prev: ConstructorMachO,  Up: Mach-O Directives

7.4.5 '.cstring'
----------------

This is a synonym for:
             .section  "__TEXT", "__cstring"

   *Note SectionMachO::.


File: llvm-assembler.info,  Node: DataMachO,  Next: DescMachO,  Prev: CstringMachO,  Up: Mach-O Directives

7.4.6 '.data'
-------------

This is a synonym for:
             .section  "__DATA", "__data"

   *Note SectionMachO::.


File: llvm-assembler.info,  Node: DescMachO,  Next: DumpMachO,  Prev: DataMachO,  Up: Mach-O Directives

7.4.7 '.desc SYMBOL, EXPR'
--------------------------

Set the 'n_desc' field for the specified SYMBO to the specified absolute
expression.


File: llvm-assembler.info,  Node: DumpMachO,  Next: DyldMachO,  Prev: DescMachO,  Up: Mach-O Directives

7.4.8 '.dump FILENAME', '.load FILENAME'
----------------------------------------

These directives dump and load absolute symbols and macro definitions to
and from a file.


File: llvm-assembler.info,  Node: DyldMachO,  Next: FvmlibInitMachO,  Prev: DumpMachO,  Up: Mach-O Directives

7.4.9 '.dyld'
-------------

This is a synonym for:
             .section  "__DATA", "__dyld"

   *Note SectionMachO::.


File: llvm-assembler.info,  Node: FvmlibInitMachO,  Next: IdentMachO,  Prev: DyldMachO,  Up: Mach-O Directives

7.4.10 '.fvmlib_init0', '.fvmlib_init0'
---------------------------------------

These are synonyms respectively for:
             .section  "__TEXT", "__fvmlib_init0"
             .section  "__TEXT", "__fvmlib_init1"

   *Note SectionMachO::.


File: llvm-assembler.info,  Node: IdentMachO,  Next: IosVersionMinMachO,  Prev: FvmlibInitMachO,  Up: Mach-O Directives

7.4.11 '.ident'
---------------

This directive is ignored.


File: llvm-assembler.info,  Node: IosVersionMinMachO,  Next: LazySymbolPointerMachO,  Prev: IdentMachO,  Up: Mach-O Directives

7.4.12 '.ios_version_min MAJOR, MINOR, PATCH'
---------------------------------------------

Verify that the version of iOS for which the code is being assembled has
at least the specified MAJOR, MINOR and PATCH versions.


File: llvm-assembler.info,  Node: LazySymbolPointerMachO,  Next: LazyReferenceMachO,  Prev: IosVersionMinMachO,  Up: Mach-O Directives

7.4.13 '.lazy_symbol_pointer', '.non_lazy_symbol_pointer'
---------------------------------------------------------

This is a synonym for:
             .section  "__DATA", "__ni_symbol_pointer"

   *Note SectionMachO::.


File: llvm-assembler.info,  Node: LazyReferenceMachO,  Next: LinkerOptionMachO,  Prev: LazySymbolPointerMachO,  Up: Mach-O Directives

7.4.14 '.lazy_reference SYMBOL'
-------------------------------

This is a Generic option that is Mach-O specific.  The specified SYMBOL
is marked to be a lazy undefined symbol.


File: llvm-assembler.info,  Node: LinkerOptionMachO,  Next: LiteralMachO,  Prev: LazyReferenceMachO,  Up: Mach-O Directives

7.4.15 '.linker_option "STRING"'
--------------------------------

Pass the specified string as an option to any subsequent linking step.


File: llvm-assembler.info,  Node: LiteralMachO,  Next: LsymMachO,  Prev: LinkerOptionMachO,  Up: Mach-O Directives

7.4.16 '.literal4', '.literal8', '.literal16'
---------------------------------------------

These are synonyms for respectively:
             .section  "__TEXT", "__literal4"
             .section  "__TEXT", "__literal8"
             .section  "__TEXT", "__literal16"

   *Note SectionMachO::.


File: llvm-assembler.info,  Node: LsymMachO,  Next: MacosxVersionMinMachO,  Prev: LiteralMachO,  Up: Mach-O Directives

7.4.17 '.lsym SYMBO, EXPRESSION'
--------------------------------

Create a unique and otherwise unreferenceable symbol with the name
SYMBOL and value EXPRESSION.  The symbol is a static symbol of type
'N_ABS'.


File: llvm-assembler.info,  Node: MacosxVersionMinMachO,  Next: ModInitFuncMachO,  Prev: LsymMachO,  Up: Mach-O Directives

7.4.18 '.macosx_version_min MAJOR, MINOR, PATCH'
------------------------------------------------

Verify that the version of MacOS for which the code is being assembled
has at least the specified MAJOR, MINOR and PATCH versions.


File: llvm-assembler.info,  Node: ModInitFuncMachO,  Next: NoDeadStripMachO,  Prev: MacosxVersionMinMachO,  Up: Mach-O Directives

7.4.19 '.mod_init_func', '.mod_term_func'
-----------------------------------------

These are synonyms for respectively:
             .section  "__DATA", "__mod_init_func"
             .section  "__DATA", "__mod_term_func"

   *Note SectionMachO::.


File: llvm-assembler.info,  Node: NoDeadStripMachO,  Next: ObjC,  Prev: ModInitFuncMachO,  Up: Mach-O Directives

7.4.20 '.no_dead_strip SYMBOL'
------------------------------

Generic option that is Mach-O specific.  Indicate that the specified
symbol is not to be dead stripped.


File: llvm-assembler.info,  Node: ObjC,  Next: PicsymbolStubMachO,  Prev: NoDeadStripMachO,  Up: Mach-O Directives

7.4.21 Mach-O Objective C Specific Directives
---------------------------------------------

* Menu:

* ObjcCatClsMeth::         '.objc_cat_cls_meth'
* ObjcCatInstMeth::        '.objc_cat_inst_meth'
* ObjcCategory::           '.objc_category'
* ObjcClass::              '.objc_class'
* ObjcClassNames::         '.objc_class_names'
* ObjcClassVars::          '.objc_class_vars'
* ObjcClsMeth::            '.objc_cls_meth'
* ObjcClsRefs::            '.objc_cls_refs'
* ObjcInstMeth::           '.objc_inst_meth'
* ObjcInstanceVars::       '.objc_instance_vars'
* ObjcMessageRefs::        '.objc_message_refs'
* ObjcMetaClass::          '.objc_meta_class'
* ObjcMethVarNames::       '.objc_meth_var_names'
* ObjcMethVarTypes::       '.objc_meth_var_types'
* ObjcModuleInfo::         '.objc_module_info'
* ObjcProtocol::           '.objc_protocol'
* ObjcSelectorStrs::       '.objc_selector_strs'
* ObjcStringObject::       '.objc_string_object'
* ObjcSymbols::            '.objc_symbols'


File: llvm-assembler.info,  Node: ObjcCatClsMeth,  Next: ObjcCatInstMeth,  Up: ObjC

7.4.21.1 '.objc_cat_cls_meth'
.............................

This is a synonym for:
             .section  __OBJC, __cat_cls_meth

   *Note SectionMachO::.


File: llvm-assembler.info,  Node: ObjcCatInstMeth,  Next: ObjcCategory,  Prev: ObjcCatClsMeth,  Up: ObjC

7.4.21.2 '.objc_cat_inst_meth'
..............................

This is a synonym for:
             .section  __OBJC, __cat_inst_meth

   *Note SectionMachO::.


File: llvm-assembler.info,  Node: ObjcCategory,  Next: ObjcClass,  Prev: ObjcCatInstMeth,  Up: ObjC

7.4.21.3 '.objc_category'
.........................

This is a synonym for:
             .section  __OBJC, __category

   *Note SectionMachO::.


File: llvm-assembler.info,  Node: ObjcClass,  Next: ObjcClassNames,  Prev: ObjcCategory,  Up: ObjC

7.4.21.4 '.objc_class'
......................

This is a synonym for:
             .section  __OBJC, __class

   *Note SectionMachO::.


File: llvm-assembler.info,  Node: ObjcClassNames,  Next: ObjcClassVars,  Prev: ObjcClass,  Up: ObjC

7.4.21.5 '.objc_class_names'
............................

This is a synonym for:
             .section  __OBJC, __class_names

   *Note SectionMachO::.


File: llvm-assembler.info,  Node: ObjcClassVars,  Next: ObjcClsMeth,  Prev: ObjcClassNames,  Up: ObjC

7.4.21.6 '.objc_class_vars'
...........................

This is a synonym for:
             .section  __OBJC, __class_vars

   *Note SectionMachO::.


File: llvm-assembler.info,  Node: ObjcClsMeth,  Next: ObjcClsRefs,  Prev: ObjcClassVars,  Up: ObjC

7.4.21.7 '.objc_cls_meth'
.........................

This is a synonym for:
             .section  __OBJC, __cls_meth

   *Note SectionMachO::.


File: llvm-assembler.info,  Node: ObjcClsRefs,  Next: ObjcInstMeth,  Prev: ObjcClsMeth,  Up: ObjC

7.4.21.8 '.objc_cls_refs'
.........................

This is a synonym for:
             .section  __OBJC, __cls_refs

   *Note SectionMachO::.


File: llvm-assembler.info,  Node: ObjcInstMeth,  Next: ObjcInstanceVars,  Prev: ObjcClsRefs,  Up: ObjC

7.4.21.9 '.objc_inst_meth'
..........................

This is a synonym for:
             .section  __OBJC, __inst_meth

   *Note SectionMachO::.


File: llvm-assembler.info,  Node: ObjcInstanceVars,  Next: ObjcMessageRefs,  Prev: ObjcInstMeth,  Up: ObjC

7.4.21.10 '.objc_instance_vars'
...............................

This is a synonym for:
             .section  __OBJC, __instance_vars

   *Note SectionMachO::.


File: llvm-assembler.info,  Node: ObjcMessageRefs,  Next: ObjcMetaClass,  Prev: ObjcInstanceVars,  Up: ObjC

7.4.21.11 '.objc_message_refs'
..............................

This is a synonym for:
             .section  __OBJC, __message_refs

   *Note SectionMachO::.


File: llvm-assembler.info,  Node: ObjcMetaClass,  Next: ObjcMethVarNames,  Prev: ObjcMessageRefs,  Up: ObjC

7.4.21.12 '.objc_meta_class'
............................

This is a synonym for:
             .section  __OBJC, __meta_class

   *Note SectionMachO::.


File: llvm-assembler.info,  Node: ObjcMethVarNames,  Next: ObjcMethVarTypes,  Prev: ObjcMetaClass,  Up: ObjC

7.4.21.13 '.objc_meth_var_names'
................................

This is a synonym for:
             .section  __OBJC, __meth_var_names

   *Note SectionMachO::.


File: llvm-assembler.info,  Node: ObjcMethVarTypes,  Next: ObjcModuleInfo,  Prev: ObjcMethVarNames,  Up: ObjC

7.4.21.14 '.objc_meth_var_types'
................................

This is a synonym for:
             .section  __OBJC, __meth_var_types

   *Note SectionMachO::.


File: llvm-assembler.info,  Node: ObjcModuleInfo,  Next: ObjcProtocol,  Prev: ObjcMethVarTypes,  Up: ObjC

7.4.21.15 '.objc_module_info'
.............................

This is a synonym for:
             .section  __OBJC, __module_info

   *Note SectionMachO::.


File: llvm-assembler.info,  Node: ObjcProtocol,  Next: ObjcSelectorStrs,  Prev: ObjcModuleInfo,  Up: ObjC

7.4.21.16 '.objc_protocol'
..........................

This is a synonym for:
             .section  __OBJC, __protocol

   *Note SectionMachO::.


File: llvm-assembler.info,  Node: ObjcSelectorStrs,  Next: ObjcStringObject,  Prev: ObjcProtocol,  Up: ObjC

7.4.21.17 '.objc_selector_strs'
...............................

This is a synonym for:
             .section  __OBJC, __selector_strs

   *Note SectionMachO::.


File: llvm-assembler.info,  Node: ObjcStringObject,  Next: ObjcSymbols,  Prev: ObjcSelectorStrs,  Up: ObjC

7.4.21.18 '.objc_string_object'
...............................

This is a synonym for:
             .section  __OBJC, __string_object

   *Note SectionMachO::.


File: llvm-assembler.info,  Node: ObjcSymbols,  Prev: ObjcStringObject,  Up: ObjC

7.4.21.19 '.objc_symbols'
.........................

This is a synonym for:
             .section  __OBJC, __symbols

   *Note SectionMachO::.


File: llvm-assembler.info,  Node: PicsymbolStubMachO,  Next: PreviousMachO,  Prev: ObjC,  Up: Mach-O Directives

7.4.22 '.picsymbol_stub'
------------------------

This is a synonym for one of:
             .section  "__TEXT", "__picsymbolstub1"
             .section  "__TEXT", "__picsymbol_stub"

   *Note SectionMachO::.


File: llvm-assembler.info,  Node: PreviousMachO,  Next: PrivateExternMachO,  Prev: PicsymbolStubMachO,  Up: Mach-O Directives

7.4.23 '.previous'
------------------

This directive swaps the current section with the most recently
referenced section prior to this one.  Multiple '.previous' directives
in a row will flip between two sections.


File: llvm-assembler.info,  Node: PrivateExternMachO,  Next: ReferenceMachO,  Prev: PreviousMachO,  Up: Mach-O Directives

7.4.24 '.private_extern NAME'
-----------------------------

Generic option that is Mach-O specific.  Mark SYMBOL as a private
external symbol.


File: llvm-assembler.info,  Node: ReferenceMachO,  Next: SectionMachO,  Prev: PrivateExternMachO,  Up: Mach-O Directives

7.4.25 '.reference SYMBOL'
--------------------------

Generic option that is Mach-O specific.  Mark SYMBOL as an undefined
symbol in the output symbol table.


File: llvm-assembler.info,  Node: SectionMachO,  Next: StaticConstMachO,  Prev: ReferenceMachO,  Up: Mach-O Directives

7.4.26 '.section SEGNAME, SECTNAME [[[, TYPE ], ATTRIBUTE ], SIZEOF_STUB ] '
----------------------------------------------------------------------------

Start assembling in the section specified by SEGNAME and SECTNAME with
the optional TYPE and ATTRIBUTE.  If given SIZEOF_STUB is the size in
bytes of symbol stubs in the section.


File: llvm-assembler.info,  Node: StaticConstMachO,  Next: StaticDataMachO,  Prev: SectionMachO,  Up: Mach-O Directives

7.4.27 '.static_const'
----------------------

This is a synonym for:
             .section  "__TEXT", "__static_const"

   *Note SectionMachO::.


File: llvm-assembler.info,  Node: StaticDataMachO,  Next: SymbolResolverMachO,  Prev: StaticConstMachO,  Up: Mach-O Directives

7.4.28 '.static_data'
---------------------

This is a synonym for:
             .section  "__DATA", "__static_data"

   *Note SectionMachO::.


File: llvm-assembler.info,  Node: SymbolResolverMachO,  Next: SymbolStubMachO,  Prev: StaticDataMachO,  Up: Mach-O Directives

7.4.29 '.symbol_resolver RESOLVER'
----------------------------------

Specify a symbol resolver to be used by the LLVM linker, 'lld'.


File: llvm-assembler.info,  Node: SymbolStubMachO,  Next: TbssMachO,  Prev: SymbolResolverMachO,  Up: Mach-O Directives

7.4.30 '.symbol_stub'
---------------------

This is a synonym for one of:
             .section  "__TEXT", "__symbol_stub"
             .section  "__TEXT", "__jump_table"

   *Note SectionMachO::.


File: llvm-assembler.info,  Node: TbssMachO,  Next: TdataMachO,  Prev: SymbolStubMachO,  Up: Mach-O Directives

7.4.31 '.tbss SYMBOL SIZE ALIGN'
--------------------------------

Create SYMBOL as an entry of SIZE bytes with alignment ALIGN in the
Thread Local Storage BSS section.


File: llvm-assembler.info,  Node: TdataMachO,  Next: TextMachO,  Prev: TbssMachO,  Up: Mach-O Directives

7.4.32 '.tdata'
---------------

This is a synonym for:
             .section  "__DATA", "__thread_data"

   *Note SectionMachO::.


File: llvm-assembler.info,  Node: TextMachO,  Next: ThreadInitFuncMachO,  Prev: TdataMachO,  Up: Mach-O Directives

7.4.33 '.text'
--------------

For static code this is a synonym for:
             .section  __TEXT, __text, regular

   For dynamic code it is a synonym for:
             .section  __TEXT, __text, regular, pure_instructions

   *Note SectionMachO::.


File: llvm-assembler.info,  Node: ThreadInitFuncMachO,  Next: TlvMachO,  Prev: TextMachO,  Up: Mach-O Directives

7.4.34 '.thread_init_func'
--------------------------

This is a synonym for:
             .section  "__DATA", "__thread_init"

   *Note SectionMachO::.


File: llvm-assembler.info,  Node: TlvMachO,  Next: WeakDefCanBeHiddenMachO,  Prev: ThreadInitFuncMachO,  Up: Mach-O Directives

7.4.35 '.tlv'
-------------

This is a synonym for:
             .section  "__DATA", "__thread_vars"

   *Note SectionMachO::.


File: llvm-assembler.info,  Node: WeakDefCanBeHiddenMachO,  Next: WeakDefinitionMachO,  Prev: TlvMachO,  Up: Mach-O Directives

7.4.36 '.weak_def_can_be_hidden NAME'
-------------------------------------

Undocumented generic option that is Mach-O specific.  This is a variant
of '.weak_definition' to define symbols which can be hidden under some
circumstances.  *Note WeakDefinitionMachO::.


File: llvm-assembler.info,  Node: WeakDefinitionMachO,  Next: WeakReferenceMachO,  Prev: WeakDefCanBeHiddenMachO,  Up: Mach-O Directives

7.4.37 '.weak_definition NAME'
------------------------------

Generic option that is Mach-O specific.  Mark symbol NAME as a weak
definition.


File: llvm-assembler.info,  Node: WeakReferenceMachO,  Next: ZerofillMachO,  Prev: WeakDefinitionMachO,  Up: Mach-O Directives

7.4.38 '.weak_reference NAME'
-----------------------------

Generic option that is Mach-O specific.  Mark symbol NAME as a weak
undefined symbol in the output symbol table.


File: llvm-assembler.info,  Node: ZerofillMachO,  Prev: WeakReferenceMachO,  Up: Mach-O Directives

7.4.39 '.zerofill SEGNAME, SECTNAME [, SYMBOL, SIZE [, ALIGN ]]'
----------------------------------------------------------------

Create SYMBOL as uninitialized data in the section given by SEGNAME and
SECTNAME with a size of SIZE bytes.  If given ALIGN is a power of 2
indicating byte alignment.


File: llvm-assembler.info,  Node: Deprecated,  Next: Unsupported,  Prev: Mach-O Directives,  Up: Pseudo Ops

7.5 Deprecated Directives
=========================

One day these directives won't work.  They are included for
compatibility with older assemblers.
'.abort'
     Abort assembly.

'.line'
     Set line number.


File: llvm-assembler.info,  Node: Unsupported,  Prev: Deprecated,  Up: Pseudo Ops

7.6 Unsupported GNU Assembler Directives
========================================

These directives are supported by the GNU assembler, but not the LLVM
integrated assembler.  Code originally intended for the GNU assembler
will need modifying to eliminate the need for these directives.

'.altmacro'
     Enable alternate macro mode.

'.cfi_return_column'
     Change return column register.

'.cfi_val_encoded_addr'
     Encode value of label in output.

'.eject'
     Force a page break when generating listings.

'.endfunc'
     Marks the end of a function specified with '.func'.

'.eqv'
     Lazily evaluated version of '.equiv'.

'.fail'
     Generates an error or a warning depending on its argument.

'.func'
     Emit debugging information to denote a function.

'.gnu_attribute'
     Record a GNU object attribute for this file.

'.hword'
     Emit 16-bit numbers.  A synonym for '.short'; depending on the
     target architecture, it may also be a synonym for '.word'.

'.ident'
     Place tags in object files.  Not supported for COFF in LLVM, unlike
     the GNU assembler.

'.lflags'
     This option was ignored by the GNU assembler anyway.

'.linkonce'
     Mark the current section so that the linker only includes a single
     copy of it.  Incompatible with ELF output files.

'.list'
     Control whether or not assembly listings are generated.

'.ln'
     Specify source line number.

'.loc_mark_labels'
     Control emission of basic block debug info.

'LOCAL NAME [ , ... ]'
     Part of the unsupported "alternate macro syntax".

'.noaltmacro'
     Disable alternate macro mode, which is no longer supported.

'.nolist'
     Control whether or not assembly listings are generated.

'.offset'
     Set the location counter in the absolute section.

'.print'
     Print string on standard output.

'.psize'
     Declare the number of lines and columns to use for each listing
     page

'.reloc'
     Generate a relocation.

'.sbttl'
     Generate a subheading in a listing.

'.string8'
'.string16'
'.string32'
'.string64'
     Directives to copy expanded string characters into the object file.

'.struct'
     Set offset symbol values.

'.title'
     Set a title for listing files.

'.vtableentry'
     Create VTABLE_ENTRY relocation.

'.vtableinherit'
     Create VTABLE_INHERIT relocation.

'.word'
     Emit words in a machine dependent way.


File: llvm-assembler.info,  Node: Machine Dependencies,  Next: Reporting Bugs,  Prev: Pseudo Ops,  Up: Top

8 Machine Dependent Features
****************************

The machine instruction sets are (almost by definition) different on
each machine where the LLVM integrated assembler runs.  Floating point
representations vary as well, and the LLVM integrated assembler often
supports a few additional directives or command-line options for
compatibility with other assemblers on a particular platform.  Finally,
some versions of the LLVM integrated assembler support special
pseudo-instructions for branch optimization.

   This chapter discusses most of these differences, though it does not
include details on any machine's instruction set.  For details on that
subject, see the hardware manufacturer's manual.

* Menu:

* AAP-dependent::              AAP Dependent Features


File: llvm-assembler.info,  Node: AAP-dependent,  Up: Machine Dependencies

8.1 AAP Dependent Features
==========================

AAP is a free and open source 16/32-bit word-addressed Harvard
architecture, developed to support experimentation with compiler
features for such architectures.  AAP is documented in Embecosm
Application Note 13.  AAP: An Altruistic Processor
(http://www.embecosm.com/download/ean13.html).

   The LLVM integrated assembler for AAP has relatively few custom
features.

* Menu:

* AAP Options::   	AAP Specific Command Line Options
* AAP Directives::      AAP Specific Assembler Directives
* AAP Assembler Syntax::  AAP Assembler Syntax


File: llvm-assembler.info,  Node: AAP Options,  Next: AAP Directives,  Up: AAP-dependent

8.1.1 AAP Specific Commmand Line Options
----------------------------------------

There are no AAP specific options to the LLVM integrated assember.


File: llvm-assembler.info,  Node: AAP Directives,  Next: AAP Assembler Syntax,  Prev: AAP Options,  Up: AAP-dependent

8.1.2 AAP Specific Assembler Directives
---------------------------------------

There are no AAP specific directives in the LLVM integrated assembler.


File: llvm-assembler.info,  Node: AAP Assembler Syntax,  Prev: AAP Directives,  Up: AAP-dependent

8.1.3 AAP Assembler Syntax
--------------------------

AAP offers the following custom assembler syntax.

*line comment character*
     The presence of a '#' on a line indicates the start of a comment
     that extends to the end of the current line.

     If a '#' appears as the first character of a line, the whole line
     is treated as a comment, but in this case the line can also be a
     logical line number directive (*note Comments::) or a preprocessor
     control command (*note Preprocessing::).

*line separator*
     There is no line separator character for AAP. Each assembler
     statement must be on its own line.


File: llvm-assembler.info,  Node: Reporting Bugs,  Next: Acknowledgments,  Prev: Machine Dependencies,  Up: Top

9 Reporting Bugs
****************

Your bug reports play an essential role in making the LLVM integrated
assembler reliable.

   Reporting a bug may help you by bringing a solution to your problem,
or it may not.  But in any case the principal function of a bug report
is to help the entire community by making the next version of the LLVM
integrated assembler work better.  Bug reports are your contribution to
the maintenance of the LLVM integrated assembler.

   In order for a bug report to serve its purpose, you must include the
information that enables us to fix the bug.

* Menu:

* Bug Criteria::                Have you found a bug?
* Bug Reporting::               How to report bugs


File: llvm-assembler.info,  Node: Bug Criteria,  Next: Bug Reporting,  Up: Reporting Bugs

9.1 Have You Found a Bug?
=========================

If you are not sure whether you have found a bug, here are some
guidelines:

   * If the assembler gets a fatal signal, for any input whatever, that
     is a the LLVM integrated assembler bug.  Reliable assemblers never
     crash.

   * If the LLVM integrated assembler produces an error message for
     valid input, that is a bug.

   * If the LLVM integrated assembler does not produce an error message
     for invalid input, that is a bug.  However, you should note that
     your idea of "invalid input" might be our idea of "an extension" or
     "support for traditional practice".

   * If you are an experienced user of assemblers, your suggestions for
     improvement of the LLVM integrated assembler are welcome in any
     case.


File: llvm-assembler.info,  Node: Bug Reporting,  Prev: Bug Criteria,  Up: Reporting Bugs

9.2 How to Report Bugs
======================

A number of companies and individuals offer support for the LLVM
integrated assembler.  If you obtained the LLVM integrated assembler
from a support organization, we recommend you contact that organization
first.

   The fundamental principle of reporting bugs usefully is this: *report
all the facts*.  If you are not sure whether to state a fact or leave it
out, state it!

   Often people omit facts because they think they know what causes the
problem and assume that some details do not matter.  Thus, you might
assume that the name of a symbol you use in an example does not matter.
Well, probably it does not, but one cannot be sure.  Perhaps the bug is
a stray memory reference which happens to fetch from the location where
that name is stored in memory; perhaps, if the name were different, the
contents of that location would fool the assembler into doing the right
thing despite the bug.  Play it safe and give a specific, complete
example.  That is the easiest thing for you to do, and the most helpful.

   Keep in mind that the purpose of a bug report is to enable us to fix
the bug if it is new to us.  Therefore, always write your bug reports on
the assumption that the bug has not been reported previously.

   Sometimes people give a few sketchy facts and ask, "Does this ring a
bell?"  This cannot help us fix a bug, so it is basically useless.  We
respond by asking for enough details to enable us to investigate.  You
might as well expedite matters by sending them to begin with.

   To enable us to fix the bug, you should include all these things:

   * The version of the LLVM integrated assembler.  The LLVM integrated
     assembler announces it if you start it with the '--version'
     argument.

     Without this, we will not know whether there is any point in
     looking for the bug in the current version of the LLVM integrated
     assembler.

   * Any patches you may have applied to the the LLVM integrated
     assembler source.

   * The type of machine you are using, and the operating system name
     and version number.

   * What compiler (and its version) was used to compile the LLVM
     integrated assembler--e.g.  "'llvm-3.7'".

   * The command arguments you gave the assembler to assemble your
     example and observe the bug.  To guarantee you will not omit
     something important, list them all.  A copy of the Makefile (or the
     output from make) is sufficient.

     If we were to try to guess the arguments, we would probably guess
     wrong and then we might not encounter the bug.

   * A complete input file that will reproduce the bug.  If the bug is
     observed when the assembler is invoked via a compiler, send the
     assembler source, not the high level language source.  Clang/LLVM
     will produce the assembler source when run with the '-S' option.
     With Clang/LLVM you can also use the options '-v --save-temps';
     this will save the assembler source in a file with an extension of
     '.s', and also show you exactly how the LLVM integrated assembler
     is being run.

   * A description of what behavior you observe that you believe is
     incorrect.  For example, "It gets a fatal signal."

     Of course, if the bug is that the LLVM integrated assembler gets a
     fatal signal, then we will certainly notice it.  But if the bug is
     incorrect output, we might not notice unless it is glaringly wrong.
     You might as well not give us a chance to make a mistake.

     Even if the problem you experience is a fatal signal, you should
     still say so explicitly.  Suppose something strange is going on,
     such as, your copy of the LLVM integrated assembler is out of sync,
     or you have encountered a bug in the C library on your system.
     (This has happened!)  Your copy might crash and ours would not.  If
     you told us to expect a crash, then when ours fails to crash, we
     would know that the bug was not happening for us.  If you had not
     told us to expect a crash, then we would not be able to draw any
     conclusion from our observations.

   * If you wish to suggest changes to the the LLVM integrated assembler
     source, send us context diffs, as generated by 'diff' with the
     '-u', '-c', or '-p' option.  Always send diffs from the old file to
     the new file.  If you even discuss something in the the LLVM
     integrated assembler source, refer to it by context, not by line
     number.

     The line numbers in our development sources will not match those in
     your sources.  Your line numbers would convey no useful information
     to us.

   Here are some things that are not necessary:

   * A description of the envelope of the bug.

     Often people who encounter a bug spend a lot of time investigating
     which changes to the input file will make the bug go away and which
     changes will not affect it.

     This is often time consuming and not very useful, because the way
     we will find the bug is by running a single example under the
     debugger with breakpoints, not by pure deduction from a series of
     examples.  We recommend that you save your time for something else.

     Of course, if you can find a simpler example to report _instead_ of
     the original one, that is a convenience for us.  Errors in the
     output will be easier to spot, running under the debugger will take
     less time, and so on.

     However, simplification is not vital; if you do not want to do
     this, report the bug anyway and send us the entire test case you
     used.

   * A patch for the bug.

     A patch for the bug does help us if it is a good one.  But do not
     omit the necessary information, such as the test case, on the
     assumption that a patch is all we need.  We might see problems with
     your patch and decide to fix the problem another way, or we might
     not understand it at all.

     Sometimes with a program as complicated as the LLVM integrated
     assembler it is very hard to construct an example that will make
     the program follow a certain path through the code.  If you do not
     send us the example, we will not be able to construct one, so we
     will not be able to verify that the bug is fixed.

     And if we cannot understand what bug you are trying to fix, or why
     your patch should be an improvement, we will not install it.  A
     test case will help us to understand.

   * A guess about what the bug is or what it depends on.

     Such guesses are usually wrong.  Even we cannot guess right about
     such things without first using the debugger to find the facts.


File: llvm-assembler.info,  Node: Acknowledgments,  Next: GNU Free Documentation License,  Prev: Reporting Bugs,  Up: Top

10 Acknowledgments
******************

This user guide to the LLVM Integrated Assembler is based on the guide
to the GNU Assembler (GAS), and thus depends on all those who
contributed to GAS. The modification was done by Jeremy Bennett at
Embecosm (http://www.embecosm.com), with the help of Simon Cook and Ed
Jones from the Embecosm LLVM team.

   This manual does not list the numerous contributors the LLVM
Integrated Assembler itself--that is covered elsewhere in the LLVM
project.  If you have contributed to the version of this manual for the
LLVM Integrated Assembler, and your name is not listed above, it is not
meant as a slight.  We just don't know about it.  Send mail to the
author, and we'll correct the situation.  As of October 2015, the author
of the version of the manual for the LLVM Integrated Assembler is Jeremy
Bennett (email address jeremy.bennett@embecosm.com
(mailto:jeremy.bennett@embecosm.com)).

10.1 Original GAS Acknowledgments
=================================

If you have contributed to GAS and your name isn't listed here, it is
not meant as a slight.  We just don't know about it.  Send mail to the
maintainer, and we'll correct the situation.  Currently the maintainer
is Nick Clifton (email address 'nickc@redhat.com').

   Dean Elsner wrote the original GNU assembler for the VAX.(1)

   Jay Fenlason maintained GAS for a while, adding support for
GDB-specific debug information and the 68k series machines, most of the
pre-processing pass, and extensive changes in 'messages.c',
'input-file.c', 'write.c'.

   K. Richard Pixley maintained GAS for a while, adding various
enhancements and many bug fixes, including merging support for several
processors, breaking GAS up to handle multiple object file format back
ends (including heavy rewrite, testing, an integration of the COFF and
b.out back ends), adding configuration including heavy testing and
verification of cross assemblers and file splits and renaming, converted
GAS to strictly ANSI C including full prototypes, added support for
m680[34]0 and cpu32, did considerable work on i960 including a COFF port
(including considerable amounts of reverse engineering), a SPARC opcode
file rewrite, DECstation, rs6000, and hp300hpux host ports, updated
"know" assertions and made them work, much other reorganization,
cleanup, and lint.

   Ken Raeburn wrote the high-level BFD interface code to replace most
of the code in format-specific I/O modules.

   The original VMS support was contributed by David L. Kashtan.  Eric
Youngdale has done much work with it since.

   The Intel 80386 machine description was written by Eliot Dresselhaus.

   Minh Tran-Le at IntelliCorp contributed some AIX 386 support.

   The Motorola 88k machine description was contributed by Devon Bowen
of Buffalo University and Torbjorn Granlund of the Swedish Institute of
Computer Science.

   Keith Knowles at the Open Software Foundation wrote the original MIPS
back end ('tc-mips.c', 'tc-mips.h'), and contributed Rose format support
(which hasn't been merged in yet).  Ralph Campbell worked with the MIPS
code to support a.out format.

   Support for the Zilog Z8k and Renesas H8/300 processors (tc-z8k,
tc-h8300), and IEEE 695 object file format (obj-ieee), was written by
Steve Chamberlain of Cygnus Support.  Steve also modified the COFF back
end to use BFD for some low-level operations, for use with the H8/300
and AMD 29k targets.

   John Gilmore built the AMD 29000 support, added '.include' support,
and simplified the configuration of which versions accept which
directives.  He updated the 68k machine description so that Motorola's
opcodes always produced fixed-size instructions (e.g., 'jsr'), while
synthetic instructions remained shrinkable ('jbsr').  John fixed many
bugs, including true tested cross-compilation support, and one bug in
relaxation that took a week and required the proverbial one-bit fix.

   Ian Lance Taylor of Cygnus Support merged the Motorola and MIT syntax
for the 68k, completed support for some COFF targets (68k, i386 SVR3,
and SCO Unix), added support for MIPS ECOFF and ELF targets, wrote the
initial RS/6000 and PowerPC assembler, and made a few other minor
patches.

   Steve Chamberlain made GAS able to generate listings.

   Hewlett-Packard contributed support for the HP9000/300.

   Jeff Law wrote GAS and BFD support for the native HPPA object format
(SOM) along with a fairly extensive HPPA testsuite (for both SOM and ELF
object formats).  This work was supported by both the Center for
Software Science at the University of Utah and Cygnus Support.

   Support for ELF format files has been worked on by Mark Eichin of
Cygnus Support (original, incomplete implementation for SPARC), Pete
Hoogenboom and Jeff Law at the University of Utah (HPPA mainly), Michael
Meissner of the Open Software Foundation (i386 mainly), and Ken Raeburn
of Cygnus Support (SPARC, and some initial 64-bit support).

   Linas Vepstas added GAS support for the ESA/390 "IBM 370"
architecture.

   Richard Henderson rewrote the Alpha assembler.  Klaus Kaempf wrote
GAS and BFD support for openVMS/Alpha.

   Timothy Wall, Michael Hayes, and Greg Smart contributed to the
various tic* flavors.

   David Heine, Sterling Augustine, Bob Wilson and John Ruttenberg from
Tensilica, Inc. added support for Xtensa processors.

   Several engineers at Cygnus Support have also provided many small bug
fixes and configuration enhancements.

   Jon Beniston added support for the Lattice Mico32 architecture.

   Jeremy Bennett of Embecosm created the version for the LLVM
Integrated Assembler as a derived document of the GNU Assembler Manual.

   Many others have contributed large or small bug fixes and
enhancements.  If you have contributed significant work and are not
mentioned on this list, and want to be, let us know.  Some of the
history has been lost; we are not intentionally leaving anyone out.

   ---------- Footnotes ----------

   (1) Any more details?


File: llvm-assembler.info,  Node: GNU Free Documentation License,  Next: AS Index,  Prev: Acknowledgments,  Up: Top

Appendix A GNU Free Documentation License
*****************************************

                     Version 1.3, 3 November 2008

     Copyright (C) 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
     <http://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document "free" in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of "copyleft", which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.  We
     recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it can
     be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     "Document", below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as "you".  You accept
     the license if you copy, modify or distribute the work in a way
     requiring permission under copyright law.

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document's overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The "Invariant Sections" are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in the
     notice that says that the Document is released under this License.
     If a section does not fit the above definition of Secondary then it
     is not allowed to be designated as Invariant.  The Document may
     contain zero Invariant Sections.  If the Document does not identify
     any Invariant Sections then there are none.

     The "Cover Texts" are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images composed
     of pixels) generic paint programs or (for drawings) some widely
     available drawing editor, and that is suitable for input to text
     formatters or for automatic translation to a variety of formats
     suitable for input to text formatters.  A copy made in an otherwise
     Transparent file format whose markup, or absence of markup, has
     been arranged to thwart or discourage subsequent modification by
     readers is not Transparent.  An image format is not Transparent if
     used for any substantial amount of text.  A copy that is not
     "Transparent" is called "Opaque".

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and standard-conforming
     simple HTML, PostScript or PDF designed for human modification.
     Examples of transparent image formats include PNG, XCF and JPG.
     Opaque formats include proprietary formats that can be read and
     edited only by proprietary word processors, SGML or XML for which
     the DTD and/or processing tools are not generally available, and
     the machine-generated HTML, PostScript or PDF produced by some word
     processors for output purposes only.

     The "Title Page" means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, "Title
     Page" means the text near the most prominent appearance of the
     work's title, preceding the beginning of the body of the text.

     The "publisher" means any person or entity that distributes copies
     of the Document to the public.

     A section "Entitled XYZ" means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     "Acknowledgements", "Dedications", "Endorsements", or "History".)
     To "Preserve the Title" of such a section when you modify the
     Document means that it remains a section "Entitled XYZ" according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow the
     conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document's license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the title
     equally prominent and visible.  You may add other material on the
     covers in addition.  Copying with changes limited to the covers, as
     long as they preserve the title of the Document and satisfy these
     conditions, can be treated as verbatim copying in other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a machine-readable
     Transparent copy along with each Opaque copy, or state in or with
     each Opaque copy a computer-network location from which the general
     network-using public has access to download using public-standard
     network protocols a complete Transparent copy of the Document, free
     of added material.  If you use the latter option, you must take
     reasonably prudent steps, when you begin distribution of Opaque
     copies in quantity, to ensure that this Transparent copy will
     remain thus accessible at the stated location until at least one
     year after the last time you distribute an Opaque copy (directly or
     through your agents or retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of copies,
     to give them a chance to provide you with an updated version of the
     Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with the
     Modified Version filling the role of the Document, thus licensing
     distribution and modification of the Modified Version to whoever
     possesses a copy of it.  In addition, you must do these things in
     the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of previous
          versions (which should, if there were any, be listed in the
          History section of the Document).  You may use the same title
          as a previous version if the original publisher of that
          version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document's
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled "History", Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on the
          Title Page.  If there is no section Entitled "History" in the
          Document, create one stating the title, year, authors, and
          publisher of the Document as given on its Title Page, then add
          an item describing the Modified Version as stated in the
          previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in the
          "History" section.  You may omit a network location for a work
          that was published at least four years before the Document
          itself, or if the original publisher of the version it refers
          to gives permission.

       K. For any section Entitled "Acknowledgements" or "Dedications",
          Preserve the Title of the section, and preserve in the section
          all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document, unaltered
          in their text and in their titles.  Section numbers or the
          equivalent are not considered part of the section titles.

       M. Delete any section Entitled "Endorsements".  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          "Endorsements" or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option designate
     some or all of these sections as invariant.  To do this, add their
     titles to the list of Invariant Sections in the Modified Version's
     license notice.  These titles must be distinct from any other
     section titles.

     You may add a section Entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various
     parties--for example, statements of peer review or that the text
     has been approved by an organization as the authoritative
     definition of a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end of
     the list of Cover Texts in the Modified Version.  Only one passage
     of Front-Cover Text and one of Back-Cover Text may be added by (or
     through arrangements made by) any one entity.  If the Document
     already includes a cover text for the same cover, previously added
     by you or by arrangement made by the same entity you are acting on
     behalf of, you may not add another; but you may replace the old
     one, on explicit permission from the previous publisher that added
     the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination all
     of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     "History" in the various original documents, forming one section
     Entitled "History"; likewise combine any sections Entitled
     "Acknowledgements", and any sections Entitled "Dedications".  You
     must delete all sections Entitled "Endorsements."

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the documents
     in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow this
     License in all other respects regarding verbatim copying of that
     document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of a
     storage or distribution medium, is called an "aggregate" if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation's users beyond what the individual
     works permit.  When the Document is included in an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document's Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled "Acknowledgements",
     "Dedications", or "History", the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense, or distribute it is void,
     and will automatically terminate your rights under this License.

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, receipt of a copy of some or all of the
     same material does not give you any rights to use it.

  10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     <http://www.gnu.org/copyleft/>.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If the
     Document does not specify a version number of this License, you may
     choose any version ever published (not as a draft) by the Free
     Software Foundation.  If the Document specifies that a proxy can
     decide which future versions of this License can be used, that
     proxy's public statement of acceptance of a version permanently
     authorizes you to choose that version for the Document.

  11. RELICENSING

     "Massive Multiauthor Collaboration Site" (or "MMC Site") means any
     World Wide Web server that publishes copyrightable works and also
     provides prominent facilities for anybody to edit those works.  A
     public wiki that anybody can edit is an example of such a server.
     A "Massive Multiauthor Collaboration" (or "MMC") contained in the
     site means any set of copyrightable works thus published on the MMC
     site.

     "CC-BY-SA" means the Creative Commons Attribution-Share Alike 3.0
     license published by Creative Commons Corporation, a not-for-profit
     corporation with a principal place of business in San Francisco,
     California, as well as future copyleft versions of that license
     published by that same organization.

     "Incorporate" means to publish or republish a Document, in whole or
     in part, as part of another Document.

     An MMC is "eligible for relicensing" if it is licensed under this
     License, and if all works that were first published under this
     License somewhere other than this MMC, and subsequently
     incorporated in whole or in part into the MMC, (1) had no cover
     texts or invariant sections, and (2) were thus incorporated prior
     to November 1, 2008.

     The operator of an MMC Site may republish an MMC contained in the
     site under CC-BY-SA on the same site at any time before August 1,
     2009, provided the MMC is eligible for relicensing.

ADDENDUM: How to use this License for your documents
====================================================

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.3
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
       Texts.  A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

   If you have Invariant Sections, Front-Cover Texts and Back-Cover
Texts, replace the "with...Texts."  line with this:

         with the Invariant Sections being LIST THEIR TITLES, with
         the Front-Cover Texts being LIST, and with the Back-Cover Texts
         being LIST.

   If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of free
software license, such as the GNU General Public License, to permit
their use in free software.


File: llvm-assembler.info,  Node: AS Index,  Prev: GNU Free Documentation License,  Up: Top

LLVM Integrated Assembler Index
*******************************

 [index ]
* Menu:

* #:                                     Comments.            (line  33)
* #APP:                                  Preprocessing.       (line  25)
* #NO_APP:                               Preprocessing.       (line  25)
* '-cc1as':                              Command Line.        (line  14)
* -compress-debug-sections:              assembler-options.   (line  13)
* -dwarf-debug-flags VALUE:              internal-options.    (line  15)
* -dwarf-debug-producer VALUE:           internal-options.    (line  21)
* -fdebug-compilation-dir VALUE:         internal-options.    (line  24)
* -filetype asm:                         internal-options.    (line  30)
* -filetype null:                        internal-options.    (line  37)
* -filetype obj:                         internal-options.    (line  40)
* -g:                                    common-options.      (line  10)
* -gdwarf-2:                             common-options.      (line  17)
* -gdwarf-3:                             common-options.      (line  17)
* -gdwarf-4:                             common-options.      (line  17)
* -help:                                 internal-options.    (line  43)
* -I PATH:                               common-options.      (line  21)
* -llvm VALUE:                           common-options.      (line  40)
* -main-file-name VALUE:                 internal-options.    (line  64)
* -massembler-fatal-warnings:            internal-options.    (line  67)
* -mnoexecstack:                         internal-options.    (line  70)
* -mrelax-all:                           common-options.      (line  44)
* -msave-temp-labels:                    internal-options.    (line  76)
* -n:                                    internal-options.    (line  85)
* -o FILE:                               common-options.      (line  53)
* -output-asm-variant VALUE:             internal-options.    (line  88)
* -show-encoding:                        internal-options.    (line  82)
* -show-inst:                            internal-options.    (line  93)
* -target-abi VALUE:                     internal-options.    (line  96)
* -target-cpu VALUE:                     internal-options.    (line  99)
* -target-feature VALUE:                 internal-options.    (line 103)
* -triple VALUE:                         internal-options.    (line 107)
* -version:                              internal-options.    (line  58)
* '.' (symbol):                          Dot.                 (line   6)
* '.2byte':                              2byte.               (line   6)
* '.4byte':                              4byte.               (line   6)
* '.8byte':                              8byte.               (line   6)
* '.abort' (deprecated):                 Abort.               (line   6)
* '.abort' (deprecated) <1>:             Deprecated.          (line   9)
* '.align':                              Align.               (line   6)
* '.align32':                            Align32.             (line   6)
* '.altmacro' (unsupported):             Unsupported.         (line  11)
* '.ascii':                              Ascii.               (line   6)
* '.balign':                             Balign.              (line   6)
* '.balignl':                            Balign.              (line   6)
* '.balignw':                            Balign.              (line   6)
* '.bss' (COFF only):                    BssCoff.             (line   6)
* '.bss' (ELF only):                     BssElf.              (line   6)
* '.bss' (Mach-O only):                  BssMachO.            (line   6)
* '.bundle_align_mode':                  BundleAlign.         (line   6)
* '.byte':                               Byte.                (line   6)
* '.cfi_adjust_cfa_offset':              CfiAdjustCfaOffset.  (line   6)
* '.cfi_def_cfa':                        CfiDefCfa.           (line   6)
* '.cfi_def_cfa_offset':                 CfiDefCfaOffset.     (line   6)
* '.cfi_def_cfa_register':               CfiDefCfaRegister.   (line   6)
* '.cfi_endproc':                        CfiEndproc.          (line   6)
* '.cfi_escape':                         CfiEscape.           (line   6)
* '.cfi_lsda':                           CfiLsda.             (line   6)
* '.cfi_offset':                         CfiOffset.           (line   6)
* '.cfi_personality':                    CfiPersonality.      (line   6)
* '.cfi_register':                       CfiRegister.         (line   6)
* '.cfi_rel_offset':                     CfiRelOffset.        (line   6)
* '.cfi_remember_state':                 CfiRememberState.    (line   6)
* '.cfi_restore':                        CfiRestore.          (line   6)
* '.cfi_restore_state':                  CfiRememberState.    (line   6)
* '.cfi_return_column' (unsupported):    Unsupported.         (line  14)
* '.cfi_same_value':                     CfiSameValue.        (line   6)
* '.cfi_sections':                       CfiSections.         (line   6)
* '.cfi_signal_frame':                   CfiSignalFrame.      (line   6)
* '.cfi_startproc':                      CfiStartproc.        (line   6)
* '.cfi_undefined':                      CfiUndefined.        (line   6)
* '.cfi_val_encoded_addr' (unsupported): Unsupported.         (line  17)
* '.cfi_window_save':                    CfiWindowSave.       (line   6)
* '.code16':                             Code16.              (line   6)
* '.code16gcc':                          Code16.              (line   6)
* '.comm':                               Comm.                (line   6)
* '.common':                             Common.              (line   6)
* '.const' (Mach-O only):                ConstMachO.          (line   6)
* '.constructor' (Mach-O only):          ConstructorMachO.    (line   6)
* '.const_data' (Mach-O only):           ConstDataMachO.      (line   6)
* '.cstring' (Mach-O only):              CstringMachO.        (line   6)
* '.data' (COFF only):                   DataCoff.            (line   6)
* '.data' (ELF only):                    DataElf.             (line   6)
* '.data' (Mach-O only):                 DataMachO.           (line   6)
* '.def' (COFF only):                    DefCoff.             (line   6)
* '.desc' (Mach-O only):                 DescMachO.           (line   6)
* '.destructor' (Mach-O only):           ConstructorMachO.    (line   6)
* '.double':                             Double.              (line   6)
* '.dump' (Mach-O only):                 DumpMachO.           (line   6)
* '.dyld' (Mach-O only):                 DyldMachO.           (line   6)
* '.eject' (unsupported):                Unsupported.         (line  20)
* '.else':                               Else.                (line   6)
* '.elseif':                             Elseif.              (line   6)
* '.end':                                End.                 (line   6)
* '.endef' (COFF only):                  DefCoff.             (line   6)
* '.endfunc' (unsupported):              Unsupported.         (line  23)
* '.endif':                              Endif.               (line   6)
* '.endm':                               Endm.                (line   6)
* '.endm' <1>:                           Macro.               (line 137)
* '.endr':                               Endr.                (line   6)
* '.equ':                                Equ.                 (line   6)
* '.equiv':                              Equiv.               (line   6)
* '.eqv' (unsupported):                  Unsupported.         (line  26)
* '.err':                                Err.                 (line   6)
* '.error':                              Error.               (line   6)
* '.exitm':                              Exitm.               (line   6)
* '.exitm' <1>:                          Macro.               (line 140)
* '.extern':                             Extern.              (line   6)
* '.fail' (unsupported):                 Unsupported.         (line  29)
* '.file':                               File.                (line   6)
* '.fill':                               Fill.                (line   6)
* '.float':                              Float.               (line   6)
* '.func' (unsupported):                 Unsupported.         (line  32)
* '.fvmlib_init0' (Mach-O only):         FvmlibInitMachO.     (line   6)
* '.fvmlib_init1' (Mach-O only):         FvmlibInitMachO.     (line   6)
* '.global':                             Global.              (line   6)
* '.gnu_attribute' (unsupported):        Unsupported.         (line  35)
* '.hidden' (ELF only):                  HiddenElf.           (line   6)
* '.hword' (unsupported):                Unsupported.         (line  38)
* '.ident':                              Ident.               (line   6)
* '.ident' (ELF only):                   IdentElf.            (line   6)
* '.ident' (Mach-O only):                IdentMachO.          (line   6)
* '.ident' (unsupported for COFF only):  Unsupported.         (line  42)
* '.if':                                 If.                  (line   6)
* '.ifb':                                If.                  (line  22)
* '.ifc':                                If.                  (line  26)
* '.ifdef':                              If.                  (line  17)
* '.ifeq':                               If.                  (line  37)
* '.ifeqs':                              If.                  (line  40)
* '.ifge':                               If.                  (line  44)
* '.ifgt':                               If.                  (line  48)
* '.ifle':                               If.                  (line  52)
* '.iflt':                               If.                  (line  56)
* '.ifnb':                               If.                  (line  60)
* '.ifnc':                               If.                  (line  64)
* '.ifndef':                             If.                  (line  70)
* '.ifne':                               If.                  (line  76)
* '.ifnes':                              If.                  (line  80)
* '.ifnotdef':                           If.                  (line  70)
* '.incbin':                             Incbin.              (line   6)
* '.include':                            Include.             (line   6)
* '.int':                                Int.                 (line   6)
* '.internal' (ELF only):                InternalElf.         (line   6)
* '.ios_version_min' (Mach-O only):      IosVersionMinMachO.  (line   6)
* '.irp':                                Irp.                 (line   6)
* '.irpc':                               Irpc.                (line   6)
* '.lazy_reference':                     LazyReference.       (line   6)
* '.lazy_reference' (Mach-O only):       LazyReferenceMachO.  (line   6)
* '.lazy_symbol_pointer' (Mach-O only):  LazySymbolPointerMachO.
                                                              (line   6)
* '.lcomm':                              Lcomm.               (line   6)
* '.line' (deprecated):                  Line.                (line   6)
* '.linet' (deprecated):                 Deprecated.          (line  12)
* '.linker_option' (Mach-O only):        LinkerOptionMachO.   (line   6)
* '.linkonce':                           LinkonceCoff.        (line   6)
* '.linkonce' (unsupported):             Unsupported.         (line  49)
* '.list' (unsupported):                 Unsupported.         (line  53)
* '.literal16' (Mach-O only):            LiteralMachO.        (line   6)
* '.literal4' (Mach-O only):             LiteralMachO.        (line   6)
* '.literal8' (Mach-O only):             LiteralMachO.        (line   6)
* '.ln' (unsupported):                   Unsupported.         (line  56)
* '.load' (Mach-O only):                 DumpMachO.           (line   6)
* '.local' (ELF only):                   LocalElf.            (line   6)
* '.loc_mark_labels' (unsupported):      Unsupported.         (line  59)
* '.long':                               Long.                (line   6)
* '.lsym' (Mach-O only):                 LsymMachO.           (line   6)
* '.macosx_version_min' (Mach-O only):   MacosxVersionMinMachO.
                                                              (line   6)
* '.macro':                              Macro.               (line  28)
* '.macros_off':                         Macro.               (line 150)
* '.macros_on':                          Macro.               (line 150)
* '.mod_init_func' (Mach-O only):        ModInitFuncMachO.    (line   6)
* '.mod_term_func' (Mach-O only):        ModInitFuncMachO.    (line   6)
* '.noaltmacro' (unsupported):           Unsupported.         (line  65)
* '.nolist' (unsupported):               Unsupported.         (line  68)
* '.non_lazy_symbol_pointer' (Mach-O only): LazySymbolPointerMachO.
                                                              (line   6)
* '.no_dead_strip':                      NoDeadStrip.         (line   6)
* '.no_dead_strip' (Mach-O only):        NoDeadStripMachO.    (line   6)
* .o:                                    Object.              (line   6)
* '.objc_category' (Mach-O Objective C Only): ObjcCategory.   (line   6)
* '.objc_cat_cls_meth' (Mach-O Objective C Only): ObjcCatClsMeth.
                                                              (line   6)
* '.objc_cat_inst_meth' (Mach-O Objective C Only): ObjcCatInstMeth.
                                                              (line   6)
* '.objc_class' (Mach-O Objective C Only): ObjcClass.         (line   6)
* '.objc_class_names' (Mach-O Objective C Only): ObjcClassNames.
                                                              (line   6)
* '.objc_class_vars' (Mach-O Objective C Only): ObjcClassVars.
                                                              (line   6)
* '.objc_cls_meth' (Mach-O Objective C Only): ObjcClsMeth.    (line   6)
* '.objc_cls_refs' (Mach-O Objective C Only): ObjcClsRefs.    (line   6)
* '.objc_instance_vars' (Mach-O Objective C Only): ObjcInstanceVars.
                                                              (line   6)
* '.objc_inst_meth' (Mach-O Objective C Only): ObjcInstMeth.  (line   6)
* '.objc_message_refs' (Mach-O Objective C Only): ObjcMessageRefs.
                                                              (line   6)
* '.objc_meta_class' (Mach-O Objective C Only): ObjcMetaClass.
                                                              (line   6)
* '.objc_meth_var_names' (Mach-O Objective C Only): ObjcMethVarNames.
                                                              (line   6)
* '.objc_meth_var_types' (Mach-O Objective C Only): ObjcMethVarTypes.
                                                              (line   6)
* '.objc_module_info' (Mach-O Objective C Only): ObjcModuleInfo.
                                                              (line   6)
* '.objc_protocol' (Mach-O Objective C Only): ObjcProtocol.   (line   6)
* '.objc_selector_strs' (Mach-O Objective C Only): ObjcSelectorStrs.
                                                              (line   6)
* '.objc_string_object' (Mach-O Objective C Only): ObjcStringObject.
                                                              (line   6)
* '.objc_symbols' (Mach-O Objective C Only): ObjcSymbols.     (line   6)
* '.octa':                               Octa.                (line   6)
* '.offset' (unsupported):               Unsupported.         (line  71)
* '.org':                                Org.                 (line   6)
* '.p2align':                            P2align.             (line   6)
* '.p2alignl':                           P2align.             (line  28)
* '.p2alignw':                           P2align.             (line  28)
* '.picsymbol_stub' (Mach-O only):       PicsymbolStubMachO.  (line   6)
* '.popsection' (ELF only):              PopSectionElf.       (line   6)
* '.previous' (ELF only):                PreviousElf.         (line   6)
* '.previous' (Mach-O only):             PreviousMachO.       (line   6)
* '.print' (unsupported):                Unsupported.         (line  74)
* '.private_extern':                     PrivateExtern.       (line   6)
* '.private_extern' (Mach-O only):       PrivateExternMachO.  (line   6)
* '.protected' (ELF only):               ProtectedElf.        (line   6)
* '.psize' (unsupported):                Unsupported.         (line  77)
* '.purgem':                             Purgem.              (line   6)
* '.pushsection' (ELF only):             PushSectionElf.      (line   6)
* '.quad':                               Quad.                (line   6)
* '.reference':                          Reference.           (line   6)
* '.reference' (Mach-O only):            ReferenceMachO.      (line   6)
* '.reloc' (unsupported):                Unsupported.         (line  81)
* '.rept':                               Rept.                (line   6)
* '.rodata' (ELF only):                  RodataElf.           (line   6)
* '.sbttl' (unsupported):                Unsupported.         (line  84)
* '.scl' (COFF only):                    SclCoff.             (line   6)
* '.secidx' (COFF only):                 SecidxCoff.          (line   6)
* '.secrel32' (COFF only):               SecidxCoff.          (line   6)
* '.section' (COFF only):                SectionCoff.         (line   6)
* '.section' (ELF only):                 SectionElf.          (line   6)
* '.section' (ELF only) <1>:             SectionElf.          (line  18)
* '.section' (Mach-O only):              SectionMachO.        (line   6)
* '.seh_endchained' (COFF Win64 event handling only): SehChained.
                                                              (line   6)
* '.seh_endproc' (COFF Win64 event handling only): SehProc.   (line   6)
* '.seh_end_prologue' (COFF Win64 event handling only): SehEndprologue.
                                                              (line   6)
* '.seh_handler' (COFF Win64 event handling only): SehHandler.
                                                              (line   6)
* '.seh_handlerdata' (COFF Win64 event handling only): SehHandlerdata.
                                                              (line   6)
* '.seh_proc' (COFF Win64 event handling only): SehProc.      (line   6)
* '.seh_pushframe' (COFF Win64 event handling only): SehPushframe.
                                                              (line   6)
* '.seh_pushreg' (COFF Win64 event handling only): SehPushreg.
                                                              (line   6)
* '.seh_savereg' (COFF Win64 event handling only): SehSavereg.
                                                              (line   6)
* '.seh_savexmn' (COFF Win64 event handling only): SehSavexmn.
                                                              (line   6)
* '.seh_setframe' (COFF Win64 event handling only): SehSetframe.
                                                              (line   6)
* '.seh_stackalloc' (COFF Win64 event handling only): SehStackalloc.
                                                              (line   6)
* '.seh_startchained' (COFF Win64 event handling only): SehChained.
                                                              (line   6)
* '.short':                              Short.               (line   6)
* '.single':                             Single.              (line   6)
* '.size' (ELF only):                    SizeElf.             (line   6)
* '.skip':                               Skip.                (line   6)
* '.sleb128':                            Sleb128.             (line   6)
* '.space':                              Space.               (line   6)
* '.stabd' (Unsupported):                Stabs.               (line  39)
* '.stabn' (Unsupported):                Stabs.               (line  39)
* '.stabs':                              Stabs.               (line   6)
* '.static_const' (Mach-O only):         StaticConstMachO.    (line   6)
* '.static_data' (Mach-O only):          StaticDataMachO.     (line   6)
* '.string':                             String.              (line   6)
* '.string16' (unsupported):             Unsupported.         (line  90)
* '.string32' (unsupported):             Unsupported.         (line  90)
* '.string64' (unsupported):             Unsupported.         (line  90)
* '.string8' (unsupported):              Unsupported.         (line  90)
* '.struct' (unsupported):               Unsupported.         (line  93)
* '.subsection' (ELF only):              SubSectionElf.       (line   6)
* '.symbol_resolver':                    SymbolResolver.      (line   6)
* '.symbol_resolver' (Mach-O only):      SymbolResolverMachO. (line   6)
* '.symbol_stub' (Mach-O only):          SymbolStubMachO.     (line   6)
* '.tbss' (ELF only):                    TbssElf.             (line   6)
* '.tbss' (Mach-O only):                 TbssMachO.           (line   6)
* '.tdata' (ELF only):                   TdataElf.            (line   6)
* '.tdata' (Mach-O only):                TdataMachO.          (line   6)
* '.text' (COFF only):                   TextCoff.            (line   6)
* '.text' (ELF only):                    TextElf.             (line   6)
* '.text' (Mach-O only):                 TextMachO.           (line   6)
* '.thread_init_func' (Mach-O only):     ThreadInitFuncMachO. (line   6)
* '.title' (unsupported):                Unsupported.         (line  96)
* '.tlv' (Mach-O only):                  TlvMachO.            (line   6)
* '.type' (COFF only):                   TypeCoff.            (line   6)
* '.type' (ELF only):                    TypeElf.             (line   6)
* '.uleb128':                            Uleb128.             (line   6)
* '.value':                              Value.               (line   6)
* '.version' (ELF only):                 VersionElf.          (line   6)
* '.vtable_entry' (unsupported):         Unsupported.         (line  99)
* '.vtable_inherit' (unsupported):       Unsupported.         (line 102)
* '.warning':                            Warning.             (line   6)
* '.weak' (COFF only):                   WeakCoff.            (line   6)
* '.weak' (ELF only):                    WeakElf.             (line   6)
* '.weakref' (ELF only):                 WeakrefElf.          (line   6)
* '.weak_definition':                    WeakDefinition.      (line   6)
* '.weak_definition' <1>:                WeakDefinitionMachO. (line   6)
* '.weak_def_can_be_hidden':             WeakDefCanBeHidden.  (line   6)
* '.weak_def_can_be_hidden' (Mach-O only): WeakDefCanBeHiddenMachO.
                                                              (line   6)
* '.weak_reference':                     WeakReference.       (line   6)
* '.weak_reference' (Mach-O only):       WeakReferenceMachO.  (line   6)
* '.word' (unsupported):                 Unsupported.         (line 105)
* '.zero':                               Zero.                (line   6)
* '.zerofill' (Mach-O only) (Mach-O only): ZerofillMachO.     (line   6)
* '2byte' directive:                     2byte.               (line   6)
* '4byte' directive:                     4byte.               (line   6)
* '8byte' directive:                     8byte.               (line   6)
* ':' (label):                           Statements.          (line  31)
* '\"' (doublequote character):          Strings.             (line  44)
* '\b' (backspace character):            Strings.             (line  16)
* '\DDD' (octal character code):         Strings.             (line  31)
* '\f' (formfeed character):             Strings.             (line  19)
* '\n' (newline character):              Strings.             (line  22)
* '\r' (carriage return character):      Strings.             (line  25)
* '\t' (tab):                            Strings.             (line  28)
* '\XD...' (hex character code):         Strings.             (line  37)
* '\\' ('\' character):                  Strings.             (line  41)
* a.out:                                 Object.              (line   6)
* AAP:                                   AAP-dependent.       (line   6)
* AAP line comment character:            AAP Assembler Syntax.
                                                              (line   9)
* AAP line separator:                    AAP Assembler Syntax.
                                                              (line  18)
* AAP, assembler directives:             AAP Directives.      (line   6)
* AAP, command line options:             AAP Options.         (line   6)
* 'abort' directive (deprecated):        Abort.               (line   6)
* 'abort' directive (deprecated) <1>:    Deprecated.          (line   9)
* absolute section:                      Ld Sections.         (line  27)
* addition, permitted arguments:         Infix Ops.           (line  45)
* addresses:                             Expressions.         (line   6)
* addresses, format of:                  Secs Background.     (line  51)
* advancing location counter:            Org.                 (line   6)
* 'align' directive:                     Align.               (line   6)
* 'align32' directive:                   Align32.             (line   6)
* aligned instruction bundle:            BundleAlign.         (line   6)
* 'altmacro' directive (unsupported):    Unsupported.         (line  11)
* arguments for addition:                Infix Ops.           (line  45)
* arguments for subtraction:             Infix Ops.           (line  50)
* arguments in expressions:              Arguments.           (line   6)
* arithmetic functions:                  Operators.           (line   6)
* arithmetic operands:                   Arguments.           (line   6)
* 'ascii' directive:                     Ascii.               (line   6)
* 'asciz' directive:                     Asciz.               (line   6)
* assembler bugs, reporting:             Bug Reporting.       (line   6)
* assembler crash:                       Bug Criteria.        (line   9)
* assembler directives (ELF):            ELF Directives.      (line   6)
* assembler directives (Mach-O Objective C): ObjC.            (line   6)
* assembler directives for AAP:          AAP Directives.      (line   6)
* assembler directives for CFI:          CFIDirectives.       (line   6)
* assembler internal logic error:        As Sections.         (line  15)
* assembler output type:                 internal-options.    (line  27)
* assembler specific options:            assembler-options.   (line   6)
* assembler, and linker:                 Secs Background.     (line  10)
* assembler, invoking directly:          Command Line.        (line  31)
* assembly symbol table control:         internal-options.    (line  76)
* assembly warning control:              internal-options.    (line  67)
* assembly, additional LLVM options:     common-options.      (line  40)
* assigning values to symbols:           Setting Symbols.     (line   6)
* assigning values to symbols <1>:       Equ.                 (line   6)
* attributes, symbol:                    Symbol Attributes.   (line   6)
* backslash ('\\'):                      Strings.             (line  41)
* backspace ('\b'):                      Strings.             (line  16)
* 'balign' directive:                    Balign.              (line   6)
* 'balignl' directive:                   Balign.              (line   6)
* 'balignl' directive <1>:               Balign.              (line  27)
* 'balignw' directive:                   Balign.              (line   6)
* 'balignw' directive <1>:               Balign.              (line  27)
* bignums:                               Bignums.             (line   6)
* binary files, including:               Incbin.              (line   6)
* binary integers:                       Integers.            (line   6)
* 'bss' directive (COFF only):           BssCoff.             (line   6)
* 'bss' directive (ELF only):            BssElf.              (line   6)
* 'bss' directive (Mach-O only):         BssMachO.            (line   6)
* bss section:                           Ld Sections.         (line  18)
* bss section <1>:                       bss.                 (line   6)
* bug criteria:                          Bug Criteria.        (line   6)
* bug reports:                           Bug Reporting.       (line   6)
* bugs in assembler:                     Reporting Bugs.      (line   6)
* bundle:                                BundleAlign.         (line   6)
* bundle-locked:                         BundleLock.          (line  14)
* 'bundle_align_mode' directive:         BundleAlign.         (line   6)
* 'bundle_lock' directive:               BundleLock.          (line   6)
* 'bundle_unlock' directive:             BundleLock.          (line   6)
* 'byte' directive:                      Byte.                (line   6)
* carriage return ('\r'):                Strings.             (line  25)
* CFI assembler directives:              CFIDirectives.       (line   6)
* 'cfi_adjust_cfa_offset' directive:     CfiAdjustCfaOffset.  (line   6)
* 'cfi_def_cfa' directive:               CfiDefCfa.           (line   6)
* 'cfi_def_cfa_offset' directive:        CfiDefCfaOffset.     (line   6)
* 'cfi_def_cfa_register' directive:      CfiDefCfaRegister.   (line   6)
* 'cfi_endproc' directive:               CfiEndproc.          (line   6)
* 'cfi_escape' directive:                CfiEscape.           (line   6)
* 'cfi_lsda' directive:                  CfiLsda.             (line   6)
* 'cfi_offset' directive:                CfiOffset.           (line   6)
* 'cfi_personality' directive:           CfiPersonality.      (line   6)
* 'cfi_register' directive:              CfiRegister.         (line   6)
* 'cfi_rel_offset' directive:            CfiRelOffset.        (line   6)
* 'cfi_remember_state' directive:        CfiRememberState.    (line   6)
* 'cfi_restore' directive:               CfiRestore.          (line   6)
* 'cfi_restore_state' directive:         CfiRememberState.    (line   6)
* 'cfi_return_column' directive (unsupported): Unsupported.   (line  14)
* 'cfi_same_value' directive:            CfiSameValue.        (line   6)
* 'cfi_sections' directive:              CfiSections.         (line   6)
* 'cfi_signal_frame' directive:          CfiSignalFrame.      (line   6)
* 'cfi_startproc' directive:             CfiStartproc.        (line   6)
* 'cfi_undefined' directive:             CfiUndefined.        (line   6)
* 'cfi_val_encoded_addr' directive (unsupported): Unsupported.
                                                              (line  17)
* 'cfi_window_save' directive:           CfiWindowSave.       (line   6)
* character constants:                   Characters.          (line   6)
* character escape codes:                Strings.             (line  16)
* character, single:                     Chars.               (line   6)
* characters used in symbols:            Symbol Intro.        (line   6)
* 'code16' directive:                    Code16.              (line   6)
* 'code16gcc' directive:                 Code16.              (line   6)
* COFF symbol storage class:             SclCoff.             (line   6)
* COMDAT:                                LinkonceCoff.        (line   6)
* COMDAT <1>:                            Unsupported.         (line  49)
* 'comm' directive:                      Comm.                (line   6)
* command line conventions:              Command Line.        (line   6)
* command line options for AAP:          AAP Options.         (line   6)
* comments:                              Comments.            (line   6)
* comments, removed by pre-processor:    Preprocessing.       (line  11)
* 'common' directive:                    Common.              (line   6)
* common sections:                       LinkonceCoff.        (line   6)
* common sections <1>:                   Unsupported.         (line  49)
* common variable storage:               bss.                 (line   6)
* comparison expressions:                Infix Ops.           (line  56)
* conditional assembly:                  If.                  (line   6)
* 'const' directive (Mach-O only):       ConstMachO.          (line   6)
* constant, single character:            Chars.               (line   6)
* constants:                             Constants.           (line   6)
* constants, bignum:                     Bignums.             (line   6)
* constants, character:                  Characters.          (line   6)
* constants, converted by pre-processor: Preprocessing.       (line  14)
* constants, floating point:             Flonums.             (line   6)
* constants, integer:                    Integers.            (line   6)
* constants, number:                     Numbers.             (line   6)
* constants, string:                     Strings.             (line   6)
* 'constructor' directive (Mach-O only): ConstructorMachO.    (line   6)
* 'const_data' directive (Mach-O only):  ConstDataMachO.      (line   6)
* crash of assembler:                    Bug Criteria.        (line   9)
* 'cstring' directive (Mach-O only):     CstringMachO.        (line   6)
* current address:                       Dot.                 (line   6)
* current address, advancing:            Org.                 (line   6)
* 'data' directive (COFF only):          DataCoff.            (line   6)
* 'data' directive (ELF only):           DataElf.             (line   6)
* 'data' directive (Mach-O only):        DataMachO.           (line   6)
* debug for register windows:            CfiWindowSave.       (line   6)
* debuggers, and symbol order:           Symbols.             (line  10)
* decimal integers:                      Integers.            (line  12)
* 'def' directive (COFF only):           DefCoff.             (line   6)
* deprecated directives:                 Deprecated.          (line   6)
* 'desc' directive (Mach-O only):        DescMachO.           (line   6)
* 'destructor' directive (Mach-O only):  ConstructorMachO.    (line   6)
* directives and instructions:           Statements.          (line  20)
* directives, machine independent:       Pseudo Ops.          (line   6)
* dollar local symbols:                  Symbol Names.        (line 110)
* dot (symbol):                          Dot.                 (line   6)
* 'double' directive:                    Double.              (line   6)
* doublequote ('\"'):                    Strings.             (line  44)
* 'dump' directive (Mach-O only):        DumpMachO.           (line   6)
* 'dyld' directive (Mach-O only):        DyldMachO.           (line   6)
* eight-byte integer:                    Quad.                (line   9)
* 'eject' directive (unsupported):       Unsupported.         (line  20)
* ELF specific assembler directives:     ELF Directives.      (line   6)
* 'else' directive:                      Else.                (line   6)
* 'elseif' directive:                    Elseif.              (line   6)
* empty expressions:                     Empty Exprs.         (line   6)
* 'end' directive:                       End.                 (line   6)
* 'endef' directive (COFF only):         DefCoff.             (line   6)
* 'endfunc' directive (unsupported):     Unsupported.         (line  23)
* 'endif' directive:                     Endif.               (line   6)
* 'endm' directive:                      Endm.                (line   6)
* 'endm' directive <1>:                  Macro.               (line 137)
* 'endr' directive:                      Endr.                (line   6)
* EOF, newline must precede:             Statements.          (line  14)
* 'equ' directive:                       Equ.                 (line   6)
* 'equiv' directive:                     Equiv.               (line   6)
* 'eqv' directive (unsupported):         Unsupported.         (line  26)
* 'err' directive:                       Err.                 (line   6)
* 'error' directive:                     Error.               (line   6)
* error messages:                        Errors.              (line   6)
* error on valid input:                  Bug Criteria.        (line  13)
* escape codes, character:               Strings.             (line  16)
* 'exitm' directive:                     Exitm.               (line   6)
* 'exitm' directive <1>:                 Macro.               (line 140)
* expr (internal section):               As Sections.         (line  19)
* expression arguments:                  Arguments.           (line   6)
* expressions:                           Expressions.         (line   6)
* expressions, comparison:               Infix Ops.           (line  56)
* expressions, empty:                    Empty Exprs.         (line   6)
* expressions, integer:                  Integer Exprs.       (line   6)
* 'extern' directive:                    Extern.              (line   6)
* 'fail' directive (unsupported):        Unsupported.         (line  29)
* fatal signal:                          Bug Criteria.        (line   9)
* 'file' directive:                      File.                (line   6)
* files, including:                      Include.             (line   6)
* files, input:                          Input Files.         (line   6)
* 'fill' directive:                      Fill.                (line   6)
* filling memory:                        Skip.                (line   6)
* filling memory <1>:                    Space.               (line   6)
* 'float' directive:                     Float.               (line   6)
* floating point numbers:                Flonums.             (line   6)
* floating point numbers (double):       Double.              (line   6)
* floating point numbers (single):       Float.               (line   6)
* floating point numbers (single) <1>:   Single.              (line   6)
* flonums:                               Flonums.             (line   6)
* format of error messages:              Errors.              (line  25)
* format of warning messages:            Errors.              (line  13)
* formfeed ('\f'):                       Strings.             (line  19)
* 'func' directive (unsupported):        Unsupported.         (line  32)
* functions, in expressions:             Operators.           (line   6)
* 'fvmlib_init0' directive (Mach-O only): FvmlibInitMachO.    (line   6)
* 'fvmlib_init1' directive (Mach-O only): FvmlibInitMachO.    (line   6)
* 'global' directive:                    Global.              (line   6)
* GNU assembler directives, unsupported: Unsupported.         (line   6)
* 'gnu_attribute' directive (unsupported): Unsupported.       (line  35)
* gold:                                  Object.              (line  15)
* grouping data:                         Sub-Sections.        (line   6)
* hex character code ('\XD...'):         Strings.             (line  37)
* hexadecimal integers:                  Integers.            (line  15)
* 'hidden' directive (ELF only):         HiddenElf.           (line   6)
* 'hword' directive (unsupported):       Unsupported.         (line  38)
* 'ident' directive:                     Ident.               (line   6)
* 'ident' directive (ELF only):          IdentElf.            (line   6)
* 'ident' directive (Mach-O only):       IdentMachO.          (line   6)
* 'ident' directive (unsupported for COFF only): Unsupported. (line  42)
* 'if' directive:                        If.                  (line   6)
* 'ifb' directive:                       If.                  (line  22)
* 'ifc' directive:                       If.                  (line  26)
* 'ifdef' directive:                     If.                  (line  17)
* 'ifeq' directive:                      If.                  (line  37)
* 'ifeqs' directive:                     If.                  (line  40)
* 'ifge' directive:                      If.                  (line  44)
* 'ifgt' directive:                      If.                  (line  48)
* 'ifle' directive:                      If.                  (line  52)
* 'iflt' directive:                      If.                  (line  56)
* 'ifnb' directive:                      If.                  (line  60)
* 'ifnc' directive:                      If.                  (line  64)
* 'ifndef' directive:                    If.                  (line  70)
* 'ifne' directive:                      If.                  (line  76)
* 'ifnes' directive:                     If.                  (line  80)
* 'ifnotdef' directive:                  If.                  (line  70)
* 'incbin' directive:                    Incbin.              (line   6)
* 'include' directive:                   Include.             (line   6)
* 'include' directive search path:       common-options.      (line  21)
* infix operators:                       Infix Ops.           (line   6)
* input:                                 Input Files.         (line   6)
* input file line numbers:               Input Files.         (line  41)
* instruction bundle:                    BundleAlign.         (line   6)
* instructions and directives:           Statements.          (line  20)
* 'int' directive:                       Int.                 (line   6)
* integer expressions:                   Integer Exprs.       (line   6)
* integer, 16-byte:                      Octa.                (line   6)
* integer, 8-byte:                       Quad.                (line   9)
* integers:                              Integers.            (line   6)
* integers, 16-bit (unsupported):        Unsupported.         (line  38)
* integers, 32-bit:                      Int.                 (line   6)
* integers, binary:                      Integers.            (line   6)
* integers, decimal:                     Integers.            (line  12)
* integers, hexadecimal:                 Integers.            (line  15)
* integers, octal:                       Integers.            (line   9)
* integers, one byte:                    Byte.                (line   6)
* internal assembler sections:           As Sections.         (line   6)
* 'internal' directive (ELF only):       InternalElf.         (line   6)
* internal options:                      internal-options.    (line   6)
* invalid input:                         Bug Criteria.        (line  16)
* 'ios_version_min' directive (Mach-O only): IosVersionMinMachO.
                                                              (line   6)
* 'irp' directive:                       Irp.                 (line   6)
* 'irpc' directive:                      Irpc.                (line   6)
* label (':'):                           Statements.          (line  31)
* labels:                                Labels.              (line   6)
* 'lazy_reference' directive:            LazyReference.       (line   6)
* 'lazy_reference' directive (Mach-O only): LazyReferenceMachO.
                                                              (line   6)
* 'lazy_symbol_pointer' directive (Mach-O only): LazySymbolPointerMachO.
                                                              (line   6)
* 'lcomm' directive:                     Lcomm.               (line   6)
* ld:                                    Object.              (line  15)
* length of symbols:                     Symbol Intro.        (line  14)
* 'lflags' (unsupported):                Unsupported.         (line  46)
* 'lflags' directive (unsupported):      Unsupported.         (line  46)
* line comment character:                Comments.            (line  19)
* line comment character, AAP:           AAP Assembler Syntax.
                                                              (line   9)
* 'line' directive (deprecated):         Line.                (line   6)
* line numbers, in input files:          Input Files.         (line  41)
* line numbers, in warnings/errors:      Errors.              (line  17)
* line separator character:              Statements.          (line   6)
* line separator, AAP:                   AAP Assembler Syntax.
                                                              (line  18)
* lines starting with '#':               Comments.            (line  33)
* 'linet' directive (deprecated):        Deprecated.          (line  12)
* linker:                                Object.              (line  15)
* linker, and assembler:                 Secs Background.     (line  10)
* 'linker_option' directive (Mach-O only): LinkerOptionMachO. (line   6)
* 'linkonce' directive:                  LinkonceCoff.        (line   6)
* 'linkonce' directive (unsupported):    Unsupported.         (line  49)
* 'list' directive (unsupported):        Unsupported.         (line  53)
* listing control, turning off:          Unsupported.         (line  68)
* listing control, turning on:           Unsupported.         (line  53)
* listing control: new page (unsupported): Unsupported.       (line  20)
* listing control: paper size (unsupported): Unsupported.     (line  77)
* listing control: subtitle (unsupported): Unsupported.       (line  84)
* listing control: title line (unsupported): Unsupported.     (line  96)
* 'literal16' directive (Mach-O only):   LiteralMachO.        (line   6)
* 'literal4' directive (Mach-O only):    LiteralMachO.        (line   6)
* 'literal8' directive (Mach-O only):    LiteralMachO.        (line   6)
* lld:                                   Object.              (line  15)
* LLVM options for assembly:             common-options.      (line  40)
* 'ln' directive (unsupported):          Unsupported.         (line  56)
* 'load' directive (Mach-O only):        DumpMachO.           (line   6)
* 'loc' directive:                       Loc.                 (line   6)
* local common symbols:                  Lcomm.               (line   6)
* 'local' directive (ELF only):          LocalElf.            (line   6)
* local labels:                          Symbol Names.        (line  40)
* local symbol names:                    Symbol Names.        (line  27)
* 'LOCAL' within macros (unsupported):   Unsupported.         (line  62)
* location counter:                      Dot.                 (line   6)
* location counter, advancing:           Org.                 (line   6)
* 'loc_mark_labels' directive (unsupported): Unsupported.     (line  59)
* logical line number:                   Line.                (line   6)
* logical line numbers:                  Comments.            (line  33)
* 'long' directive:                      Long.                (line   6)
* 'lsym' directive (Mach-O only):        LsymMachO.           (line   6)
* Mach-O Objective C assembler directives: ObjC.              (line   6)
* machine dependencies:                  Machine Dependencies.
                                                              (line   6)
* machine independent directives:        Pseudo Ops.          (line   6)
* machine instructions (not covered):    Manual.              (line  15)
* machine-independent syntax:            Syntax.              (line   6)
* 'macosx_version_min' directive (Mach-O only): MacosxVersionMinMachO.
                                                              (line   6)
* 'macro' directive:                     Macro.               (line  28)
* macros:                                Macro.               (line   6)
* macros, count executed:                Macro.               (line 142)
* macros, 'LOCAL' (unsupported):         Unsupported.         (line  62)
* 'macros_off' directive:                Macro.               (line 150)
* 'macros_on' directive:                 Macro.               (line 150)
* manual, structure and purpose:         Manual.              (line   6)
* mclinker:                              Object.              (line  15)
* messages from assembler:               Errors.              (line   6)
* minus, permitted arguments:            Infix Ops.           (line  50)
* 'mod_init_func' directive (Mach-O only): ModInitFuncMachO.  (line   6)
* 'mod_term_func' directive (Mach-O only): ModInitFuncMachO.  (line   6)
* named section (ELF only):              SectionElf.          (line   6)
* named sections:                        Ld Sections.         (line   8)
* names, symbol:                         Symbol Names.        (line   6)
* new page, in listings (unsupported):   Unsupported.         (line  20)
* newline ('\n'):                        Strings.             (line  22)
* newline, required at file end:         Statements.          (line  14)
* 'noaltmacro' directive (unsupported):  Unsupported.         (line  65)
* 'nolist' directive (unsupported):      Unsupported.         (line  68)
* 'non_lazy_symbol_pointer' directive (Mach-O only): LazySymbolPointerMachO.
                                                              (line   6)
* 'no_dead_strip' directive:             NoDeadStrip.         (line   6)
* 'no_dead_strip' directive (Mach-O only): NoDeadStripMachO.  (line   6)
* null-terminated strings:               Asciz.               (line   6)
* number constants:                      Numbers.             (line   6)
* number of macros executed:             Macro.               (line 142)
* numbered subsections:                  Sub-Sections.        (line   6)
* numbers, 16-bit (unsupported):         Unsupported.         (line  38)
* numeric values:                        Expressions.         (line   6)
* 'objc_category' directive (Mach-O Objective C Only): ObjcCategory.
                                                              (line   6)
* 'objc_cat_cls_meth' directive (Mach-O Objective C Only): ObjcCatClsMeth.
                                                              (line   6)
* 'objc_cat_inst_meth' directive (Mach-O Objective C Only): ObjcCatInstMeth.
                                                              (line   6)
* 'objc_class' directive (Mach-O Objective C Only): ObjcClass.
                                                              (line   6)
* 'objc_class_names' directive (Mach-O Objective C Only): ObjcClassNames.
                                                              (line   6)
* 'objc_class_vars' directive (Mach-O Objective C Only): ObjcClassVars.
                                                              (line   6)
* 'objc_cls_meth' directive (Mach-O Objective C Only): ObjcClsMeth.
                                                              (line   6)
* 'objc_cls_refs' directive (Mach-O Objective C Only): ObjcClsRefs.
                                                              (line   6)
* 'objc_instance_vars' directive (Mach-O Objective C Only): ObjcInstanceVars.
                                                              (line   6)
* 'objc_inst_meth' directive (Mach-O Objective C Only): ObjcInstMeth.
                                                              (line   6)
* 'objc_message_refs' directive (Mach-O Objective C Only): ObjcMessageRefs.
                                                              (line   6)
* 'objc_meta_class' directive (Mach-O Objective C Only): ObjcMetaClass.
                                                              (line   6)
* 'objc_meth_var_names' directive (Mach-O Objective C Only): ObjcMethVarNames.
                                                              (line   6)
* 'objc_meth_var_types' directive (Mach-O Objective C Only): ObjcMethVarTypes.
                                                              (line   6)
* 'objc_module_info' directive (Mach-O Objective C Only): ObjcModuleInfo.
                                                              (line   6)
* 'objc_protocol' directive (Mach-O Objective C Only): ObjcProtocol.
                                                              (line   6)
* 'objc_selector_strs' directive (Mach-O Objective C Only): ObjcSelectorStrs.
                                                              (line   6)
* 'objc_string_object' directive (Mach-O Objective C Only): ObjcStringObject.
                                                              (line   6)
* 'objc_symbols' directive (Mach-O Objective C Only): ObjcSymbols.
                                                              (line   6)
* object file:                           Object.              (line   6)
* object file format:                    Object Formats.      (line   6)
* obsolescent directives:                Deprecated.          (line   6)
* 'octa' directive:                      Octa.                (line   6)
* octal character code ('\DDD'):         Strings.             (line  31)
* octal integers:                        Integers.            (line   9)
* 'offset' directive (unsupported):      Unsupported.         (line  71)
* operands in expressions:               Arguments.           (line   6)
* operator precedence:                   Infix Ops.           (line  11)
* operators, in expressions:             Operators.           (line   6)
* operators, permitted arguments:        Infix Ops.           (line   6)
* options common to the compiler:        common-options.      (line   6)
* options specific to the assembler:     assembler-options.   (line   6)
* options, all versions of assembler:    Invoking.            (line   6)
* options, command line:                 Command Line.        (line  46)
* options, internal:                     internal-options.    (line   6)
* 'org' directive:                       Org.                 (line   6)
* output file:                           Object.              (line   6)
* 'p2align' directive:                   P2align.             (line   6)
* 'p2alignl' directive:                  P2align.             (line  28)
* 'p2alignw' directive:                  P2align.             (line  28)
* padding the location counter:          Align.               (line   6)
* padding the location counter <1>:      Align32.             (line   6)
* padding the location counter given a power of two: P2align. (line   6)
* padding the location counter given number of bytes: Balign. (line   6)
* page, in listings (unsupported):       Unsupported.         (line  20)
* paper size, for listings (unsupported): Unsupported.        (line  77)
* paths for '.include':                  common-options.      (line  21)
* patterns, writing in memory:           Fill.                (line   6)
* 'picsymbol_stub' directive (Mach-O only): PicsymbolStubMachO.
                                                              (line   6)
* plus, permitted arguments:             Infix Ops.           (line  45)
* 'popsection' directive (ELF only):     PopSectionElf.       (line   6)
* pre-processing:                        Preprocessing.       (line   6)
* pre-processing, turning on and off:    Preprocessing.       (line  25)
* precedence of operators:               Infix Ops.           (line  11)
* precision, floating point:             Flonums.             (line   6)
* prefix operators:                      Prefix Ops.          (line   6)
* 'previous' directive (ELF only):       PreviousElf.         (line   6)
* 'previous' directive (Mach-O only):    PreviousMachO.       (line   6)
* 'print' directive (unsupported):       Unsupported.         (line  74)
* 'private_extern' directive:            PrivateExtern.       (line   6)
* 'private_extern' directive (Mach-O only): PrivateExternMachO.
                                                              (line   6)
* 'protected' directive (ELF only):      ProtectedElf.        (line   6)
* pseudo-ops, machine independent:       Pseudo Ops.          (line   6)
* 'psize' directive (unsupported):       Unsupported.         (line  77)
* 'purgem' directive:                    Purgem.              (line   6)
* purpose of the LLVM integrated assembler: LLVM Assembler.   (line  13)
* 'pushsection' directive (ELF only):    PushSectionElf.      (line   6)
* 'quad' directive:                      Quad.                (line   6)
* 'reference' directive:                 Reference.           (line   6)
* 'reference' directive (Mach-O only):   ReferenceMachO.      (line   6)
* 'reloc' directive (unsupported):       Unsupported.         (line  81)
* relocation:                            Sections.            (line   6)
* relocation example:                    Ld Sections.         (line  38)
* reporting bugs in assembler:           Reporting Bugs.      (line   6)
* 'rept' directive:                      Rept.                (line   6)
* 'rodata' directive (ELF only):         RodataElf.           (line   6)
* 'sbttl' directive (unsupported):       Unsupported.         (line  84)
* 'scl' directive (COFF only):           SclCoff.             (line   6)
* search path for '.include':            common-options.      (line  21)
* 'secidx' directive (COFF only):        SecidxCoff.          (line   6)
* 'secrel32' directive (COFF only):      SecidxCoff.          (line   6)
* 'section' directive (COFF only):       SectionCoff.         (line   6)
* 'section' directive (ELF only):        SectionElf.          (line   6)
* 'section' directive (ELF only) <1>:    SectionElf.          (line  18)
* 'section' directive (Mach-O only):     SectionMachO.        (line   6)
* Section Stack (ELF only):              PopSectionElf.       (line   6)
* Section Stack (ELF only) <1>:          PreviousElf.         (line   6)
* Section Stack (ELF only) <2>:          PushSectionElf.      (line   6)
* Section Stack (ELF only) <3>:          SectionElf.          (line  13)
* Section Stack (ELF only) <4>:          SubSectionElf.       (line   6)
* section-relative addressing:           Secs Background.     (line  51)
* sections:                              Sections.            (line   6)
* sections in messages, internal:        As Sections.         (line   6)
* sections, named:                       Ld Sections.         (line   8)
* 'seh_endchained' directive (COFF Win64 event handling only): SehChained.
                                                              (line   6)
* 'seh_endproc' directive (COFF Win64 event handling only): SehProc.
                                                              (line   6)
* 'seh_end_prologue' directive (COFF Win64 event handling only): SehEndprologue.
                                                              (line   6)
* 'seh_handler' directive (COFF Win64 event handling only): SehHandler.
                                                              (line   6)
* 'seh_handlerdata' directive (COFF Win64 event handling only): SehHandlerdata.
                                                              (line   6)
* 'seh_proc' directive (COFF Win64 event handling only): SehProc.
                                                              (line   6)
* 'seh_pushframe' directive (COFF Win64 event handling only): SehPushframe.
                                                              (line   6)
* 'seh_pushreg' directive (COFF Win64 event handling only): SehPushreg.
                                                              (line   6)
* 'seh_savereg' directive (COFF Win64 event handling only): SehSavereg.
                                                              (line   6)
* 'seh_savexmn' directive (COFF Win64 event handling only): SehSavexmn.
                                                              (line   6)
* 'seh_setframe' directive (COFF Win64 event handling only): SehSetframe.
                                                              (line   6)
* 'seh_stackalloc' directive (COFF Win64 event handling only): SehStackalloc.
                                                              (line   6)
* 'seh_startchained' directive (COFF Win64 event handling only): SehChained.
                                                              (line   6)
* 'set' directive:                       Set.                 (line   6)
* 'short' directive:                     Short.               (line   6)
* single character constant:             Chars.               (line   6)
* 'single' directive:                    Single.              (line   6)
* sixteen bit integers (unsupported):    Unsupported.         (line  38)
* sixteen byte integer:                  Octa.                (line   6)
* 'size' directive (ELF only):           SizeElf.             (line   6)
* 'skip' directive:                      Skip.                (line   6)
* 'sleb128' directive:                   Sleb128.             (line   6)
* source program:                        Input Files.         (line   6)
* 'space' directive:                     Space.               (line   6)
* 'stabd' directive (Unsupported):       Stabs.               (line  39)
* 'stabn' directive (Unsupported):       Stabs.               (line  39)
* 'stabs' directive:                     Stabs.               (line   6)
* standard assembler sections:           Secs Background.     (line  26)
* statement separator character:         Statements.          (line   6)
* statement separator, AAP:              AAP Assembler Syntax.
                                                              (line  18)
* statements, structure of:              Statements.          (line   6)
* 'static_const' directive (Mach-O only): StaticConstMachO.   (line   6)
* 'static_data' directive (Mach-O only): StaticDataMachO.     (line   6)
* stopping the assembly:                 Abort.               (line   6)
* string constants:                      Strings.             (line   6)
* 'string' directive:                    String.              (line   6)
* string literals:                       Ascii.               (line   6)
* string, copying to object file:        String.              (line   6)
* 'string16' directive (unsupported):    Unsupported.         (line  90)
* string16, copying to object file (unsupported): Unsupported.
                                                              (line  90)
* 'string32' directive (unsupported):    Unsupported.         (line  90)
* string32, copying to object file (unsupported): Unsupported.
                                                              (line  90)
* 'string64' directive (unsupported):    Unsupported.         (line  90)
* string64, copying to object file (unsupported): Unsupported.
                                                              (line  90)
* 'string8' directive (unsupported):     Unsupported.         (line  90)
* string8, copying to object file (unsupported): Unsupported. (line  90)
* 'struct' directive (unsupported):      Unsupported.         (line  93)
* subexpressions:                        Arguments.           (line  25)
* 'subsection' directive (ELF only):     SubSectionElf.       (line   6)
* subtitles for listings (unsupported):  Unsupported.         (line  84)
* subtraction, permitted arguments:      Infix Ops.           (line  50)
* supporting files, including:           Include.             (line   6)
* symbol attributes:                     Symbol Attributes.   (line   6)
* symbol names:                          Symbol Names.        (line   6)
* symbol names, local:                   Symbol Names.        (line  27)
* symbol names, temporary:               Symbol Names.        (line  40)
* symbol table control, assembly:        internal-options.    (line  76)
* symbol type:                           Symbol Type.         (line   6)
* symbol type (ELF only):                TypeElf.             (line   6)
* symbol value:                          Symbol Value.        (line   6)
* symbol value, setting:                 Set.                 (line   6)
* symbol values, assigning:              Setting Symbols.     (line   6)
* symbol versioning (ELF only):          SymverElf.           (line   6)
* symbol, common:                        Comm.                (line   6)
* symbol, making visible to linker:      Global.              (line   6)
* symbolic debuggers, information for:   Stabs.               (line   6)
* symbols:                               Symbols.             (line   6)
* symbols, assigning values to:          Equ.                 (line   6)
* symbols, local common:                 Lcomm.               (line   6)
* 'symbol_resolver' directive:           SymbolResolver.      (line   6)
* 'symbol_resolver' directive (Mach-O only): SymbolResolverMachO.
                                                              (line   6)
* 'symbol_stub' directive (Mach-O only): SymbolStubMachO.     (line   6)
* 'symver' directive (ELF only):         SymverElf.           (line   6)
* syntax, machine-independent:           Syntax.              (line   6)
* tab ('\t'):                            Strings.             (line  28)
* 'tbss' directive (ELF only):           TbssElf.             (line   6)
* 'tbss' directive (Mach-O only):        TbssMachO.           (line   6)
* 'tdata' directive (ELF only):          TdataElf.            (line   6)
* 'tdata' directive (Mach-O only):       TdataMachO.          (line   6)
* temporary symbol names:                Symbol Names.        (line  40)
* 'text' directive (COFF only):          TextCoff.            (line   6)
* 'text' directive (ELF only):           TextElf.             (line   6)
* 'text' directive (Mach-O only):        TextMachO.           (line   6)
* 'thread_init_func' directive (Mach-O only): ThreadInitFuncMachO.
                                                              (line   6)
* 'title' directive (unsupported):       Unsupported.         (line  96)
* 'tlv' directive (Mach-O only):         TlvMachO.            (line   6)
* turning pre-processing on and off:     Preprocessing.       (line  25)
* 'type' directive (COFF only):          TypeCoff.            (line   6)
* 'type' directive (ELF only):           TypeElf.             (line   6)
* type of a symbol:                      Symbol Type.         (line   6)
* 'uleb128' directive:                   Uleb128.             (line   6)
* undefined section:                     Ld Sections.         (line  34)
* unsupported GNU assembler directives:  Unsupported.         (line   6)
* 'value' directive:                     Value.               (line   6)
* value of a symbol:                     Symbol Value.        (line   6)
* 'version' directive (ELF only):        VersionElf.          (line   6)
* versions of symbols (ELF only):        SymverElf.           (line   6)
* visibility (ELF only):                 HiddenElf.           (line   6)
* visibility (ELF only) <1>:             InternalElf.         (line   6)
* visibility (ELF only) <2>:             ProtectedElf.        (line   6)
* 'vtable_entry' directive (unsupported): Unsupported.        (line  99)
* 'vtable_inherit' directive (unsupported): Unsupported.      (line 102)
* warning control, assembly:             internal-options.    (line  67)
* 'warning' directive:                   Warning.             (line   6)
* warning messages:                      Errors.              (line   6)
* 'weak' directive:                      WeakCoff.            (line   6)
* 'weak' directive (COFF only):          WeakCoff.            (line   6)
* 'weak' directive (ELF only):           WeakElf.             (line   6)
* 'weakref' directive (ELF only):        WeakrefElf.          (line   6)
* 'weak_definition' directive:           WeakDefinition.      (line   6)
* 'weak_definition' directive <1>:       WeakDefinitionMachO. (line   6)
* 'weak_def_can_be_hidden' directive:    WeakDefCanBeHidden.  (line   6)
* 'weak_def_can_be_hidden' directive (Mach-O only): WeakDefCanBeHiddenMachO.
                                                              (line   6)
* 'weak_reference' directive:            WeakReference.       (line   6)
* 'weak_reference' directive (Mach-O only): WeakReferenceMachO.
                                                              (line   6)
* whitespace:                            Whitespace.          (line   6)
* whitespace, removed by pre-processor:  Preprocessing.       (line   7)
* 'word' directive (unsupported):        Unsupported.         (line 105)
* writing patterns in memory:            Fill.                (line   6)
* 'zero' directive:                      Zero.                (line   6)
* zero-terminated strings:               Asciz.               (line   6)
* 'zerofill' directive (Mach-O only) (Mach-O only): ZerofillMachO.
                                                              (line   6)



Tag Table:
Node: Top761
Node: Overview1776
Node: Manual2266
Node: LLVM Assembler3262
Node: Object Formats4637
Node: Command Line5130
Ref: cc1as5660
Node: Input Files7709
Node: Object10309
Node: Errors11393
Node: Invoking12776
Node: common-options14457
Node: assembler-options16932
Node: internal-options17457
Node: Syntax21053
Node: Preprocessing21681
Node: Whitespace22997
Node: Comments23405
Node: Symbol Intro25478
Node: Statements26216
Node: Constants28042
Node: Characters28687
Node: Strings29201
Node: Chars31451
Node: Numbers32349
Node: Integers32926
Node: Bignums33594
Node: Flonums33962
Node: Sections35477
Node: Secs Background35867
Node: Ld Sections40175
Node: As Sections42584
Node: Sub-Sections43581
Node: bss46590
Node: Symbols47487
Node: Labels48177
Node: Setting Symbols48618
Node: Symbol Names49146
Node: Dot54084
Node: Symbol Attributes54568
Node: Symbol Value55163
Node: Symbol Type56232
Node: Expressions56610
Node: Empty Exprs57392
Node: Integer Exprs57776
Node: Arguments58183
Node: Operators59326
Node: Prefix Ops59673
Node: Infix Ops60036
Node: Pseudo Ops62442
Node: Common Directives64405
Node: 2byte68168
Node: 4byte68484
Node: 8byte68815
Node: Abort69191
Node: Align69703
Node: Align3271750
Node: Ascii72645
Node: Asciz72976
Node: Balign73244
Node: BundleAlign75162
Node: BundleLock76496
Node: Byte78226
Node: CFIDirectives78502
Node: CfiSections79695
Node: CfiStartproc80225
Node: CfiEndproc80743
Node: CfiPersonality81054
Node: CfiLsda81821
Node: CfiDefCfa82374
Node: CfiDefCfaRegister82670
Node: CfiDefCfaOffset83016
Node: CfiAdjustCfaOffset83425
Node: CfiOffset83739
Node: CfiRelOffset84001
Node: CfiRegister84471
Node: CfiRestore84736
Node: CfiUndefined85093
Node: CfiSameValue85347
Node: CfiRememberState85632
Node: CfiSignalFrame86077
Node: CfiWindowSave86299
Node: CfiEscape86685
Node: Code1687051
Node: Comm87609
Node: Common88937
Node: Double89261
Node: Else89649
Node: Elseif89998
Node: End90340
Node: Endif90603
Node: Endm90909
Node: Endr91084
Node: Equ91305
Node: Equiv91571
Node: Err92150
Node: Error92511
Node: Exitm92979
Node: Extern93171
Node: File93480
Node: Fill94150
Node: Float95163
Node: Global95555
Node: Ident96129
Node: If96353
Node: Incbin99594
Node: Include100167
Node: Int100741
Node: Irp101140
Node: Irpc102037
Node: LazyReference102984
Node: Lcomm103473
Node: Line104139
Node: Loc104538
Node: Long105937
Node: Macro106136
Node: NoDeadStrip112126
Node: Octa112561
Node: Org112923
Node: P2align114279
Node: PrivateExtern116234
Node: Purgem116723
Node: Quad116968
Node: Reference117444
Node: Rept117914
Node: Set118353
Node: Short118866
Node: Single119236
Node: Skip119629
Node: Sleb128119976
Node: Space120321
Node: Stabs120669
Node: String122476
Node: SymbolResolver123092
Node: Uleb128123599
Node: Value123956
Node: Warning124474
Node: WeakDefCanBeHidden124735
Node: WeakDefinition125263
Node: WeakReference125774
Node: Zero126270
Node: ELF Directives126712
Node: BssElf128127
Node: DataElf128484
Node: HiddenElf128863
Node: IdentElf129470
Node: InternalElf129808
Node: LocalElf130492
Node: PopSectionElf131106
Node: PreviousElf131651
Node: ProtectedElf133106
Node: PushSectionElf133795
Node: RodataElf134588
Node: SectionElf134996
Node: SizeElf140003
Node: SubSectionElf140382
Node: SymverElf140998
Node: TbssElf143406
Node: TdataElf143865
Node: TextElf144324
Node: TypeElf144707
Node: VersionElf146734
Node: WeakElf147029
Node: WeakrefElf147323
Node: COFF Directives148299
Node: BssCoff149019
Node: DataCoff149379
Node: DefCoff149759
Node: LinkonceCoff150046
Node: SclCoff151423
Node: SecidxCoff151802
Node: SectionCoff152836
Node: TextCoff154143
Node: TypeCoff154530
Node: Win64Coff154916
Node: SehProc156042
Node: SehEndprologue156290
Node: SehHandler156713
Node: SehHandlerdata157321
Node: SehPushframe157740
Node: SehPushreg158143
Node: SehSavereg158542
Node: SehSavexmn158977
Node: SehSetframe159401
Node: SehStackalloc159854
Node: SehChained160280
Node: WeakCoff160521
Node: Mach-O Directives161302
Node: BssMachO164028
Node: ConstMachO164235
Node: ConstDataMachO164471
Node: ConstructorMachO164730
Node: CstringMachO165086
Node: DataMachO165333
Node: DescMachO165564
Node: DumpMachO165812
Node: DyldMachO166093
Node: FvmlibInitMachO166327
Node: IdentMachO166686
Node: IosVersionMinMachO166870
Node: LazySymbolPointerMachO167223
Node: LazyReferenceMachO167583
Node: LinkerOptionMachO167899
Node: LiteralMachO168165
Node: LsymMachO168579
Node: MacosxVersionMinMachO168913
Node: ModInitFuncMachO169270
Node: NoDeadStripMachO169654
Node: ObjC169938
Node: ObjcCatClsMeth171042
Node: ObjcCatInstMeth171286
Node: ObjcCategory171554
Node: ObjcClass171802
Node: ObjcClassNames172040
Node: ObjcClassVars172297
Node: ObjcClsMeth172553
Node: ObjcClsRefs172800
Node: ObjcInstMeth173046
Node: ObjcInstanceVars173300
Node: ObjcMessageRefs173572
Node: ObjcMetaClass173842
Node: ObjcMethVarNames174106
Node: ObjcMethVarTypes174383
Node: ObjcModuleInfo174661
Node: ObjcProtocol174926
Node: ObjcSelectorStrs175182
Node: ObjcStringObject175455
Node: ObjcSymbols175727
Node: PicsymbolStubMachO175956
Node: PreviousMachO176283
Node: PrivateExternMachO176628
Node: ReferenceMachO176898
Node: SectionMachO177182
Node: StaticConstMachO177639
Node: StaticDataMachO177909
Node: SymbolResolverMachO178183
Node: SymbolStubMachO178448
Node: TbssMachO178770
Node: TdataMachO179054
Node: TextMachO179294
Node: ThreadInitFuncMachO179664
Node: TlvMachO179934
Node: WeakDefCanBeHiddenMachO180192
Node: WeakDefinitionMachO180588
Node: WeakReferenceMachO180872
Node: ZerofillMachO181177
Node: Deprecated181578
Node: Unsupported181901
Node: Machine Dependencies184357
Node: AAP-dependent185239
Node: AAP Options185909
Node: AAP Directives186152
Node: AAP Assembler Syntax186426
Node: Reporting Bugs187163
Node: Bug Criteria187973
Node: Bug Reporting188865
Node: Acknowledgments195613
Ref: Acknowledgments-Footnote-1201681
Node: GNU Free Documentation License201707
Node: AS Index226868

End Tag Table
